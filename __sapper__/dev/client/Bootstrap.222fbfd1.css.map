{
  "version": 3,
  "file": "Bootstrap.222fbfd1.css",
  "sources": [
    "../../../../../../src/routes/guide/validators/promise/basic/Bootstrap.svelte"
  ],
  "sourcesContent": [
    "<style>\n.preview {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 4px;\n    border: 1px solid rgba(0,0,0,.2);\n    margin: 8px 0;\n    width: 300px;\n    height: 300px;\n}\n</style>\n\n<BootstrapLayout onLoaded={onLoaded}>\n    <form id=\"demoForm\" method=\"POST\">\n        <div class=\"form-group row\">\n            <label class=\"col-sm-3 col-form-label\">Avatar</label>\n            <div class=\"col-sm-5\">\n                <input type=\"file\" class=\"form-control\" name=\"avatar\" />\n                <div id=\"avatarPreview\" class=\"preview\"></div>\n            </div>\n        </div>\n    </form>\n</BootstrapLayout>\n\n<script>\nimport { onDestroy } from 'svelte';\n\nimport formValidation from 'formvalidation/dist/es6/core/Core';\nimport DemoFrame from 'formvalidation/dist/es6/plugins/DemoFrame';\nimport Icon from 'formvalidation/dist/es6/plugins/Icon';\nimport Trigger from 'formvalidation/dist/es6/plugins/Trigger';\nimport Bootstrap from 'formvalidation/dist/es6/plugins/Bootstrap';\n\nimport sampleCode from './bootstrap.programmatic';\nimport BootstrapLayout from '../../../../../components/demo/BootstrapLayout.svelte';\n\nlet fv;\n\nconst onLoaded = () => {\n    fv = formValidation(document.getElementById('demoForm'), {\n        fields: {\n            avatar: {\n                validators: {\n                    notEmpty: {\n                        message: 'The avatar is required'\n                    },\n                    promise: {\n                        promise: function (input) {\n                            return new Promise((resolve, reject) => {\n                                const files = input.element.files\n                                if (!files.length || typeof FileReader === 'undefined') {\n                                    resolve({\n                                        valid: true\n                                    });\n                                }\n\n                                const img = new Image();\n                                img.addEventListener('load', function() {\n                                    const w = this.width;\n                                    const h = this.height;\n\n                                    resolve({\n                                        valid: (w <= 300 && h <= 300),\n                                        message: 'The avatar width and height must be less than 300 px',\n                                        meta: {\n                                            source: img.src,    // We will use it later to show the preview\n                                            width: w,\n                                            height: h,\n                                        },\n                                    });\n                                });\n                                img.addEventListener('error', function() {\n                                    reject({\n                                        valid: false,\n                                        message: 'Please choose an image',\n                                    });\n                                });\n\n                                const reader = new FileReader();\n                                reader.readAsDataURL(files[0]);\n                                reader.addEventListener('loadend', function(e) {\n                                    img.src = e.target.result;\n                                });\n                            });\n                        }\n                    },\n                }\n            },\n        },\n        plugins: {\n            trigger: new Trigger(),\n            bootstrap: new Bootstrap(),\n            icon: new Icon({\n                valid: 'fa fa-check',\n                invalid: 'fa fa-times',\n                validating: 'fa fa-refresh'\n            }),\n            demoFrame: new DemoFrame({\n                sender: '/guide/validators/promise/basic/bootstrap',\n                sampleCode: sampleCode,\n            }),\n        },\n    }).on('core.validator.validated', (e) => {\n        if (e.field === 'avatar' && e.validator === 'promise') {\n            const preview = document.getElementById('avatarPreview');\n            if (e.result.valid && e.result.meta && e.result.meta.source) {\n                // Preview the avatar\n                const img = document.createElement('img');\n                img.setAttribute('src', e.result.meta.source);\n                img.setAttribute('style', 'max-width: 100%; height: auto;');\n\n                preview.innerHTML = '';\n                preview.appendChild(img);\n            } else if (!e.result.valid) {\n                preview.innerHTML = 'Preview';\n            }\n        }\n    });\n};\n\nonDestroy(() => {\n    fv && fv.destroy();\n});\n</script>\n"
  ],
  "names": [],
  "mappings": "AACA,QAAQ,eAAC,CAAC,AACN,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAChC,MAAM,CAAE,GAAG,CAAC,CAAC,CACb,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,AACjB,CAAC"
}
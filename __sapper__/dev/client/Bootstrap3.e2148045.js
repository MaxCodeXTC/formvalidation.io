import { a as SvelteComponentDev, b as init, c as safe_not_equal, t as mount_component, N as onDestroy, h as element, i as text, g as space, k as claim_element, l as children, j as claim_text, m as detach, n as add_location, A as attr, F as set_style, o as insert, p as append } from './chunk.989912da.js';
import { b as formValidation } from './chunk.b786f426.js';
import { c as Trigger } from './chunk.fb19edaf.js';
import { b as Icon } from './chunk.79c24606.js';
import './chunk.04c942d0.js';
import { a as DemoFrame } from './chunk.b05da373.js';
import { a as SubmitButton } from './chunk.a3297732.js';
import { a as ResourceLoader } from './chunk.17752e4f.js';
import './chunk.d6ef6b92.js';
import { a as Bootstrap3Layout, b as Bootstrap3 } from './chunk.d41a5e4c.js';

var sampleCode = `<!doctype html>
<html>
<head>
    <link-tag rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link-tag rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.min.css">
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <button type="submit" class="btn btn-default" id="loginButton">Login</button>

    <form id="loginForm" method="POST" class="form-horizontal" style="display: none;">
        <div class="form-group">
            <label class="col-xs-3 control-label">Username</label>
            <div class="col-xs-9">
                <input type="text" class="form-control" name="username" />
            </div>
        </div>

        <div class="form-group">
            <label class="col-xs-3 control-label">Password</label>
            <div class="col-xs-9">
                <input type="text" class="form-control" name="password" />
            </div>
        </div>

        <div class="form-group">
            <div class="col-xs-9 col-xs-offset-3">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </div>
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script-tag>
<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/js/bootstrap.min.js"></script-tag>
<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/4.4.0/bootbox.min.js"></script-tag>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag> 
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/plugins/Bootstrap3.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    const loginForm = document.getElementById('loginForm');
    const fv = FormValidation.formValidation(
        loginForm,
        {
            fields: {
                username: {
                    validators: {
                        notEmpty: {
                            message: 'The username is required'
                        }
                    }
                },
                password: {
                    validators: {
                        notEmpty: {
                            message: 'The password is required'
                        }
                    }
                },
            },
            plugins: {
                trigger: new FormValidation.plugins.Trigger(),
                bootstra3p: new FormValidation.plugins.Bootstrap3(),
                submitButton: new FormValidation.plugins.SubmitButton(),
                icon: new FormValidation.plugins.Icon({
                    valid: 'fa fa-check',
                    invalid: 'fa fa-times',
                    validating: 'fa fa-refresh',
                }),
            },
        }
    );

    document.getElementById('loginButton').addEventListener('click', function() {
        bootbox
            .dialog({
                title: 'Login',
                message: loginForm,
                size: 'small',
                show: false // We will show it manually later
            })
            .on('shown.bs.modal', function() {
                // Show the login form
                loginForm.style.display = 'block';
                
                // Reset form
                fv.resetForm(true);
            })
            .on('hide.bs.modal', function() {
                // Bootbox will remove the modal (including the body which contains the login form)
                // after hiding the modal
                // Therefor, we need to backup the form

                loginForm.style.display = 'none';
                document.body.appendChild(loginForm);
            })
            .modal('show');
    });
});
</script-tag>
</body>
</html>
`;

/* src/routes/guide/examples/integrating-with-bootbox/Bootstrap3.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/integrating-with-bootbox/Bootstrap3.svelte";

// (9:4) <ResourceLoader urls={[         'https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js',         'https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/js/bootstrap.min.js',         'https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/4.4.0/bootbox.min.js',     ]} onLoaded={onLoaded}>
function create_default_slot_1(ctx) {
	var div6, button0, t0, t1, form, div1, label0, t2, t3, div0, input0, t4, div3, label1, t5, t6, div2, input1, t7, div5, div4, button1, t8;

	return {
		c: function create() {
			div6 = element("div");
			button0 = element("button");
			t0 = text("Login");
			t1 = space();
			form = element("form");
			div1 = element("div");
			label0 = element("label");
			t2 = text("Username");
			t3 = space();
			div0 = element("div");
			input0 = element("input");
			t4 = space();
			div3 = element("div");
			label1 = element("label");
			t5 = text("Password");
			t6 = space();
			div2 = element("div");
			input1 = element("input");
			t7 = space();
			div5 = element("div");
			div4 = element("div");
			button1 = element("button");
			t8 = text("Login");
			this.h();
		},

		l: function claim(nodes) {
			div6 = claim_element(nodes, "DIV", { style: true }, false);
			var div6_nodes = children(div6);

			button0 = claim_element(div6_nodes, "BUTTON", { type: true, class: true, id: true }, false);
			var button0_nodes = children(button0);

			t0 = claim_text(button0_nodes, "Login");
			button0_nodes.forEach(detach);
			t1 = claim_text(div6_nodes, "\n\n            ");

			form = claim_element(div6_nodes, "FORM", { id: true, method: true, class: true, style: true }, false);
			var form_nodes = children(form);

			div1 = claim_element(form_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			label0 = claim_element(div1_nodes, "LABEL", { class: true }, false);
			var label0_nodes = children(label0);

			t2 = claim_text(label0_nodes, "Username");
			label0_nodes.forEach(detach);
			t3 = claim_text(div1_nodes, "\n                    ");

			div0 = claim_element(div1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			input0 = claim_element(div0_nodes, "INPUT", { type: true, class: true, name: true }, false);
			var input0_nodes = children(input0);

			input0_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t4 = claim_text(form_nodes, "\n            \n                ");

			div3 = claim_element(form_nodes, "DIV", { class: true }, false);
			var div3_nodes = children(div3);

			label1 = claim_element(div3_nodes, "LABEL", { class: true }, false);
			var label1_nodes = children(label1);

			t5 = claim_text(label1_nodes, "Password");
			label1_nodes.forEach(detach);
			t6 = claim_text(div3_nodes, "\n                    ");

			div2 = claim_element(div3_nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			input1 = claim_element(div2_nodes, "INPUT", { type: true, class: true, name: true }, false);
			var input1_nodes = children(input1);

			input1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			t7 = claim_text(form_nodes, "\n            \n                ");

			div5 = claim_element(form_nodes, "DIV", { class: true }, false);
			var div5_nodes = children(div5);

			div4 = claim_element(div5_nodes, "DIV", { class: true }, false);
			var div4_nodes = children(div4);

			button1 = claim_element(div4_nodes, "BUTTON", { type: true, class: true }, false);
			var button1_nodes = children(button1);

			t8 = claim_text(button1_nodes, "Login");
			button1_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			div5_nodes.forEach(detach);
			form_nodes.forEach(detach);
			div6_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			button0.type = "submit";
			button0.className = "btn btn-default";
			button0.id = "loginButton";
			add_location(button0, file, 14, 12, 459);
			label0.className = "col-xs-3 control-label";
			add_location(label0, file, 18, 20, 694);
			attr(input0, "type", "text");
			input0.className = "form-control";
			input0.name = "username";
			add_location(input0, file, 20, 24, 816);
			div0.className = "col-xs-9";
			add_location(div0, file, 19, 20, 769);
			div1.className = "form-group";
			add_location(div1, file, 17, 16, 649);
			label1.className = "col-xs-3 control-label";
			add_location(label1, file, 25, 20, 999);
			attr(input1, "type", "text");
			input1.className = "form-control";
			input1.name = "password";
			add_location(input1, file, 27, 24, 1121);
			div2.className = "col-xs-9";
			add_location(div2, file, 26, 20, 1074);
			div3.className = "form-group";
			add_location(div3, file, 24, 16, 954);
			button1.type = "submit";
			button1.className = "btn btn-primary";
			add_location(button1, file, 33, 24, 1367);
			div4.className = "col-xs-9 col-xs-offset-3";
			add_location(div4, file, 32, 20, 1304);
			div5.className = "form-group";
			add_location(div5, file, 31, 16, 1259);
			form.id = "loginForm";
			form.method = "POST";
			form.className = "form-horizontal";
			set_style(form, "display", "none");
			add_location(form, file, 16, 12, 550);
			set_style(div6, "height", "500px");
			add_location(div6, file, 13, 8, 418);
		},

		m: function mount(target, anchor) {
			insert(target, div6, anchor);
			append(div6, button0);
			append(button0, t0);
			append(div6, t1);
			append(div6, form);
			append(form, div1);
			append(div1, label0);
			append(label0, t2);
			append(div1, t3);
			append(div1, div0);
			append(div0, input0);
			append(form, t4);
			append(form, div3);
			append(div3, label1);
			append(label1, t5);
			append(div3, t6);
			append(div3, div2);
			append(div2, input1);
			append(form, t7);
			append(form, div5);
			append(div5, div4);
			append(div4, button1);
			append(button1, t8);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div6);
			}
		}
	};
}

// (8:0) <Bootstrap3Layout>
function create_default_slot(ctx) {
	var current;

	var resourceloader = new ResourceLoader({
		props: {
		urls: [
        'https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js',
        'https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/js/bootstrap.min.js',
        'https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/4.4.0/bootbox.min.js',
    ],
		onLoaded: ctx.onLoaded,
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			resourceloader.$$.fragment.c();
		},

		l: function claim(nodes) {
			resourceloader.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(resourceloader, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var resourceloader_changes = {};
			if (changed.onLoaded) resourceloader_changes.onLoaded = ctx.onLoaded;
			if (changed.$$scope) resourceloader_changes.$$scope = { changed, ctx };
			resourceloader.$set(resourceloader_changes);
		},

		i: function intro(local) {
			if (current) return;
			resourceloader.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			resourceloader.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			resourceloader.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var current;

	var bootstrap3layout = new Bootstrap3Layout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			bootstrap3layout.$$.fragment.c();
		},

		l: function claim(nodes) {
			bootstrap3layout.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(bootstrap3layout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var bootstrap3layout_changes = {};
			if (changed.$$scope) bootstrap3layout_changes.$$scope = { changed, ctx };
			bootstrap3layout.$set(bootstrap3layout_changes);
		},

		i: function intro(local) {
			if (current) return;
			bootstrap3layout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			bootstrap3layout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			bootstrap3layout.$destroy(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	

let fv;

const onLoaded = () => {
    const loginForm = document.getElementById('loginForm');
    $$invalidate('fv', fv = formValidation(loginForm, {
        fields: {
            username: {
                validators: {
                    notEmpty: {
                        message: 'The username is required'
                    }
                }
            },
            password: {
                validators: {
                    notEmpty: {
                        message: 'The password is required'
                    }
                }
            }
        },
        plugins: {
            trigger: new Trigger(),
            bootstrap3: new Bootstrap3(),
            submitButton: new SubmitButton(),
            icon: new Icon({
                valid: 'fa fa-check',
                invalid: 'fa fa-times',
                validating: 'fa fa-refresh',
            }),
            demoFrame: new DemoFrame({
                sender: '/guide/examples/integrating-with-bootbox/bootstrap3',
                sampleCode: sampleCode,
            }),
        },
    }));

    document.getElementById('loginButton').addEventListener('click', () => {
        bootbox
            .dialog({
                title: 'Login',
                message: loginForm,
                size: 'small',
                show: false // We will show it manually later
            })
            .on('shown.bs.modal', () => {
                // Show the login form
                loginForm.style.display = 'block';
                
                // Reset form
                fv.resetForm(true);
            })
            .on('hide.bs.modal', () => {
                // Bootbox will remove the modal (including the body which contains the login form)
                // after hiding the modal
                // Therefor, we need to backup the form

                loginForm.style.display = 'none';
                document.body.appendChild(loginForm);
            })
            .modal('show');
    });
};

onDestroy(() => {
    fv && fv.destroy();
});

	return { onLoaded };
}

class Bootstrap3_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export default Bootstrap3_1;

{
  "version": 3,
  "file": "Tachyons.75547cb0.css",
  "sources": [
    "../../../../../../src/routes/guide/examples/multiple-steps-wizard/Tachyons.svelte"
  ],
  "sourcesContent": [
    "<style>\n.js-step {\n    display: none;\n}\n.js-step-active {\n    display: block;\n}\n</style>\n\n<TachyonsLayout>\n    <form id=\"demoForm\" method=\"POST\" style=\"height: 400px;\">\n        <div class=\"js-step js-step-active\" data-step=\"1\">\n            <div class=\"cf mb2\">\n                <div class=\"fl w-100\">\n                    <div class=\"fl w-25 pa2\">Quantity</div>\n                    <div class=\"fl w-40\">\n                        <input type=\"text\" class=\"input-reset ba b--black-20 pa2 mb2 db w-100\" name=\"quantity\" />\n                    </div>\n                </div>\n            </div>\n        \n            <div class=\"cf mb2\">\n                <div class=\"fl w-100\">\n                    <div class=\"fl w-25 pa2\">Size</div>\n                    <div class=\"fl w-50\">\n                        <div class=\"mb2\">\n                            <label><input type=\"checkbox\" name=\"size[]\" value=\"s\" /> S</label>\n                        </div>\n                        <div class=\"mb2\">\n                            <label><input type=\"checkbox\" name=\"size[]\" value=\"m\" /> M</label>\n                        </div>\n                        <div class=\"mb2\">\n                            <label><input type=\"checkbox\" name=\"size[]\" value=\"l\" /> L</label>\n                        </div>\n                        <div class=\"mb2\">\n                            <label><input type=\"checkbox\" name=\"size[]\" value=\"xl\" /> XL</label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        \n            <div class=\"cf mb2\">\n                <div class=\"fl w-100\">\n                    <div class=\"fl w-25 pa2\">Color</div>\n                    <div class=\"fl w-50\">\n                        <div class=\"mb2\">\n                            <label><input type=\"checkbox\" name=\"color[]\" value=\"white\" /> White</label>\n                        </div>\n                        <div class=\"mb2\">\n                            <label><input type=\"checkbox\" name=\"color[]\" value=\"black\" /> Black</label>\n                        </div>\n                        <div class=\"mb2\">\n                            <label><input type=\"checkbox\" name=\"color[]\" value=\"red\" /> Red</label>\n                        </div>\n                        <div class=\"mb2\">\n                            <label><input type=\"checkbox\" name=\"color[]\" value=\"yellow\" /> Yellow</label>\n                        </div>\n                        <div class=\"mb2\">\n                            <label><input type=\"checkbox\" name=\"color[]\" value=\"green\" /> Green</label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"js-step\" data-step=\"2\">\n            <div class=\"cf mb2\">\n                <div class=\"fl w-100\">\n                    <div class=\"fl w-25 pa2\">Full name</div>\n                    <div class=\"fl w-30 mr2\">\n                        <input type=\"text\" class=\"input-reset ba b--black-20 pa2 mb2 db w-100\" name=\"firstName\" placeholder=\"First name\" />\n                    </div>\n                    <div class=\"fl w-30\">\n                        <input type=\"text\" class=\"input-reset ba b--black-20 pa2 mb2 db w-100\" name=\"lastName\" placeholder=\"Last name\" />\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"cf mb2\">\n                <div class=\"fl w-100\">\n                    <div class=\"fl w-25 pa2\">Phone number</div>\n                    <div class=\"fl w-40\">\n                        <input type=\"text\" class=\"input-reset ba b--black-20 pa2 mb2 db w-100\" name=\"cellPhone\" />\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"cf mb2\">\n                <div class=\"fl w-100\">\n                    <div class=\"fl w-25 pa2\">Street</div>\n                    <div class=\"fl w-75\">\n                        <input type=\"text\" class=\"input-reset ba b--black-20 pa2 mb2 db w-100\" name=\"street\" />\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"cf mb2\">\n                <div class=\"fl w-100\">\n                    <div class=\"fl w-25 pa2\">City</div>\n                    <div class=\"fl w-40\">\n                        <input type=\"text\" class=\"input-reset ba b--black-20 pa2 mb2 db w-100\" name=\"city\" />\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"cf mb2\">\n                <div class=\"fl w-100\">\n                    <div class=\"fl w-25 pa2\">Zipcode</div>\n                    <div class=\"fl w-40\">\n                        <input type=\"text\" class=\"input-reset ba b--black-20 pa2 mb2 db w-100\" name=\"zipCode\" />\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"cf mb2\">\n            <div class=\"fl w-100\">\n                <div class=\"fl w-25 pa2\"></div>\n                <div class=\"fl w-50\">\n                    <button type=\"button\" class=\"ba b--black-20 bg-blue white ph3 pv2 br2\" id=\"prevButton\">Prev</button>\n                    <button type=\"button\" class=\"ba b--black-20 bg-blue white ph3 pv2 br2\" id=\"nextButton\">Next</button>\n                </div>\n            </div>\n        </div>\n    </form>\n</TachyonsLayout>\n\n<script>\nimport { onMount } from 'svelte';\n\nimport formValidation from 'formvalidation/dist/es6/core/Core';\nimport DemoFrame from 'formvalidation/dist/es6/plugins/DemoFrame';\nimport Icon from 'formvalidation/dist/es6/plugins/Icon';\nimport Trigger from 'formvalidation/dist/es6/plugins/Trigger';\nimport Tachyons from 'formvalidation/dist/es6/plugins/Tachyons';\nimport phone from 'formvalidation/dist/es6/validators/phone';\nimport zipCode from 'formvalidation/dist/es6/validators/zipCode';\nimport classSet from 'formvalidation/dist/es6/utils/classSet';\n\nimport sampleCode from './tachyons.programmatic';\nimport TachyonsLayout from '../../../../components/demo/TachyonsLayout.svelte';\n\nonMount(() => {\n    const form = document.getElementById('demoForm');\n        \n    const step1 = form.querySelector('.js-step[data-step=\"1\"]');\n    const step2 = form.querySelector('.js-step[data-step=\"2\"]');\n    \n    const prevButton = form.querySelector('[id=\"prevButton\"]');\n    const nextButton = form.querySelector('[id=\"nextButton\"]');\n\n    let currentStep = 1;\n\n    const fv1 = formValidation(step1, {\n        fields: {\n            quantity: {\n                validators: {\n                    notEmpty: {\n                        message: 'The quantity is required'\n                    },\n                    greaterThan: {\n                        min: 1,\n                        message: 'The quantity must be greater than 0'\n                    },\n                    integer: {\n                        message: 'The quantity must be a number'\n                    }\n                }\n            },\n            'size[]': {\n                validators: {\n                    notEmpty: {\n                        message: 'The size is required'\n                    }\n                }\n            },\n            'color[]': {\n                validators: {\n                    notEmpty: {\n                        message: 'The color is required'\n                    }\n                }\n            },\n        },\n        plugins: {\n            trigger: new Trigger(),\n            tachyons: new Tachyons(),\n            icon: new Icon({\n                valid: 'fa fa-check',\n                invalid: 'fa fa-times',\n                validating: 'fa fa-refresh',\n            }),\n            demoFrame: new DemoFrame({\n                sender: '/guide/examples/multiple-steps-wizard/tachyons',\n                sampleCode: sampleCode,\n            }),\n        },\n    }).on('core.form.valid', () => {\n        // Jump to the next step when all fields in the current step are valid\n        currentStep++;\n\n        nextButton.innerHTML = 'Purchase';\n\n        // Hide the first step\n        classSet(step1, {\n            'js-step-active': false,\n        });\n        // Show the next step\n        classSet(step2, {\n            'js-step-active': true,\n        });\n    });\n\n    const fv2 = formValidation(step2, {\n        fields: {\n            firstName: {\n                validators: {\n                    notEmpty: {\n                        message: 'The first name is required'\n                    },\n                    regexp: {\n                        regexp: /^[a-zA-Z\\s]+$/,\n                        message: 'The first name can only consist of alphabetical and space'\n                    }\n                }\n            },\n            lastName: {\n                validators: {\n                    notEmpty: {\n                        message: 'The last name is required'\n                    },\n                    regexp: {\n                        regexp: /^[a-zA-Z\\s]+$/,\n                        message: 'The last name can only consist of alphabetical and space'\n                    }\n                }\n            },\n            cellPhone: {\n                validators: {\n                    notEmpty: {\n                        message: 'The phone number is required'\n                    },\n                    phone: {\n                        country: 'US',\n                        message: 'The value is not valid US phone number'\n                    }\n                }\n            },\n            street: {\n                validators: {\n                    notEmpty: {\n                        message: 'The street is required'\n                    }\n                }\n            },\n            city: {\n                validators: {\n                    notEmpty: {\n                        message: 'The city is required'\n                    }\n                }\n            },\n            zipCode: {\n                validators: {\n                    notEmpty: {\n                        message: 'The zip code is required'\n                    },\n                    zipCode: {\n                        country: 'US',\n                        message: 'The value is not valid US zip code'\n                    },\n                }\n            }\n        },\n        plugins: {\n            trigger: new Trigger(),\n            tachyons: new Tachyons(),\n            icon: new Icon({\n                valid: 'fa fa-check',\n                invalid: 'fa fa-times',\n                validating: 'fa fa-refresh',\n            }),\n            demoFrame: new DemoFrame({\n                sender: '/guide/examples/multiple-steps-wizard/tachyons',\n                sampleCode: sampleCode,\n            }),\n        },\n    })\n    .registerValidator('phone', phone)\n    .registerValidator('zipCode', zipCode)\n    .on('core.form.valid', () => {\n        // You can submit the form\n        // form.submit()\n        // or send the form data to server via an Ajax request\n\n        // To make the demo simple, I just update the label of button\n        nextButton.innerHTML = 'Done';\n    });\n\n    nextButton.addEventListener('click', () => {\n        // When click the Next button, we will validate the current step\n        switch (currentStep) {\n            case 1:\n                fv1.validate();\n                break;\n            \n            case 2:\n                fv2.validate();\n                break;\n            \n            default:\n                break;\n        }\n    });\n\n    prevButton.addEventListener('click', () => {\n        switch (currentStep) {\n            case 2:\n                currentStep--;\n                nextButton.innerHTML = 'Next';\n                // Hide the second step\n                classSet(step2, {\n                    'js-step-active': false,\n                });\n                // Show the first step\n                classSet(step1, {\n                    'js-step-active': true,\n                });\n                break;\n\n            case 1:\n            default:\n                break;\n        }\n    });\n\n    return () => {\n        fv1.destroy();\n        fv2.destroy();\n    };\n});\n</script>\n"
  ],
  "names": [],
  "mappings": "AACA,QAAQ,cAAC,CAAC,AACN,OAAO,CAAE,IAAI,AACjB,CAAC,AACD,eAAe,cAAC,CAAC,AACb,OAAO,CAAE,KAAK,AAClB,CAAC"
}
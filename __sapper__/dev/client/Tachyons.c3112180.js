import { a as SvelteComponentDev, b as init, c as safe_not_equal, t as mount_component, B as onMount, h as element, g as space, i as text, k as claim_element, l as children, m as detach, j as claim_text, n as add_location, A as attr, o as insert, p as append } from './chunk.989912da.js';
import { b as formValidation } from './chunk.b786f426.js';
import { c as Trigger } from './chunk.fb19edaf.js';
import { b as Icon } from './chunk.79c24606.js';
import { a as Tachyons } from './chunk.2bbbb746.js';
import { a as DemoFrame } from './chunk.b05da373.js';
import { a as SubmitButton } from './chunk.a3297732.js';
import { a as TachyonsLayout } from './chunk.35ee9e13.js';

var sampleCode = `<!doctype html>
<html>
<head>
    <link-tag rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link-tag rel="stylesheet" href="https://unpkg.com/tachyons@4.10.0/css/tachyons.min.css">
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="demoForm" method="POST">
        <div class="cf mb2">
            <div class="fl w-100">
                <div class="fl w-25 pa2"><div id="captchaOperation"></div></div>
                <div class="fl w-40">
                    <input type="text" name="captcha" class="input-reset ba b--black-20 pa2 mb2 db w-100" />
                </div>
            </div>
        </div>

        <div class="cf mb2">
            <div class="fl w-100">
                <div class="fl w-25 pa2"></div>
                <div class="fl w-50">
                    <button type="submit" class="ba b--black-20 bg-blue white ph3 pv2 br2">Submit</button>
                </div>
            </div>
        </div>
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>    
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/plugins/Tachyons.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    // Generate a simple captcha
    const randomNumber = function(min, max) {
        return Math.floor(Math.random() * (max - min + 1) + min);
    };
    const captchaEle = document.getElementById('captchaOperation');

    const generateCaptcha = function() {
        const random = [randomNumber(1, 100), randomNumber(1, 200)];
        captchaEle.innerHTML = [random[0], '+', random[1], '='].join(' ');
    };

    generateCaptcha();

    FormValidation
        .formValidation(
            document.getElementById('demoForm'),
            {
                fields: {
                    captcha: {
                        validators: {
                            callback: {
                                message: 'Wrong answer',
                                callback: function(input) {
                                    const items = captchaEle.innerHTML.split(' ');
                                    const sum = parseInt(items[0]) + parseInt(items[2]);
                                    return input.value == sum;
                                }
                            }
                        }
                    }
                },
                plugins: {
                    trigger: new FormValidation.plugins.Trigger(),
                    tachyons: new FormValidation.plugins.Tachyons(),
                    submitButton: new FormValidation.plugins.SubmitButton(),
                    icon: new FormValidation.plugins.Icon({
                        valid: 'fa fa-check',
                        invalid: 'fa fa-times',
                        validating: 'fa fa-refresh',
                    }),
                },
            }
        )
        .on('core.form.invalid', function() {
            generateCaptcha();
        });
});
</script-tag>
</body>
</html>
`;

/* src/routes/guide/examples/regenerating-captcha-when-the-form-is-invalid/Tachyons.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/regenerating-captcha-when-the-form-is-invalid/Tachyons.svelte";

// (1:0) <TachyonsLayout>
function create_default_slot(ctx) {
	var form, div4, div3, div1, div0, t0, div2, input, t1, div8, div7, div5, t2, div6, button, t3;

	return {
		c: function create() {
			form = element("form");
			div4 = element("div");
			div3 = element("div");
			div1 = element("div");
			div0 = element("div");
			t0 = space();
			div2 = element("div");
			input = element("input");
			t1 = space();
			div8 = element("div");
			div7 = element("div");
			div5 = element("div");
			t2 = space();
			div6 = element("div");
			button = element("button");
			t3 = text("Submit");
			this.h();
		},

		l: function claim(nodes) {
			form = claim_element(nodes, "FORM", { id: true, method: true }, false);
			var form_nodes = children(form);

			div4 = claim_element(form_nodes, "DIV", { class: true }, false);
			var div4_nodes = children(div4);

			div3 = claim_element(div4_nodes, "DIV", { class: true }, false);
			var div3_nodes = children(div3);

			div1 = claim_element(div3_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			div0 = claim_element(div1_nodes, "DIV", { id: true }, false);
			var div0_nodes = children(div0);

			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t0 = claim_text(div3_nodes, "\n                ");

			div2 = claim_element(div3_nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			input = claim_element(div2_nodes, "INPUT", { type: true, name: true, class: true }, false);
			var input_nodes = children(input);

			input_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			t1 = claim_text(form_nodes, "\n\n        ");

			div8 = claim_element(form_nodes, "DIV", { class: true }, false);
			var div8_nodes = children(div8);

			div7 = claim_element(div8_nodes, "DIV", { class: true }, false);
			var div7_nodes = children(div7);

			div5 = claim_element(div7_nodes, "DIV", { class: true }, false);
			var div5_nodes = children(div5);

			div5_nodes.forEach(detach);
			t2 = claim_text(div7_nodes, "\n                ");

			div6 = claim_element(div7_nodes, "DIV", { class: true }, false);
			var div6_nodes = children(div6);

			button = claim_element(div6_nodes, "BUTTON", { type: true, class: true }, false);
			var button_nodes = children(button);

			t3 = claim_text(button_nodes, "Submit");
			button_nodes.forEach(detach);
			div6_nodes.forEach(detach);
			div7_nodes.forEach(detach);
			div8_nodes.forEach(detach);
			form_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			div0.id = "captchaOperation";
			add_location(div0, file, 4, 41, 161);
			div1.className = "fl w-25 pa2";
			add_location(div1, file, 4, 16, 136);
			attr(input, "type", "text");
			input.name = "captcha";
			input.className = "input-reset ba b--black-20 pa2 mb2 db w-100";
			add_location(input, file, 6, 20, 259);
			div2.className = "fl w-40";
			add_location(div2, file, 5, 16, 217);
			div3.className = "fl w-100";
			add_location(div3, file, 3, 12, 97);
			div4.className = "cf mb2";
			add_location(div4, file, 2, 8, 64);
			div5.className = "fl w-25 pa2";
			add_location(div5, file, 13, 16, 486);
			button.type = "submit";
			button.className = "ba b--black-20 bg-blue white ph3 pv2 br2";
			add_location(button, file, 15, 20, 576);
			div6.className = "fl w-50";
			add_location(div6, file, 14, 16, 534);
			div7.className = "fl w-100";
			add_location(div7, file, 12, 12, 447);
			div8.className = "cf mb2";
			add_location(div8, file, 11, 8, 414);
			form.id = "demoForm";
			form.method = "POST";
			add_location(form, file, 1, 4, 21);
		},

		m: function mount(target, anchor) {
			insert(target, form, anchor);
			append(form, div4);
			append(div4, div3);
			append(div3, div1);
			append(div1, div0);
			append(div3, t0);
			append(div3, div2);
			append(div2, input);
			append(form, t1);
			append(form, div8);
			append(div8, div7);
			append(div7, div5);
			append(div7, t2);
			append(div7, div6);
			append(div6, button);
			append(button, t3);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(form);
			}
		}
	};
}

function create_fragment(ctx) {
	var current;

	var tachyonslayout = new TachyonsLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			tachyonslayout.$$.fragment.c();
		},

		l: function claim(nodes) {
			tachyonslayout.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(tachyonslayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var tachyonslayout_changes = {};
			if (changed.$$scope) tachyonslayout_changes.$$scope = { changed, ctx };
			tachyonslayout.$set(tachyonslayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			tachyonslayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			tachyonslayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			tachyonslayout.$destroy(detaching);
		}
	};
}

function instance($$self) {
	

onMount(() => {
    // Generate a simple captcha
    const randomNumber = (min, max) => {
        return Math.floor(Math.random() * (max - min + 1) + min);
    };
    const captchaEle = document.getElementById('captchaOperation');
    const generateCaptcha = () => {
        const random = [randomNumber(1, 100), randomNumber(1, 200)];
        captchaEle.innerHTML = [random[0], '+', random[1], '='].join(' ');
    };

    generateCaptcha();

    const fv = formValidation(document.getElementById('demoForm'), {
        fields: {
            captcha: {
                validators: {
                    callback: {
                        message: 'Wrong answer',
                        callback: (input) => {
                            const items = captchaEle.innerHTML.split(' ');
                            const sum = parseInt(items[0]) + parseInt(items[2]);
                            return input.value == sum;
                        }
                    }
                }
            }
        },
        plugins: {
            trigger: new Trigger(),
            tachyons: new Tachyons(),
            submitButton: new SubmitButton(),
            icon: new Icon({
                valid: 'fa fa-check',
                invalid: 'fa fa-times',
                validating: 'fa fa-refresh',
            }),
            demoFrame: new DemoFrame({
                sender: '/guide/examples/regenerating-captcha-when-the-form-is-invalid/tachyons',
                sampleCode: sampleCode,
            }),
        },
    }).on('core.form.invalid', () => {
        generateCaptcha();
    });

    return () => {
        fv.destroy();
    };
});

	return {};
}

class Tachyons_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export default Tachyons_1;

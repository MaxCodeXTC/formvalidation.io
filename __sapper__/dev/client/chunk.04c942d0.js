import { a as SvelteComponentDev, b as init, c as safe_not_equal, d as create_slot, h as element, g as space, k as claim_element, l as children, m as detach, j as claim_text, n as add_location, o as insert, p as append, G as toggle_class, e as get_slot_changes, f as get_slot_context } from './chunk.989912da.js';

/* src/components/Loader.svelte generated by Svelte v3.4.2 */

const file = "src/components/Loader.svelte";

// (46:4) {#if !isDone}
function create_if_block(ctx) {
	var div2, div0, t, div1;

	return {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			t = space();
			div1 = element("div");
			this.h();
		},

		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			div0 = claim_element(div2_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			div0_nodes.forEach(detach);
			t = claim_text(div2_nodes, "\n        ");

			div1 = claim_element(div2_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			div0.className = "bounce1 svelte-1w3225j";
			add_location(div0, file, 47, 8, 856);
			div1.className = "bounce2 svelte-1w3225j";
			add_location(div1, file, 48, 8, 892);
			div2.className = "loader svelte-1w3225j";
			add_location(div2, file, 46, 4, 827);
		},

		m: function mount(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div2, t);
			append(div2, div1);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div2);
			}
		}
	};
}

function create_fragment(ctx) {
	var div1, div0, t, current;

	const default_slot_1 = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_1, ctx, null);

	var if_block = (!ctx.isDone) && create_if_block(ctx);

	return {
		c: function create() {
			div1 = element("div");
			div0 = element("div");

			if (default_slot) default_slot.c();
			t = space();
			if (if_block) if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			div0 = claim_element(div1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			if (default_slot) default_slot.l(div0_nodes);
			div0_nodes.forEach(detach);
			t = claim_text(div1_nodes, "\n    ");
			if (if_block) if_block.l(div1_nodes);
			div1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			div0.className = "svelte-1w3225j";
			toggle_class(div0, "loading", !ctx.isDone);
			add_location(div0, file, 44, 4, 756);
			div1.className = "loader-container svelte-1w3225j";
			add_location(div1, file, 43, 0, 721);
		},

		m: function mount(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			append(div1, t);
			if (if_block) if_block.m(div1, null);
			current = true;
		},

		p: function update(changed, ctx) {
			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(get_slot_changes(default_slot_1, ctx, changed, null), get_slot_context(default_slot_1, ctx, null));
			}

			if (changed.isDone) {
				toggle_class(div0, "loading", !ctx.isDone);
			}

			if (!ctx.isDone) {
				if (!if_block) {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},

		i: function intro(local) {
			if (current) return;
			if (default_slot && default_slot.i) default_slot.i(local);
			current = true;
		},

		o: function outro(local) {
			if (default_slot && default_slot.o) default_slot.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div1);
			}

			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { isDone = false } = $$props;

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('isDone' in $$props) $$invalidate('isDone', isDone = $$props.isDone);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	return { isDone, $$slots, $$scope };
}

class Loader extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["isDone"]);
	}

	get isDone() {
		throw new Error("<Loader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isDone(value) {
		throw new Error("<Loader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Loader as a };

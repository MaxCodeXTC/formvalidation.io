import { a as SvelteComponentDev, b as init, c as safe_not_equal, h as element, k as claim_element, l as children, m as detach, n as add_location, o as insert, t as mount_component, i as text, j as claim_text, p as append, q as set_data, g as space, J as add_render_callback, F as set_style, C as listen, K as select_option, I as destroy_each, L as run_all, M as select_value, w as empty, x as group_outros, y as on_outro, z as check_outros, r as noop, D as add_binding_callback } from './chunk.989912da.js';
import { a as SampleCode } from './chunk.47169253.js';
import { a as Loader } from './chunk.04c942d0.js';
import { a as Tabs } from './chunk.42493314.js';
import { a as ReceiveMessage } from './chunk.75c83501.js';

var SupportedFramework = {
    tachyons: {
        name: 'Tachyons',
        version: '4.10.0',
        urls: ['https://unpkg.com/tachyons@4.10.0/css/tachyons.min.css'],
    },
    bootstrap3: {
        name: 'Bootstrap 3',
        version: '3.4.1',
        urls: ['https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.min.css'],
    },
    bootstrap: {
        name: 'Bootstrap 4',
        version: '4.3.1',
        urls: ['https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap.min.css'],
    },
    foundation: {
        name: 'Foundation',
        version: '6.5.3',
        urls: ['https://cdnjs.cloudflare.com/ajax/libs/foundation/6.5.3/css/foundation.min.css'],
    },
    uikit: {
        name: 'UI Kit',
        version: '3.0.3',
        urls: ['https://cdnjs.cloudflare.com/ajax/libs/uikit/3.0.3/css/uikit.min.css'],
    },
    semantic: {
        name: 'Semantic UI',
        version: '2.4.1',
        urls: ['https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css'],
    },
    pure: {
        name: 'PureCSS',
        version: '1.0.0',
        urls: ['https://cdnjs.cloudflare.com/ajax/libs/pure/1.0.0/pure-min.css'],
    },
    bulma: {
        name: 'Bulma',
        version: '0.7.4',
        urls: ['https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.4/css/bulma.min.css'],
    },
    materialize: {
        name: 'Materialize',
        version: '1.0.0',
        urls: ['https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css'],
    },
    milligram: {
        name: 'Milligram',
        version: '1.3.0',
        urls: ['https://cdnjs.cloudflare.com/ajax/libs/milligram/1.3.0/milligram.min.css'],
    },
    mini: {
        name: 'mini.css',
        version: '3.0.1',
        urls: ['https://cdnjs.cloudflare.com/ajax/libs/mini.css/3.0.1/mini-default.min.css'],
    },
    mui: {
        name: 'MUI',
        version: '0.9.41',
        urls: ['https://cdnjs.cloudflare.com/ajax/libs/muicss/0.9.41/css/mui.min.css'],
    },
    shoelace: {
        name: 'Shoelace',
        version: '1.0.0-beta24',
        urls: ['https://cdnjs.cloudflare.com/ajax/libs/shoelace-css/1.0.0-beta24/shoelace.css'],
    },
    spectre: {
        name: 'Spectre',
        version: '0.5.8',
        urls: [
            'https://cdnjs.cloudflare.com/ajax/libs/spectre.css/0.5.8/spectre.min.css',
            // To use with Icon plugin
            'https://cdnjs.cloudflare.com/ajax/libs/spectre.css/0.5.8/spectre-icons.min.css',
        ],
    },
    turret: {
        name: 'turretcss',
        version: '5.1.3',
        urls: ['https://cdnjs.cloudflare.com/ajax/libs/bigfishtv-turret/5.1.3/turretcss.min.css'],
    },
};

/* src/components/Demo.svelte generated by Svelte v3.4.2 */

const file = "src/components/Demo.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.framework = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.framework = list[i];
	return child_ctx;
}

// (12:95) {:else}
function create_else_block(ctx) {
	var t_value = SupportedFramework[ctx.framework.toLowerCase()].name, t;

	return {
		c: function create() {
			t = text(t_value);
		},

		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		p: function update(changed, ctx) {
			if ((changed.frameworks) && t_value !== (t_value = SupportedFramework[ctx.framework.toLowerCase()].name)) {
				set_data(t, t_value);
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (12:54) {#if (framework === 'native')}
function create_if_block_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Native form");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Native form");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (11:28) {#each frameworks as framework}
function create_each_block_1(ctx) {
	var option, option_value_value;

	function select_block_type(ctx) {
		if ((ctx.framework === 'native')) return create_if_block_1;
		return create_else_block;
	}

	var current_block_type = select_block_type(ctx);
	var if_block = current_block_type(ctx);

	return {
		c: function create() {
			option = element("option");
			if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			option = claim_element(nodes, "OPTION", { value: true }, false);
			var option_nodes = children(option);

			if_block.l(option_nodes);
			option_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			option.__value = option_value_value = ctx.framework;
			option.value = option.__value;
			add_location(option, file, 11, 28, 716);
		},

		m: function mount(target, anchor) {
			insert(target, option, anchor);
			if_block.m(option, null);
		},

		p: function update(changed, ctx) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(changed, ctx);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);
				if (if_block) {
					if_block.c();
					if_block.m(option, null);
				}
			}

			if ((changed.frameworks) && option_value_value !== (option_value_value = ctx.framework)) {
				option.__value = option_value_value;
			}

			option.value = option.__value;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(option);
			}

			if_block.d();
		}
	};
}

// (16:28) {#each frameworks as framework}
function create_each_block(ctx) {
	var a, t_value = ctx.framework, t, a_href_value;

	return {
		c: function create() {
			a = element("a");
			t = text(t_value);
			this.h();
		},

		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true }, false);
			var a_nodes = children(a);

			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			a.href = a_href_value = "" + ctx.prefix + "/" + ctx.framework;
			add_location(a, file, 16, 28, 1054);
		},

		m: function mount(target, anchor) {
			insert(target, a, anchor);
			append(a, t);
		},

		p: function update(changed, ctx) {
			if ((changed.frameworks) && t_value !== (t_value = ctx.framework)) {
				set_data(t, t_value);
			}

			if ((changed.prefix || changed.frameworks) && a_href_value !== (a_href_value = "" + ctx.prefix + "/" + ctx.framework)) {
				a.href = a_href_value;
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(a);
			}
		}
	};
}

// (25:24) <ReceiveMessage channel="DEMO_UPDATE_STATUS" sender="{prefix}/{selected}" on:received={updateHeight}>
function create_default_slot_3(ctx) {
	var iframe, iframe_src_value, dispose;

	return {
		c: function create() {
			iframe = element("iframe");
			this.h();
		},

		l: function claim(nodes) {
			iframe = claim_element(nodes, "IFRAME", { class: true, src: true, title: true }, false);
			var iframe_nodes = children(iframe);

			iframe_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			iframe.className = "bn w-100";
			iframe.src = iframe_src_value = "" + ctx.prefix + "/" + ctx.selected;
			iframe.title = "Demo";
			add_location(iframe, file, 25, 28, 1485);
			dispose = listen(iframe, "load", ctx.onDemoLoaded);
		},

		m: function mount(target, anchor) {
			insert(target, iframe, anchor);
			add_binding_callback(() => ctx.iframe_binding(iframe, null));
		},

		p: function update(changed, ctx) {
			if (changed.items) {
				ctx.iframe_binding(null, iframe);
				ctx.iframe_binding(iframe, null);
			}

			if ((changed.prefix || changed.selected) && iframe_src_value !== (iframe_src_value = "" + ctx.prefix + "/" + ctx.selected)) {
				iframe.src = iframe_src_value;
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(iframe);
			}

			ctx.iframe_binding(null, iframe);
			dispose();
		}
	};
}

// (24:20) <Loader isDone={_loaded}>
function create_default_slot_2(ctx) {
	var current;

	var receivemessage = new ReceiveMessage({
		props: {
		channel: "DEMO_UPDATE_STATUS",
		sender: "" + ctx.prefix + "/" + ctx.selected,
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});
	receivemessage.$on("received", ctx.updateHeight);

	return {
		c: function create() {
			receivemessage.$$.fragment.c();
		},

		l: function claim(nodes) {
			receivemessage.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(receivemessage, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var receivemessage_changes = {};
			if (changed.prefix || changed.selected) receivemessage_changes.sender = "" + ctx.prefix + "/" + ctx.selected;
			if (changed.$$scope || changed.prefix || changed.selected || changed._demoFrame) receivemessage_changes.$$scope = { changed, ctx };
			receivemessage.$set(receivemessage_changes);
		},

		i: function intro(local) {
			if (current) return;
			receivemessage.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			receivemessage.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			receivemessage.$destroy(detaching);
		}
	};
}

// (35:16) {#if _code}
function create_if_block(ctx) {
	var current;

	var samplecode = new SampleCode({
		props: { lang: "html", code: ctx._code },
		$$inline: true
	});

	return {
		c: function create() {
			samplecode.$$.fragment.c();
		},

		l: function claim(nodes) {
			samplecode.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(samplecode, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var samplecode_changes = {};
			if (changed._code) samplecode_changes.code = ctx._code;
			samplecode.$set(samplecode_changes);
		},

		i: function intro(local) {
			if (current) return;
			samplecode.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			samplecode.$destroy(detaching);
		}
	};
}

// (34:12) <ReceiveMessage channel="SAMPLE_CODE" sender="{prefix}/{selected}" on:received={onReceiveMessage}>
function create_default_slot_1(ctx) {
	var if_block_anchor, current;

	var if_block = (ctx._code) && create_if_block(ctx);

	return {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},

		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},

		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			if (ctx._code) {
				if (if_block) {
					if_block.p(changed, ctx);
					if_block.i(1);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.i(1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();
				on_outro(() => {
					if_block.d(1);
					if_block = null;
				});

				if_block.o(1);
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			if (if_block) if_block.i();
			current = true;
		},

		o: function outro(local) {
			if (if_block) if_block.o();
			current = false;
		},

		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);

			if (detaching) {
				detach(if_block_anchor);
			}
		}
	};
}

// (2:4) <Tabs titles={["Demo", "Code"]} on:activateTab={onActivateTab}>
function create_default_slot(ctx) {
	var div9, div8, div6, div0, t0, div1, t1, div2, t2, div4, select, t3, div3, t4, div5, t5, t6, div7, t7, div10, current, dispose;

	var each_value_1 = ctx.frameworks;

	var each_blocks_1 = [];

	for (var i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	var each_value = ctx.frameworks;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	var loader = new Loader({
		props: {
		isDone: ctx._loaded,
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var receivemessage = new ReceiveMessage({
		props: {
		channel: "SAMPLE_CODE",
		sender: "" + ctx.prefix + "/" + ctx.selected,
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});
	receivemessage.$on("received", ctx.onReceiveMessage);

	return {
		c: function create() {
			div9 = element("div");
			div8 = element("div");
			div6 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			t1 = space();
			div2 = element("div");
			t2 = space();
			div4 = element("div");
			select = element("select");

			for (var i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t3 = space();
			div3 = element("div");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			div5 = element("div");
			t5 = text("↓");
			t6 = space();
			div7 = element("div");
			loader.$$.fragment.c();
			t7 = space();
			div10 = element("div");
			receivemessage.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			div9 = claim_element(nodes, "DIV", {}, false);
			var div9_nodes = children(div9);

			div8 = claim_element(div9_nodes, "DIV", { class: true }, false);
			var div8_nodes = children(div8);

			div6 = claim_element(div8_nodes, "DIV", { class: true }, false);
			var div6_nodes = children(div6);

			div0 = claim_element(div6_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			div0_nodes.forEach(detach);
			t0 = claim_text(div6_nodes, "\n                    ");

			div1 = claim_element(div6_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			div1_nodes.forEach(detach);
			t1 = claim_text(div6_nodes, "\n                    ");

			div2 = claim_element(div6_nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			div2_nodes.forEach(detach);
			t2 = claim_text(div6_nodes, "\n                    ");

			div4 = claim_element(div6_nodes, "DIV", { class: true }, false);
			var div4_nodes = children(div4);

			select = claim_element(div4_nodes, "SELECT", { class: true, style: true }, false);
			var select_nodes = children(select);

			for (var i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(select_nodes);
			}

			select_nodes.forEach(detach);
			t3 = claim_text(div4_nodes, "\n                        ");

			div3 = claim_element(div4_nodes, "DIV", { class: true }, false);
			var div3_nodes = children(div3);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div3_nodes);
			}

			div3_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			t4 = claim_text(div6_nodes, "\n                    ");

			div5 = claim_element(div6_nodes, "DIV", {}, false);
			var div5_nodes = children(div5);

			t5 = claim_text(div5_nodes, "↓");
			div5_nodes.forEach(detach);
			div6_nodes.forEach(detach);
			t6 = claim_text(div8_nodes, "\n                ");

			div7 = claim_element(div8_nodes, "DIV", { class: true }, false);
			var div7_nodes = children(div7);

			loader.$$.fragment.l(div7_nodes);
			div7_nodes.forEach(detach);
			div8_nodes.forEach(detach);
			div9_nodes.forEach(detach);
			t7 = claim_text(nodes, "\n\n        ");

			div10 = claim_element(nodes, "DIV", { class: true }, false);
			var div10_nodes = children(div10);

			receivemessage.$$.fragment.l(div10_nodes);
			div10_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			div0.className = "br-100 mr1 w1 h1 bg-red";
			add_location(div0, file, 5, 20, 248);
			div1.className = "br-100 mr1 w1 h1 bg-gold";
			add_location(div1, file, 6, 20, 312);
			div2.className = "br-100 mr1 w1 h1 bg-red";
			add_location(div2, file, 7, 20, 377);
			if (ctx.selected === void 0) add_render_callback(() => ctx.select_change_handler.call(select));
			select.className = "input-reset pa1 ba b--black-20 bg-transparent";
			set_style(select, "width", "120px");
			add_location(select, file, 9, 24, 491);
			div3.className = "dn";
			add_location(div3, file, 14, 24, 949);
			div4.className = "ml-auto mr1";
			add_location(div4, file, 8, 20, 441);
			add_location(div5, file, 20, 20, 1215);
			div6.className = "flex ph2 pv1 bb b--black-20 items-center";
			add_location(div6, file, 4, 16, 173);
			div7.className = "pa3";
			add_location(div7, file, 22, 16, 1267);
			div8.className = "br2 ba b--black-20";
			add_location(div8, file, 3, 12, 124);
			add_location(div9, file, 2, 8, 106);
			div10.className = "dn";
			add_location(div10, file, 32, 8, 1736);

			dispose = [
				listen(select, "change", ctx.select_change_handler),
				listen(select, "change", ctx.onChangeFramework)
			];
		},

		m: function mount(target, anchor) {
			insert(target, div9, anchor);
			append(div9, div8);
			append(div8, div6);
			append(div6, div0);
			append(div6, t0);
			append(div6, div1);
			append(div6, t1);
			append(div6, div2);
			append(div6, t2);
			append(div6, div4);
			append(div4, select);

			for (var i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(select, null);
			}

			select_option(select, ctx.selected);

			append(div4, t3);
			append(div4, div3);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div3, null);
			}

			append(div6, t4);
			append(div6, div5);
			append(div5, t5);
			append(div8, t6);
			append(div8, div7);
			mount_component(loader, div7, null);
			insert(target, t7, anchor);
			insert(target, div10, anchor);
			mount_component(receivemessage, div10, null);
			current = true;
		},

		p: function update(changed, ctx) {
			if (changed.frameworks || changed.SupportedFramework) {
				each_value_1 = ctx.frameworks;

				for (var i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(changed, child_ctx);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(select, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}
				each_blocks_1.length = each_value_1.length;
			}

			if (changed.selected) select_option(select, ctx.selected);

			if (changed.prefix || changed.frameworks) {
				each_value = ctx.frameworks;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div3, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}

			var loader_changes = {};
			if (changed._loaded) loader_changes.isDone = ctx._loaded;
			if (changed.$$scope || changed.prefix || changed.selected || changed._demoFrame) loader_changes.$$scope = { changed, ctx };
			loader.$set(loader_changes);

			var receivemessage_changes = {};
			if (changed.prefix || changed.selected) receivemessage_changes.sender = "" + ctx.prefix + "/" + ctx.selected;
			if (changed.$$scope || changed._code) receivemessage_changes.$$scope = { changed, ctx };
			receivemessage.$set(receivemessage_changes);
		},

		i: function intro(local) {
			if (current) return;
			loader.$$.fragment.i(local);

			receivemessage.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			loader.$$.fragment.o(local);
			receivemessage.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div9);
			}

			destroy_each(each_blocks_1, detaching);

			destroy_each(each_blocks, detaching);

			loader.$destroy();

			if (detaching) {
				detach(t7);
				detach(div10);
			}

			receivemessage.$destroy();

			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	var div, current;

	var tabs = new Tabs({
		props: {
		titles: ["Demo", "Code"],
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});
	tabs.$on("activateTab", ctx.onActivateTab);

	return {
		c: function create() {
			div = element("div");
			tabs.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			tabs.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			div.className = "overflow-hidden";
			add_location(div, file, 0, 0, 0);
		},

		m: function mount(target, anchor) {
			insert(target, div, anchor);
			mount_component(tabs, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var tabs_changes = {};
			if (changed.$$scope || changed.prefix || changed.selected || changed._code || changed._loaded || changed._demoFrame || changed.frameworks) tabs_changes.$$scope = { changed, ctx };
			tabs.$set(tabs_changes);
		},

		i: function intro(local) {
			if (current) return;
			tabs.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			tabs.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div);
			}

			tabs.$destroy();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	

let _code = '';
let _loaded = false;
let _demoFrame;
let _selectedTab = 0;

// Props
let { prefix = '', frameworks = ['tachyons'], selected = frameworks.length === 1 ? frameworks[0] : 'tachyons' } = $$props;

const onActivateTab = (e) => {
    $$invalidate('_selectedTab', _selectedTab = e.detail.index);
};

const updateHeight = () => {
    const frameBody = _demoFrame.contentDocument.body;
    const height = frameBody.scrollHeight;
    if (height > 0) {
        _demoFrame.setAttribute('height', `${height}px`);
    }
};

const onReceiveMessage = (e) => {
    $$invalidate('_code', _code = e.detail.data);
};

const onDemoLoaded = () => {
    if (_selectedTab === 0) {
        updateHeight();
    }
    $$invalidate('_loaded', _loaded = true);
};

const onChangeFramework = (e) => {
    $$invalidate('selected', selected = e.target.value);
    $$invalidate('_loaded', _loaded = false);
    $$invalidate('_code', _code = '');
};

	function select_change_handler() {
		selected = select_value(this);
		$$invalidate('selected', selected);
		$$invalidate('frameworks', frameworks);
	}

	function iframe_binding($$node, check) {
		_demoFrame = $$node;
		$$invalidate('_demoFrame', _demoFrame);
	}

	$$self.$set = $$props => {
		if ('prefix' in $$props) $$invalidate('prefix', prefix = $$props.prefix);
		if ('frameworks' in $$props) $$invalidate('frameworks', frameworks = $$props.frameworks);
		if ('selected' in $$props) $$invalidate('selected', selected = $$props.selected);
	};

	return {
		_code,
		_loaded,
		_demoFrame,
		prefix,
		frameworks,
		selected,
		onActivateTab,
		updateHeight,
		onReceiveMessage,
		onDemoLoaded,
		onChangeFramework,
		select_change_handler,
		iframe_binding
	};
}

class Demo extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["prefix", "frameworks", "selected"]);
	}

	get prefix() {
		throw new Error("<Demo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set prefix(value) {
		throw new Error("<Demo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get frameworks() {
		throw new Error("<Demo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set frameworks(value) {
		throw new Error("<Demo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get selected() {
		throw new Error("<Demo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selected(value) {
		throw new Error("<Demo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Demo as a };

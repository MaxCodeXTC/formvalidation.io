import { a as SvelteComponentDev, b as init, c as safe_not_equal, t as mount_component, B as onMount, h as element, k as claim_element, l as children, m as detach, n as add_location, o as insert, d as create_slot, i as text, g as space, j as claim_text, p as append, D as add_binding_callback, x as group_outros, z as check_outros, e as get_slot_changes, f as get_slot_context, I as destroy_each, y as on_outro, w as empty } from './chunk.989912da.js';
import { a as siteData } from './chunk.9eca0151.js';
import { a as Layout } from './chunk.058c0688.js';
import { a as SidebarLinkWithToc } from './chunk.4e6dbbb2.js';

/* src/components/ChangelogLayout.svelte generated by Svelte v3.4.2 */

const file = "src/components/ChangelogLayout.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.ver = list[i][0];
	child_ctx.date = list[i][1];
	return child_ctx;
}

// (7:176) {#if ver === '1.0.0'}
function create_if_block(ctx) {
	var span, t;

	return {
		c: function create() {
			span = element("span");
			t = text("Hooray!");
			this.h();
		},

		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t = claim_text(span_nodes, "Hooray!");
			span_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			span.className = "pl3 b";
			add_location(span, file, 6, 197, 439);
		},

		m: function mount(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(span);
			}
		}
	};
}

// (7:20) <SidebarLinkWithToc url="{ver === siteData.version ? '/updates' : `/updates/v${ver}`}" title="v{ver}" content={() => content}>
function create_default_slot_1(ctx) {
	var t0, t1_value = ctx.ver, t1, t2, small, t3_value = ctx.date, t3, if_block_anchor;

	var if_block = (ctx.ver === '1.0.0') && create_if_block(ctx);

	return {
		c: function create() {
			t0 = text("v");
			t1 = text(t1_value);
			t2 = text(" - ");
			small = element("small");
			t3 = text(t3_value);
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "v");
			t1 = claim_text(nodes, t1_value);
			t2 = claim_text(nodes, " - ");

			small = claim_element(nodes, "SMALL", {}, false);
			var small_nodes = children(small);

			t3 = claim_text(small_nodes, t3_value);
			small_nodes.forEach(detach);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},

		h: function hydrate() {
			add_location(small, file, 6, 155, 397);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
			insert(target, t2, anchor);
			insert(target, small, anchor);
			append(small, t3);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},

		p: function update(changed, ctx) {
			if (ctx.ver === '1.0.0') {
				if (!if_block) {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(t1);
				detach(t2);
				detach(small);
			}

			if (if_block) if_block.d(detaching);

			if (detaching) {
				detach(if_block_anchor);
			}
		}
	};
}

// (6:16) {#each Object.entries(Versions) as [ver, date]}
function create_each_block(ctx) {
	var li, current;

	var sidebarlinkwithtoc = new SidebarLinkWithToc({
		props: {
		url: ctx.ver === siteData.version ? '/updates' : `/updates/v${ctx.ver}`,
		title: "v" + ctx.ver,
		content: ctx.func,
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			li = element("li");
			sidebarlinkwithtoc.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {}, false);
			var li_nodes = children(li);

			sidebarlinkwithtoc.$$.fragment.l(li_nodes);
			li_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			add_location(li, file, 6, 16, 258);
		},

		m: function mount(target, anchor) {
			insert(target, li, anchor);
			mount_component(sidebarlinkwithtoc, li, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var sidebarlinkwithtoc_changes = {};
			if (changed.Versions || changed.siteData) sidebarlinkwithtoc_changes.url = ctx.ver === siteData.version ? '/updates' : `/updates/v${ctx.ver}`;
			if (changed.Versions) sidebarlinkwithtoc_changes.title = "v" + ctx.ver;
			if (changed.$$scope) sidebarlinkwithtoc_changes.$$scope = { changed, ctx };
			sidebarlinkwithtoc.$set(sidebarlinkwithtoc_changes);
		},

		i: function intro(local) {
			if (current) return;
			sidebarlinkwithtoc.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			sidebarlinkwithtoc.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(li);
			}

			sidebarlinkwithtoc.$destroy();
		}
	};
}

// (1:0) <Layout>
function create_default_slot(ctx) {
	var div2, div0, p, t0, t1, ul, t2, div1, current;

	var each_value = Object.entries(ctx.Versions);

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	function outro_block(i, detaching, local) {
		if (each_blocks[i]) {
			if (detaching) {
				on_outro(() => {
					each_blocks[i].d(detaching);
					each_blocks[i] = null;
				});
			}

			each_blocks[i].o(local);
		}
	}

	const default_slot_1 = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_1, ctx, null);

	return {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			p = element("p");
			t0 = text("Versions");
			t1 = space();
			ul = element("ul");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			div1 = element("div");

			if (default_slot) default_slot.c();
			this.h();
		},

		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			div0 = claim_element(div2_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			p = claim_element(div0_nodes, "P", { class: true }, false);
			var p_nodes = children(p);

			t0 = claim_text(p_nodes, "Versions");
			p_nodes.forEach(detach);
			t1 = claim_text(div0_nodes, "\n            ");

			ul = claim_element(div0_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t2 = claim_text(div2_nodes, "\n\n        ");

			div1 = claim_element(div2_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			if (default_slot) default_slot.l(div1_nodes);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			p.className = "mv2 pl3 f3 fw6";
			add_location(p, file, 3, 12, 90);
			ul.className = "list pa0 ma0 f5 lh-copy";
			add_location(ul, file, 4, 12, 141);
			div0.className = "w-25 pv3 br b--black-30";
			add_location(div0, file, 2, 8, 40);

			div1.className = "w-75 pv3 ph4";
			add_location(div1, file, 11, 8, 571);
			div2.className = "flex";
			add_location(div2, file, 1, 4, 13);
		},

		m: function mount(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, p);
			append(p, t0);
			append(div0, t1);
			append(div0, ul);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			append(div2, t2);
			append(div2, div1);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			add_binding_callback(() => ctx.div1_binding(div1, null));
			current = true;
		},

		p: function update(changed, ctx) {
			if (changed.Versions || changed.siteData) {
				each_value = Object.entries(ctx.Versions);

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						each_blocks[i].i(1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].i(1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();
				for (; i < each_blocks.length; i += 1) outro_block(i, 1, 1);
				check_outros();
			}

			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(get_slot_changes(default_slot_1, ctx, changed, null), get_slot_context(default_slot_1, ctx, null));
			}

			if (changed.items) {
				ctx.div1_binding(null, div1);
				ctx.div1_binding(div1, null);
			}
		},

		i: function intro(local) {
			if (current) return;
			for (var i = 0; i < each_value.length; i += 1) each_blocks[i].i();

			if (default_slot && default_slot.i) default_slot.i(local);
			current = true;
		},

		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) outro_block(i, 0);

			if (default_slot && default_slot.o) default_slot.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div2);
			}

			destroy_each(each_blocks, detaching);

			if (default_slot) default_slot.d(detaching);
			ctx.div1_binding(null, div1);
		}
	};
}

function create_fragment(ctx) {
	var current;

	var layout = new Layout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			layout.$$.fragment.c();
		},

		l: function claim(nodes) {
			layout.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(layout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var layout_changes = {};
			if (changed.$$scope || changed.content) layout_changes.$$scope = { changed, ctx };
			layout.$set(layout_changes);
		},

		i: function intro(local) {
			if (current) return;
			layout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			layout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			layout.$destroy(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	

let path = '';
let content;

const Versions = {
    '1.5.0': '10 Jul 2019',
    '1.4.0': '20 Apr 2019',
    '1.3.0': '10 Aug 2018',
    '1.2.0': '15 Jul 2018',
    '1.1.0': '08 Jul 2018',
    '1.0.1': '29 Jun 2018',
    '1.0.0': '10 Jun 2018',
    '0.8.1': '27 Sep 2016',
    '0.8.0': '27 Jun 2016',
    '0.7.1': '01 Feb 2016',
    '0.7.0': '01 Aug 2015',
    '0.6.3': '31 May 2015',
    '0.6.2': '02 Apr 2015',
    '0.6.1': '24 Feb 2015',
    '0.6.0': '06 Jan 2015',
    '0.5.3': '05 Nov 2014',
    '0.5.2': '25 Sep 2014',
    '0.5.1': '22 Aug 2014',
    '0.5.0': '14 Jul 2014',
    '0.4.5': '15 May 2014',
    '0.4.4': '05 May 2014',
    '0.4.3': '26 Apr 2014',
    '0.4.2': '19 Apr 2014',
    '0.4.1': '12 Apr 2014',
    '0.4.0': '03 Apr 2014',
    '0.3.3': '27 Mar 2014',
    '0.3.2': '21 Mar 2014',
    '0.3.1': '17 Mar 2014',
    '0.3.0': '10 Mar 2014',
    '0.2.2': '07 Jan 2014',
    '0.2.1': '08 Nov 2013',
    '0.2.0': '21 Oct 2013',
    '0.1.1': '17 Oct 2013',
    '0.1.0': '14 Oct 2013',
};

onMount(() => {
    $$invalidate('path', path = window.location.pathname);
});

	let { $$slots = {}, $$scope } = $$props;

	function func() {
		return content;
	}

	function div1_binding($$node, check) {
		content = $$node;
		$$invalidate('content', content);
	}

	$$self.$set = $$props => {
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	return {
		content,
		Versions,
		func,
		div1_binding,
		$$slots,
		$$scope
	};
}

class ChangelogLayout extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export { ChangelogLayout as a };

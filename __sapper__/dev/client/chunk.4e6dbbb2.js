import { a as SvelteComponentDev, b as init, c as safe_not_equal, d as create_slot, h as element, k as claim_element, l as children, m as detach, n as add_location, o as insert, e as get_slot_changes, f as get_slot_context, B as onMount, i as text, j as claim_text, p as append, q as set_data, I as destroy_each, w as empty, C as listen, r as noop, H as createEventDispatcher, t as mount_component, g as space, x as group_outros, y as on_outro, z as check_outros } from './chunk.989912da.js';

/* src/components/SidebarLink.svelte generated by Svelte v3.4.2 */

const file = "src/components/SidebarLink.svelte";

function create_fragment(ctx) {
	var a, a_class_value, current;

	const default_slot_1 = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_1, ctx, null);

	return {
		c: function create() {
			a = element("a");

			if (default_slot) default_slot.c();
			this.h();
		},

		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true, title: true }, false);
			var a_nodes = children(a);

			if (default_slot) default_slot.l(a_nodes);
			a_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			a.href = ctx.url;
			a.className = a_class_value = "db link " + ctx.customClasses + " " + (ctx.isActive(ctx.path, ctx.url) ? 'br b--gray bw2 bg-light-gray active' : '') + " svelte-jeryyv";
			a.title = ctx.title;
			add_location(a, file, 6, 0, 99);
		},

		m: function mount(target, anchor) {
			insert(target, a, anchor);

			if (default_slot) {
				default_slot.m(a, null);
			}

			current = true;
		},

		p: function update(changed, ctx) {
			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(get_slot_changes(default_slot_1, ctx, changed, null), get_slot_context(default_slot_1, ctx, null));
			}

			if (!current || changed.url) {
				a.href = ctx.url;
			}

			if ((!current || changed.customClasses || changed.isActive || changed.path || changed.url) && a_class_value !== (a_class_value = "db link " + ctx.customClasses + " " + (ctx.isActive(ctx.path, ctx.url) ? 'br b--gray bw2 bg-light-gray active' : '') + " svelte-jeryyv")) {
				a.className = a_class_value;
			}

			if (!current || changed.title) {
				a.title = ctx.title;
			}
		},

		i: function intro(local) {
			if (current) return;
			if (default_slot && default_slot.i) default_slot.i(local);
			current = true;
		},

		o: function outro(local) {
			if (default_slot && default_slot.o) default_slot.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(a);
			}

			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	// Private
let path = '';

// Props
let { url = '', title = '', customClasses = 'pv1 pl4', isActive = (p, url) => (p === url) } = $$props;

onMount(() => {
    $$invalidate('path', path = window.location.pathname);
});

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('url' in $$props) $$invalidate('url', url = $$props.url);
		if ('title' in $$props) $$invalidate('title', title = $$props.title);
		if ('customClasses' in $$props) $$invalidate('customClasses', customClasses = $$props.customClasses);
		if ('isActive' in $$props) $$invalidate('isActive', isActive = $$props.isActive);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	return {
		path,
		url,
		title,
		customClasses,
		isActive,
		$$slots,
		$$scope
	};
}

class SidebarLink extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["url", "title", "customClasses", "isActive"]);
	}

	get url() {
		throw new Error("<SidebarLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<SidebarLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<SidebarLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<SidebarLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get customClasses() {
		throw new Error("<SidebarLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set customClasses(value) {
		throw new Error("<SidebarLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isActive() {
		throw new Error("<SidebarLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isActive(value) {
		throw new Error("<SidebarLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/TableOfContents.svelte generated by Svelte v3.4.2 */

const file$1 = "src/components/TableOfContents.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.item = list[i];
	return child_ctx;
}

// (1:0) {#if _items.length > 0}
function create_if_block(ctx) {
	var ul;

	var each_value = ctx._items;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c: function create() {
			ul = element("ul");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			this.h();
		},

		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			ul.className = "list pa0 ma0 f5 lh-copy";
			add_location(ul, file$1, 1, 0, 24);
		},

		m: function mount(target, anchor) {
			insert(target, ul, anchor);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},

		p: function update(changed, ctx) {
			if (changed._items || changed._hash || changed._path) {
				each_value = ctx._items;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(ul);
			}

			destroy_each(each_blocks, detaching);
		}
	};
}

// (3:4) {#each _items as item}
function create_each_block(ctx) {
	var li, a, t_value = ctx.item.text, t, a_class_value, a_href_value;

	return {
		c: function create() {
			li = element("li");
			a = element("a");
			t = text(t_value);
			this.h();
		},

		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {}, false);
			var li_nodes = children(li);

			a = claim_element(li_nodes, "A", { class: true, href: true }, false);
			var a_nodes = children(a);

			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach);
			li_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			a.className = a_class_value = "pl5 pr2 pv1 link db " + (`#${ctx.item.target}` === ctx._hash ? 'br b--gray bw2' : '');
			a.href = a_href_value = "" + ctx._path + "#" + ctx.item.target;
			add_location(a, file$1, 3, 8, 96);
			add_location(li, file$1, 3, 4, 92);
		},

		m: function mount(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t);
		},

		p: function update(changed, ctx) {
			if ((changed._items) && t_value !== (t_value = ctx.item.text)) {
				set_data(t, t_value);
			}

			if ((changed._items || changed._hash) && a_class_value !== (a_class_value = "pl5 pr2 pv1 link db " + (`#${ctx.item.target}` === ctx._hash ? 'br b--gray bw2' : ''))) {
				a.className = a_class_value;
			}

			if ((changed._path || changed._items) && a_href_value !== (a_href_value = "" + ctx._path + "#" + ctx.item.target)) {
				a.href = a_href_value;
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(li);
			}
		}
	};
}

function create_fragment$1(ctx) {
	var if_block_anchor, dispose;

	var if_block = (ctx._items.length > 0) && create_if_block(ctx);

	return {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},

		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},

		h: function hydrate() {
			dispose = listen(window, "hashchange", ctx.hashChangeHandler);
		},

		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},

		p: function update(changed, ctx) {
			if (ctx._items.length > 0) {
				if (if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);

			if (detaching) {
				detach(if_block_anchor);
			}

			dispose();
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	// Private
let _path = '';
let _hash = '';
let _items = [];
const dispatch = createEventDispatcher();

// Props
let { selector = 'h2', content } = $$props;

// Jump to another section when the hash changes
const hashChangeHandler = (e) => {
    const parts = e.newURL.split('#');
    const newHash = parts[parts.length - 1];

    // Scroll to the section
    const section = content().querySelector(`[id="${newHash}"]`);
    if (section) {
        section.scrollIntoView();
    }

    $$invalidate('_hash', _hash = `#${newHash}`);
    dispatch('click', {
        hash: `#${newHash}`,
    });
};

onMount(() => {
    const contentNode = content();

    // Query the headings in the content
    const path = window.location.pathname;
    const hash = window.location.hash;
    const headings = [...contentNode.querySelectorAll(selector)];

    const generateAnchors = () => {
        return headings.map((heading) => {
            const text = heading.textContent;
            const anchor = text
                .replace(/\./g, '-')
                .replace(':', '')
                .replace(/\s+|\/|\\/g, '-')
                .replace(/([a-z])([A-Z])/g, '$1-$2') // camelCase --> camel-case
                .toLowerCase();
            heading.setAttribute('id', anchor);
            
            const a = document.createElement('a');
            a.setAttribute('href', `${path}#${anchor}`);
            a.setAttribute('class', 'no-underline ml2');
            a.setAttribute('aria-hidden', 'true');
            a.innerHTML = '#';
            heading.append(a);

            return {
                text: text,
                target: anchor,
            };
        });
    };

    const iframes = [...contentNode.querySelectorAll('iframe')];
    const numFrames = iframes.length;
    let numFrameLoaded = 0;

    if (numFrames === 0) {
        // If there's no iframe, then generate anchors
        $$invalidate('_path', _path = path);
        $$invalidate('_hash', _hash = hash);
        $$invalidate('_items', _items = generateAnchors());
    } else {
        for (const i in iframes) {
            iframes[i].addEventListener('load', () => {
                numFrameLoaded++;
                if (numFrameLoaded === numFrames) {
                    // All iframe are loaded
                    $$invalidate('_path', _path = path);
                    $$invalidate('_hash', _hash = hash);
                    $$invalidate('_items', _items = generateAnchors());

                    // Scroll to the section
                    if (hash !== '') {
                        const section = contentNode.querySelector(`[id="${hash.substring(1)}"]`);            
                        if (section) {
                            section.scrollIntoView();
                        }
                    }
                }
            });
        }
    }
});

	$$self.$set = $$props => {
		if ('selector' in $$props) $$invalidate('selector', selector = $$props.selector);
		if ('content' in $$props) $$invalidate('content', content = $$props.content);
	};

	return {
		_path,
		_hash,
		_items,
		selector,
		content,
		hashChangeHandler
	};
}

class TableOfContents extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, ["selector", "content"]);

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.content === undefined && !('content' in props)) {
			console.warn("<TableOfContents> was created without expected prop 'content'");
		}
	}

	get selector() {
		throw new Error("<TableOfContents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selector(value) {
		throw new Error("<TableOfContents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get content() {
		throw new Error("<TableOfContents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set content(value) {
		throw new Error("<TableOfContents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/SidebarLinkWithToc.svelte generated by Svelte v3.4.2 */

// (1:0) <SidebarLink url={url} title={title} isActive={isActive}>
function create_default_slot(ctx) {
	var current;

	const default_slot_1 = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_1, ctx, null);

	return {
		c: function create() {
			if (default_slot) default_slot.c();
		},

		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},

		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},

		p: function update(changed, ctx) {
			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(get_slot_changes(default_slot_1, ctx, changed, null), get_slot_context(default_slot_1, ctx, null));
			}
		},

		i: function intro(local) {
			if (current) return;
			if (default_slot && default_slot.i) default_slot.i(local);
			current = true;
		},

		o: function outro(local) {
			if (default_slot && default_slot.o) default_slot.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (2:0) {#if enabled}
function create_if_block$1(ctx) {
	var current;

	var tableofcontents = new TableOfContents({
		props: {
		content: ctx.content,
		selector: ctx.selector
	},
		$$inline: true
	});

	return {
		c: function create() {
			tableofcontents.$$.fragment.c();
		},

		l: function claim(nodes) {
			tableofcontents.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(tableofcontents, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var tableofcontents_changes = {};
			if (changed.content) tableofcontents_changes.content = ctx.content;
			if (changed.selector) tableofcontents_changes.selector = ctx.selector;
			tableofcontents.$set(tableofcontents_changes);
		},

		i: function intro(local) {
			if (current) return;
			tableofcontents.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			tableofcontents.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			tableofcontents.$destroy(detaching);
		}
	};
}

function create_fragment$2(ctx) {
	var t, if_block_anchor, current;

	var sidebarlink = new SidebarLink({
		props: {
		url: ctx.url,
		title: ctx.title,
		isActive: ctx.isActive,
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var if_block = (ctx.enabled) && create_if_block$1(ctx);

	return {
		c: function create() {
			sidebarlink.$$.fragment.c();
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},

		l: function claim(nodes) {
			sidebarlink.$$.fragment.l(nodes);
			t = claim_text(nodes, "\n");
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},

		m: function mount(target, anchor) {
			mount_component(sidebarlink, target, anchor);
			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var sidebarlink_changes = {};
			if (changed.url) sidebarlink_changes.url = ctx.url;
			if (changed.title) sidebarlink_changes.title = ctx.title;
			if (changed.isActive) sidebarlink_changes.isActive = ctx.isActive;
			if (changed.$$scope) sidebarlink_changes.$$scope = { changed, ctx };
			sidebarlink.$set(sidebarlink_changes);

			if (ctx.enabled) {
				if (if_block) {
					if_block.p(changed, ctx);
					if_block.i(1);
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					if_block.i(1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();
				on_outro(() => {
					if_block.d(1);
					if_block = null;
				});

				if_block.o(1);
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			sidebarlink.$$.fragment.i(local);

			if (if_block) if_block.i();
			current = true;
		},

		o: function outro(local) {
			sidebarlink.$$.fragment.o(local);
			if (if_block) if_block.o();
			current = false;
		},

		d: function destroy(detaching) {
			sidebarlink.$destroy(detaching);

			if (detaching) {
				detach(t);
			}

			if (if_block) if_block.d(detaching);

			if (detaching) {
				detach(if_block_anchor);
			}
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	

// Private
let enabled = false;

// Props
let { content, url = '', label = '', title = '', selector = 'section h2', isActive = (p, url) => (p === url) } = $$props;

onMount(() => {
    const path = window.location.pathname;
    $$invalidate('enabled', enabled = path === url || path.startsWith(`${url}#`));
});

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('content' in $$props) $$invalidate('content', content = $$props.content);
		if ('url' in $$props) $$invalidate('url', url = $$props.url);
		if ('label' in $$props) $$invalidate('label', label = $$props.label);
		if ('title' in $$props) $$invalidate('title', title = $$props.title);
		if ('selector' in $$props) $$invalidate('selector', selector = $$props.selector);
		if ('isActive' in $$props) $$invalidate('isActive', isActive = $$props.isActive);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	return {
		enabled,
		content,
		url,
		label,
		title,
		selector,
		isActive,
		$$slots,
		$$scope
	};
}

class SidebarLinkWithToc extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, ["content", "url", "label", "title", "selector", "isActive"]);

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.content === undefined && !('content' in props)) {
			console.warn("<SidebarLinkWithToc> was created without expected prop 'content'");
		}
	}

	get content() {
		throw new Error("<SidebarLinkWithToc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set content(value) {
		throw new Error("<SidebarLinkWithToc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<SidebarLinkWithToc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<SidebarLinkWithToc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<SidebarLinkWithToc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<SidebarLinkWithToc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<SidebarLinkWithToc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<SidebarLinkWithToc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get selector() {
		throw new Error("<SidebarLinkWithToc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selector(value) {
		throw new Error("<SidebarLinkWithToc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isActive() {
		throw new Error("<SidebarLinkWithToc>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isActive(value) {
		throw new Error("<SidebarLinkWithToc>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { SidebarLinkWithToc as a, SidebarLink as b };

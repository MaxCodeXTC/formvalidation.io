import { a as SvelteComponentDev, b as init, c as safe_not_equal, d as create_slot, e as get_slot_changes, f as get_slot_context, B as onMount, H as createEventDispatcher } from './chunk.989912da.js';

/* src/components/ReceiveMessage.svelte generated by Svelte v3.4.2 */

function create_fragment(ctx) {
	var current;

	const default_slot_1 = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_1, ctx, null);

	return {
		c: function create() {
			if (default_slot) default_slot.c();
		},

		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},

		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},

		p: function update(changed, ctx) {
			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(get_slot_changes(default_slot_1, ctx, changed, null), get_slot_context(default_slot_1, ctx, null));
			}
		},

		i: function intro(local) {
			if (current) return;
			if (default_slot && default_slot.i) default_slot.i(local);
			current = true;
		},

		o: function outro(local) {
			if (default_slot && default_slot.o) default_slot.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();

// Props
let { channel, sender } = $$props;

onMount(() => {
    const onMessage = (e) => {
        if (e.data.channel === channel && e.data.sender === sender) {
            dispatch('received', {
                data: e.data.data,
            });
        }
    };

    window.addEventListener('message', onMessage, false);

    return () => {
        window.removeEventListener('message', onMessage);
    };
});

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('channel' in $$props) $$invalidate('channel', channel = $$props.channel);
		if ('sender' in $$props) $$invalidate('sender', sender = $$props.sender);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	return { channel, sender, $$slots, $$scope };
}

class ReceiveMessage extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["channel", "sender"]);

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.channel === undefined && !('channel' in props)) {
			console.warn("<ReceiveMessage> was created without expected prop 'channel'");
		}
		if (ctx.sender === undefined && !('sender' in props)) {
			console.warn("<ReceiveMessage> was created without expected prop 'sender'");
		}
	}

	get channel() {
		throw new Error("<ReceiveMessage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set channel(value) {
		throw new Error("<ReceiveMessage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get sender() {
		throw new Error("<ReceiveMessage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sender(value) {
		throw new Error("<ReceiveMessage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { ReceiveMessage as a };

import { a as SvelteComponentDev, b as init, c as safe_not_equal, d as create_slot, g as space, h as element, j as claim_text, k as claim_element, l as children, m as detach, n as add_location, t as mount_component, o as insert, e as get_slot_changes, f as get_slot_context } from './chunk.989912da.js';
import { a as DotDotDot } from './chunk.8206184d.js';

/* src/components/Heading.svelte generated by Svelte v3.4.2 */

const file = "src/components/Heading.svelte";

function create_fragment(ctx) {
	var t, h2, current;

	var dotdotdot = new DotDotDot({ $$inline: true });

	const default_slot_1 = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_1, ctx, null);

	return {
		c: function create() {
			dotdotdot.$$.fragment.c();
			t = space();
			h2 = element("h2");

			if (default_slot) default_slot.c();
			this.h();
		},

		l: function claim(nodes) {
			dotdotdot.$$.fragment.l(nodes);
			t = claim_text(nodes, "\n");

			h2 = claim_element(nodes, "H2", {}, false);
			var h2_nodes = children(h2);

			if (default_slot) default_slot.l(h2_nodes);
			h2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			add_location(h2, file, 1, 0, 14);
		},

		m: function mount(target, anchor) {
			mount_component(dotdotdot, target, anchor);
			insert(target, t, anchor);
			insert(target, h2, anchor);

			if (default_slot) {
				default_slot.m(h2, null);
			}

			current = true;
		},

		p: function update(changed, ctx) {
			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(get_slot_changes(default_slot_1, ctx, changed, null), get_slot_context(default_slot_1, ctx, null));
			}
		},

		i: function intro(local) {
			if (current) return;
			dotdotdot.$$.fragment.i(local);

			if (default_slot && default_slot.i) default_slot.i(local);
			current = true;
		},

		o: function outro(local) {
			dotdotdot.$$.fragment.o(local);
			if (default_slot && default_slot.o) default_slot.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			dotdotdot.$destroy(detaching);

			if (detaching) {
				detach(t);
				detach(h2);
			}

			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	return { $$slots, $$scope };
}

class Heading extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export { Heading as a };

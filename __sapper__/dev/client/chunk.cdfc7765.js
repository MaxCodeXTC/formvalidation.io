import { a as SvelteComponentDev, b as init, c as safe_not_equal, d as create_slot, h as element, i as text, k as claim_element, l as children, j as claim_text, m as detach, n as add_location, o as insert, p as append, e as get_slot_changes, f as get_slot_context } from './chunk.989912da.js';

/* src/components/NextButton.svelte generated by Svelte v3.4.2 */

const file = "src/components/NextButton.svelte";

function create_fragment(ctx) {
	var a, t, current;

	const default_slot_1 = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_1, ctx, null);

	return {
		c: function create() {
			a = element("a");

			if (default_slot) default_slot.c();
			t = text(" →");
			this.h();
		},

		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			if (default_slot) default_slot.l(a_nodes);
			t = claim_text(a_nodes, " →");
			a_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			a.href = ctx.target;
			a.className = "ml-auto f3 pointer blue dim link pa2";
			add_location(a, file, 0, 0, 0);
		},

		m: function mount(target_1, anchor) {
			insert(target_1, a, anchor);

			if (default_slot) {
				default_slot.m(a, null);
			}

			append(a, t);
			current = true;
		},

		p: function update(changed, ctx) {
			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(get_slot_changes(default_slot_1, ctx, changed, null), get_slot_context(default_slot_1, ctx, null));
			}

			if (!current || changed.target) {
				a.href = ctx.target;
			}
		},

		i: function intro(local) {
			if (current) return;
			if (default_slot && default_slot.i) default_slot.i(local);
			current = true;
		},

		o: function outro(local) {
			if (default_slot && default_slot.o) default_slot.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(a);
			}

			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { target = '' } = $$props;

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('target' in $$props) $$invalidate('target', target = $$props.target);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	return { target, $$slots, $$scope };
}

class NextButton extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["target"]);
	}

	get target() {
		throw new Error("<NextButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set target(value) {
		throw new Error("<NextButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { NextButton as a };

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as ChangelogLayout } from './chunk.4a563e90.js';

/* src/routes/updates/v0.2.1/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/updates/v0.2.1/index.svelte";

// (10:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Improvements");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Improvements");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <ChangelogLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section, t4, ul, li0, t5, t6, li1, t7, current;

	var heading = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Version 0.2.1");
			t1 = space();
			h2 = element("h2");
			t2 = text("Released 08 November 2013");
			t3 = space();
			section = element("section");
			heading.$$.fragment.c();
			t4 = space();
			ul = element("ul");
			li0 = element("li");
			t5 = text("Upgrade Bootstrap to v3.0.2");
			t6 = space();
			li1 = element("li");
			t7 = text("Hide the error block containers before validating");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Version 0.2.1");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Released 08 November 2013");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section = claim_element(nodes, "SECTION", { class: true }, false);
			var section_nodes = children(section);

			heading.$$.fragment.l(section_nodes);
			t4 = claim_text(section_nodes, "\n        ");

			ul = claim_element(section_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t5 = claim_text(li0_nodes, "Upgrade Bootstrap to v3.0.2");
			li0_nodes.forEach(detach);
			t6 = claim_text(ul_nodes, "\n            ");

			li1 = claim_element(ul_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t7 = claim_text(li1_nodes, "Hide the error block containers before validating");
			li1_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			section_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 92);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 143);
			add_location(li0, file, 11, 12, 316);
			add_location(li1, file, 12, 12, 365);
			ul.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul, file, 10, 8, 271);
			section.className = "mv5";
			add_location(section, file, 8, 4, 201);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section, anchor);
			mount_component(heading, section, null);
			append(section, t4);
			append(section, ul);
			append(ul, li0);
			append(li0, t5);
			append(ul, t6);
			append(ul, li1);
			append(li1, t7);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading_changes = {};
			if (changed.$$scope) heading_changes.$$scope = { changed, ctx };
			heading.$set(heading_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section);
			}

			heading.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var changeloglayout = new ChangelogLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			changeloglayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			changeloglayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation â€¢ v0.2.1";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(changeloglayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var changeloglayout_changes = {};
			if (changed.$$scope) changeloglayout_changes.$$scope = { changed, ctx };
			changeloglayout.$set(changeloglayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			changeloglayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			changeloglayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			changeloglayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, r as noop } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';

/* src/routes/guide/examples/using-semantic-ui-framework-icons/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/using-semantic-ui-framework-icons/index.svelte";

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section, p0, t2, a0, t3, t4, t5, p1, t6, a1, t7, t8, code, t9, t10, t11, t12, p2, t13, a2, t14, t15, a3, t16, t17, t18, div, t19, t20, current;

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<div class="ui input icon">
    <input type="text" name="name" />
</div>    
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<!-- Put them in the head tag -->
<link-tag rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css">
<link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">

<form id="demoForm">
    ...
</form>

<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/plugins/Semantic.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                semantic: new FormValidation.plugins.Semantic(),
                icon: new FormValidation.plugins.Icon({
                    valid: 'checkmark icon',
                    invalid: 'remove icon',
                    validating: 'refresh icon',
                }),
            },
        }
    );
});
</script-tag>
` },
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/plugins/semantic/horizontal-form",
		frameworks: ['semantic']
	},
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Adjusting icon position',
        'Showing icons in custom area',
        'Using FontAwesome icons',
        'Using Glyphicons icons',
        'Using Material Design icons',
        'Using Semantic UI framework icons',
        'Using Spectre framework icons',
        'Using SVG icons',
    ] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Using Semantic UI framework icons");
			t1 = space();
			section = element("section");
			p0 = element("p");
			t2 = text("The Semantic UI framework provides an ");
			a0 = element("a");
			t3 = text("icon set");
			t4 = text(" which can be used with the Icon plugin.");
			t5 = space();
			p1 = element("p");
			t6 = text("Followed by the ");
			a1 = element("a");
			t7 = text("suggestion");
			t8 = text(" from Semantic UI, the input must place inside ");
			code = element("code");
			t9 = text("ui input icon");
			t10 = text(" element:");
			t11 = space();
			samplecode0.$$.fragment.c();
			t12 = space();
			p2 = element("p");
			t13 = text("Below is a starting point to use the ");
			a2 = element("a");
			t14 = text("Icon plugin");
			t15 = text(" along with the ");
			a3 = element("a");
			t16 = text("Semantic plugin");
			t17 = text(":");
			t18 = space();
			div = element("div");
			samplecode1.$$.fragment.c();
			t19 = space();
			demo.$$.fragment.c();
			t20 = space();
			examples.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Using Semantic UI framework icons");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    \n    ");

			section = claim_element(nodes, "SECTION", { class: true }, false);
			var section_nodes = children(section);

			p0 = claim_element(section_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "The Semantic UI framework provides an ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t3 = claim_text(a0_nodes, "icon set");
			a0_nodes.forEach(detach);
			t4 = claim_text(p0_nodes, " which can be used with the Icon plugin.");
			p0_nodes.forEach(detach);
			t5 = claim_text(section_nodes, "\n        ");

			p1 = claim_element(section_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t6 = claim_text(p1_nodes, "Followed by the ");

			a1 = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t7 = claim_text(a1_nodes, "suggestion");
			a1_nodes.forEach(detach);
			t8 = claim_text(p1_nodes, " from Semantic UI, the input must place inside ");

			code = claim_element(p1_nodes, "CODE", {}, false);
			var code_nodes = children(code);

			t9 = claim_text(code_nodes, "ui input icon");
			code_nodes.forEach(detach);
			t10 = claim_text(p1_nodes, " element:");
			p1_nodes.forEach(detach);
			t11 = claim_text(section_nodes, "\n");
			samplecode0.$$.fragment.l(section_nodes);
			t12 = claim_text(section_nodes, "\n        ");

			p2 = claim_element(section_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t13 = claim_text(p2_nodes, "Below is a starting point to use the ");

			a2 = claim_element(p2_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t14 = claim_text(a2_nodes, "Icon plugin");
			a2_nodes.forEach(detach);
			t15 = claim_text(p2_nodes, " along with the ");

			a3 = claim_element(p2_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t16 = claim_text(a3_nodes, "Semantic plugin");
			a3_nodes.forEach(detach);
			t17 = claim_text(p2_nodes, ":");
			p2_nodes.forEach(detach);
			t18 = claim_text(section_nodes, "\n        ");

			div = claim_element(section_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			samplecode1.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			t19 = claim_text(section_nodes, "\n        ");
			demo.$$.fragment.l(section_nodes);
			section_nodes.forEach(detach);
			t20 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 115);
			a0.href = "https://semantic-ui.com/elements/icon.html";
			a0.className = "blue dim link";
			add_location(a0, file, 8, 65, 273);
			p0.className = "lh-copy";
			add_location(p0, file, 8, 8, 216);
			a1.href = "https://semantic-ui.com/elements/input.html#icon";
			a1.className = "blue dim link";
			add_location(a1, file, 9, 43, 448);
			add_location(code, file, 9, 185, 590);
			p1.className = "lh-copy";
			add_location(p1, file, 9, 8, 413);
			a2.href = "/guide/plugins/icon";
			a2.className = "blue dim link";
			add_location(a2, file, 15, 64, 809);
			a3.href = "/guide/plugins/semantic";
			a3.className = "blue dim link";
			add_location(a3, file, 15, 147, 892);
			p2.className = "lh-copy";
			add_location(p2, file, 15, 8, 753);
			div.className = "mb4";
			add_location(div, file, 16, 8, 981);
			section.className = "mv5";
			add_location(section, file, 7, 4, 186);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section, anchor);
			append(section, p0);
			append(p0, t2);
			append(p0, a0);
			append(a0, t3);
			append(p0, t4);
			append(section, t5);
			append(section, p1);
			append(p1, t6);
			append(p1, a1);
			append(a1, t7);
			append(p1, t8);
			append(p1, code);
			append(code, t9);
			append(p1, t10);
			append(section, t11);
			mount_component(samplecode0, section, null);
			append(section, t12);
			append(section, p2);
			append(p2, t13);
			append(p2, a2);
			append(a2, t14);
			append(p2, t15);
			append(p2, a3);
			append(a3, t16);
			append(p2, t17);
			append(section, t18);
			append(section, div);
			mount_component(samplecode1, div, null);
			append(section, t19);
			mount_component(demo, section, null);
			insert(target, t20, anchor);
			mount_component(examples, target, anchor);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section);
			}

			samplecode0.$destroy();

			samplecode1.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t20);
			}

			examples.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Using Semantic UI framework icons";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

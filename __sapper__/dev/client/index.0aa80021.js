import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, r as noop } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';

/* src/routes/guide/examples/using-spectre-framework-icons/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/using-spectre-framework-icons/index.svelte";

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section, p0, t2, a0, t3, t4, a1, t5, t6, a2, t7, t8, t9, p1, t10, code, t11, t12, t13, t14, p2, t15, a3, t16, t17, a4, t18, t19, t20, div, t21, t22, current;

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<div class="has-icon-right">
    <input type="text" class="form-input" name="name" />
</div>
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<!-- Put them in the head tag -->
<link-tag rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/spectre.css/0.5.8/spectre.min.css">
<link-tag rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/spectre.css/0.5.8/spectre-icons.min.css">
<link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">

<form id="demoForm">
    ...
</form>

<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/plugins/Spectre.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                spectre: new FormValidation.plugins.Spectre(),
                icon: new FormValidation.plugins.Icon({
                    valid: 'form-icon icon icon-check',
                    invalid: 'form-icon icon icon-cross',
                    validating: 'form-icon loading',
                }),
            },
        }
    );
});
</script-tag>
` },
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/plugins/spectre/horizontal-form",
		frameworks: ['spectre']
	},
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Adjusting icon position',
        'Showing icons in custom area',
        'Using FontAwesome icons',
        'Using Glyphicons icons',
        'Using Material Design icons',
        'Using Semantic UI framework icons',
        'Using Spectre framework icons',
        'Using SVG icons',
    ] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Using Spectre framework icons");
			t1 = space();
			section = element("section");
			p0 = element("p");
			t2 = text("The ");
			a0 = element("a");
			t3 = text("Spectre framework");
			t4 = text(" provides a built-in ");
			a1 = element("a");
			t5 = text("icons set");
			t6 = text(" which can be used with ");
			a2 = element("a");
			t7 = text("Spectre");
			t8 = text(" plugin.");
			t9 = space();
			p1 = element("p");
			t10 = text("In order to use these icons, you have to wrap the field in a ");
			code = element("code");
			t11 = text("has-icon-right");
			t12 = text(" class:");
			t13 = space();
			samplecode0.$$.fragment.c();
			t14 = space();
			p2 = element("p");
			t15 = text("Below is a starting point to use the ");
			a3 = element("a");
			t16 = text("Icon plugin");
			t17 = text(" along with the ");
			a4 = element("a");
			t18 = text("Spectre plugin");
			t19 = text(":");
			t20 = space();
			div = element("div");
			samplecode1.$$.fragment.c();
			t21 = space();
			demo.$$.fragment.c();
			t22 = space();
			examples.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Using Spectre framework icons");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    \n    ");

			section = claim_element(nodes, "SECTION", { class: true }, false);
			var section_nodes = children(section);

			p0 = claim_element(section_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "The ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t3 = claim_text(a0_nodes, "Spectre framework");
			a0_nodes.forEach(detach);
			t4 = claim_text(p0_nodes, " provides a built-in ");

			a1 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t5 = claim_text(a1_nodes, "icons set");
			a1_nodes.forEach(detach);
			t6 = claim_text(p0_nodes, " which can be used with ");

			a2 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t7 = claim_text(a2_nodes, "Spectre");
			a2_nodes.forEach(detach);
			t8 = claim_text(p0_nodes, " plugin.");
			p0_nodes.forEach(detach);
			t9 = claim_text(section_nodes, "\n        ");

			p1 = claim_element(section_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t10 = claim_text(p1_nodes, "In order to use these icons, you have to wrap the field in a ");

			code = claim_element(p1_nodes, "CODE", {}, false);
			var code_nodes = children(code);

			t11 = claim_text(code_nodes, "has-icon-right");
			code_nodes.forEach(detach);
			t12 = claim_text(p1_nodes, " class:");
			p1_nodes.forEach(detach);
			t13 = claim_text(section_nodes, "\n");
			samplecode0.$$.fragment.l(section_nodes);
			t14 = claim_text(section_nodes, "\n        ");

			p2 = claim_element(section_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t15 = claim_text(p2_nodes, "Below is a starting point to use the ");

			a3 = claim_element(p2_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t16 = claim_text(a3_nodes, "Icon plugin");
			a3_nodes.forEach(detach);
			t17 = claim_text(p2_nodes, " along with the ");

			a4 = claim_element(p2_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t18 = claim_text(a4_nodes, "Spectre plugin");
			a4_nodes.forEach(detach);
			t19 = claim_text(p2_nodes, ":");
			p2_nodes.forEach(detach);
			t20 = claim_text(section_nodes, "\n        ");

			div = claim_element(section_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			samplecode1.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			t21 = claim_text(section_nodes, "\n        ");
			demo.$$.fragment.l(section_nodes);
			section_nodes.forEach(detach);
			t22 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 111);
			a0.href = "https://picturepan2.github.io/spectre";
			a0.className = "blue dim link";
			add_location(a0, file, 8, 31, 231);
			a1.href = "https://picturepan2.github.io/spectre/elements.html#icons";
			a1.className = "blue dim link";
			add_location(a1, file, 8, 143, 343);
			a2.href = "/guide/plugins/spectre";
			a2.className = "blue dim link";
			add_location(a2, file, 8, 270, 470);
			p0.className = "lh-copy";
			add_location(p0, file, 8, 8, 208);
			add_location(code, file, 9, 88, 637);
			p1.className = "lh-copy";
			add_location(p1, file, 9, 8, 557);
			a3.href = "/guide/plugins/icon";
			a3.className = "blue dim link";
			add_location(a3, file, 15, 64, 871);
			a4.href = "/guide/plugins/spectre";
			a4.className = "blue dim link";
			add_location(a4, file, 15, 147, 954);
			p2.className = "lh-copy";
			add_location(p2, file, 15, 8, 815);
			div.className = "mb4";
			add_location(div, file, 16, 8, 1041);
			section.className = "mv5";
			add_location(section, file, 7, 4, 178);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section, anchor);
			append(section, p0);
			append(p0, t2);
			append(p0, a0);
			append(a0, t3);
			append(p0, t4);
			append(p0, a1);
			append(a1, t5);
			append(p0, t6);
			append(p0, a2);
			append(a2, t7);
			append(p0, t8);
			append(section, t9);
			append(section, p1);
			append(p1, t10);
			append(p1, code);
			append(code, t11);
			append(p1, t12);
			append(section, t13);
			mount_component(samplecode0, section, null);
			append(section, t14);
			append(section, p2);
			append(p2, t15);
			append(p2, a3);
			append(a3, t16);
			append(p2, t17);
			append(p2, a4);
			append(a4, t18);
			append(p2, t19);
			append(section, t20);
			append(section, div);
			mount_component(samplecode1, div, null);
			append(section, t21);
			mount_component(demo, section, null);
			insert(target, t22, anchor);
			mount_component(examples, target, anchor);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section);
			}

			samplecode0.$destroy();

			samplecode1.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t22);
			}

			examples.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Using Spectre framework icons";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

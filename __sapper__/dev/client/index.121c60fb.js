import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';

/* src/routes/guide/examples/integrating-with-svelte/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/integrating-with-svelte/index.svelte";

// (37:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Bundling the library");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Bundling the library");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (46:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Creating a FormValidation instance");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Creating a FormValidation instance");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (103:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Using the plugins");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Using the plugins");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (156:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Registering validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Registering validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (196:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Destroying FormValidation instance");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Destroying FormValidation instance");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section0, p0, t2, a0, t3, t4, t5, p1, t6, t7, t8, section1, t9, p2, t10, t11, ul, li0, a1, t12, t13, li1, a2, t14, t15, section2, t16, p3, t17, a3, t18, t19, t20, t21, section3, t22, p4, t23, a4, t24, t25, t26, t27, p5, t28, a5, t29, t30, a6, t31, t32, t33, t34, section4, t35, p6, t36, a7, t37, t38, t39, t40, p7, t41, a8, t42, t43, a9, t44, t45, a10, t46, t47, t48, t49, section5, t50, p8, t51, a11, t52, t53, a12, t54, t55, t56, t57, p9, t58, code0, t59, t60, code1, t61, t62, t63, t64, current;

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<form id="loginForm" method="POST">
    <div class="form-group row">
        <label class="col-sm-3 col-form-label">Username</label>
        <div class="col-sm-4">
            <input type="text" class="form-control" name="username" />
        </div>
    </div>

    <div class="form-group row">
        <label class="col-sm-3 col-form-label">Password</label>
        <div class="col-sm-4">
            <input type="password" class="form-control" name="password" />
        </div>
    </div>

    <div class="form-group row">
        <div class="col-sm-9 offset-sm-3">
            <button type="submit" class="btn btn-primary">Login</button>
        </div>
    </div>
</form>
` },
		$$inline: true
	});

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<form id="loginForm" method="POST">
    ...
</form>

<script-tag>
import { onMount } from 'svelte';

import formValidation from 'formvalidation/dist/es6/core/Core';

// The FormValidation instance
let fv;

onMount(() => {
    // Create a FormValidation instance
    fv = formValidation(document.getElementById('loginForm'), {
        fields: {
            username: {
                validators: {
                    notEmpty: {
                        message: 'The username is required'
                    },
                    stringLength: {
                        min: 6,
                        max: 30,
                        message: 'The username must be more than 6 and less than 30 characters long',
                    },
                    regexp: {
                        regexp: /^[a-zA-Z0-9_]+$/,
                        message: 'The username can only consist of alphabetical, number and underscore',
                    },
                }
            },
            password: {
                validators: {
                    notEmpty: {
                        message: 'The password is required'
                    },
                    stringLength: {
                        min: 8,
                        message: 'The password must have at least 8 characters',
                    },
                }
            },
        },
        plugins: {
            ...
        },
    });
});
</script-tag>
` },
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "javascript", code: `
import { onMount } from 'svelte';

import formValidation from 'formvalidation/dist/es6/core/Core';

// FormValidation plugins
import Icon from 'formvalidation/dist/es6/plugins/Icon';
import Trigger from 'formvalidation/dist/es6/plugins/Trigger';
import Bootstrap from 'formvalidation/dist/es6/plugins/Bootstrap';
import SubmitButton from 'formvalidation/dist/es6/plugins/SubmitButton';

let fv;

onMount(() => {
    fv = formValidation(document.getElementById('loginForm'), {
        fields: {
            ...
        },
        plugins: {
            trigger: new Trigger(),
            bootstrap: new Bootstrap(),
            icon: new Icon({
                valid: 'fa fa-check',
                invalid: 'fa fa-times',
                validating: 'fa fa-refresh'
            }),
            submitButton: new SubmitButton(),
        },
    });
});
` },
		$$inline: true
	});

	var samplecode3 = new SampleCode({
		props: { lang: "javascript", code: `
onMount(() => {
    fv = formValidation(document.getElementById('loginForm'), {
        ...
    });

    // Listen on event
    fv.on('core.field.invalid', (e) => {
        ...
    });

    // Call API
    fv.revalidateField('...');
});
` },
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode4 = new SampleCode({
		props: { lang: "javascript", code: `
import formValidation from 'formvalidation/dist/es6/core/Core';
` },
		$$inline: true
	});

	var samplecode5 = new SampleCode({
		props: { lang: "javascript", code: `
// Import an external validator
import phone from 'formvalidation/dist/es6/validators/phone';

// Or import your own validator
import strongPassword from '/path/to/your/strongPassword';

onMount(() => {
    fv = formValidation(document.getElementById('loginForm'), {
        fields: {
            phoneNumber: {
                validators: {
                    phone: { ... }
                }
            },
            password: {
                validators: {
                    checkPassword: { ... }
                }
            },
        }
    });

    // Register validators
    fv.registerValidator('phone', phone)
      .registerValidator('checkPassword', strongPassword);
});
` },
		$$inline: true
	});

	var heading4 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode6 = new SampleCode({
		props: { lang: "javascript", code: `
import { onDestroy } from 'svelte';

let fv;

onDestroy(() => {
    if (fv) {
        fv.destroy();
    }
});
` },
		$$inline: true
	});

	var samplecode7 = new SampleCode({
		props: { lang: "javascript", code: `
import { onMount } from 'svelte';

onMount(() => {
    // Create FormValidation instance
    const fv = formValidation(document.getElementById('loginForm'), {
        ...
    });

    // Return a method that will be executed when
    // the component is destroyed
    return () => {
        fv.destroy();
    };
});
` },
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Bundling with Rollup',
        'Bundling with Webpack',
    ] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Integrating with Svelte");
			t1 = space();
			section0 = element("section");
			p0 = element("p");
			t2 = text("This page will help you integrate FormValidation with the ");
			a0 = element("a");
			t3 = text("Svelte framework");
			t4 = text(".");
			t5 = space();
			p1 = element("p");
			t6 = text("For the sake of simplicity, we are about to validate a simple login form with just two fields to input the username and password:");
			t7 = space();
			samplecode0.$$.fragment.c();
			t8 = space();
			section1 = element("section");
			heading0.$$.fragment.c();
			t9 = space();
			p2 = element("p");
			t10 = text("First of all, you need to look at the following guide to see how we can bundle FormValidation with popular bundlers:");
			t11 = space();
			ul = element("ul");
			li0 = element("li");
			a1 = element("a");
			t12 = text("Bundling with Rollup");
			t13 = space();
			li1 = element("li");
			a2 = element("a");
			t14 = text("Bundling with Webpack");
			t15 = space();
			section2 = element("section");
			heading1.$$.fragment.c();
			t16 = space();
			p3 = element("p");
			t17 = text("The best place to initialize a FormValidation instance is inside the component's ");
			a3 = element("a");
			t18 = text("onMount event");
			t19 = text(":");
			t20 = space();
			samplecode1.$$.fragment.c();
			t21 = space();
			section3 = element("section");
			heading2.$$.fragment.c();
			t22 = space();
			p4 = element("p");
			t23 = text("In order to use the ");
			a4 = element("a");
			t24 = text("plugins");
			t25 = text(", we need to import them:");
			t26 = space();
			samplecode2.$$.fragment.c();
			t27 = space();
			p5 = element("p");
			t28 = text("Now the FormValidation instance is ready, you can listen on the ");
			a5 = element("a");
			t29 = text("events");
			t30 = text(" or call ");
			a6 = element("a");
			t31 = text("API");
			t32 = text(":");
			t33 = space();
			samplecode3.$$.fragment.c();
			t34 = space();
			section4 = element("section");
			heading3.$$.fragment.c();
			t35 = space();
			p6 = element("p");
			t36 = text("You don't need to follow this section if you are using a ");
			a7 = element("a");
			t37 = text("popular validator");
			t38 = text(". The popular validator is ready when you import the FormValidation's core:");
			t39 = space();
			samplecode4.$$.fragment.c();
			t40 = space();
			p7 = element("p");
			t41 = text("In the other cases, you have to use the ");
			a8 = element("a");
			t42 = text("registerValidator() method");
			t43 = text(" to let the library knows where it can find a ");
			a9 = element("a");
			t44 = text("special");
			t45 = text(" or ");
			a10 = element("a");
			t46 = text("custom validator");
			t47 = text(":");
			t48 = space();
			samplecode5.$$.fragment.c();
			t49 = space();
			section5 = element("section");
			heading4.$$.fragment.c();
			t50 = space();
			p8 = element("p");
			t51 = text("Svelte component triggers the ");
			a11 = element("a");
			t52 = text("onDestroy event");
			t53 = text(" when it's removed from page or not used anymore. It's the time to destroy our FormValidation instance by using the ");
			a12 = element("a");
			t54 = text("destroy() method");
			t55 = text(":");
			t56 = space();
			samplecode6.$$.fragment.c();
			t57 = space();
			p9 = element("p");
			t58 = text("The Svelte component also performs the cleaning tasks if the ");
			code0 = element("code");
			t59 = text("onMount");
			t60 = text(" event returns a function. It's possible for us to write a more beautiful code without hooking the ");
			code1 = element("code");
			t61 = text("onDestroy");
			t62 = text(" event:");
			t63 = space();
			samplecode7.$$.fragment.c();
			t64 = space();
			examples.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Integrating with Svelte");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "This page will help you integrate FormValidation with the ");

			a0 = claim_element(p0_nodes, "A", { href: true, rel: true, target: true, class: true }, false);
			var a0_nodes = children(a0);

			t3 = claim_text(a0_nodes, "Svelte framework");
			a0_nodes.forEach(detach);
			t4 = claim_text(p0_nodes, ".");
			p0_nodes.forEach(detach);
			t5 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t6 = claim_text(p1_nodes, "For the sake of simplicity, we are about to validate a simple login form with just two fields to input the username and password:");
			p1_nodes.forEach(detach);
			t7 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t8 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading0.$$.fragment.l(section1_nodes);
			t9 = claim_text(section1_nodes, "\n        ");

			p2 = claim_element(section1_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t10 = claim_text(p2_nodes, "First of all, you need to look at the following guide to see how we can bundle FormValidation with popular bundlers:");
			p2_nodes.forEach(detach);
			t11 = claim_text(section1_nodes, "\n        ");

			ul = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			a1 = claim_element(li0_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t12 = claim_text(a1_nodes, "Bundling with Rollup");
			a1_nodes.forEach(detach);
			li0_nodes.forEach(detach);
			t13 = claim_text(ul_nodes, "\n            ");

			li1 = claim_element(ul_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			a2 = claim_element(li1_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t14 = claim_text(a2_nodes, "Bundling with Webpack");
			a2_nodes.forEach(detach);
			li1_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t15 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading1.$$.fragment.l(section2_nodes);
			t16 = claim_text(section2_nodes, "\n        ");

			p3 = claim_element(section2_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t17 = claim_text(p3_nodes, "The best place to initialize a FormValidation instance is inside the component's ");

			a3 = claim_element(p3_nodes, "A", { href: true, rel: true, target: true, class: true }, false);
			var a3_nodes = children(a3);

			t18 = claim_text(a3_nodes, "onMount event");
			a3_nodes.forEach(detach);
			t19 = claim_text(p3_nodes, ":");
			p3_nodes.forEach(detach);
			t20 = claim_text(section2_nodes, "\n");
			samplecode1.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t21 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading2.$$.fragment.l(section3_nodes);
			t22 = claim_text(section3_nodes, "\n        ");

			p4 = claim_element(section3_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t23 = claim_text(p4_nodes, "In order to use the ");

			a4 = claim_element(p4_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t24 = claim_text(a4_nodes, "plugins");
			a4_nodes.forEach(detach);
			t25 = claim_text(p4_nodes, ", we need to import them:");
			p4_nodes.forEach(detach);
			t26 = claim_text(section3_nodes, "\n");
			samplecode2.$$.fragment.l(section3_nodes);
			t27 = claim_text(section3_nodes, "  \n        ");

			p5 = claim_element(section3_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t28 = claim_text(p5_nodes, "Now the FormValidation instance is ready, you can listen on the ");

			a5 = claim_element(p5_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t29 = claim_text(a5_nodes, "events");
			a5_nodes.forEach(detach);
			t30 = claim_text(p5_nodes, " or call ");

			a6 = claim_element(p5_nodes, "A", { href: true, class: true }, false);
			var a6_nodes = children(a6);

			t31 = claim_text(a6_nodes, "API");
			a6_nodes.forEach(detach);
			t32 = claim_text(p5_nodes, ":");
			p5_nodes.forEach(detach);
			t33 = claim_text(section3_nodes, "\n\n");
			samplecode3.$$.fragment.l(section3_nodes);
			section3_nodes.forEach(detach);
			t34 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			heading3.$$.fragment.l(section4_nodes);
			t35 = claim_text(section4_nodes, "\n        ");

			p6 = claim_element(section4_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t36 = claim_text(p6_nodes, "You don't need to follow this section if you are using a ");

			a7 = claim_element(p6_nodes, "A", { href: true, class: true }, false);
			var a7_nodes = children(a7);

			t37 = claim_text(a7_nodes, "popular validator");
			a7_nodes.forEach(detach);
			t38 = claim_text(p6_nodes, ". The popular validator is ready when you import the FormValidation's core:");
			p6_nodes.forEach(detach);
			t39 = claim_text(section4_nodes, "\n\n");
			samplecode4.$$.fragment.l(section4_nodes);
			t40 = claim_text(section4_nodes, "\n\n        ");

			p7 = claim_element(section4_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t41 = claim_text(p7_nodes, "In the other cases, you have to use the ");

			a8 = claim_element(p7_nodes, "A", { href: true, class: true }, false);
			var a8_nodes = children(a8);

			t42 = claim_text(a8_nodes, "registerValidator() method");
			a8_nodes.forEach(detach);
			t43 = claim_text(p7_nodes, " to let the library knows where it can find a ");

			a9 = claim_element(p7_nodes, "A", { href: true, class: true }, false);
			var a9_nodes = children(a9);

			t44 = claim_text(a9_nodes, "special");
			a9_nodes.forEach(detach);
			t45 = claim_text(p7_nodes, " or ");

			a10 = claim_element(p7_nodes, "A", { href: true, class: true }, false);
			var a10_nodes = children(a10);

			t46 = claim_text(a10_nodes, "custom validator");
			a10_nodes.forEach(detach);
			t47 = claim_text(p7_nodes, ":");
			p7_nodes.forEach(detach);
			t48 = claim_text(section4_nodes, "\n\n");
			samplecode5.$$.fragment.l(section4_nodes);
			section4_nodes.forEach(detach);
			t49 = claim_text(nodes, "\n\n    ");

			section5 = claim_element(nodes, "SECTION", { class: true }, false);
			var section5_nodes = children(section5);

			heading4.$$.fragment.l(section5_nodes);
			t50 = claim_text(section5_nodes, "\n        ");

			p8 = claim_element(section5_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t51 = claim_text(p8_nodes, "Svelte component triggers the ");

			a11 = claim_element(p8_nodes, "A", { href: true, rel: true, target: true, class: true }, false);
			var a11_nodes = children(a11);

			t52 = claim_text(a11_nodes, "onDestroy event");
			a11_nodes.forEach(detach);
			t53 = claim_text(p8_nodes, " when it's removed from page or not used anymore. It's the time to destroy our FormValidation instance by using the ");

			a12 = claim_element(p8_nodes, "A", { href: true, class: true }, false);
			var a12_nodes = children(a12);

			t54 = claim_text(a12_nodes, "destroy() method");
			a12_nodes.forEach(detach);
			t55 = claim_text(p8_nodes, ":");
			p8_nodes.forEach(detach);
			t56 = claim_text(section5_nodes, "\n");
			samplecode6.$$.fragment.l(section5_nodes);
			t57 = claim_text(section5_nodes, "\n        ");

			p9 = claim_element(section5_nodes, "P", { class: true }, false);
			var p9_nodes = children(p9);

			t58 = claim_text(p9_nodes, "The Svelte component also performs the cleaning tasks if the ");

			code0 = claim_element(p9_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t59 = claim_text(code0_nodes, "onMount");
			code0_nodes.forEach(detach);
			t60 = claim_text(p9_nodes, " event returns a function. It's possible for us to write a more beautiful code without hooking the ");

			code1 = claim_element(p9_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t61 = claim_text(code1_nodes, "onDestroy");
			code1_nodes.forEach(detach);
			t62 = claim_text(p9_nodes, " event:");
			p9_nodes.forEach(detach);
			t63 = claim_text(section5_nodes, "\n\n");
			samplecode7.$$.fragment.l(section5_nodes);
			section5_nodes.forEach(detach);
			t64 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 105);
			a0.href = "https://svelte.dev";
			a0.rel = "noopener";
			a0.target = "_blank";
			a0.className = "blue dim link";
			add_location(a0, file, 8, 85, 269);
			p0.className = "lh-copy";
			add_location(p0, file, 8, 8, 192);
			p1.className = "lh-copy";
			add_location(p1, file, 9, 8, 385);
			section0.className = "mv5";
			add_location(section0, file, 7, 4, 162);
			p2.className = "lh-copy";
			add_location(p2, file, 37, 8, 1349);
			a1.href = "/guide/examples/bundling-with-rollup";
			a1.className = "blue dim link";
			add_location(a1, file, 39, 16, 1546);
			add_location(li0, file, 39, 12, 1542);
			a2.href = "/guide/examples/bundling-with-webpack";
			a2.className = "blue dim link";
			add_location(a2, file, 40, 16, 1661);
			add_location(li1, file, 40, 12, 1657);
			ul.className = "lh-copy ma0 pa0 ml3";
			add_location(ul, file, 38, 8, 1497);
			section1.className = "mv5";
			add_location(section1, file, 35, 4, 1271);
			a3.href = "https://svelte.dev/docs#onMount";
			a3.rel = "noopener";
			a3.target = "_blank";
			a3.className = "blue dim link";
			add_location(a3, file, 46, 108, 1988);
			p3.className = "lh-copy";
			add_location(p3, file, 46, 8, 1888);
			section2.className = "mv5";
			add_location(section2, file, 44, 4, 1796);
			a4.href = "/guide/plugins";
			a4.className = "blue dim link";
			add_location(a4, file, 103, 47, 3722);
			p4.className = "lh-copy";
			add_location(p4, file, 103, 8, 3683);
			a5.href = "/guide/events";
			a5.className = "blue dim link";
			add_location(a5, file, 135, 91, 4799);
			a6.href = "/guide/api";
			a6.className = "blue dim link";
			add_location(a6, file, 135, 156, 4864);
			p5.className = "lh-copy";
			add_location(p5, file, 135, 8, 4716);
			section3.className = "mv5";
			add_location(section3, file, 101, 4, 3608);
			a7.href = "/guide/validators#popular-validators";
			a7.className = "blue dim link";
			add_location(a7, file, 156, 84, 5383);
			p6.className = "lh-copy";
			add_location(p6, file, 156, 8, 5307);
			a8.href = "/guide/api/register-validator";
			a8.className = "blue dim link";
			add_location(a8, file, 162, 67, 5730);
			a9.href = "/guide/validators#special-validators";
			a9.className = "blue dim link";
			add_location(a9, file, 162, 205, 5868);
			a10.href = "/guide/examples/creating-a-custom-validator";
			a10.className = "blue dim link";
			add_location(a10, file, 162, 289, 5952);
			p7.className = "lh-copy";
			add_location(p7, file, 162, 8, 5671);
			section4.className = "mv5";
			add_location(section4, file, 154, 4, 5228);
			a11.href = "https://svelte.dev/docs#onDestroy";
			a11.rel = "noopener";
			a11.target = "_blank";
			a11.className = "blue dim link";
			add_location(a11, file, 196, 57, 6950);
			a12.href = "/guide/api/destroy";
			a12.className = "blue dim link";
			add_location(a12, file, 196, 289, 7182);
			p8.className = "lh-copy";
			add_location(p8, file, 196, 8, 6901);
			add_location(code0, file, 208, 88, 7501);
			add_location(code1, file, 208, 207, 7620);
			p9.className = "lh-copy";
			add_location(p9, file, 208, 8, 7421);
			section5.className = "mv5";
			add_location(section5, file, 194, 4, 6809);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section0, anchor);
			append(section0, p0);
			append(p0, t2);
			append(p0, a0);
			append(a0, t3);
			append(p0, t4);
			append(section0, t5);
			append(section0, p1);
			append(p1, t6);
			append(section0, t7);
			mount_component(samplecode0, section0, null);
			insert(target, t8, anchor);
			insert(target, section1, anchor);
			mount_component(heading0, section1, null);
			append(section1, t9);
			append(section1, p2);
			append(p2, t10);
			append(section1, t11);
			append(section1, ul);
			append(ul, li0);
			append(li0, a1);
			append(a1, t12);
			append(ul, t13);
			append(ul, li1);
			append(li1, a2);
			append(a2, t14);
			insert(target, t15, anchor);
			insert(target, section2, anchor);
			mount_component(heading1, section2, null);
			append(section2, t16);
			append(section2, p3);
			append(p3, t17);
			append(p3, a3);
			append(a3, t18);
			append(p3, t19);
			append(section2, t20);
			mount_component(samplecode1, section2, null);
			insert(target, t21, anchor);
			insert(target, section3, anchor);
			mount_component(heading2, section3, null);
			append(section3, t22);
			append(section3, p4);
			append(p4, t23);
			append(p4, a4);
			append(a4, t24);
			append(p4, t25);
			append(section3, t26);
			mount_component(samplecode2, section3, null);
			append(section3, t27);
			append(section3, p5);
			append(p5, t28);
			append(p5, a5);
			append(a5, t29);
			append(p5, t30);
			append(p5, a6);
			append(a6, t31);
			append(p5, t32);
			append(section3, t33);
			mount_component(samplecode3, section3, null);
			insert(target, t34, anchor);
			insert(target, section4, anchor);
			mount_component(heading3, section4, null);
			append(section4, t35);
			append(section4, p6);
			append(p6, t36);
			append(p6, a7);
			append(a7, t37);
			append(p6, t38);
			append(section4, t39);
			mount_component(samplecode4, section4, null);
			append(section4, t40);
			append(section4, p7);
			append(p7, t41);
			append(p7, a8);
			append(a8, t42);
			append(p7, t43);
			append(p7, a9);
			append(a9, t44);
			append(p7, t45);
			append(p7, a10);
			append(a10, t46);
			append(p7, t47);
			append(section4, t48);
			mount_component(samplecode5, section4, null);
			insert(target, t49, anchor);
			insert(target, section5, anchor);
			mount_component(heading4, section5, null);
			append(section5, t50);
			append(section5, p8);
			append(p8, t51);
			append(p8, a11);
			append(a11, t52);
			append(p8, t53);
			append(p8, a12);
			append(a12, t54);
			append(p8, t55);
			append(section5, t56);
			mount_component(samplecode6, section5, null);
			append(section5, t57);
			append(section5, p9);
			append(p9, t58);
			append(p9, code0);
			append(code0, t59);
			append(p9, t60);
			append(p9, code1);
			append(code1, t61);
			append(p9, t62);
			append(section5, t63);
			mount_component(samplecode7, section5, null);
			insert(target, t64, anchor);
			mount_component(examples, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var heading4_changes = {};
			if (changed.$$scope) heading4_changes.$$scope = { changed, ctx };
			heading4.$set(heading4_changes);
		},

		i: function intro(local) {
			if (current) return;
			samplecode0.$$.fragment.i(local);

			heading0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			samplecode3.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			samplecode4.$$.fragment.i(local);

			samplecode5.$$.fragment.i(local);

			heading4.$$.fragment.i(local);

			samplecode6.$$.fragment.i(local);

			samplecode7.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode0.$$.fragment.o(local);
			heading0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			samplecode3.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			samplecode4.$$.fragment.o(local);
			samplecode5.$$.fragment.o(local);
			heading4.$$.fragment.o(local);
			samplecode6.$$.fragment.o(local);
			samplecode7.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section0);
			}

			samplecode0.$destroy();

			if (detaching) {
				detach(t8);
				detach(section1);
			}

			heading0.$destroy();

			if (detaching) {
				detach(t15);
				detach(section2);
			}

			heading1.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t21);
				detach(section3);
			}

			heading2.$destroy();

			samplecode2.$destroy();

			samplecode3.$destroy();

			if (detaching) {
				detach(t34);
				detach(section4);
			}

			heading3.$destroy();

			samplecode4.$destroy();

			samplecode5.$destroy();

			if (detaching) {
				detach(t49);
				detach(section5);
			}

			heading4.$destroy();

			samplecode6.$destroy();

			samplecode7.$destroy();

			if (detaching) {
				detach(t64);
			}

			examples.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Integrating with Svelte";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

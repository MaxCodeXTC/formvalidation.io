import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, w as empty, x as group_outros, z as check_outros, I as destroy_each, y as on_outro } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import { a as Cards, b as Card } from './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';

/* src/routes/guide/plugins/icon/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/plugins/icon/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.p = list[i];
	return child_ctx;
}

// (10:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Usage");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Usage");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (56:12) {#each _frameworks as p}
function create_each_block(ctx) {
	var current;

	var card = new Card({
		props: {
		target: "/guide/plugins/" + ctx.p.toLowerCase(),
		title: ctx.p
	},
		$$inline: true
	});

	return {
		c: function create() {
			card.$$.fragment.c();
		},

		l: function claim(nodes) {
			card.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var card_changes = {};
			if (changed._frameworks) card_changes.target = "/guide/plugins/" + ctx.p.toLowerCase();
			if (changed._frameworks) card_changes.title = ctx.p;
			card.$set(card_changes);
		},

		i: function intro(local) {
			if (current) return;
			card.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			card.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			card.$destroy(detaching);
		}
	};
}

// (55:8) <Cards>
function create_default_slot_5(ctx) {
	var each_1_anchor, current;

	var each_value = ctx._frameworks;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	function outro_block(i, detaching, local) {
		if (each_blocks[i]) {
			if (detaching) {
				on_outro(() => {
					each_blocks[i].d(detaching);
					each_blocks[i] = null;
				});
			}

			each_blocks[i].o(local);
		}
	}

	return {
		c: function create() {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},

		l: function claim(nodes) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},

		m: function mount(target, anchor) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			if (changed._frameworks) {
				each_value = ctx._frameworks;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						each_blocks[i].i(1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].i(1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();
				for (; i < each_blocks.length; i += 1) outro_block(i, 1, 1);
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			for (var i = 0; i < each_value.length; i += 1) each_blocks[i].i();

			current = true;
		},

		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) outro_block(i, 0);

			current = false;
		},

		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach(each_1_anchor);
			}
		}
	};
}

// (61:8) <Tip>
function create_default_slot_4(ctx) {
	var t0, a, t1, t2;

	return {
		c: function create() {
			t0 = text("The ");
			a = element("a");
			t1 = text("MandatoryIcon");
			t2 = text(" plugin is useful when you want to display the mandatory icon for required fields");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "The ");

			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t1 = claim_text(a_nodes, "MandatoryIcon");
			a_nodes.forEach(detach);
			t2 = claim_text(nodes, " plugin is useful when you want to display the mandatory icon for required fields");
			this.h();
		},

		h: function hydrate() {
			a.href = "/guide/plugins/mandatory-icon";
			a.className = "blue dim link";
			add_location(a, file, 60, 17, 2407);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a, anchor);
			append(a, t1);
			insert(target, t2, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(a);
				detach(t2);
			}
		}
	};
}

// (65:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changelog");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changelog");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (85:12) <PrevButton target="/guide/plugins/foundation">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Foundation plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Foundation plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (86:12) <NextButton target="/guide/plugins/j">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("J plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "J plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, p0, t5, t6, t7, p1, t8, code0, t9, t10, t11, p2, t12, code1, t13, t14, code2, t15, t16, code3, t17, t18, t19, p3, t20, t21, t22, t23, section1, t24, ul, li, t25, t26, t27, section2, div, t28, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="demoForm" method="POST">
        ...
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>    
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                icon: new FormValidation.plugins.Icon({
                    // Following is the default values
                    valid: 'fv-plugins-icon--valid',
                    invalid: 'fv-plugins-icon--invalid',
                    validating: 'fv-plugins-icon--validating',
                }),
                ...
            },
        }
    );
});
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var cards = new Cards({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var tip = new Tip({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Adjusting icon position',
        'Clearing field when clicking the icon',
        'Showing icons in custom area',
        'Using FontAwesome icons',
        'Using Glyphicons icons',
        'Using Material Design icons',
        'Using Semantic UI framework icons',
        'Using Spectre framework icons',
        'Using SVG icons',
    ] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/plugins/foundation",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/plugins/j",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Icon plugin");
			t1 = space();
			h2 = element("h2");
			t2 = text("Display various icons based on the field validity");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			p0 = element("p");
			t5 = text("With this plugin, you can see the icon whenever the field is being validated, and after the validation completes, it also displays other icon depending on the field is valid or not. \n            The following piece of code is the starting point to use the Icon plugin:");
			t6 = space();
			samplecode.$$.fragment.c();
			t7 = space();
			p1 = element("p");
			t8 = text("The sample code above assumes that the FormValidation files are placed inside the ");
			code0 = element("code");
			t9 = text("vendors");
			t10 = text(" directory. You might need to change the path depending on where you place them on the server.");
			t11 = space();
			p2 = element("p");
			t12 = text("The ");
			code1 = element("code");
			t13 = text("validating");
			t14 = text(", ");
			code2 = element("code");
			t15 = text("valid");
			t16 = text(" and ");
			code3 = element("code");
			t17 = text("invalid");
			t18 = text(" options present the list of CSS classes separated by a space that will be added to the icon when the field is being validated, valid or invalid.");
			t19 = space();
			p3 = element("p");
			t20 = text("The Icon plugin only supports the form made in the following CSS frameworks:");
			t21 = space();
			cards.$$.fragment.c();
			t22 = space();
			tip.$$.fragment.c();
			t23 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t24 = space();
			ul = element("ul");
			li = element("li");
			t25 = text("v1.0.0: First release");
			t26 = space();
			examples.$$.fragment.c();
			t27 = space();
			section2 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t28 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Icon plugin");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Display various icons based on the field validity");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t5 = claim_text(p0_nodes, "With this plugin, you can see the icon whenever the field is being validated, and after the validation completes, it also displays other icon depending on the field is valid or not. \n            The following piece of code is the starting point to use the Icon plugin:");
			p0_nodes.forEach(detach);
			t6 = claim_text(section0_nodes, "\n");
			samplecode.$$.fragment.l(section0_nodes);
			t7 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t8 = claim_text(p1_nodes, "The sample code above assumes that the FormValidation files are placed inside the ");

			code0 = claim_element(p1_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t9 = claim_text(code0_nodes, "vendors");
			code0_nodes.forEach(detach);
			t10 = claim_text(p1_nodes, " directory. You might need to change the path depending on where you place them on the server.");
			p1_nodes.forEach(detach);
			t11 = claim_text(section0_nodes, "\n\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t12 = claim_text(p2_nodes, "The ");

			code1 = claim_element(p2_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t13 = claim_text(code1_nodes, "validating");
			code1_nodes.forEach(detach);
			t14 = claim_text(p2_nodes, ", ");

			code2 = claim_element(p2_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t15 = claim_text(code2_nodes, "valid");
			code2_nodes.forEach(detach);
			t16 = claim_text(p2_nodes, " and ");

			code3 = claim_element(p2_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t17 = claim_text(code3_nodes, "invalid");
			code3_nodes.forEach(detach);
			t18 = claim_text(p2_nodes, " options present the list of CSS classes separated by a space that will be added to the icon when the field is being validated, valid or invalid.");
			p2_nodes.forEach(detach);
			t19 = claim_text(section0_nodes, "\n        ");

			p3 = claim_element(section0_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t20 = claim_text(p3_nodes, "The Icon plugin only supports the form made in the following CSS frameworks:");
			p3_nodes.forEach(detach);
			t21 = claim_text(section0_nodes, "\n\n        ");
			cards.$$.fragment.l(section0_nodes);
			t22 = claim_text(section0_nodes, "\n\n        ");
			tip.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t23 = claim_text(nodes, "\n    \n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t24 = claim_text(section1_nodes, "\n        ");

			ul = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li = claim_element(ul_nodes, "LI", {}, false);
			var li_nodes = children(li);

			t25 = claim_text(li_nodes, "v1.0.0: First release");
			li_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t26 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			t27 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			div = claim_element(section2_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t28 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 93);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 142);
			p0.className = "lh-copy";
			add_location(p0, file, 10, 8, 287);
			add_location(code0, file, 49, 109, 1741);
			p1.className = "lh-copy";
			add_location(p1, file, 49, 8, 1640);
			add_location(code1, file, 51, 31, 1892);
			add_location(code2, file, 51, 56, 1917);
			add_location(code3, file, 51, 79, 1940);
			p2.className = "lh-copy";
			add_location(p2, file, 51, 8, 1869);
			p3.className = "lh-copy";
			add_location(p3, file, 52, 8, 2118);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 224);
			add_location(li, file, 66, 12, 2710);
			ul.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul, file, 65, 8, 2665);
			section1.className = "mv5";
			add_location(section1, file, 63, 4, 2598);
			div.className = "flex";
			add_location(div, file, 83, 8, 3187);
			section2.className = "mv5";
			add_location(section2, file, 82, 4, 3157);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, p0);
			append(p0, t5);
			append(section0, t6);
			mount_component(samplecode, section0, null);
			append(section0, t7);
			append(section0, p1);
			append(p1, t8);
			append(p1, code0);
			append(code0, t9);
			append(p1, t10);
			append(section0, t11);
			append(section0, p2);
			append(p2, t12);
			append(p2, code1);
			append(code1, t13);
			append(p2, t14);
			append(p2, code2);
			append(code2, t15);
			append(p2, t16);
			append(p2, code3);
			append(code3, t17);
			append(p2, t18);
			append(section0, t19);
			append(section0, p3);
			append(p3, t20);
			append(section0, t21);
			mount_component(cards, section0, null);
			append(section0, t22);
			mount_component(tip, section0, null);
			insert(target, t23, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t24);
			append(section1, ul);
			append(ul, li);
			append(li, t25);
			insert(target, t26, anchor);
			mount_component(examples, target, anchor);
			insert(target, t27, anchor);
			insert(target, section2, anchor);
			append(section2, div);
			mount_component(prevbutton, div, null);
			append(div, t28);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var cards_changes = {};
			if (changed.$$scope) cards_changes.$$scope = { changed, ctx };
			cards.$set(cards_changes);

			var tip_changes = {};
			if (changed.$$scope) tip_changes.$$scope = { changed, ctx };
			tip.$set(tip_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode.$$.fragment.i(local);

			cards.$$.fragment.i(local);

			tip.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode.$$.fragment.o(local);
			cards.$$.fragment.o(local);
			tip.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			samplecode.$destroy();

			cards.$destroy();

			tip.$destroy();

			if (detaching) {
				detach(t23);
				detach(section1);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t26);
			}

			examples.$destroy(detaching);

			if (detaching) {
				detach(t27);
				detach(section2);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Icon plugin";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

function instance($$self) {
	

const _frameworks = [
    'Bootstrap', 'Bootstrap3', 'Bulma', 'Foundation', 'Materialize', 'Milligram', 'mini', 'MUI',
    'Pure', 'Semantic', 'Shoelace', 'Spectre', 'Tachyons', 'Turret', 'UIkit',
];

	return { _frameworks };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export default Index;

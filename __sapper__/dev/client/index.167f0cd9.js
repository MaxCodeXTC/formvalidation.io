import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, k as claim_element, l as children, n as add_location, i as text, p as append, z as check_outros, I as destroy_each, y as on_outro, x as group_outros } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';
import { a as SampleData } from './chunk.41999a23.js';

/* src/routes/guide/validators/email-address/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/validators/email-address/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.sample = list[i];
	return child_ctx;
}

// (10:8) <Heading>
function create_default_slot_7(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (40:8) <Tip>
function create_default_slot_6(ctx) {
	var t0, a, t1, t2;

	return {
		c: function create() {
			t0 = text("This validator passes an empty field since the field might be optional. If the field is required, then use the ");
			a = element("a");
			t1 = text("notEmpty");
			t2 = text(" validator");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "This validator passes an empty field since the field might be optional. If the field is required, then use the ");

			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t1 = claim_text(a_nodes, "notEmpty");
			a_nodes.forEach(detach);
			t2 = claim_text(nodes, " validator");
			this.h();
		},

		h: function hydrate() {
			a.href = "/guide/validators/not-empty";
			a.className = "blue dim link";
			add_location(a, file, 39, 124, 2199);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a, anchor);
			append(a, t1);
			insert(target, t2, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(a);
				detach(t2);
			}
		}
	};
}

// (67:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (75:12) {#each _samples as sample}
function create_each_block(ctx) {
	var tr, current;

	var sampledata = new SampleData({
		props: {
		sample: ctx.sample,
		sender: "/guide/validators/email-address/basic"
	},
		$$inline: true
	});

	return {
		c: function create() {
			tr = element("tr");
			sampledata.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", { class: true }, false);
			var tr_nodes = children(tr);

			sampledata.$$.fragment.l(tr_nodes);
			tr_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			tr.className = "striped--light-gray";
			add_location(tr, file, 75, 12, 3531);
		},

		m: function mount(target, anchor) {
			insert(target, tr, anchor);
			mount_component(sampledata, tr, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var sampledata_changes = {};
			if (changed._samples) sampledata_changes.sample = ctx.sample;
			sampledata.$set(sampledata_changes);
		},

		i: function intro(local) {
			if (current) return;
			sampledata.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			sampledata.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(tr);
			}

			sampledata.$destroy();
		}
	};
}

// (86:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("HTML5 Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "HTML5 Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (92:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("ES6 Module Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "ES6 Module Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (125:12) <PrevButton target="/guide/validators/ein">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("ein validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "ein validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (126:12) <NextButton target="/guide/validators/file">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("file validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "file validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, h30, t5, t6, p0, t7, a0, t8, t9, t10, table0, tr0, th0, t11, t12, th1, t13, t14, th2, t15, t16, th3, t17, t18, tr1, td0, code0, t19, t20, td1, code1, t21, t22, td2, t23, t24, td3, t25, t26, tr2, td4, code2, t27, t28, td5, code3, t29, t30, td6, t31, t32, td7, t33, code4, t34, t35, tr3, td8, code5, t36, t37, td9, code6, t38, t39, td10, t40, t41, td11, t42, t43, t44, p1, t45, a1, t46, t47, a2, t48, t49, t50, h31, t51, t52, t53, section1, t54, p2, t55, t56, table1, tr4, th4, t57, t58, th5, t59, t60, t61, t62, section2, t63, p3, t64, a3, t65, t66, code7, t67, t68, t69, t70, section3, t71, p4, t72, t73, t74, t75, t76, section4, div, t77, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var tip = new Tip({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import emailAddress from 'formvalidation/dist/es6/validators/emailAddress';

const result = emailAddress().validate({
    value: ...,
    options: {
        message: ...,
        multiple: ...,
        separator: ...,
    },
});
/*
result is an object of
{
    valid: true or false,
    message: The error message
}
*/
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var each_value = ctx._samples;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	function outro_block(i, detaching, local) {
		if (each_blocks[i]) {
			if (detaching) {
				on_outro(() => {
					each_blocks[i].d(detaching);
					each_blocks[i] = null;
				});
			}

			each_blocks[i].o(local);
		}
	}

	var demo0 = new Demo({
		props: {
		prefix: "/guide/validators/email-address/basic",
		frameworks: ['bootstrap', 'tachyons']
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/validators/email-address/html5",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import emailAddress from 'formvalidation/dist/es6/validators/emailAddress';

const res1 = emailAddress().validate({
    value: 'niceandsimple@example.com',
    options: {
        message: 'The value is not a valid email address',
    },
});
// res1.valid === true

const res2 = emailAddress().validate({
    value: 'just"not"right@example.com',
    options: {
        message: 'The value is not a valid email address',
    },
});
// res2.valid === false
` },
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Is a@b valid email address',
    ] },
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['regexp'] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/validators/ein",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/validators/file",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("emailAddress validator");
			t1 = space();
			h2 = element("h2");
			t2 = text("Validate an email address");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			h30 = element("h3");
			t5 = text("Using with form field");
			t6 = space();
			p0 = element("p");
			t7 = text("The HTML attributes are used to set the validator options via the ");
			a0 = element("a");
			t8 = text("Declarative");
			t9 = text(" plugin");
			t10 = space();
			table0 = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t11 = text("Name");
			t12 = space();
			th1 = element("th");
			t13 = text("HTML attribute");
			t14 = space();
			th2 = element("th");
			t15 = text("Type");
			t16 = space();
			th3 = element("th");
			t17 = text("Description");
			t18 = space();
			tr1 = element("tr");
			td0 = element("td");
			code0 = element("code");
			t19 = text("message");
			t20 = space();
			td1 = element("td");
			code1 = element("code");
			t21 = text("data-fv-email-address___message");
			t22 = space();
			td2 = element("td");
			t23 = text("String");
			t24 = space();
			td3 = element("td");
			t25 = text("The error message");
			t26 = space();
			tr2 = element("tr");
			td4 = element("td");
			code2 = element("code");
			t27 = text("multiple");
			t28 = space();
			td5 = element("td");
			code3 = element("code");
			t29 = text("data-fv-email-address___multiple");
			t30 = space();
			td6 = element("td");
			t31 = text("String");
			t32 = space();
			td7 = element("td");
			t33 = text("Allow multiple email addresses, separated by a comma or semicolon. The default value is ");
			code4 = element("code");
			t34 = text("false");
			t35 = space();
			tr3 = element("tr");
			td8 = element("td");
			code5 = element("code");
			t36 = text("separator");
			t37 = space();
			td9 = element("td");
			code6 = element("code");
			t38 = text("data-fv-email-address___separator");
			t39 = space();
			td10 = element("td");
			t40 = text("String");
			t41 = space();
			td11 = element("td");
			t42 = text("Regex for character or characters expected as separator between addresses. By default, it is /[,;]/, i.e. comma or semicolon");
			t43 = space();
			tip.$$.fragment.c();
			t44 = space();
			p1 = element("p");
			t45 = text("You also can use the ");
			a1 = element("a");
			t46 = text("remote");
			t47 = text(" validator to connect and validate the email address on the server. The ");
			a2 = element("a");
			t48 = text("Mailgun");
			t49 = text(" plugin demonstrates how to do this.");
			t50 = space();
			h31 = element("h3");
			t51 = text("Using with ES6 module");
			t52 = space();
			samplecode0.$$.fragment.c();
			t53 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t54 = space();
			p2 = element("p");
			t55 = text("You can click on sample to see if it's a valid or invalid email address.");
			t56 = space();
			table1 = element("table");
			tr4 = element("tr");
			th4 = element("th");
			t57 = text("Sample");
			t58 = space();
			th5 = element("th");
			t59 = text("Is valid?");
			t60 = space();

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t61 = space();
			demo0.$$.fragment.c();
			t62 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t63 = space();
			p3 = element("p");
			t64 = text("When the ");
			a3 = element("a");
			t65 = text("Declarative");
			t66 = text(" plugin is used, the emailAddress validator will be enabled automatically when using HTML5 ");
			code7 = element("code");
			t67 = text("type=\"email\"");
			t68 = text(" attribute.");
			t69 = space();
			demo1.$$.fragment.c();
			t70 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t71 = space();
			p4 = element("p");
			t72 = text("The following snippet shows how to use the emailAddress validator with ES6 module:");
			t73 = space();
			samplecode1.$$.fragment.c();
			t74 = space();
			examples.$$.fragment.c();
			t75 = space();
			relatedvalidators.$$.fragment.c();
			t76 = space();
			section4 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t77 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "emailAddress validator");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Validate an email address");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n\n        ");

			h30 = claim_element(section0_nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t5 = claim_text(h30_nodes, "Using with form field");
			h30_nodes.forEach(detach);
			t6 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t7 = claim_text(p0_nodes, "The HTML attributes are used to set the validator options via the ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t8 = claim_text(a0_nodes, "Declarative");
			a0_nodes.forEach(detach);
			t9 = claim_text(p0_nodes, " plugin");
			p0_nodes.forEach(detach);
			t10 = claim_text(section0_nodes, "\n        ");

			table0 = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table0_nodes = children(table0);

			tr0 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t11 = claim_text(th0_nodes, "Name");
			th0_nodes.forEach(detach);
			t12 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t13 = claim_text(th1_nodes, "HTML attribute");
			th1_nodes.forEach(detach);
			t14 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t15 = claim_text(th2_nodes, "Type");
			th2_nodes.forEach(detach);
			t16 = claim_text(tr0_nodes, "\n                ");

			th3 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th3_nodes = children(th3);

			t17 = claim_text(th3_nodes, "Description");
			th3_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t18 = claim_text(table0_nodes, "\n            ");

			tr1 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code0 = claim_element(td0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t19 = claim_text(code0_nodes, "message");
			code0_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t20 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			code1 = claim_element(td1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t21 = claim_text(code1_nodes, "data-fv-email-address___message");
			code1_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			t22 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t23 = claim_text(td2_nodes, "String");
			td2_nodes.forEach(detach);
			t24 = claim_text(tr1_nodes, "\n                ");

			td3 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			t25 = claim_text(td3_nodes, "The error message");
			td3_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t26 = claim_text(table0_nodes, "\n            ");

			tr2 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			code2 = claim_element(td4_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t27 = claim_text(code2_nodes, "multiple");
			code2_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t28 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			code3 = claim_element(td5_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t29 = claim_text(code3_nodes, "data-fv-email-address___multiple");
			code3_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			t30 = claim_text(tr2_nodes, "\n                ");

			td6 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			t31 = claim_text(td6_nodes, "String");
			td6_nodes.forEach(detach);
			t32 = claim_text(tr2_nodes, "\n                ");

			td7 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			t33 = claim_text(td7_nodes, "Allow multiple email addresses, separated by a comma or semicolon. The default value is ");

			code4 = claim_element(td7_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t34 = claim_text(code4_nodes, "false");
			code4_nodes.forEach(detach);
			td7_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t35 = claim_text(table0_nodes, "\n            ");

			tr3 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td8 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			code5 = claim_element(td8_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t36 = claim_text(code5_nodes, "separator");
			code5_nodes.forEach(detach);
			td8_nodes.forEach(detach);
			t37 = claim_text(tr3_nodes, "\n                ");

			td9 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			code6 = claim_element(td9_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t38 = claim_text(code6_nodes, "data-fv-email-address___separator");
			code6_nodes.forEach(detach);
			td9_nodes.forEach(detach);
			t39 = claim_text(tr3_nodes, "\n                ");

			td10 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td10_nodes = children(td10);

			t40 = claim_text(td10_nodes, "String");
			td10_nodes.forEach(detach);
			t41 = claim_text(tr3_nodes, "\n                ");

			td11 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td11_nodes = children(td11);

			t42 = claim_text(td11_nodes, "Regex for character or characters expected as separator between addresses. By default, it is /[,;]/, i.e. comma or semicolon");
			td11_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			table0_nodes.forEach(detach);
			t43 = claim_text(section0_nodes, "\n        ");
			tip.$$.fragment.l(section0_nodes);
			t44 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t45 = claim_text(p1_nodes, "You also can use the ");

			a1 = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t46 = claim_text(a1_nodes, "remote");
			a1_nodes.forEach(detach);
			t47 = claim_text(p1_nodes, " validator to connect and validate the email address on the server. The ");

			a2 = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t48 = claim_text(a2_nodes, "Mailgun");
			a2_nodes.forEach(detach);
			t49 = claim_text(p1_nodes, " plugin demonstrates how to do this.");
			p1_nodes.forEach(detach);
			t50 = claim_text(section0_nodes, "\n\n        ");

			h31 = claim_element(section0_nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t51 = claim_text(h31_nodes, "Using with ES6 module");
			h31_nodes.forEach(detach);
			t52 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t53 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t54 = claim_text(section1_nodes, "\n\n        ");

			p2 = claim_element(section1_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t55 = claim_text(p2_nodes, "You can click on sample to see if it's a valid or invalid email address.");
			p2_nodes.forEach(detach);
			t56 = claim_text(section1_nodes, "\n        ");

			table1 = claim_element(section1_nodes, "TABLE", { class: true }, false);
			var table1_nodes = children(table1);

			tr4 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			th4 = claim_element(tr4_nodes, "TH", { class: true }, false);
			var th4_nodes = children(th4);

			t57 = claim_text(th4_nodes, "Sample");
			th4_nodes.forEach(detach);
			t58 = claim_text(tr4_nodes, "\n                ");

			th5 = claim_element(tr4_nodes, "TH", { class: true }, false);
			var th5_nodes = children(th5);

			t59 = claim_text(th5_nodes, "Is valid?");
			th5_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			t60 = claim_text(table1_nodes, "\n            ");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(table1_nodes);
			}

			table1_nodes.forEach(detach);
			t61 = claim_text(section1_nodes, "\n\n        ");
			demo0.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t62 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t63 = claim_text(section2_nodes, "\n        ");

			p3 = claim_element(section2_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t64 = claim_text(p3_nodes, "When the ");

			a3 = claim_element(p3_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t65 = claim_text(a3_nodes, "Declarative");
			a3_nodes.forEach(detach);
			t66 = claim_text(p3_nodes, " plugin is used, the emailAddress validator will be enabled automatically when using HTML5 ");

			code7 = claim_element(p3_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t67 = claim_text(code7_nodes, "type=\"email\"");
			code7_nodes.forEach(detach);
			t68 = claim_text(p3_nodes, " attribute.");
			p3_nodes.forEach(detach);
			t69 = claim_text(section2_nodes, "\n        ");
			demo1.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t70 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t71 = claim_text(section3_nodes, "\n\n        ");

			p4 = claim_element(section3_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t72 = claim_text(p4_nodes, "The following snippet shows how to use the emailAddress validator with ES6 module:");
			p4_nodes.forEach(detach);
			t73 = claim_text(section3_nodes, "\n");
			samplecode1.$$.fragment.l(section3_nodes);
			section3_nodes.forEach(detach);
			t74 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			t75 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			t76 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			div = claim_element(section4_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t77 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section4_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 104);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 164);
			add_location(h30, file, 11, 8, 288);
			a0.href = "/guide/plugins/declarative";
			a0.className = "blue dim link";
			add_location(a0, file, 12, 95, 414);
			p0.className = "lh-copy i";
			add_location(p0, file, 12, 8, 327);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 15, 16, 627);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 16, 16, 687);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 17, 16, 757);
			th3.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th3, file, 18, 16, 817);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 14, 12, 578);
			add_location(code0, file, 21, 36, 967);
			td0.className = "pv2 ph3";
			add_location(td0, file, 21, 16, 947);
			add_location(code1, file, 22, 36, 1029);
			td1.className = "pv2 ph3";
			add_location(td1, file, 22, 16, 1009);
			td2.className = "pv2 ph3";
			add_location(td2, file, 23, 16, 1095);
			td3.className = "pv2 ph3";
			add_location(td3, file, 24, 16, 1143);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 20, 12, 898);
			add_location(code2, file, 27, 36, 1285);
			td4.className = "pv2 ph3";
			add_location(td4, file, 27, 16, 1265);
			add_location(code3, file, 28, 36, 1348);
			td5.className = "pv2 ph3";
			add_location(td5, file, 28, 16, 1328);
			td6.className = "pv2 ph3";
			add_location(td6, file, 29, 16, 1415);
			add_location(code4, file, 30, 132, 1579);
			td7.className = "pv2 ph3 lh-copy";
			add_location(td7, file, 30, 16, 1463);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 26, 12, 1216);
			add_location(code5, file, 33, 36, 1702);
			td8.className = "pv2 ph3";
			add_location(td8, file, 33, 16, 1682);
			add_location(code6, file, 34, 36, 1766);
			td9.className = "pv2 ph3";
			add_location(td9, file, 34, 16, 1746);
			td10.className = "pv2 ph3";
			add_location(td10, file, 35, 16, 1834);
			td11.className = "pv2 ph3 lh-copy";
			add_location(td11, file, 36, 16, 1882);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 32, 12, 1633);
			table0.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table0, file, 13, 8, 508);
			a1.href = "/guide/validators/remote";
			a1.className = "blue dim link";
			add_location(a1, file, 40, 48, 2336);
			a2.href = "/guide/plugins/mailgun";
			a2.className = "blue dim link";
			add_location(a2, file, 40, 187, 2475);
			p1.className = "lh-copy";
			add_location(p1, file, 40, 8, 2296);
			add_location(h31, file, 42, 8, 2591);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 222);
			p2.className = "lh-copy";
			add_location(p2, file, 68, 8, 3124);
			th4.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th4, file, 71, 16, 3351);
			th5.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th5, file, 72, 16, 3413);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 70, 12, 3302);
			table1.className = "collapse ba br2 b--black-10 pv2 ph3 w-100 mb4";
			add_location(table1, file, 69, 8, 3228);
			section1.className = "mv5";
			add_location(section1, file, 65, 4, 3052);
			a3.href = "/guide/plugins/declarative";
			a3.className = "blue dim link";
			add_location(a3, file, 86, 36, 3936);
			add_location(code7, file, 86, 201, 4101);
			p3.className = "lh-copy";
			add_location(p3, file, 86, 8, 3908);
			section2.className = "mv5";
			add_location(section2, file, 84, 4, 3837);
			p4.className = "lh-copy";
			add_location(p4, file, 93, 8, 4329);
			section3.className = "mv5";
			add_location(section3, file, 90, 4, 4252);
			div.className = "flex";
			add_location(div, file, 123, 8, 5156);
			section4.className = "mv5";
			add_location(section4, file, 122, 4, 5126);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, h30);
			append(h30, t5);
			append(section0, t6);
			append(section0, p0);
			append(p0, t7);
			append(p0, a0);
			append(a0, t8);
			append(p0, t9);
			append(section0, t10);
			append(section0, table0);
			append(table0, tr0);
			append(tr0, th0);
			append(th0, t11);
			append(tr0, t12);
			append(tr0, th1);
			append(th1, t13);
			append(tr0, t14);
			append(tr0, th2);
			append(th2, t15);
			append(tr0, t16);
			append(tr0, th3);
			append(th3, t17);
			append(table0, t18);
			append(table0, tr1);
			append(tr1, td0);
			append(td0, code0);
			append(code0, t19);
			append(tr1, t20);
			append(tr1, td1);
			append(td1, code1);
			append(code1, t21);
			append(tr1, t22);
			append(tr1, td2);
			append(td2, t23);
			append(tr1, t24);
			append(tr1, td3);
			append(td3, t25);
			append(table0, t26);
			append(table0, tr2);
			append(tr2, td4);
			append(td4, code2);
			append(code2, t27);
			append(tr2, t28);
			append(tr2, td5);
			append(td5, code3);
			append(code3, t29);
			append(tr2, t30);
			append(tr2, td6);
			append(td6, t31);
			append(tr2, t32);
			append(tr2, td7);
			append(td7, t33);
			append(td7, code4);
			append(code4, t34);
			append(table0, t35);
			append(table0, tr3);
			append(tr3, td8);
			append(td8, code5);
			append(code5, t36);
			append(tr3, t37);
			append(tr3, td9);
			append(td9, code6);
			append(code6, t38);
			append(tr3, t39);
			append(tr3, td10);
			append(td10, t40);
			append(tr3, t41);
			append(tr3, td11);
			append(td11, t42);
			append(section0, t43);
			mount_component(tip, section0, null);
			append(section0, t44);
			append(section0, p1);
			append(p1, t45);
			append(p1, a1);
			append(a1, t46);
			append(p1, t47);
			append(p1, a2);
			append(a2, t48);
			append(p1, t49);
			append(section0, t50);
			append(section0, h31);
			append(h31, t51);
			append(section0, t52);
			mount_component(samplecode0, section0, null);
			insert(target, t53, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t54);
			append(section1, p2);
			append(p2, t55);
			append(section1, t56);
			append(section1, table1);
			append(table1, tr4);
			append(tr4, th4);
			append(th4, t57);
			append(tr4, t58);
			append(tr4, th5);
			append(th5, t59);
			append(table1, t60);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(table1, null);
			}

			append(section1, t61);
			mount_component(demo0, section1, null);
			insert(target, t62, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t63);
			append(section2, p3);
			append(p3, t64);
			append(p3, a3);
			append(a3, t65);
			append(p3, t66);
			append(p3, code7);
			append(code7, t67);
			append(p3, t68);
			append(section2, t69);
			mount_component(demo1, section2, null);
			insert(target, t70, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t71);
			append(section3, p4);
			append(p4, t72);
			append(section3, t73);
			mount_component(samplecode1, section3, null);
			insert(target, t74, anchor);
			mount_component(examples, target, anchor);
			insert(target, t75, anchor);
			mount_component(relatedvalidators, target, anchor);
			insert(target, t76, anchor);
			insert(target, section4, anchor);
			append(section4, div);
			mount_component(prevbutton, div, null);
			append(div, t77);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var tip_changes = {};
			if (changed.$$scope) tip_changes.$$scope = { changed, ctx };
			tip.$set(tip_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			if (changed._samples) {
				each_value = ctx._samples;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						each_blocks[i].i(1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].i(1);
						each_blocks[i].m(table1, null);
					}
				}

				group_outros();
				for (; i < each_blocks.length; i += 1) outro_block(i, 1, 1);
				check_outros();
			}

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			tip.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			for (var i = 0; i < each_value.length; i += 1) each_blocks[i].i();

			demo0.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			tip.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);

			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) outro_block(i, 0);

			demo0.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			tip.$destroy();

			samplecode0.$destroy();

			if (detaching) {
				detach(t53);
				detach(section1);
			}

			heading1.$destroy();

			destroy_each(each_blocks, detaching);

			demo0.$destroy();

			if (detaching) {
				detach(t62);
				detach(section2);
			}

			heading2.$destroy();

			demo1.$destroy();

			if (detaching) {
				detach(t70);
				detach(section3);
			}

			heading3.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t74);
			}

			examples.$destroy(detaching);

			if (detaching) {
				detach(t75);
			}

			relatedvalidators.$destroy(detaching);

			if (detaching) {
				detach(t76);
				detach(section4);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • emailAddress validator";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

function instance($$self) {
	

const _samples = [
    // Valid
    'niceandsimple@example.com', 'very.common@example.com', 'a.little.lengthy.but.fine@dept.example.com',
    'disposable.style.email.with+symbol@example.com', 'other.email-with-dash@example.com',
    '"much.more unusual"@example.com', '"very.unusual.@.unusual.com"@example.com',
    '"very.(),:;<>[]\".VERY.\"very@\\ \"very\".unusual"@strange.example.com',
    'admin@mailserver1', '"!#$%&*+-/=?^_{}`|~@example.org"',
    '" "@example.org', 'üñîçøðé@example.com',
    // Invalid
    'üñîçøðé@üñîçøðé.com', 'Abc.example.com', 'A@b@c@example.com',
    'a"b(c)d,e:f;g<h>i[j\k]l@example.com', 'just"not"right@example.com',
    'this is"not\allowed@example.com', 'this\ still\"not\\allowed@example.com',
];

	return { _samples };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export default Index;

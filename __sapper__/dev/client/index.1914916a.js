import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, w as empty, x as group_outros, z as check_outros, I as destroy_each, y as on_outro, r as noop } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import { a as Cards, b as Card } from './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout, b as AllValidators, c as camelCaseToDash } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';

/* src/routes/guide/validators/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/validators/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.v = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.v = list[i];
	return child_ctx;
}

// (14:8) <Heading>
function create_default_slot_11(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Popular validators");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Popular validators");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (19:12) <Card target="/guide/validators/{camelCaseToDash(v.name)}" title="{v.name}">
function create_default_slot_10(ctx) {
	var t_value = ctx.v.description, t;

	return {
		c: function create() {
			t = text(t_value);
		},

		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (18:8) {#each PopularValidators as v}
function create_each_block_1(ctx) {
	var current;

	var card = new Card({
		props: {
		target: "/guide/validators/" + camelCaseToDash(ctx.v.name),
		title: ctx.v.name,
		$$slots: { default: [create_default_slot_10] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			card.$$.fragment.c();
		},

		l: function claim(nodes) {
			card.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var card_changes = {};
			if (changed.camelCaseToDash || changed.PopularValidators) card_changes.target = "/guide/validators/" + camelCaseToDash(ctx.v.name);
			if (changed.PopularValidators) card_changes.title = ctx.v.name;
			if (changed.$$scope) card_changes.$$scope = { changed, ctx };
			card.$set(card_changes);
		},

		i: function intro(local) {
			if (current) return;
			card.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			card.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			card.$destroy(detaching);
		}
	};
}

// (17:8) <Cards>
function create_default_slot_9(ctx) {
	var each_1_anchor, current;

	var each_value_1 = ctx.PopularValidators;

	var each_blocks = [];

	for (var i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	function outro_block(i, detaching, local) {
		if (each_blocks[i]) {
			if (detaching) {
				on_outro(() => {
					each_blocks[i].d(detaching);
					each_blocks[i] = null;
				});
			}

			each_blocks[i].o(local);
		}
	}

	return {
		c: function create() {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},

		l: function claim(nodes) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},

		m: function mount(target, anchor) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			if (changed.camelCaseToDash || changed.PopularValidators) {
				each_value_1 = ctx.PopularValidators;

				for (var i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						each_blocks[i].i(1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].i(1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();
				for (; i < each_blocks.length; i += 1) outro_block(i, 1, 1);
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			for (var i = 0; i < each_value_1.length; i += 1) each_blocks[i].i();

			current = true;
		},

		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) outro_block(i, 0);

			current = false;
		},

		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach(each_1_anchor);
			}
		}
	};
}

// (25:8) <Heading>
function create_default_slot_8(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Special validators");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Special validators");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (30:12) <Card target="/guide/validators/{camelCaseToDash(v.name)}" title="{v.name}">
function create_default_slot_7(ctx) {
	var t_value = ctx.v.description, t;

	return {
		c: function create() {
			t = text(t_value);
		},

		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (29:8) {#each SpecialValidators as v}
function create_each_block(ctx) {
	var current;

	var card = new Card({
		props: {
		target: "/guide/validators/" + camelCaseToDash(ctx.v.name),
		title: ctx.v.name,
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			card.$$.fragment.c();
		},

		l: function claim(nodes) {
			card.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var card_changes = {};
			if (changed.camelCaseToDash || changed.SpecialValidators) card_changes.target = "/guide/validators/" + camelCaseToDash(ctx.v.name);
			if (changed.SpecialValidators) card_changes.title = ctx.v.name;
			if (changed.$$scope) card_changes.$$scope = { changed, ctx };
			card.$set(card_changes);
		},

		i: function intro(local) {
			if (current) return;
			card.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			card.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			card.$destroy(detaching);
		}
	};
}

// (28:8) <Cards>
function create_default_slot_6(ctx) {
	var each_1_anchor, current;

	var each_value = ctx.SpecialValidators;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	function outro_block(i, detaching, local) {
		if (each_blocks[i]) {
			if (detaching) {
				on_outro(() => {
					each_blocks[i].d(detaching);
					each_blocks[i] = null;
				});
			}

			each_blocks[i].o(local);
		}
	}

	return {
		c: function create() {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},

		l: function claim(nodes) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},

		m: function mount(target, anchor) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			if (changed.camelCaseToDash || changed.SpecialValidators) {
				each_value = ctx.SpecialValidators;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						each_blocks[i].i(1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].i(1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();
				for (; i < each_blocks.length; i += 1) outro_block(i, 1, 1);
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			for (var i = 0; i < each_value.length; i += 1) each_blocks[i].i();

			current = true;
		},

		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) outro_block(i, 0);

			current = false;
		},

		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach(each_1_anchor);
			}
		}
	};
}

// (34:8) <Tip>
function create_default_slot_5(ctx) {
	var t0, a, t1, t2;

	return {
		c: function create() {
			t0 = text("Look at the ");
			a = element("a");
			t1 = text("custom validator");
			t2 = text(" page to see how you can create and reuse your own validator");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "Look at the ");

			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t1 = claim_text(a_nodes, "custom validator");
			a_nodes.forEach(detach);
			t2 = claim_text(nodes, " page to see how you can create and reuse your own validator");
			this.h();
		},

		h: function hydrate() {
			a.href = "/guide/examples/creating-a-custom-validator";
			a.className = "blue dim link";
			add_location(a, file, 33, 25, 1428);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a, anchor);
			append(a, t1);
			insert(target, t2, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(a);
				detach(t2);
			}
		}
	};
}

// (38:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Using validator globally");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Using validator globally");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (64:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Using validator in ES6 module");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Using validator in ES6 module");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (87:12) <PrevButton target="/guide/getting-started">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Getting started");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Getting started");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (88:12) <NextButton target="/guide/validators/base64">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("base64 validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "base64 validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, p0, t4, t5, section1, t6, p1, t7, code0, t8, t9, t10, t11, section2, t12, p2, t13, code1, t14, t15, t16, t17, t18, section3, t19, p3, t20, code2, t21, t22, code3, t23, t24, code4, t25, t26, t27, p4, t28, a0, t29, t30, t31, t32, section4, t33, p5, t34, a1, t35, t36, a2, t37, t38, a3, t39, t40, a4, t41, t42, t43, p6, t44, t45, t46, section5, div, t47, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_11] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var cards0 = new Cards({
		props: {
		$$slots: { default: [create_default_slot_9] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_8] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var cards1 = new Cards({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var tip = new Tip({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    // Now you can access the creditCard validator from 
    const result = FormValidation.validators.creditCard().validate({
        value: '340653705597107',
        options: {
            message: 'The credit card number is not valid',
        },
    });

    // result.valid === true
    // result.meta.type === 'AMERICAN_EXPRESS'
});
</script-tag>
` },
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import creditCard from 'formvalidation/dist/es6/validators/creditCard';

const result = creditCard().validate({
    value: '340653705597107',
    options: {
        message: 'The credit card number is not valid',
    },
});
// result.valid === true
// result.meta.type === 'AMERICAN_EXPRESS'
` },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/getting-started",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/validators/base64",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Validators");
			t1 = space();
			h2 = element("h2");
			t2 = text("The richest validators in the class");
			t3 = space();
			section0 = element("section");
			p0 = element("p");
			t4 = text("FormValidation comes with various built-in validators listed in the alphabetical order, split into two groups as following:");
			t5 = space();
			section1 = element("section");
			heading0.$$.fragment.c();
			t6 = space();
			p1 = element("p");
			t7 = text("In most cases, this list covers validators you often need. All these validators are included in the ");
			code0 = element("code");
			t8 = text("dist/js/FormValidation(.min).js");
			t9 = text(" file.");
			t10 = space();
			cards0.$$.fragment.c();
			t11 = space();
			section2 = element("section");
			heading1.$$.fragment.c();
			t12 = space();
			p2 = element("p");
			t13 = text("The following list includes special validators which you often don't need most of the times. In order to use them, you have to include the ");
			code1 = element("code");
			t14 = text("dist/js/FormValidation.full(.min).js");
			t15 = text(" file to your page.");
			t16 = space();
			cards1.$$.fragment.c();
			t17 = space();
			tip.$$.fragment.c();
			t18 = space();
			section3 = element("section");
			heading2.$$.fragment.c();
			t19 = space();
			p3 = element("p");
			t20 = text("You can use any validator globally under the namespace ");
			code2 = element("code");
			t21 = text("FormValidation.validators");
			t22 = text(" in browser if the page includes the ");
			code3 = element("code");
			t23 = text("FormValidation.min.js");
			t24 = text(" or ");
			code4 = element("code");
			t25 = text("FormValidation.full.min.js");
			t26 = text(" script.");
			t27 = space();
			p4 = element("p");
			t28 = text("The following sample code demonstrates how to use the ");
			a0 = element("a");
			t29 = text("creditCard");
			t30 = text(" validator to validate a credit card number:");
			t31 = space();
			samplecode0.$$.fragment.c();
			t32 = space();
			section4 = element("section");
			heading3.$$.fragment.c();
			t33 = space();
			p5 = element("p");
			t34 = text("All validators are able to be imported and used with ES6 module. It's super useful if you want to use validator with front-end frameworks (such as ");
			a1 = element("a");
			t35 = text("React");
			t36 = text(", \n            ");
			a2 = element("a");
			t37 = text("VueJS");
			t38 = text(", ");
			a3 = element("a");
			t39 = text("Svelte");
			t40 = text(", .etc), or in server environment with NodeJS frameworks (such as ");
			a4 = element("a");
			t41 = text("Express");
			t42 = text(").");
			t43 = space();
			p6 = element("p");
			t44 = text("The following snippet shows how to use the creditCard validator with ES6 module:");
			t45 = space();
			samplecode1.$$.fragment.c();
			t46 = space();
			section5 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t47 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Validators");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "The richest validators in the class");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t4 = claim_text(p0_nodes, "FormValidation comes with various built-in validators listed in the alphabetical order, split into two groups as following:");
			p0_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t5 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading0.$$.fragment.l(section1_nodes);
			t6 = claim_text(section1_nodes, "\n        ");

			p1 = claim_element(section1_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t7 = claim_text(p1_nodes, "In most cases, this list covers validators you often need. All these validators are included in the ");

			code0 = claim_element(p1_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t8 = claim_text(code0_nodes, "dist/js/FormValidation(.min).js");
			code0_nodes.forEach(detach);
			t9 = claim_text(p1_nodes, " file.");
			p1_nodes.forEach(detach);
			t10 = claim_text(section1_nodes, "\n\n        ");
			cards0.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t11 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading1.$$.fragment.l(section2_nodes);
			t12 = claim_text(section2_nodes, "\n        ");

			p2 = claim_element(section2_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t13 = claim_text(p2_nodes, "The following list includes special validators which you often don't need most of the times. In order to use them, you have to include the ");

			code1 = claim_element(p2_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t14 = claim_text(code1_nodes, "dist/js/FormValidation.full(.min).js");
			code1_nodes.forEach(detach);
			t15 = claim_text(p2_nodes, " file to your page.");
			p2_nodes.forEach(detach);
			t16 = claim_text(section2_nodes, "\n        \n        ");
			cards1.$$.fragment.l(section2_nodes);
			t17 = claim_text(section2_nodes, "\n\n        ");
			tip.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t18 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading2.$$.fragment.l(section3_nodes);
			t19 = claim_text(section3_nodes, "\n\n        ");

			p3 = claim_element(section3_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t20 = claim_text(p3_nodes, "You can use any validator globally under the namespace ");

			code2 = claim_element(p3_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t21 = claim_text(code2_nodes, "FormValidation.validators");
			code2_nodes.forEach(detach);
			t22 = claim_text(p3_nodes, " in browser if the page includes the ");

			code3 = claim_element(p3_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t23 = claim_text(code3_nodes, "FormValidation.min.js");
			code3_nodes.forEach(detach);
			t24 = claim_text(p3_nodes, " or ");

			code4 = claim_element(p3_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t25 = claim_text(code4_nodes, "FormValidation.full.min.js");
			code4_nodes.forEach(detach);
			t26 = claim_text(p3_nodes, " script.");
			p3_nodes.forEach(detach);
			t27 = claim_text(section3_nodes, "\n        ");

			p4 = claim_element(section3_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t28 = claim_text(p4_nodes, "The following sample code demonstrates how to use the ");

			a0 = claim_element(p4_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t29 = claim_text(a0_nodes, "creditCard");
			a0_nodes.forEach(detach);
			t30 = claim_text(p4_nodes, " validator to validate a credit card number:");
			p4_nodes.forEach(detach);
			t31 = claim_text(section3_nodes, "\n\n");
			samplecode0.$$.fragment.l(section3_nodes);
			section3_nodes.forEach(detach);
			t32 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			heading3.$$.fragment.l(section4_nodes);
			t33 = claim_text(section4_nodes, "\n\n        ");

			p5 = claim_element(section4_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t34 = claim_text(p5_nodes, "All validators are able to be imported and used with ES6 module. It's super useful if you want to use validator with front-end frameworks (such as ");

			a1 = claim_element(p5_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t35 = claim_text(a1_nodes, "React");
			a1_nodes.forEach(detach);
			t36 = claim_text(p5_nodes, ", \n            ");

			a2 = claim_element(p5_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t37 = claim_text(a2_nodes, "VueJS");
			a2_nodes.forEach(detach);
			t38 = claim_text(p5_nodes, ", ");

			a3 = claim_element(p5_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t39 = claim_text(a3_nodes, "Svelte");
			a3_nodes.forEach(detach);
			t40 = claim_text(p5_nodes, ", .etc), or in server environment with NodeJS frameworks (such as ");

			a4 = claim_element(p5_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t41 = claim_text(a4_nodes, "Express");
			a4_nodes.forEach(detach);
			t42 = claim_text(p5_nodes, ").");
			p5_nodes.forEach(detach);
			t43 = claim_text(section4_nodes, "\n        ");

			p6 = claim_element(section4_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t44 = claim_text(p6_nodes, "The following snippet shows how to use the creditCard validator with ES6 module:");
			p6_nodes.forEach(detach);
			t45 = claim_text(section4_nodes, "\n");
			samplecode1.$$.fragment.l(section4_nodes);
			section4_nodes.forEach(detach);
			t46 = claim_text(nodes, "\n\n    ");

			section5 = claim_element(nodes, "SECTION", { class: true }, false);
			var section5_nodes = children(section5);

			div = claim_element(section5_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t47 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section5_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 92);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 140);
			p0.className = "lh-copy";
			add_location(p0, file, 9, 8, 238);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 208);
			add_location(code0, file, 14, 127, 600);
			p1.className = "lh-copy";
			add_location(p1, file, 14, 8, 481);
			section1.className = "mv5";
			add_location(section1, file, 12, 4, 405);
			add_location(code1, file, 25, 166, 1121);
			p2.className = "lh-copy";
			add_location(p2, file, 25, 8, 963);
			section2.className = "mv5";
			add_location(section2, file, 23, 4, 887);
			add_location(code2, file, 39, 82, 1768);
			add_location(code3, file, 39, 157, 1843);
			add_location(code4, file, 39, 195, 1881);
			p3.className = "lh-copy";
			add_location(p3, file, 39, 8, 1694);
			a0.href = "/guide/validators/credit-card";
			a0.className = "blue dim link";
			add_location(a0, file, 40, 81, 2014);
			p4.className = "lh-copy";
			add_location(p4, file, 40, 8, 1941);
			section3.className = "mv5";
			add_location(section3, file, 36, 4, 1611);
			a1.href = "https://reactjs.org";
			a1.className = "blue dim link";
			add_location(a1, file, 65, 174, 2965);
			a2.href = "https://vuejs.org";
			a2.className = "blue dim link";
			add_location(a2, file, 66, 12, 3041);
			a3.href = "https://svelte.technology";
			a3.className = "blue dim link";
			add_location(a3, file, 66, 73, 3102);
			a4.href = "https://expressjs.com";
			a4.className = "blue dim link";
			add_location(a4, file, 66, 207, 3236);
			p5.className = "lh-copy";
			add_location(p5, file, 65, 8, 2799);
			p6.className = "lh-copy";
			add_location(p6, file, 68, 8, 3325);
			section4.className = "mv5";
			add_location(section4, file, 62, 4, 2711);
			div.className = "flex";
			add_location(div, file, 85, 8, 3862);
			section5.className = "mv5";
			add_location(section5, file, 84, 4, 3832);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			append(section0, p0);
			append(p0, t4);
			insert(target, t5, anchor);
			insert(target, section1, anchor);
			mount_component(heading0, section1, null);
			append(section1, t6);
			append(section1, p1);
			append(p1, t7);
			append(p1, code0);
			append(code0, t8);
			append(p1, t9);
			append(section1, t10);
			mount_component(cards0, section1, null);
			insert(target, t11, anchor);
			insert(target, section2, anchor);
			mount_component(heading1, section2, null);
			append(section2, t12);
			append(section2, p2);
			append(p2, t13);
			append(p2, code1);
			append(code1, t14);
			append(p2, t15);
			append(section2, t16);
			mount_component(cards1, section2, null);
			append(section2, t17);
			mount_component(tip, section2, null);
			insert(target, t18, anchor);
			insert(target, section3, anchor);
			mount_component(heading2, section3, null);
			append(section3, t19);
			append(section3, p3);
			append(p3, t20);
			append(p3, code2);
			append(code2, t21);
			append(p3, t22);
			append(p3, code3);
			append(code3, t23);
			append(p3, t24);
			append(p3, code4);
			append(code4, t25);
			append(p3, t26);
			append(section3, t27);
			append(section3, p4);
			append(p4, t28);
			append(p4, a0);
			append(a0, t29);
			append(p4, t30);
			append(section3, t31);
			mount_component(samplecode0, section3, null);
			insert(target, t32, anchor);
			insert(target, section4, anchor);
			mount_component(heading3, section4, null);
			append(section4, t33);
			append(section4, p5);
			append(p5, t34);
			append(p5, a1);
			append(a1, t35);
			append(p5, t36);
			append(p5, a2);
			append(a2, t37);
			append(p5, t38);
			append(p5, a3);
			append(a3, t39);
			append(p5, t40);
			append(p5, a4);
			append(a4, t41);
			append(p5, t42);
			append(section4, t43);
			append(section4, p6);
			append(p6, t44);
			append(section4, t45);
			mount_component(samplecode1, section4, null);
			insert(target, t46, anchor);
			insert(target, section5, anchor);
			append(section5, div);
			mount_component(prevbutton, div, null);
			append(div, t47);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var cards0_changes = {};
			if (changed.$$scope) cards0_changes.$$scope = { changed, ctx };
			cards0.$set(cards0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var cards1_changes = {};
			if (changed.$$scope) cards1_changes.$$scope = { changed, ctx };
			cards1.$set(cards1_changes);

			var tip_changes = {};
			if (changed.$$scope) tip_changes.$$scope = { changed, ctx };
			tip.$set(tip_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			cards0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			cards1.$$.fragment.i(local);

			tip.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			cards0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			cards1.$$.fragment.o(local);
			tip.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
				detach(t5);
				detach(section1);
			}

			heading0.$destroy();

			cards0.$destroy();

			if (detaching) {
				detach(t11);
				detach(section2);
			}

			heading1.$destroy();

			cards1.$destroy();

			tip.$destroy();

			if (detaching) {
				detach(t18);
				detach(section3);
			}

			heading2.$destroy();

			samplecode0.$destroy();

			if (detaching) {
				detach(t32);
				detach(section4);
			}

			heading3.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t46);
				detach(section5);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Validators";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

function instance($$self) {
	

const PopularValidators = AllValidators.filter((v) => !v.requireFullVersion);
const SpecialValidators = AllValidators.filter((v) => v.requireFullVersion);

	return { PopularValidators, SpecialValidators };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export default Index;

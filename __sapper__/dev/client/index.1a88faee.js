import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';

/* src/routes/guide/examples/showing-custom-message-returned-from-server/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/showing-custom-message-returned-from-server/index.svelte";

// (66:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Submitting the form data via Ajax");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Submitting the form data via Ajax");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (92:8) <Tip>
function create_default_slot_3(ctx) {
	var t0, code, t1, t2, a, t3, t4;

	return {
		c: function create() {
			t0 = text("We're using a built in helper method, ");
			code = element("code");
			t1 = text("FormValidation.utils.fetch");
			t2 = text(", to send the data to given back-end. Anyway, you can use whatever method you're familiar with such as Github's ");
			a = element("a");
			t3 = text("fetch");
			t4 = text(" implementation.");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "We're using a built in helper method, ");

			code = claim_element(nodes, "CODE", {}, false);
			var code_nodes = children(code);

			t1 = claim_text(code_nodes, "FormValidation.utils.fetch");
			code_nodes.forEach(detach);
			t2 = claim_text(nodes, ", to send the data to given back-end. Anyway, you can use whatever method you're familiar with such as Github's ");

			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t3 = claim_text(a_nodes, "fetch");
			a_nodes.forEach(detach);
			t4 = claim_text(nodes, " implementation.");
			this.h();
		},

		h: function hydrate() {
			add_location(code, file, 91, 51, 3691);
			a.href = "https://github.com/github/fetch";
			a.className = "blue dim link";
			add_location(a, file, 91, 202, 3842);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, code, anchor);
			append(code, t1);
			insert(target, t2, anchor);
			insert(target, a, anchor);
			append(a, t3);
			insert(target, t4, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(code);
				detach(t2);
				detach(a);
				detach(t4);
			}
		}
	};
}

// (97:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Showing message returned from the server");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Showing message returned from the server");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (152:8) <Tip heading="Note">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("For demonstrating purpose, the form randomly displays a custom message for the username field no matter what you put in it");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "For demonstrating purpose, the form randomly displays a custom message for the username field no matter what you put in it");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section0, p0, t2, a0, t3, t4, code0, t5, t6, t7, p1, t8, t9, p2, t10, t11, h3, t12, t13, p3, t14, a1, t15, t16, code1, t17, t18, t19, p4, t20, t21, t22, p5, t23, code2, t24, t25, t26, section1, t27, p6, t28, a2, t29, t30, t31, t32, t33, p7, t34, code3, t35, t36, t37, section2, t38, p8, t39, t40, t41, p9, t42, t43, t44, p10, t45, code4, t46, t47, a3, t48, t49, code5, t50, t51, t52, t53, p11, t54, t55, t56, t57, t58, current;

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
const fv = FormValidation.formValidation(
    form,
    {
        fields: {
            username: {
                validators: {
                    notEmpty: {
                        ...
                    },
                    stringLength: {
                        ...
                    },
                    regexp: {
                        ...
                    },
                    blank: {},
                }
            },
            email: {
                validators: {
                    notEmpty: {
                        ...
                    },
                    emailAddress: {
                        ...
                    },
                    blank: {},
                }
            },
            password: {
                validators: {
                    notEmpty: {
                        ...
                    },
                    blank: {},
                }
            },
        }
    }
);
` },
		$$inline: true
	});

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
const fv = FormValidation
    .formValidation(
        form,
        {
            fields: {
                ...
            }
        }
    )
    .on('core.form.valid', function() {
        // Send data to back-end
        FormValidation.utils.fetch('/path/to/your/back-end/', {
            params: {
                username: form.querySelector('[name="username"]').value,
                email: form.querySelector('[name="email"]').value,
                password: form.querySelector('[name="password"]').value,
            }
        }).then((response) => {
            // We will display the messages from server if they're available
        });
    });
` },
		$$inline: true
	});

	var tip0 = new Tip({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "javascript", code: `
// A sample response if all fields are valid
{
    "result": "ok"
}
` },
		$$inline: true
	});

	var samplecode3 = new SampleCode({
		props: { lang: "javascript", code: `
// A sample response if there is an invalid field.
// It also tell which and the reason why the field is not valid
{
    "result": "error",
    "fields": {
        "username": "The username is not available",
        "password": "You need to have more secure password"
        ...
    }
}
` },
		$$inline: true
	});

	var samplecode4 = new SampleCode({
		props: { lang: "javascript", code: `
const fv = FormValidation
    .formValidation(
        ...
    )
    .on('core.form.valid', function() {
        // Send data to back-end
        FormValidation.utils.fetch('/path/to/your/back-end/', {
            params: {
                username: form.querySelector('[name="username"]').value,
                email: form.querySelector('[name="email"]').value,
                password: form.querySelector('[name="password"]').value,
            }
        }).then((response) => {
            if (response.result === 'error') {
                for (const field in response.fields) {
                    fv
                        // Update the message option
                        .updateValidatorOption(
                            field, 'blank', 'message', response.fields[field]
                        )
                        // Set the field as invalid
                        .updateFieldStatus(field, 'Invalid', 'blank');
                }
            } else {
                // Do whatever you want here
                // such as showing a modal ...
            }
        });
    });
` },
		$$inline: true
	});

	var tip1 = new Tip({
		props: {
		heading: "Note",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/examples/showing-custom-message-returned-from-server",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Hiding messages',
        'Showing all messages',
        'Showing custom message returned from server',
        'Showing dynamic message',
        'Showing messages in custom area',
        'Showing only one message each time',
    ] },
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['callback'] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Showing custom message returned from server");
			t1 = space();
			section0 = element("section");
			p0 = element("p");
			t2 = text("As you know, each ");
			a0 = element("a");
			t3 = text("validator");
			t4 = text(" provides the ");
			code0 = element("code");
			t5 = text("message");
			t6 = text(" option to define the error message in case the field\n            doesn't pass the associated validator.");
			t7 = space();
			p1 = element("p");
			t8 = text("It's recommended to perform the validation on server side after the form passes the client side validation. \n            The usual question is that how to show the messages from the server if the field doesn't pass the validation on server side.");
			t9 = space();
			p2 = element("p");
			t10 = text("This example will show a handy approach which is described as following steps. To demonstrate the implementation,\n            the example uses a simple registration form that consists of three fields for filling the username, email address and password.");
			t11 = space();
			h3 = element("h3");
			t12 = text("Defining the validation rules");
			t13 = space();
			p3 = element("p");
			t14 = text("In addition to ");
			a1 = element("a");
			t15 = text("usual validators");
			t16 = text(", we also attach a special validator called ");
			code1 = element("code");
			t17 = text("blank");
			t18 = text(" to each field which\n            need to show the custom message returned from the server.");
			t19 = space();
			p4 = element("p");
			t20 = text("The blank validator doesn't have any option:");
			t21 = space();
			samplecode0.$$.fragment.c();
			t22 = space();
			p5 = element("p");
			t23 = text("Since the blank validator always returns ");
			code2 = element("code");
			t24 = text("true");
			t25 = text(", the field is supposed to pass it whenever the validation is performed in the client side.");
			t26 = space();
			section1 = element("section");
			heading0.$$.fragment.c();
			t27 = space();
			p6 = element("p");
			t28 = text("When all fields satisfy the validation rules, we can trigger the ");
			a2 = element("a");
			t29 = text("core.form.valid");
			t30 = text(" event to send the form data to server via an Ajax request:");
			t31 = space();
			samplecode1.$$.fragment.c();
			t32 = space();
			tip0.$$.fragment.c();
			t33 = space();
			p7 = element("p");
			t34 = text("The error messages returned from server will be processed inside the ");
			code3 = element("code");
			t35 = text("response");
			t36 = text(" handler of the Ajax request. We will see how to do that in the next step.");
			t37 = space();
			section2 = element("section");
			heading1.$$.fragment.c();
			t38 = space();
			p8 = element("p");
			t39 = text("After getting the data sent from the client via the Ajax request, the server will perform validation using certain programming language. Depend on the validation result, it might response an encoded JSON as");
			t40 = space();
			samplecode2.$$.fragment.c();
			t41 = space();
			p9 = element("p");
			t42 = text("or");
			t43 = space();
			samplecode3.$$.fragment.c();
			t44 = space();
			p10 = element("p");
			t45 = text("Lastly, we can use the ");
			code4 = element("code");
			t46 = text("updateValidatorOption()");
			t47 = text(" and ");
			a3 = element("a");
			t48 = text("updateFieldStatus()");
			t49 = text(" methods to set the message and validation result of the ");
			code5 = element("code");
			t50 = text("blank");
			t51 = text(" validator:");
			t52 = space();
			samplecode4.$$.fragment.c();
			t53 = space();
			p11 = element("p");
			t54 = text("Following is a working example that illustrates all steps above:");
			t55 = space();
			tip1.$$.fragment.c();
			t56 = space();
			demo.$$.fragment.c();
			t57 = space();
			examples.$$.fragment.c();
			t58 = space();
			relatedvalidators.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Showing custom message returned from server");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    \n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "As you know, each ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t3 = claim_text(a0_nodes, "validator");
			a0_nodes.forEach(detach);
			t4 = claim_text(p0_nodes, " provides the ");

			code0 = claim_element(p0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t5 = claim_text(code0_nodes, "message");
			code0_nodes.forEach(detach);
			t6 = claim_text(p0_nodes, " option to define the error message in case the field\n            doesn't pass the associated validator.");
			p0_nodes.forEach(detach);
			t7 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t8 = claim_text(p1_nodes, "It's recommended to perform the validation on server side after the form passes the client side validation. \n            The usual question is that how to show the messages from the server if the field doesn't pass the validation on server side.");
			p1_nodes.forEach(detach);
			t9 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t10 = claim_text(p2_nodes, "This example will show a handy approach which is described as following steps. To demonstrate the implementation,\n            the example uses a simple registration form that consists of three fields for filling the username, email address and password.");
			p2_nodes.forEach(detach);
			t11 = claim_text(section0_nodes, "\n\n        ");

			h3 = claim_element(section0_nodes, "H3", {}, false);
			var h3_nodes = children(h3);

			t12 = claim_text(h3_nodes, "Defining the validation rules");
			h3_nodes.forEach(detach);
			t13 = claim_text(section0_nodes, "\n        ");

			p3 = claim_element(section0_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t14 = claim_text(p3_nodes, "In addition to ");

			a1 = claim_element(p3_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t15 = claim_text(a1_nodes, "usual validators");
			a1_nodes.forEach(detach);
			t16 = claim_text(p3_nodes, ", we also attach a special validator called ");

			code1 = claim_element(p3_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t17 = claim_text(code1_nodes, "blank");
			code1_nodes.forEach(detach);
			t18 = claim_text(p3_nodes, " to each field which\n            need to show the custom message returned from the server.");
			p3_nodes.forEach(detach);
			t19 = claim_text(section0_nodes, "\n        ");

			p4 = claim_element(section0_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t20 = claim_text(p4_nodes, "The blank validator doesn't have any option:");
			p4_nodes.forEach(detach);
			t21 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t22 = claim_text(section0_nodes, "\n        ");

			p5 = claim_element(section0_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t23 = claim_text(p5_nodes, "Since the blank validator always returns ");

			code2 = claim_element(p5_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t24 = claim_text(code2_nodes, "true");
			code2_nodes.forEach(detach);
			t25 = claim_text(p5_nodes, ", the field is supposed to pass it whenever the validation is performed in the client side.");
			p5_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t26 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading0.$$.fragment.l(section1_nodes);
			t27 = claim_text(section1_nodes, "\n\n        ");

			p6 = claim_element(section1_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t28 = claim_text(p6_nodes, "When all fields satisfy the validation rules, we can trigger the ");

			a2 = claim_element(p6_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t29 = claim_text(a2_nodes, "core.form.valid");
			a2_nodes.forEach(detach);
			t30 = claim_text(p6_nodes, " event to send the form data to server via an Ajax request:");
			p6_nodes.forEach(detach);
			t31 = claim_text(section1_nodes, "\n");
			samplecode1.$$.fragment.l(section1_nodes);
			t32 = claim_text(section1_nodes, "\n        ");
			tip0.$$.fragment.l(section1_nodes);
			t33 = claim_text(section1_nodes, "\n        ");

			p7 = claim_element(section1_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t34 = claim_text(p7_nodes, "The error messages returned from server will be processed inside the ");

			code3 = claim_element(p7_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t35 = claim_text(code3_nodes, "response");
			code3_nodes.forEach(detach);
			t36 = claim_text(p7_nodes, " handler of the Ajax request. We will see how to do that in the next step.");
			p7_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t37 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading1.$$.fragment.l(section2_nodes);
			t38 = claim_text(section2_nodes, "\n\n        ");

			p8 = claim_element(section2_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t39 = claim_text(p8_nodes, "After getting the data sent from the client via the Ajax request, the server will perform validation using certain programming language. Depend on the validation result, it might response an encoded JSON as");
			p8_nodes.forEach(detach);
			t40 = claim_text(section2_nodes, "\n");
			samplecode2.$$.fragment.l(section2_nodes);
			t41 = claim_text(section2_nodes, "\n        ");

			p9 = claim_element(section2_nodes, "P", { class: true }, false);
			var p9_nodes = children(p9);

			t42 = claim_text(p9_nodes, "or");
			p9_nodes.forEach(detach);
			t43 = claim_text(section2_nodes, "\n");
			samplecode3.$$.fragment.l(section2_nodes);
			t44 = claim_text(section2_nodes, "    \n        ");

			p10 = claim_element(section2_nodes, "P", { class: true }, false);
			var p10_nodes = children(p10);

			t45 = claim_text(p10_nodes, "Lastly, we can use the ");

			code4 = claim_element(p10_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t46 = claim_text(code4_nodes, "updateValidatorOption()");
			code4_nodes.forEach(detach);
			t47 = claim_text(p10_nodes, " and ");

			a3 = claim_element(p10_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t48 = claim_text(a3_nodes, "updateFieldStatus()");
			a3_nodes.forEach(detach);
			t49 = claim_text(p10_nodes, " methods to set the message and validation result of the ");

			code5 = claim_element(p10_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t50 = claim_text(code5_nodes, "blank");
			code5_nodes.forEach(detach);
			t51 = claim_text(p10_nodes, " validator:");
			p10_nodes.forEach(detach);
			t52 = claim_text(section2_nodes, "\n");
			samplecode4.$$.fragment.l(section2_nodes);
			t53 = claim_text(section2_nodes, "  \n        ");

			p11 = claim_element(section2_nodes, "P", { class: true }, false);
			var p11_nodes = children(p11);

			t54 = claim_text(p11_nodes, "Following is a working example that illustrates all steps above:");
			p11_nodes.forEach(detach);
			t55 = claim_text(section2_nodes, "\n        ");
			tip1.$$.fragment.l(section2_nodes);
			t56 = claim_text(section2_nodes, "\n        \n        ");
			demo.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t57 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			t58 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 125);
			a0.href = "/validators";
			a0.className = "blue dim link";
			add_location(a0, file, 8, 45, 273);
			add_location(code0, file, 8, 116, 344);
			p0.className = "lh-copy";
			add_location(p0, file, 8, 8, 236);
			p1.className = "lh-copy";
			add_location(p1, file, 10, 8, 481);
			p2.className = "lh-copy";
			add_location(p2, file, 12, 8, 758);
			add_location(h3, file, 15, 8, 1044);
			a1.href = "/validators";
			a1.className = "blue dim link";
			add_location(a1, file, 16, 42, 1125);
			add_location(code1, file, 16, 150, 1233);
			p3.className = "lh-copy";
			add_location(p3, file, 16, 8, 1091);
			p4.className = "lh-copy";
			add_location(p4, file, 18, 8, 1354);
			add_location(code2, file, 61, 68, 2484);
			p5.className = "lh-copy";
			add_location(p5, file, 61, 8, 2424);
			section0.className = "mv5";
			add_location(section0, file, 7, 4, 206);
			a2.href = "/guide/events/core.form.valid";
			a2.className = "blue dim link";
			add_location(a2, file, 67, 92, 2793);
			p6.className = "lh-copy";
			add_location(p6, file, 67, 8, 2709);
			add_location(code3, file, 92, 96, 4034);
			p7.className = "lh-copy";
			add_location(p7, file, 92, 8, 3946);
			section1.className = "mv5";
			add_location(section1, file, 64, 4, 2617);
			p8.className = "lh-copy";
			add_location(p8, file, 98, 8, 4253);
			p9.className = "lh-copy";
			add_location(p9, file, 105, 8, 4603);
			add_location(code4, file, 118, 50, 5016);
			a3.href = "/guide/api/update-field-status";
			a3.className = "blue dim link";
			add_location(a3, file, 118, 91, 5057);
			add_location(code5, file, 118, 234, 5200);
			p10.className = "lh-copy";
			add_location(p10, file, 118, 8, 4974);
			p11.className = "lh-copy";
			add_location(p11, file, 150, 8, 6389);
			section2.className = "mv5";
			add_location(section2, file, 95, 4, 4154);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section0, anchor);
			append(section0, p0);
			append(p0, t2);
			append(p0, a0);
			append(a0, t3);
			append(p0, t4);
			append(p0, code0);
			append(code0, t5);
			append(p0, t6);
			append(section0, t7);
			append(section0, p1);
			append(p1, t8);
			append(section0, t9);
			append(section0, p2);
			append(p2, t10);
			append(section0, t11);
			append(section0, h3);
			append(h3, t12);
			append(section0, t13);
			append(section0, p3);
			append(p3, t14);
			append(p3, a1);
			append(a1, t15);
			append(p3, t16);
			append(p3, code1);
			append(code1, t17);
			append(p3, t18);
			append(section0, t19);
			append(section0, p4);
			append(p4, t20);
			append(section0, t21);
			mount_component(samplecode0, section0, null);
			append(section0, t22);
			append(section0, p5);
			append(p5, t23);
			append(p5, code2);
			append(code2, t24);
			append(p5, t25);
			insert(target, t26, anchor);
			insert(target, section1, anchor);
			mount_component(heading0, section1, null);
			append(section1, t27);
			append(section1, p6);
			append(p6, t28);
			append(p6, a2);
			append(a2, t29);
			append(p6, t30);
			append(section1, t31);
			mount_component(samplecode1, section1, null);
			append(section1, t32);
			mount_component(tip0, section1, null);
			append(section1, t33);
			append(section1, p7);
			append(p7, t34);
			append(p7, code3);
			append(code3, t35);
			append(p7, t36);
			insert(target, t37, anchor);
			insert(target, section2, anchor);
			mount_component(heading1, section2, null);
			append(section2, t38);
			append(section2, p8);
			append(p8, t39);
			append(section2, t40);
			mount_component(samplecode2, section2, null);
			append(section2, t41);
			append(section2, p9);
			append(p9, t42);
			append(section2, t43);
			mount_component(samplecode3, section2, null);
			append(section2, t44);
			append(section2, p10);
			append(p10, t45);
			append(p10, code4);
			append(code4, t46);
			append(p10, t47);
			append(p10, a3);
			append(a3, t48);
			append(p10, t49);
			append(p10, code5);
			append(code5, t50);
			append(p10, t51);
			append(section2, t52);
			mount_component(samplecode4, section2, null);
			append(section2, t53);
			append(section2, p11);
			append(p11, t54);
			append(section2, t55);
			mount_component(tip1, section2, null);
			append(section2, t56);
			mount_component(demo, section2, null);
			insert(target, t57, anchor);
			mount_component(examples, target, anchor);
			insert(target, t58, anchor);
			mount_component(relatedvalidators, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var tip0_changes = {};
			if (changed.$$scope) tip0_changes.$$scope = { changed, ctx };
			tip0.$set(tip0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var tip1_changes = {};
			if (changed.$$scope) tip1_changes.$$scope = { changed, ctx };
			tip1.$set(tip1_changes);
		},

		i: function intro(local) {
			if (current) return;
			samplecode0.$$.fragment.i(local);

			heading0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			tip0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			samplecode3.$$.fragment.i(local);

			samplecode4.$$.fragment.i(local);

			tip1.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode0.$$.fragment.o(local);
			heading0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			tip0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			samplecode3.$$.fragment.o(local);
			samplecode4.$$.fragment.o(local);
			tip1.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section0);
			}

			samplecode0.$destroy();

			if (detaching) {
				detach(t26);
				detach(section1);
			}

			heading0.$destroy();

			samplecode1.$destroy();

			tip0.$destroy();

			if (detaching) {
				detach(t37);
				detach(section2);
			}

			heading1.$destroy();

			samplecode2.$destroy();

			samplecode3.$destroy();

			samplecode4.$destroy();

			tip1.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t57);
			}

			examples.$destroy(detaching);

			if (detaching) {
				detach(t58);
			}

			relatedvalidators.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Showing custom message returned from server";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

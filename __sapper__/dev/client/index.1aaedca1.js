import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as ChangelogLayout } from './chunk.4a563e90.js';

/* src/routes/updates/v0.5.1/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/updates/v0.5.1/index.svelte";

// (10:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("New features");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "New features");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (27:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Improvements");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Improvements");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (41:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Bug fixes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Bug fixes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <ChangelogLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, ul0, li0, t5, a0, t6, t7, li1, t8, a1, t9, t10, li2, t11, a2, t12, t13, t14, li3, t15, a3, t16, t17, t18, li4, t19, a4, t20, t21, t22, li5, t23, a5, t24, t25, t26, li6, t27, t28, li7, t29, a6, t30, t31, t32, li8, t33, a7, t34, t35, a8, t36, t37, t38, li9, t39, a9, t40, t41, a10, t42, t43, t44, li10, t45, a11, t46, t47, t48, section1, t49, ul1, li11, t50, t51, li12, t52, code0, t53, t54, code1, t55, t56, li13, t57, code2, t58, t59, code3, t60, t61, t62, li14, t63, code4, t64, t65, li15, t66, code5, t67, t68, a12, t69, t70, t71, li16, t72, t73, li17, t74, code6, t75, t76, code7, t77, t78, li18, t79, t80, section2, t81, ul2, li19, t82, code8, t83, t84, t85, li20, t86, a13, t87, t88, t89, li21, t90, t91, li22, t92, code9, t93, t94, li23, t95, code10, t96, t97, t98, li24, t99, a14, t100, t101, t102, li25, t103, a15, t104, t105, t106, li26, t107, a16, t108, t109, t110, li27, t111, a17, t112, t113, a18, t114, t115, a19, t116, t117, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Version 0.5.1");
			t1 = space();
			h2 = element("h2");
			t2 = text("Released 22 August 2014");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			ul0 = element("ul");
			li0 = element("li");
			t5 = text("Add ");
			a0 = element("a");
			t6 = text("meid validator");
			t7 = space();
			li1 = element("li");
			t8 = text("Add ");
			a1 = element("a");
			t9 = text("imo validator");
			t10 = space();
			li2 = element("li");
			t11 = text("Add French ");
			a2 = element("a");
			t12 = text("phone number");
			t13 = text(" validator");
			t14 = space();
			li3 = element("li");
			t15 = text("Add Spanish ");
			a3 = element("a");
			t16 = text("phone number");
			t17 = text(" validator");
			t18 = space();
			li4 = element("li");
			t19 = text("Add Iceland ");
			a4 = element("a");
			t20 = text("VAT");
			t21 = text(" number validator");
			t22 = space();
			li5 = element("li");
			t23 = text("Add Pakistan ");
			a5 = element("a");
			t24 = text("phone number");
			t25 = text(" validator");
			t26 = space();
			li6 = element("li");
			t27 = text("Add event name options to avoid window.onerror being invoked by jQuery");
			t28 = space();
			li7 = element("li");
			t29 = text("Add South African ");
			a6 = element("a");
			t30 = text("VAT");
			t31 = text(" number validator");
			t32 = space();
			li8 = element("li");
			t33 = text("Add Brazilian ");
			a7 = element("a");
			t34 = text("phone number");
			t35 = text(" and ");
			a8 = element("a");
			t36 = text("postal code");
			t37 = text(" validator");
			t38 = space();
			li9 = element("li");
			t39 = text("Add ");
			a9 = element("a");
			t40 = text("zipCode");
			t41 = text(" and ");
			a10 = element("a");
			t42 = text("phone number");
			t43 = text(" validators for Morocco");
			t44 = space();
			li10 = element("li");
			t45 = text("Add Brazilian ");
			a11 = element("a");
			t46 = text("VAT");
			t47 = text(" number validator");
			t48 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t49 = space();
			ul1 = element("ul");
			li11 = element("li");
			t50 = text("Allowing sites without TLD to pass URI validation");
			t51 = space();
			li12 = element("li");
			t52 = text("Change the CSS/JS path in ");
			code0 = element("code");
			t53 = text("demo/remote.html");
			t54 = text(" and ");
			code1 = element("code");
			t55 = text("demo/message.html");
			t56 = space();
			li13 = element("li");
			t57 = text("Fix the ");
			code2 = element("code");
			t58 = text("demo/date.html");
			t59 = text(" and ");
			code3 = element("code");
			t60 = text("demo/tab.html");
			t61 = text(" examples");
			t62 = space();
			li14 = element("li");
			t63 = text("Add content-type header for ");
			code4 = element("code");
			t64 = text("demo/remote.php");
			t65 = space();
			li15 = element("li");
			t66 = text("Add ");
			code5 = element("code");
			t67 = text("headers");
			t68 = text(" option to the ");
			a12 = element("a");
			t69 = text("remote");
			t70 = text(" validator");
			t71 = space();
			li16 = element("li");
			t72 = text("Fix the feedback icon position for Bootstrap 3.2");
			t73 = space();
			li17 = element("li");
			t74 = text("Force the format option to be ");
			code6 = element("code");
			t75 = text("YYYY-MM-DD");
			t76 = text(" when using ");
			code7 = element("code");
			t77 = text("<input type=\"date\" />");
			t78 = space();
			li18 = element("li");
			t79 = text("Ignore type checking if the file type is empty");
			t80 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t81 = space();
			ul2 = element("ul");
			li19 = element("li");
			t82 = text("The HTML 5 ");
			code8 = element("code");
			t83 = text("<input type=\"number\" />");
			t84 = text(" input allows to input non-digits characters");
			t85 = space();
			li20 = element("li");
			t86 = text("Fix the issue when using ");
			a13 = element("a");
			t87 = text("different");
			t88 = text(" validator to compare with not existing field");
			t89 = space();
			li21 = element("li");
			t90 = text("Cannot validate against both ipv4 and ipv6 at the same time");
			t91 = space();
			li22 = element("li");
			t92 = text("Don't use min, max attributes (greaterThan, lessThan validators) for ");
			code9 = element("code");
			t93 = text("<input type=\"date\" />");
			t94 = space();
			li23 = element("li");
			t95 = text("The ");
			code10 = element("code");
			t96 = text("submitButtons");
			t97 = text(" option doesn't work correctly");
			t98 = space();
			li24 = element("li");
			t99 = text("The ");
			a14 = element("a");
			t100 = text("zipCode");
			t101 = text(" validator throw an exception when passing not supported country code");
			t102 = space();
			li25 = element("li");
			t103 = text("Fix the ");
			a15 = element("a");
			t104 = text("date");
			t105 = text(" validator issue where one of date/month/year or hours/minutes/seconds is prefixed by zero");
			t106 = space();
			li26 = element("li");
			t107 = text("The ");
			a16 = element("a");
			t108 = text("remote");
			t109 = text(" validator can't set the type option via HTML attribute");
			t110 = space();
			li27 = element("li");
			t111 = text("The ");
			a17 = element("a");
			t112 = text("between");
			t113 = text(", ");
			a18 = element("a");
			t114 = text("greaterThan");
			t115 = text(", ");
			a19 = element("a");
			t116 = text("lessThan");
			t117 = text(" validators accept param which isn't number");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Version 0.5.1");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Released 22 August 2014");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			ul0 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t5 = claim_text(li0_nodes, "Add ");

			a0 = claim_element(li0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t6 = claim_text(a0_nodes, "meid validator");
			a0_nodes.forEach(detach);
			li0_nodes.forEach(detach);
			t7 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t8 = claim_text(li1_nodes, "Add ");

			a1 = claim_element(li1_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t9 = claim_text(a1_nodes, "imo validator");
			a1_nodes.forEach(detach);
			li1_nodes.forEach(detach);
			t10 = claim_text(ul0_nodes, "\n            ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t11 = claim_text(li2_nodes, "Add French ");

			a2 = claim_element(li2_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t12 = claim_text(a2_nodes, "phone number");
			a2_nodes.forEach(detach);
			t13 = claim_text(li2_nodes, " validator");
			li2_nodes.forEach(detach);
			t14 = claim_text(ul0_nodes, "\n            ");

			li3 = claim_element(ul0_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t15 = claim_text(li3_nodes, "Add Spanish ");

			a3 = claim_element(li3_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t16 = claim_text(a3_nodes, "phone number");
			a3_nodes.forEach(detach);
			t17 = claim_text(li3_nodes, " validator");
			li3_nodes.forEach(detach);
			t18 = claim_text(ul0_nodes, "\n            ");

			li4 = claim_element(ul0_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			t19 = claim_text(li4_nodes, "Add Iceland ");

			a4 = claim_element(li4_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t20 = claim_text(a4_nodes, "VAT");
			a4_nodes.forEach(detach);
			t21 = claim_text(li4_nodes, " number validator");
			li4_nodes.forEach(detach);
			t22 = claim_text(ul0_nodes, "\n            ");

			li5 = claim_element(ul0_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			t23 = claim_text(li5_nodes, "Add Pakistan ");

			a5 = claim_element(li5_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t24 = claim_text(a5_nodes, "phone number");
			a5_nodes.forEach(detach);
			t25 = claim_text(li5_nodes, " validator");
			li5_nodes.forEach(detach);
			t26 = claim_text(ul0_nodes, "\n            ");

			li6 = claim_element(ul0_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			t27 = claim_text(li6_nodes, "Add event name options to avoid window.onerror being invoked by jQuery");
			li6_nodes.forEach(detach);
			t28 = claim_text(ul0_nodes, "\n            ");

			li7 = claim_element(ul0_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			t29 = claim_text(li7_nodes, "Add South African ");

			a6 = claim_element(li7_nodes, "A", { href: true, class: true }, false);
			var a6_nodes = children(a6);

			t30 = claim_text(a6_nodes, "VAT");
			a6_nodes.forEach(detach);
			t31 = claim_text(li7_nodes, " number validator");
			li7_nodes.forEach(detach);
			t32 = claim_text(ul0_nodes, "\n            ");

			li8 = claim_element(ul0_nodes, "LI", {}, false);
			var li8_nodes = children(li8);

			t33 = claim_text(li8_nodes, "Add Brazilian ");

			a7 = claim_element(li8_nodes, "A", { href: true, class: true }, false);
			var a7_nodes = children(a7);

			t34 = claim_text(a7_nodes, "phone number");
			a7_nodes.forEach(detach);
			t35 = claim_text(li8_nodes, " and ");

			a8 = claim_element(li8_nodes, "A", { href: true, class: true }, false);
			var a8_nodes = children(a8);

			t36 = claim_text(a8_nodes, "postal code");
			a8_nodes.forEach(detach);
			t37 = claim_text(li8_nodes, " validator");
			li8_nodes.forEach(detach);
			t38 = claim_text(ul0_nodes, "\n            ");

			li9 = claim_element(ul0_nodes, "LI", {}, false);
			var li9_nodes = children(li9);

			t39 = claim_text(li9_nodes, "Add ");

			a9 = claim_element(li9_nodes, "A", { href: true }, false);
			var a9_nodes = children(a9);

			t40 = claim_text(a9_nodes, "zipCode");
			a9_nodes.forEach(detach);
			t41 = claim_text(li9_nodes, " and ");

			a10 = claim_element(li9_nodes, "A", { href: true, class: true }, false);
			var a10_nodes = children(a10);

			t42 = claim_text(a10_nodes, "phone number");
			a10_nodes.forEach(detach);
			t43 = claim_text(li9_nodes, " validators for Morocco");
			li9_nodes.forEach(detach);
			t44 = claim_text(ul0_nodes, "\n            ");

			li10 = claim_element(ul0_nodes, "LI", {}, false);
			var li10_nodes = children(li10);

			t45 = claim_text(li10_nodes, "Add Brazilian ");

			a11 = claim_element(li10_nodes, "A", { href: true, class: true }, false);
			var a11_nodes = children(a11);

			t46 = claim_text(a11_nodes, "VAT");
			a11_nodes.forEach(detach);
			t47 = claim_text(li10_nodes, " number validator");
			li10_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t48 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t49 = claim_text(section1_nodes, "\n        ");

			ul1 = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li11 = claim_element(ul1_nodes, "LI", {}, false);
			var li11_nodes = children(li11);

			t50 = claim_text(li11_nodes, "Allowing sites without TLD to pass URI validation");
			li11_nodes.forEach(detach);
			t51 = claim_text(ul1_nodes, "\n            ");

			li12 = claim_element(ul1_nodes, "LI", {}, false);
			var li12_nodes = children(li12);

			t52 = claim_text(li12_nodes, "Change the CSS/JS path in ");

			code0 = claim_element(li12_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t53 = claim_text(code0_nodes, "demo/remote.html");
			code0_nodes.forEach(detach);
			t54 = claim_text(li12_nodes, " and ");

			code1 = claim_element(li12_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t55 = claim_text(code1_nodes, "demo/message.html");
			code1_nodes.forEach(detach);
			li12_nodes.forEach(detach);
			t56 = claim_text(ul1_nodes, "\n            ");

			li13 = claim_element(ul1_nodes, "LI", {}, false);
			var li13_nodes = children(li13);

			t57 = claim_text(li13_nodes, "Fix the ");

			code2 = claim_element(li13_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t58 = claim_text(code2_nodes, "demo/date.html");
			code2_nodes.forEach(detach);
			t59 = claim_text(li13_nodes, " and ");

			code3 = claim_element(li13_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t60 = claim_text(code3_nodes, "demo/tab.html");
			code3_nodes.forEach(detach);
			t61 = claim_text(li13_nodes, " examples");
			li13_nodes.forEach(detach);
			t62 = claim_text(ul1_nodes, "\n            ");

			li14 = claim_element(ul1_nodes, "LI", {}, false);
			var li14_nodes = children(li14);

			t63 = claim_text(li14_nodes, "Add content-type header for ");

			code4 = claim_element(li14_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t64 = claim_text(code4_nodes, "demo/remote.php");
			code4_nodes.forEach(detach);
			li14_nodes.forEach(detach);
			t65 = claim_text(ul1_nodes, "\n            ");

			li15 = claim_element(ul1_nodes, "LI", {}, false);
			var li15_nodes = children(li15);

			t66 = claim_text(li15_nodes, "Add ");

			code5 = claim_element(li15_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t67 = claim_text(code5_nodes, "headers");
			code5_nodes.forEach(detach);
			t68 = claim_text(li15_nodes, " option to the ");

			a12 = claim_element(li15_nodes, "A", { href: true, class: true }, false);
			var a12_nodes = children(a12);

			t69 = claim_text(a12_nodes, "remote");
			a12_nodes.forEach(detach);
			t70 = claim_text(li15_nodes, " validator");
			li15_nodes.forEach(detach);
			t71 = claim_text(ul1_nodes, "\n            ");

			li16 = claim_element(ul1_nodes, "LI", {}, false);
			var li16_nodes = children(li16);

			t72 = claim_text(li16_nodes, "Fix the feedback icon position for Bootstrap 3.2");
			li16_nodes.forEach(detach);
			t73 = claim_text(ul1_nodes, "\n            ");

			li17 = claim_element(ul1_nodes, "LI", {}, false);
			var li17_nodes = children(li17);

			t74 = claim_text(li17_nodes, "Force the format option to be ");

			code6 = claim_element(li17_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t75 = claim_text(code6_nodes, "YYYY-MM-DD");
			code6_nodes.forEach(detach);
			t76 = claim_text(li17_nodes, " when using ");

			code7 = claim_element(li17_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t77 = claim_text(code7_nodes, "<input type=\"date\" />");
			code7_nodes.forEach(detach);
			li17_nodes.forEach(detach);
			t78 = claim_text(ul1_nodes, "\n            ");

			li18 = claim_element(ul1_nodes, "LI", {}, false);
			var li18_nodes = children(li18);

			t79 = claim_text(li18_nodes, "Ignore type checking if the file type is empty");
			li18_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t80 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t81 = claim_text(section2_nodes, "\n        ");

			ul2 = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul2_nodes = children(ul2);

			li19 = claim_element(ul2_nodes, "LI", {}, false);
			var li19_nodes = children(li19);

			t82 = claim_text(li19_nodes, "The HTML 5 ");

			code8 = claim_element(li19_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t83 = claim_text(code8_nodes, "<input type=\"number\" />");
			code8_nodes.forEach(detach);
			t84 = claim_text(li19_nodes, " input allows to input non-digits characters");
			li19_nodes.forEach(detach);
			t85 = claim_text(ul2_nodes, "\n            ");

			li20 = claim_element(ul2_nodes, "LI", {}, false);
			var li20_nodes = children(li20);

			t86 = claim_text(li20_nodes, "Fix the issue when using ");

			a13 = claim_element(li20_nodes, "A", { href: true, class: true }, false);
			var a13_nodes = children(a13);

			t87 = claim_text(a13_nodes, "different");
			a13_nodes.forEach(detach);
			t88 = claim_text(li20_nodes, " validator to compare with not existing field");
			li20_nodes.forEach(detach);
			t89 = claim_text(ul2_nodes, "\n            ");

			li21 = claim_element(ul2_nodes, "LI", {}, false);
			var li21_nodes = children(li21);

			t90 = claim_text(li21_nodes, "Cannot validate against both ipv4 and ipv6 at the same time");
			li21_nodes.forEach(detach);
			t91 = claim_text(ul2_nodes, "\n            ");

			li22 = claim_element(ul2_nodes, "LI", {}, false);
			var li22_nodes = children(li22);

			t92 = claim_text(li22_nodes, "Don't use min, max attributes (greaterThan, lessThan validators) for ");

			code9 = claim_element(li22_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t93 = claim_text(code9_nodes, "<input type=\"date\" />");
			code9_nodes.forEach(detach);
			li22_nodes.forEach(detach);
			t94 = claim_text(ul2_nodes, "\n            ");

			li23 = claim_element(ul2_nodes, "LI", {}, false);
			var li23_nodes = children(li23);

			t95 = claim_text(li23_nodes, "The ");

			code10 = claim_element(li23_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t96 = claim_text(code10_nodes, "submitButtons");
			code10_nodes.forEach(detach);
			t97 = claim_text(li23_nodes, " option doesn't work correctly");
			li23_nodes.forEach(detach);
			t98 = claim_text(ul2_nodes, "\n            ");

			li24 = claim_element(ul2_nodes, "LI", {}, false);
			var li24_nodes = children(li24);

			t99 = claim_text(li24_nodes, "The ");

			a14 = claim_element(li24_nodes, "A", { href: true, class: true }, false);
			var a14_nodes = children(a14);

			t100 = claim_text(a14_nodes, "zipCode");
			a14_nodes.forEach(detach);
			t101 = claim_text(li24_nodes, " validator throw an exception when passing not supported country code");
			li24_nodes.forEach(detach);
			t102 = claim_text(ul2_nodes, "\n            ");

			li25 = claim_element(ul2_nodes, "LI", {}, false);
			var li25_nodes = children(li25);

			t103 = claim_text(li25_nodes, "Fix the ");

			a15 = claim_element(li25_nodes, "A", { href: true, class: true }, false);
			var a15_nodes = children(a15);

			t104 = claim_text(a15_nodes, "date");
			a15_nodes.forEach(detach);
			t105 = claim_text(li25_nodes, " validator issue where one of date/month/year or hours/minutes/seconds is prefixed by zero");
			li25_nodes.forEach(detach);
			t106 = claim_text(ul2_nodes, "\n            ");

			li26 = claim_element(ul2_nodes, "LI", {}, false);
			var li26_nodes = children(li26);

			t107 = claim_text(li26_nodes, "The ");

			a16 = claim_element(li26_nodes, "A", { href: true, class: true }, false);
			var a16_nodes = children(a16);

			t108 = claim_text(a16_nodes, "remote");
			a16_nodes.forEach(detach);
			t109 = claim_text(li26_nodes, " validator can't set the type option via HTML attribute");
			li26_nodes.forEach(detach);
			t110 = claim_text(ul2_nodes, "\n            ");

			li27 = claim_element(ul2_nodes, "LI", {}, false);
			var li27_nodes = children(li27);

			t111 = claim_text(li27_nodes, "The ");

			a17 = claim_element(li27_nodes, "A", { href: true, class: true }, false);
			var a17_nodes = children(a17);

			t112 = claim_text(a17_nodes, "between");
			a17_nodes.forEach(detach);
			t113 = claim_text(li27_nodes, ", ");

			a18 = claim_element(li27_nodes, "A", { href: true }, false);
			var a18_nodes = children(a18);

			t114 = claim_text(a18_nodes, "greaterThan");
			a18_nodes.forEach(detach);
			t115 = claim_text(li27_nodes, ", ");

			a19 = claim_element(li27_nodes, "A", { href: true, class: true }, false);
			var a19_nodes = children(a19);

			t116 = claim_text(a19_nodes, "lessThan");
			a19_nodes.forEach(detach);
			t117 = claim_text(li27_nodes, " validators accept param which isn't number");
			li27_nodes.forEach(detach);
			ul2_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 92);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 143);
			a0.href = "/guide/validators/meid";
			a0.className = "blue dim link";
			add_location(a0, file, 11, 20, 322);
			add_location(li0, file, 11, 12, 314);
			a1.href = "/guide/validators/imo";
			a1.className = "blue dim link";
			add_location(a1, file, 12, 20, 421);
			add_location(li1, file, 12, 12, 413);
			a2.href = "/guide/validators/phone";
			a2.className = "blue dim link";
			add_location(a2, file, 13, 27, 525);
			add_location(li2, file, 13, 12, 510);
			a3.href = "/guide/validators/phone";
			a3.className = "blue dim link";
			add_location(a3, file, 14, 28, 641);
			add_location(li3, file, 14, 12, 625);
			a4.href = "/guide/validators/vat";
			a4.className = "blue dim link";
			add_location(a4, file, 15, 28, 757);
			add_location(li4, file, 15, 12, 741);
			a5.href = "/guide/validators/phone";
			a5.className = "blue dim link";
			add_location(a5, file, 16, 29, 870);
			add_location(li5, file, 16, 12, 853);
			add_location(li6, file, 17, 12, 970);
			a6.href = "/guide/validators/vat";
			a6.className = "blue dim link";
			add_location(a6, file, 18, 34, 1084);
			add_location(li7, file, 18, 12, 1062);
			a7.href = "/guide/validators/phone";
			a7.className = "blue dim link";
			add_location(a7, file, 19, 30, 1198);
			a8.href = "/guide/validators/zip-code";
			a8.className = "blue dim link";
			add_location(a8, file, 19, 107, 1275);
			add_location(li8, file, 19, 12, 1180);
			a9.href = "/guide/validators/zip-code/";
			add_location(a9, file, 20, 20, 1385);
			a10.href = "/guide/validators/phone";
			a10.className = "blue dim link";
			add_location(a10, file, 20, 74, 1439);
			add_location(li9, file, 20, 12, 1377);
			a11.href = "/guide/validators/vat";
			a11.className = "blue dim link";
			add_location(a11, file, 21, 30, 1570);
			add_location(li10, file, 21, 12, 1552);
			ul0.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul0, file, 10, 8, 269);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 199);
			add_location(li11, file, 28, 12, 1803);
			add_location(code0, file, 29, 42, 1904);
			add_location(code1, file, 29, 76, 1938);
			add_location(li12, file, 29, 12, 1874);
			add_location(code2, file, 30, 24, 1998);
			add_location(code3, file, 30, 56, 2030);
			add_location(li13, file, 30, 12, 1986);
			add_location(code4, file, 31, 44, 2115);
			add_location(li14, file, 31, 12, 2083);
			add_location(code5, file, 32, 20, 2169);
			a12.href = "/guide/validators/remote";
			a12.className = "blue dim link";
			add_location(a12, file, 32, 55, 2204);
			add_location(li15, file, 32, 12, 2161);
			add_location(li16, file, 33, 12, 2299);
			add_location(code6, file, 34, 46, 2403);
			add_location(code7, file, 34, 81, 2438);
			add_location(li17, file, 34, 12, 2369);
			add_location(li18, file, 35, 12, 2496);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 27, 8, 1758);
			section1.className = "mv5";
			add_location(section1, file, 25, 4, 1688);
			add_location(code8, file, 42, 27, 2713);
			add_location(li19, file, 42, 12, 2698);
			a13.href = "/guide/validators/different";
			a13.className = "blue dim link";
			add_location(a13, file, 43, 41, 2846);
			add_location(li20, file, 43, 12, 2817);
			add_location(li21, file, 44, 12, 2982);
			add_location(code9, file, 45, 85, 3136);
			add_location(li22, file, 45, 12, 3063);
			add_location(code10, file, 46, 20, 3202);
			add_location(li23, file, 46, 12, 3194);
			a14.href = "/guide/validators/zip-code";
			a14.className = "blue dim link";
			add_location(a14, file, 47, 20, 3284);
			add_location(li24, file, 47, 12, 3276);
			a15.href = "/guide/validators/date";
			a15.className = "blue dim link";
			add_location(a15, file, 48, 24, 3453);
			add_location(li25, file, 48, 12, 3441);
			a16.href = "/guide/validators/remote";
			a16.className = "blue dim link";
			add_location(a16, file, 49, 20, 3632);
			add_location(li26, file, 49, 12, 3624);
			a17.href = "/guide/validators/between";
			a17.className = "blue dim link";
			add_location(a17, file, 50, 20, 3780);
			a18.href = "/guide/validators/greater-than/";
			add_location(a18, file, 50, 91, 3851);
			a19.href = "/guide/validators/less-than";
			a19.className = "blue dim link";
			add_location(a19, file, 50, 150, 3910);
			add_location(li27, file, 50, 12, 3772);
			ul2.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul2, file, 41, 8, 2653);
			section2.className = "mv5";
			add_location(section2, file, 39, 4, 2586);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, ul0);
			append(ul0, li0);
			append(li0, t5);
			append(li0, a0);
			append(a0, t6);
			append(ul0, t7);
			append(ul0, li1);
			append(li1, t8);
			append(li1, a1);
			append(a1, t9);
			append(ul0, t10);
			append(ul0, li2);
			append(li2, t11);
			append(li2, a2);
			append(a2, t12);
			append(li2, t13);
			append(ul0, t14);
			append(ul0, li3);
			append(li3, t15);
			append(li3, a3);
			append(a3, t16);
			append(li3, t17);
			append(ul0, t18);
			append(ul0, li4);
			append(li4, t19);
			append(li4, a4);
			append(a4, t20);
			append(li4, t21);
			append(ul0, t22);
			append(ul0, li5);
			append(li5, t23);
			append(li5, a5);
			append(a5, t24);
			append(li5, t25);
			append(ul0, t26);
			append(ul0, li6);
			append(li6, t27);
			append(ul0, t28);
			append(ul0, li7);
			append(li7, t29);
			append(li7, a6);
			append(a6, t30);
			append(li7, t31);
			append(ul0, t32);
			append(ul0, li8);
			append(li8, t33);
			append(li8, a7);
			append(a7, t34);
			append(li8, t35);
			append(li8, a8);
			append(a8, t36);
			append(li8, t37);
			append(ul0, t38);
			append(ul0, li9);
			append(li9, t39);
			append(li9, a9);
			append(a9, t40);
			append(li9, t41);
			append(li9, a10);
			append(a10, t42);
			append(li9, t43);
			append(ul0, t44);
			append(ul0, li10);
			append(li10, t45);
			append(li10, a11);
			append(a11, t46);
			append(li10, t47);
			insert(target, t48, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t49);
			append(section1, ul1);
			append(ul1, li11);
			append(li11, t50);
			append(ul1, t51);
			append(ul1, li12);
			append(li12, t52);
			append(li12, code0);
			append(code0, t53);
			append(li12, t54);
			append(li12, code1);
			append(code1, t55);
			append(ul1, t56);
			append(ul1, li13);
			append(li13, t57);
			append(li13, code2);
			append(code2, t58);
			append(li13, t59);
			append(li13, code3);
			append(code3, t60);
			append(li13, t61);
			append(ul1, t62);
			append(ul1, li14);
			append(li14, t63);
			append(li14, code4);
			append(code4, t64);
			append(ul1, t65);
			append(ul1, li15);
			append(li15, t66);
			append(li15, code5);
			append(code5, t67);
			append(li15, t68);
			append(li15, a12);
			append(a12, t69);
			append(li15, t70);
			append(ul1, t71);
			append(ul1, li16);
			append(li16, t72);
			append(ul1, t73);
			append(ul1, li17);
			append(li17, t74);
			append(li17, code6);
			append(code6, t75);
			append(li17, t76);
			append(li17, code7);
			append(code7, t77);
			append(ul1, t78);
			append(ul1, li18);
			append(li18, t79);
			insert(target, t80, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t81);
			append(section2, ul2);
			append(ul2, li19);
			append(li19, t82);
			append(li19, code8);
			append(code8, t83);
			append(li19, t84);
			append(ul2, t85);
			append(ul2, li20);
			append(li20, t86);
			append(li20, a13);
			append(a13, t87);
			append(li20, t88);
			append(ul2, t89);
			append(ul2, li21);
			append(li21, t90);
			append(ul2, t91);
			append(ul2, li22);
			append(li22, t92);
			append(li22, code9);
			append(code9, t93);
			append(ul2, t94);
			append(ul2, li23);
			append(li23, t95);
			append(li23, code10);
			append(code10, t96);
			append(li23, t97);
			append(ul2, t98);
			append(ul2, li24);
			append(li24, t99);
			append(li24, a14);
			append(a14, t100);
			append(li24, t101);
			append(ul2, t102);
			append(ul2, li25);
			append(li25, t103);
			append(li25, a15);
			append(a15, t104);
			append(li25, t105);
			append(ul2, t106);
			append(ul2, li26);
			append(li26, t107);
			append(li26, a16);
			append(a16, t108);
			append(li26, t109);
			append(ul2, t110);
			append(ul2, li27);
			append(li27, t111);
			append(li27, a17);
			append(a17, t112);
			append(li27, t113);
			append(li27, a18);
			append(a18, t114);
			append(li27, t115);
			append(li27, a19);
			append(a19, t116);
			append(li27, t117);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			if (detaching) {
				detach(t48);
				detach(section1);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t80);
				detach(section2);
			}

			heading2.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var changeloglayout = new ChangelogLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			changeloglayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			changeloglayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • v0.5.1";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(changeloglayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var changeloglayout_changes = {};
			if (changed.$$scope) changeloglayout_changes.$$scope = { changed, ctx };
			changeloglayout.$set(changeloglayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			changeloglayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			changeloglayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			changeloglayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

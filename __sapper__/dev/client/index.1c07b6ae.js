import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as ChangelogLayout } from './chunk.4a563e90.js';

/* src/routes/updates/v0.3.2/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/updates/v0.3.2/index.svelte";

// (10:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("New features");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "New features");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (25:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Improvements");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Improvements");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <ChangelogLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, ul0, li0, t5, a0, t6, t7, t8, li1, t9, a1, t10, t11, t12, li2, t13, a2, t14, t15, li3, t16, code0, t17, t18, code1, t19, t20, t21, li4, t22, a3, t23, t24, li5, t25, a4, t26, t27, li6, t28, t29, li7, t30, a5, t31, t32, t33, li8, t34, code2, t35, t36, t37, section1, t38, ul1, li9, a6, t39, t40, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Version 0.3.2");
			t1 = space();
			h2 = element("h2");
			t2 = text("Released 21 March 2014");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			ul0 = element("ul");
			li0 = element("li");
			t5 = text("Add ");
			a0 = element("a");
			t6 = text("ip validator");
			t7 = text(". Support both IPv4 and IPv6");
			t8 = space();
			li1 = element("li");
			t9 = text("Add ");
			a1 = element("a");
			t10 = text("isbn validator");
			t11 = text(", support both ISBN 10 and ISBN 13");
			t12 = space();
			li2 = element("li");
			t13 = text("Add ");
			a2 = element("a");
			t14 = text("step validator");
			t15 = space();
			li3 = element("li");
			t16 = text("Add ");
			code0 = element("code");
			t17 = text("selector");
			t18 = text(" option for each field. The field can be defined by CSS validator instead of the ");
			code1 = element("code");
			t19 = text("name");
			t20 = text(" attribute");
			t21 = space();
			li4 = element("li");
			t22 = text("Add ");
			a3 = element("a");
			t23 = text("mac validator");
			t24 = space();
			li5 = element("li");
			t25 = text("Add ");
			a4 = element("a");
			t26 = text("base64 validator");
			t27 = space();
			li6 = element("li");
			t28 = text("Add cvv validator");
			t29 = space();
			li7 = element("li");
			t30 = text("Add ");
			a5 = element("a");
			t31 = text("phone validator");
			t32 = text(". Support US phone number only");
			t33 = space();
			li8 = element("li");
			t34 = text("Add ");
			code2 = element("code");
			t35 = text("container");
			t36 = text(" option for each field to indicate where the error messages are shown");
			t37 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t38 = space();
			ul1 = element("ul");
			li9 = element("li");
			a6 = element("a");
			t39 = text("creditCard validator");
			t40 = text(" now validates both IIN ranges and length");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Version 0.3.2");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Released 21 March 2014");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			ul0 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t5 = claim_text(li0_nodes, "Add ");

			a0 = claim_element(li0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t6 = claim_text(a0_nodes, "ip validator");
			a0_nodes.forEach(detach);
			t7 = claim_text(li0_nodes, ". Support both IPv4 and IPv6");
			li0_nodes.forEach(detach);
			t8 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t9 = claim_text(li1_nodes, "Add ");

			a1 = claim_element(li1_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t10 = claim_text(a1_nodes, "isbn validator");
			a1_nodes.forEach(detach);
			t11 = claim_text(li1_nodes, ", support both ISBN 10 and ISBN 13");
			li1_nodes.forEach(detach);
			t12 = claim_text(ul0_nodes, "\n            ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t13 = claim_text(li2_nodes, "Add ");

			a2 = claim_element(li2_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t14 = claim_text(a2_nodes, "step validator");
			a2_nodes.forEach(detach);
			li2_nodes.forEach(detach);
			t15 = claim_text(ul0_nodes, "\n            ");

			li3 = claim_element(ul0_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t16 = claim_text(li3_nodes, "Add ");

			code0 = claim_element(li3_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t17 = claim_text(code0_nodes, "selector");
			code0_nodes.forEach(detach);
			t18 = claim_text(li3_nodes, " option for each field. The field can be defined by CSS validator instead of the ");

			code1 = claim_element(li3_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t19 = claim_text(code1_nodes, "name");
			code1_nodes.forEach(detach);
			t20 = claim_text(li3_nodes, " attribute");
			li3_nodes.forEach(detach);
			t21 = claim_text(ul0_nodes, "\n            ");

			li4 = claim_element(ul0_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			t22 = claim_text(li4_nodes, "Add ");

			a3 = claim_element(li4_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t23 = claim_text(a3_nodes, "mac validator");
			a3_nodes.forEach(detach);
			li4_nodes.forEach(detach);
			t24 = claim_text(ul0_nodes, "\n            ");

			li5 = claim_element(ul0_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			t25 = claim_text(li5_nodes, "Add ");

			a4 = claim_element(li5_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t26 = claim_text(a4_nodes, "base64 validator");
			a4_nodes.forEach(detach);
			li5_nodes.forEach(detach);
			t27 = claim_text(ul0_nodes, "\n            ");

			li6 = claim_element(ul0_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			t28 = claim_text(li6_nodes, "Add cvv validator");
			li6_nodes.forEach(detach);
			t29 = claim_text(ul0_nodes, "\n            ");

			li7 = claim_element(ul0_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			t30 = claim_text(li7_nodes, "Add ");

			a5 = claim_element(li7_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t31 = claim_text(a5_nodes, "phone validator");
			a5_nodes.forEach(detach);
			t32 = claim_text(li7_nodes, ". Support US phone number only");
			li7_nodes.forEach(detach);
			t33 = claim_text(ul0_nodes, "\n            ");

			li8 = claim_element(ul0_nodes, "LI", {}, false);
			var li8_nodes = children(li8);

			t34 = claim_text(li8_nodes, "Add ");

			code2 = claim_element(li8_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t35 = claim_text(code2_nodes, "container");
			code2_nodes.forEach(detach);
			t36 = claim_text(li8_nodes, " option for each field to indicate where the error messages are shown");
			li8_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t37 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t38 = claim_text(section1_nodes, "\n        ");

			ul1 = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li9 = claim_element(ul1_nodes, "LI", {}, false);
			var li9_nodes = children(li9);

			a6 = claim_element(li9_nodes, "A", { href: true, class: true }, false);
			var a6_nodes = children(a6);

			t39 = claim_text(a6_nodes, "creditCard validator");
			a6_nodes.forEach(detach);
			t40 = claim_text(li9_nodes, " now validates both IIN ranges and length");
			li9_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 92);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 143);
			a0.href = "/guide/validators/ip";
			a0.className = "blue dim link";
			add_location(a0, file, 11, 20, 321);
			add_location(li0, file, 11, 12, 313);
			a1.href = "/guide/validators/isbn";
			a1.className = "blue dim link";
			add_location(a1, file, 12, 20, 444);
			add_location(li1, file, 12, 12, 436);
			a2.href = "/guide/validators/step";
			a2.className = "blue dim link";
			add_location(a2, file, 13, 20, 577);
			add_location(li2, file, 13, 12, 569);
			add_location(code0, file, 14, 20, 676);
			add_location(code1, file, 14, 122, 778);
			add_location(li3, file, 14, 12, 668);
			a3.href = "/guide/validators/mac";
			a3.className = "blue dim link";
			add_location(a3, file, 15, 20, 831);
			add_location(li4, file, 15, 12, 823);
			a4.href = "/guide/validators/base64";
			a4.className = "blue dim link";
			add_location(a4, file, 16, 20, 928);
			add_location(li5, file, 16, 12, 920);
			add_location(li6, file, 17, 12, 1023);
			a5.href = "/guide/validators/phone";
			a5.className = "blue dim link";
			add_location(a5, file, 18, 20, 1070);
			add_location(li7, file, 18, 12, 1062);
			add_location(code2, file, 19, 20, 1201);
			add_location(li8, file, 19, 12, 1193);
			ul0.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul0, file, 10, 8, 268);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 198);
			a6.href = "/guide/validators/credit-card";
			a6.className = "blue dim link";
			add_location(a6, file, 26, 16, 1451);
			add_location(li9, file, 26, 12, 1447);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 25, 8, 1402);
			section1.className = "mv5";
			add_location(section1, file, 23, 4, 1332);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, ul0);
			append(ul0, li0);
			append(li0, t5);
			append(li0, a0);
			append(a0, t6);
			append(li0, t7);
			append(ul0, t8);
			append(ul0, li1);
			append(li1, t9);
			append(li1, a1);
			append(a1, t10);
			append(li1, t11);
			append(ul0, t12);
			append(ul0, li2);
			append(li2, t13);
			append(li2, a2);
			append(a2, t14);
			append(ul0, t15);
			append(ul0, li3);
			append(li3, t16);
			append(li3, code0);
			append(code0, t17);
			append(li3, t18);
			append(li3, code1);
			append(code1, t19);
			append(li3, t20);
			append(ul0, t21);
			append(ul0, li4);
			append(li4, t22);
			append(li4, a3);
			append(a3, t23);
			append(ul0, t24);
			append(ul0, li5);
			append(li5, t25);
			append(li5, a4);
			append(a4, t26);
			append(ul0, t27);
			append(ul0, li6);
			append(li6, t28);
			append(ul0, t29);
			append(ul0, li7);
			append(li7, t30);
			append(li7, a5);
			append(a5, t31);
			append(li7, t32);
			append(ul0, t33);
			append(ul0, li8);
			append(li8, t34);
			append(li8, code2);
			append(code2, t35);
			append(li8, t36);
			insert(target, t37, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t38);
			append(section1, ul1);
			append(ul1, li9);
			append(li9, a6);
			append(a6, t39);
			append(li9, t40);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			if (detaching) {
				detach(t37);
				detach(section1);
			}

			heading1.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var changeloglayout = new ChangelogLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			changeloglayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			changeloglayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • v0.3.2";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(changeloglayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var changeloglayout_changes = {};
			if (changed.$$scope) changeloglayout_changes.$$scope = { changed, ctx };
			changeloglayout.$set(changeloglayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			changeloglayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			changeloglayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			changeloglayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';

/* src/routes/guide/examples/showing-credit-card-icon/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/showing-credit-card-icon/index.svelte";

// (42:8) <Tip>
function create_default_slot_1(ctx) {
	var a0, t0, t1, a1, t2, t3;

	return {
		c: function create() {
			a0 = element("a");
			t0 = text("PaymentFont");
			t1 = text(" and ");
			a1 = element("a");
			t2 = text("Payment Webfont");
			t3 = text(" provide more payment icons");
			this.h();
		},

		l: function claim(nodes) {
			a0 = claim_element(nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t0 = claim_text(a0_nodes, "PaymentFont");
			a0_nodes.forEach(detach);
			t1 = claim_text(nodes, " and ");

			a1 = claim_element(nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t2 = claim_text(a1_nodes, "Payment Webfont");
			a1_nodes.forEach(detach);
			t3 = claim_text(nodes, " provide more payment icons");
			this.h();
		},

		h: function hydrate() {
			a0.href = "http://paymentfont.io";
			a0.className = "blue dim link";
			add_location(a0, file, 41, 13, 2028);
			a1.href = "http://www.orlandotm.com/payment-webfont";
			a1.className = "blue dim link";
			add_location(a1, file, 41, 87, 2102);
		},

		m: function mount(target, anchor) {
			insert(target, a0, anchor);
			append(a0, t0);
			insert(target, t1, anchor);
			insert(target, a1, anchor);
			append(a1, t2);
			insert(target, t3, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(a0);
				detach(t1);
				detach(a1);
				detach(t3);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section, p, t2, a, t3, t4, t5, table, tr0, th0, t6, t7, th1, t8, t9, th2, t10, t11, tr1, td0, t12, t13, td1, i0, t14, td2, code0, t15, t16, tr2, td3, t17, t18, td4, i1, t19, td5, code1, t20, t21, tr3, td6, t22, t23, td7, i2, t24, td8, code2, t25, t26, tr4, td9, t27, t28, td10, i3, t29, td11, code3, t30, t31, tr5, td12, t32, t33, td13, i4, t34, td14, code4, t35, t36, t37, t38, t39, current;

	var tip = new Tip({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/examples/showing-credit-card-icon",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Accepting test credit card numbers',
        'Asking credit card number to match with selected type',
        'Showing credit card icon',
        'Validating credit card expiration date',
    ] },
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['creditCard'] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Showing credit card icon");
			t1 = space();
			section = element("section");
			p = element("p");
			t2 = text("The following example shows credit card icon provided by ");
			a = element("a");
			t3 = text("Font Awesome");
			t4 = text(" based on the card type.");
			t5 = space();
			table = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t6 = text("Card type");
			t7 = space();
			th1 = element("th");
			t8 = text("Icon");
			t9 = space();
			th2 = element("th");
			t10 = text("CSS class");
			t11 = space();
			tr1 = element("tr");
			td0 = element("td");
			t12 = text("American Express");
			t13 = space();
			td1 = element("td");
			i0 = element("i");
			t14 = space();
			td2 = element("td");
			code0 = element("code");
			t15 = text("fa fa-cc-amex");
			t16 = space();
			tr2 = element("tr");
			td3 = element("td");
			t17 = text("Discover");
			t18 = space();
			td4 = element("td");
			i1 = element("i");
			t19 = space();
			td5 = element("td");
			code1 = element("code");
			t20 = text("fa fa-cc-discover");
			t21 = space();
			tr3 = element("tr");
			td6 = element("td");
			t22 = text("Visa");
			t23 = space();
			td7 = element("td");
			i2 = element("i");
			t24 = space();
			td8 = element("td");
			code2 = element("code");
			t25 = text("fa fa-cc-visa");
			t26 = space();
			tr4 = element("tr");
			td9 = element("td");
			t27 = text("Mastercard");
			t28 = space();
			td10 = element("td");
			i3 = element("i");
			t29 = space();
			td11 = element("td");
			code3 = element("code");
			t30 = text("fa fa-cc-mastercard");
			t31 = space();
			tr5 = element("tr");
			td12 = element("td");
			t32 = text("Other");
			t33 = space();
			td13 = element("td");
			i4 = element("i");
			t34 = space();
			td14 = element("td");
			code4 = element("code");
			t35 = text("fa fa-credit-card");
			t36 = space();
			tip.$$.fragment.c();
			t37 = space();
			demo.$$.fragment.c();
			t38 = space();
			examples.$$.fragment.c();
			t39 = space();
			relatedvalidators.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Showing credit card icon");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    \n    ");

			section = claim_element(nodes, "SECTION", { class: true }, false);
			var section_nodes = children(section);

			p = claim_element(section_nodes, "P", { class: true }, false);
			var p_nodes = children(p);

			t2 = claim_text(p_nodes, "The following example shows credit card icon provided by ");

			a = claim_element(p_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t3 = claim_text(a_nodes, "Font Awesome");
			a_nodes.forEach(detach);
			t4 = claim_text(p_nodes, " based on the card type.");
			p_nodes.forEach(detach);
			t5 = claim_text(section_nodes, "\n        ");

			table = claim_element(section_nodes, "TABLE", { class: true }, false);
			var table_nodes = children(table);

			tr0 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t6 = claim_text(th0_nodes, "Card type");
			th0_nodes.forEach(detach);
			t7 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t8 = claim_text(th1_nodes, "Icon");
			th1_nodes.forEach(detach);
			t9 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t10 = claim_text(th2_nodes, "CSS class");
			th2_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t11 = claim_text(table_nodes, "\n            ");

			tr1 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			t12 = claim_text(td0_nodes, "American Express");
			td0_nodes.forEach(detach);
			t13 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			i0 = claim_element(td1_nodes, "I", { class: true }, false);
			var i0_nodes = children(i0);

			i0_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			t14 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			code0 = claim_element(td2_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t15 = claim_text(code0_nodes, "fa fa-cc-amex");
			code0_nodes.forEach(detach);
			td2_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t16 = claim_text(table_nodes, "\n            ");

			tr2 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td3 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			t17 = claim_text(td3_nodes, "Discover");
			td3_nodes.forEach(detach);
			t18 = claim_text(tr2_nodes, "\n                ");

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			i1 = claim_element(td4_nodes, "I", { class: true }, false);
			var i1_nodes = children(i1);

			i1_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t19 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			code1 = claim_element(td5_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t20 = claim_text(code1_nodes, "fa fa-cc-discover");
			code1_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t21 = claim_text(table_nodes, "\n            ");

			tr3 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td6 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			t22 = claim_text(td6_nodes, "Visa");
			td6_nodes.forEach(detach);
			t23 = claim_text(tr3_nodes, "\n                ");

			td7 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			i2 = claim_element(td7_nodes, "I", { class: true }, false);
			var i2_nodes = children(i2);

			i2_nodes.forEach(detach);
			td7_nodes.forEach(detach);
			t24 = claim_text(tr3_nodes, "\n                ");

			td8 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			code2 = claim_element(td8_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t25 = claim_text(code2_nodes, "fa fa-cc-visa");
			code2_nodes.forEach(detach);
			td8_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			t26 = claim_text(table_nodes, "\n            ");

			tr4 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			td9 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			t27 = claim_text(td9_nodes, "Mastercard");
			td9_nodes.forEach(detach);
			t28 = claim_text(tr4_nodes, "\n                ");

			td10 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td10_nodes = children(td10);

			i3 = claim_element(td10_nodes, "I", { class: true }, false);
			var i3_nodes = children(i3);

			i3_nodes.forEach(detach);
			td10_nodes.forEach(detach);
			t29 = claim_text(tr4_nodes, "\n                ");

			td11 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td11_nodes = children(td11);

			code3 = claim_element(td11_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t30 = claim_text(code3_nodes, "fa fa-cc-mastercard");
			code3_nodes.forEach(detach);
			td11_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			t31 = claim_text(table_nodes, "\n            ");

			tr5 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr5_nodes = children(tr5);

			td12 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td12_nodes = children(td12);

			t32 = claim_text(td12_nodes, "Other");
			td12_nodes.forEach(detach);
			t33 = claim_text(tr5_nodes, "\n                ");

			td13 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td13_nodes = children(td13);

			i4 = claim_element(td13_nodes, "I", { class: true }, false);
			var i4_nodes = children(i4);

			i4_nodes.forEach(detach);
			td13_nodes.forEach(detach);
			t34 = claim_text(tr5_nodes, "\n                ");

			td14 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td14_nodes = children(td14);

			code4 = claim_element(td14_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t35 = claim_text(code4_nodes, "fa fa-credit-card");
			code4_nodes.forEach(detach);
			td14_nodes.forEach(detach);
			tr5_nodes.forEach(detach);
			table_nodes.forEach(detach);
			t36 = claim_text(section_nodes, "\n        ");
			tip.$$.fragment.l(section_nodes);
			t37 = claim_text(section_nodes, "\n        ");
			demo.$$.fragment.l(section_nodes);
			section_nodes.forEach(detach);
			t38 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			t39 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 106);
			a.href = "http://fontawesome.io/icons/#payment";
			a.className = "blue dim link";
			add_location(a, file, 8, 84, 274);
			p.className = "lh-copy";
			add_location(p, file, 8, 8, 198);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 11, 16, 515);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 12, 16, 580);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 13, 16, 640);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 10, 12, 466);
			td0.className = "pv2 ph3";
			add_location(td0, file, 16, 16, 768);
			i0.className = "fa fa-cc-amex";
			add_location(i0, file, 17, 36, 846);
			td1.className = "pv2 ph3";
			add_location(td1, file, 17, 16, 826);
			add_location(code0, file, 18, 36, 917);
			td2.className = "pv2 ph3";
			add_location(td2, file, 18, 16, 897);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 15, 12, 719);
			td3.className = "pv2 ph3";
			add_location(td3, file, 21, 16, 1028);
			i1.className = "fa fa-cc-discover";
			add_location(i1, file, 22, 36, 1098);
			td4.className = "pv2 ph3";
			add_location(td4, file, 22, 16, 1078);
			add_location(code1, file, 23, 36, 1173);
			td5.className = "pv2 ph3";
			add_location(td5, file, 23, 16, 1153);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 20, 12, 979);
			td6.className = "pv2 ph3";
			add_location(td6, file, 26, 16, 1288);
			i2.className = "fa fa-cc-visa";
			add_location(i2, file, 27, 36, 1354);
			td7.className = "pv2 ph3";
			add_location(td7, file, 27, 16, 1334);
			add_location(code2, file, 28, 36, 1425);
			td8.className = "pv2 ph3";
			add_location(td8, file, 28, 16, 1405);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 25, 12, 1239);
			td9.className = "pv2 ph3";
			add_location(td9, file, 31, 16, 1536);
			i3.className = "fa fa-cc-mastercard";
			add_location(i3, file, 32, 36, 1608);
			td10.className = "pv2 ph3";
			add_location(td10, file, 32, 16, 1588);
			add_location(code3, file, 33, 36, 1685);
			td11.className = "pv2 ph3";
			add_location(td11, file, 33, 16, 1665);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 30, 12, 1487);
			td12.className = "pv2 ph3";
			add_location(td12, file, 36, 16, 1802);
			i4.className = "fa fa-credit-card";
			add_location(i4, file, 37, 36, 1869);
			td13.className = "pv2 ph3";
			add_location(td13, file, 37, 16, 1849);
			add_location(code4, file, 38, 36, 1944);
			td14.className = "pv2 ph3";
			add_location(td14, file, 38, 16, 1924);
			tr5.className = "striped--light-gray";
			add_location(tr5, file, 35, 12, 1753);
			table.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table, file, 9, 8, 396);
			section.className = "mv5";
			add_location(section, file, 7, 4, 168);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section, anchor);
			append(section, p);
			append(p, t2);
			append(p, a);
			append(a, t3);
			append(p, t4);
			append(section, t5);
			append(section, table);
			append(table, tr0);
			append(tr0, th0);
			append(th0, t6);
			append(tr0, t7);
			append(tr0, th1);
			append(th1, t8);
			append(tr0, t9);
			append(tr0, th2);
			append(th2, t10);
			append(table, t11);
			append(table, tr1);
			append(tr1, td0);
			append(td0, t12);
			append(tr1, t13);
			append(tr1, td1);
			append(td1, i0);
			append(tr1, t14);
			append(tr1, td2);
			append(td2, code0);
			append(code0, t15);
			append(table, t16);
			append(table, tr2);
			append(tr2, td3);
			append(td3, t17);
			append(tr2, t18);
			append(tr2, td4);
			append(td4, i1);
			append(tr2, t19);
			append(tr2, td5);
			append(td5, code1);
			append(code1, t20);
			append(table, t21);
			append(table, tr3);
			append(tr3, td6);
			append(td6, t22);
			append(tr3, t23);
			append(tr3, td7);
			append(td7, i2);
			append(tr3, t24);
			append(tr3, td8);
			append(td8, code2);
			append(code2, t25);
			append(table, t26);
			append(table, tr4);
			append(tr4, td9);
			append(td9, t27);
			append(tr4, t28);
			append(tr4, td10);
			append(td10, i3);
			append(tr4, t29);
			append(tr4, td11);
			append(td11, code3);
			append(code3, t30);
			append(table, t31);
			append(table, tr5);
			append(tr5, td12);
			append(td12, t32);
			append(tr5, t33);
			append(tr5, td13);
			append(td13, i4);
			append(tr5, t34);
			append(tr5, td14);
			append(td14, code4);
			append(code4, t35);
			append(section, t36);
			mount_component(tip, section, null);
			append(section, t37);
			mount_component(demo, section, null);
			insert(target, t38, anchor);
			mount_component(examples, target, anchor);
			insert(target, t39, anchor);
			mount_component(relatedvalidators, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var tip_changes = {};
			if (changed.$$scope) tip_changes.$$scope = { changed, ctx };
			tip.$set(tip_changes);
		},

		i: function intro(local) {
			if (current) return;
			tip.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			tip.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section);
			}

			tip.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t38);
			}

			examples.$destroy(detaching);

			if (detaching) {
				detach(t39);
			}

			relatedvalidators.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Showing credit card icon";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, r as noop, I as destroy_each } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';

/* src/routes/guide/validators/file/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/validators/file/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.type = list[i][0];
	child_ctx.ext = list[i][1];
	return child_ctx;
}

// (10:8) <Heading>
function create_default_slot_7(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (84:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Popular MIME types");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Popular MIME types");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (91:12) {#each Object.entries(_mimeTypes) as [type, ext]}
function create_each_block(ctx) {
	var tr, td0, t0_value = ctx.type, t0, t1, td1, t2_value = ctx.ext, t2;

	return {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			td1 = element("td");
			t2 = text(t2_value);
			this.h();
		},

		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", { class: true }, false);
			var tr_nodes = children(tr);

			td0 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			t0 = claim_text(td0_nodes, t0_value);
			td0_nodes.forEach(detach);
			t1 = claim_text(tr_nodes, "\n                ");

			td1 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			t2 = claim_text(td1_nodes, t2_value);
			td1_nodes.forEach(detach);
			tr_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			td0.className = "pv2 ph3";
			add_location(td0, file, 92, 16, 4993);
			td1.className = "pv2 ph3";
			add_location(td1, file, 93, 16, 5041);
			tr.className = "striped--light-gray";
			add_location(tr, file, 91, 12, 4944);
		},

		m: function mount(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td0);
			append(td0, t0);
			append(tr, t1);
			append(tr, td1);
			append(td1, t2);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(tr);
			}
		}
	};
}

// (101:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Supporting multiple MIME types");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Supporting multiple MIME types");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (125:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (128:8) <Tip>
function create_default_slot_3(ctx) {
	var t0, a, t1, t2;

	return {
		c: function create() {
			t0 = text("Use the ");
			a = element("a");
			t1 = text("promise");
			t2 = text(" validator if you want to validate the width and height of an image");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "Use the ");

			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t1 = claim_text(a_nodes, "promise");
			a_nodes.forEach(detach);
			t2 = claim_text(nodes, " validator if you want to validate the width and height of an image");
			this.h();
		},

		h: function hydrate() {
			a.href = "/guide/validators/promise";
			a.className = "blue dim link";
			add_location(a, file, 127, 21, 6318);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a, anchor);
			append(a, t1);
			insert(target, t2, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(a);
				detach(t2);
			}
		}
	};
}

// (134:12) <PrevButton target="/guide/validators/email-address">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("emailAddress validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "emailAddress validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (135:12) <NextButton target="/guide/validators/greater-than">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("greaterThan validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "greaterThan validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, h3, t5, t6, p0, t7, a0, t8, t9, t10, table0, tr0, th0, t11, t12, th1, t13, t14, th2, t15, t16, th3, t17, t18, tr1, td0, code0, t19, t20, td1, code1, t21, t22, td2, t23, t24, td3, t25, t26, tr2, td4, code2, t27, t28, td5, code3, t29, t30, td6, t31, t32, td7, t33, t34, tr3, td8, code4, t35, t36, td9, code5, t37, t38, td10, t39, t40, td11, t41, t42, tr4, td12, code6, t43, t44, td13, code7, t45, t46, td14, t47, t48, td15, t49, t50, tr5, td16, code8, t51, t52, td17, code9, t53, t54, td18, t55, t56, td19, t57, t58, tr6, td20, code10, t59, t60, td21, code11, t61, t62, td22, t63, t64, td23, t65, t66, tr7, td24, code12, t67, t68, td25, code13, t69, t70, td26, t71, t72, td27, t73, t74, tr8, td28, code14, t75, t76, td29, code15, t77, t78, td30, t79, t80, td31, t81, t82, tr9, td32, code16, t83, t84, td33, code17, t85, t86, td34, t87, t88, td35, p1, t89, t90, p2, t91, code18, t92, t93, t94, p3, t95, t96, p4, t97, code19, t98, t99, code20, t100, t101, t102, section1, t103, p5, t104, a1, t105, t106, t107, table1, tr10, th4, t108, t109, th5, t110, t111, t112, section2, t113, p6, t114, code21, t115, t116, code22, t117, t118, t119, p7, t120, code23, t121, t122, t123, t124, section3, t125, p8, t126, t127, t128, t129, section4, div, t130, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var each_value = Object.entries(ctx._mimeTypes);

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode = new SampleCode({
		props: { lang: "javascript", code: `
FormValidation.formValidation(
    form,
    {
        fields: {
            fileInput: {
                validators: {
                    file: {
                        extension: 'mp3',
                        type: 'audio/mpeg,audio/mp3',
                        message: 'Please choose a MP3 file'
                    }
                }
            }
        }
    }
);
` },
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var tip = new Tip({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/validators/file/basic",
		frameworks: ['bootstrap', 'tachyons']
	},
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/validators/email-address",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/validators/greater-than",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("file validator");
			t1 = space();
			h2 = element("h2");
			t2 = text("Validate a file");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			h3 = element("h3");
			t5 = text("Using with form field");
			t6 = space();
			p0 = element("p");
			t7 = text("The HTML attributes are used to set the validator options via the ");
			a0 = element("a");
			t8 = text("Declarative");
			t9 = text(" plugin");
			t10 = space();
			table0 = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t11 = text("Name");
			t12 = space();
			th1 = element("th");
			t13 = text("HTML attribute");
			t14 = space();
			th2 = element("th");
			t15 = text("Type");
			t16 = space();
			th3 = element("th");
			t17 = text("Description");
			t18 = space();
			tr1 = element("tr");
			td0 = element("td");
			code0 = element("code");
			t19 = text("extension");
			t20 = space();
			td1 = element("td");
			code1 = element("code");
			t21 = text("data-fv-file___extension");
			t22 = space();
			td2 = element("td");
			t23 = text("String");
			t24 = space();
			td3 = element("td");
			t25 = text("The allowed extensions, separated by a comma");
			t26 = space();
			tr2 = element("tr");
			td4 = element("td");
			code2 = element("code");
			t27 = text("maxFiles");
			t28 = space();
			td5 = element("td");
			code3 = element("code");
			t29 = text("data-fv-file___max-files");
			t30 = space();
			td6 = element("td");
			t31 = text("Number");
			t32 = space();
			td7 = element("td");
			t33 = text("The maximum number of files");
			t34 = space();
			tr3 = element("tr");
			td8 = element("td");
			code4 = element("code");
			t35 = text("maxSize");
			t36 = space();
			td9 = element("td");
			code5 = element("code");
			t37 = text("data-fv-file___max-size");
			t38 = space();
			td10 = element("td");
			t39 = text("Number");
			t40 = space();
			td11 = element("td");
			t41 = text("The maximum file size in bytes");
			t42 = space();
			tr4 = element("tr");
			td12 = element("td");
			code6 = element("code");
			t43 = text("maxTotalSize");
			t44 = space();
			td13 = element("td");
			code7 = element("code");
			t45 = text("data-fv-file___max-total-size");
			t46 = space();
			td14 = element("td");
			t47 = text("Number");
			t48 = space();
			td15 = element("td");
			t49 = text("The maximum size in bytes for all files");
			t50 = space();
			tr5 = element("tr");
			td16 = element("td");
			code8 = element("code");
			t51 = text("minFiles");
			t52 = space();
			td17 = element("td");
			code9 = element("code");
			t53 = text("data-fv-file___min-files");
			t54 = space();
			td18 = element("td");
			t55 = text("Number");
			t56 = space();
			td19 = element("td");
			t57 = text("The minimum number of files");
			t58 = space();
			tr6 = element("tr");
			td20 = element("td");
			code10 = element("code");
			t59 = text("minSize");
			t60 = space();
			td21 = element("td");
			code11 = element("code");
			t61 = text("data-fv-file___min-size");
			t62 = space();
			td22 = element("td");
			t63 = text("Number");
			t64 = space();
			td23 = element("td");
			t65 = text("The minimum file size in bytes");
			t66 = space();
			tr7 = element("tr");
			td24 = element("td");
			code12 = element("code");
			t67 = text("minTotalSize");
			t68 = space();
			td25 = element("td");
			code13 = element("code");
			t69 = text("data-fv-file___min-total-size");
			t70 = space();
			td26 = element("td");
			t71 = text("Number");
			t72 = space();
			td27 = element("td");
			t73 = text("The minimum size in bytes for all files");
			t74 = space();
			tr8 = element("tr");
			td28 = element("td");
			code14 = element("code");
			t75 = text("message");
			t76 = space();
			td29 = element("td");
			code15 = element("code");
			t77 = text("data-fv-file___message");
			t78 = space();
			td30 = element("td");
			t79 = text("String");
			t80 = space();
			td31 = element("td");
			t81 = text("The error message");
			t82 = space();
			tr9 = element("tr");
			td32 = element("td");
			code16 = element("code");
			t83 = text("type");
			t84 = space();
			td33 = element("td");
			code17 = element("code");
			t85 = text("data-fv-file___type");
			t86 = space();
			td34 = element("td");
			t87 = text("String");
			t88 = space();
			td35 = element("td");
			p1 = element("p");
			t89 = text("The allowed MIME type, separated by a comma.");
			t90 = space();
			p2 = element("p");
			t91 = text("For example: Setting ");
			code18 = element("code");
			t92 = text("image/jpeg,image/png,application/pdf");
			t93 = text(" only allows to upload JPEG, PNG image and PDF document.");
			t94 = space();
			p3 = element("p");
			t95 = text("See popular MIME types listed below.");
			t96 = space();
			p4 = element("p");
			t97 = text("The ");
			code19 = element("code");
			t98 = text("maxSize");
			t99 = text(" and ");
			code20 = element("code");
			t100 = text("type");
			t101 = text(" are only used if the browser supports HTML 5 File API.");
			t102 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t103 = space();
			p5 = element("p");
			t104 = text("The following table shows popular MIME types. For other MIME type, you can refer to the ");
			a1 = element("a");
			t105 = text("complete list");
			t106 = text(".");
			t107 = space();
			table1 = element("table");
			tr10 = element("tr");
			th4 = element("th");
			t108 = text("MIME type");
			t109 = space();
			th5 = element("th");
			t110 = text("File extensions");
			t111 = space();

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t112 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t113 = space();
			p6 = element("p");
			t114 = text("The MIME type of given extension might be different on browsers. For example, MIME type of mp3 file is ");
			code21 = element("code");
			t115 = text("audio/mpeg");
			t116 = text(" on the Firefox, Opera, IE 7+ browsers. Meanwhile, at the time of writing, Google Chrome 42 returns ");
			code22 = element("code");
			t117 = text("audio/mp3");
			t118 = text(" for mp3 file.");
			t119 = space();
			p7 = element("p");
			t120 = text("In this case, you should pass all the possible values separated by a comma to the ");
			code23 = element("code");
			t121 = text("type");
			t122 = text(" option as following:");
			t123 = space();
			samplecode.$$.fragment.c();
			t124 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t125 = space();
			p8 = element("p");
			t126 = text("The following form allows to upload JPEG, PNG image which is smaller than 2 MB in size.");
			t127 = space();
			tip.$$.fragment.c();
			t128 = space();
			demo.$$.fragment.c();
			t129 = space();
			section4 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t130 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "file validator");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Validate a file");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n\n        ");

			h3 = claim_element(section0_nodes, "H3", {}, false);
			var h3_nodes = children(h3);

			t5 = claim_text(h3_nodes, "Using with form field");
			h3_nodes.forEach(detach);
			t6 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t7 = claim_text(p0_nodes, "The HTML attributes are used to set the validator options via the ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t8 = claim_text(a0_nodes, "Declarative");
			a0_nodes.forEach(detach);
			t9 = claim_text(p0_nodes, " plugin");
			p0_nodes.forEach(detach);
			t10 = claim_text(section0_nodes, "\n        ");

			table0 = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table0_nodes = children(table0);

			tr0 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t11 = claim_text(th0_nodes, "Name");
			th0_nodes.forEach(detach);
			t12 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t13 = claim_text(th1_nodes, "HTML attribute");
			th1_nodes.forEach(detach);
			t14 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t15 = claim_text(th2_nodes, "Type");
			th2_nodes.forEach(detach);
			t16 = claim_text(tr0_nodes, "\n                ");

			th3 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th3_nodes = children(th3);

			t17 = claim_text(th3_nodes, "Description");
			th3_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t18 = claim_text(table0_nodes, "\n            ");

			tr1 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code0 = claim_element(td0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t19 = claim_text(code0_nodes, "extension");
			code0_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t20 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			code1 = claim_element(td1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t21 = claim_text(code1_nodes, "data-fv-file___extension");
			code1_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			t22 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t23 = claim_text(td2_nodes, "String");
			td2_nodes.forEach(detach);
			t24 = claim_text(tr1_nodes, "\n                ");

			td3 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			t25 = claim_text(td3_nodes, "The allowed extensions, separated by a comma");
			td3_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t26 = claim_text(table0_nodes, "\n            ");

			tr2 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			code2 = claim_element(td4_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t27 = claim_text(code2_nodes, "maxFiles");
			code2_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t28 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			code3 = claim_element(td5_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t29 = claim_text(code3_nodes, "data-fv-file___max-files");
			code3_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			t30 = claim_text(tr2_nodes, "\n                ");

			td6 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			t31 = claim_text(td6_nodes, "Number");
			td6_nodes.forEach(detach);
			t32 = claim_text(tr2_nodes, "\n                ");

			td7 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			t33 = claim_text(td7_nodes, "The maximum number of files");
			td7_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t34 = claim_text(table0_nodes, "\n            ");

			tr3 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td8 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			code4 = claim_element(td8_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t35 = claim_text(code4_nodes, "maxSize");
			code4_nodes.forEach(detach);
			td8_nodes.forEach(detach);
			t36 = claim_text(tr3_nodes, "\n                ");

			td9 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			code5 = claim_element(td9_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t37 = claim_text(code5_nodes, "data-fv-file___max-size");
			code5_nodes.forEach(detach);
			td9_nodes.forEach(detach);
			t38 = claim_text(tr3_nodes, "\n                ");

			td10 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td10_nodes = children(td10);

			t39 = claim_text(td10_nodes, "Number");
			td10_nodes.forEach(detach);
			t40 = claim_text(tr3_nodes, "\n                ");

			td11 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td11_nodes = children(td11);

			t41 = claim_text(td11_nodes, "The maximum file size in bytes");
			td11_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			t42 = claim_text(table0_nodes, "\n            ");

			tr4 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			td12 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td12_nodes = children(td12);

			code6 = claim_element(td12_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t43 = claim_text(code6_nodes, "maxTotalSize");
			code6_nodes.forEach(detach);
			td12_nodes.forEach(detach);
			t44 = claim_text(tr4_nodes, "\n                ");

			td13 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td13_nodes = children(td13);

			code7 = claim_element(td13_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t45 = claim_text(code7_nodes, "data-fv-file___max-total-size");
			code7_nodes.forEach(detach);
			td13_nodes.forEach(detach);
			t46 = claim_text(tr4_nodes, "\n                ");

			td14 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td14_nodes = children(td14);

			t47 = claim_text(td14_nodes, "Number");
			td14_nodes.forEach(detach);
			t48 = claim_text(tr4_nodes, "\n                ");

			td15 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td15_nodes = children(td15);

			t49 = claim_text(td15_nodes, "The maximum size in bytes for all files");
			td15_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			t50 = claim_text(table0_nodes, "\n            ");

			tr5 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr5_nodes = children(tr5);

			td16 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td16_nodes = children(td16);

			code8 = claim_element(td16_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t51 = claim_text(code8_nodes, "minFiles");
			code8_nodes.forEach(detach);
			td16_nodes.forEach(detach);
			t52 = claim_text(tr5_nodes, "\n                ");

			td17 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td17_nodes = children(td17);

			code9 = claim_element(td17_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t53 = claim_text(code9_nodes, "data-fv-file___min-files");
			code9_nodes.forEach(detach);
			td17_nodes.forEach(detach);
			t54 = claim_text(tr5_nodes, "\n                ");

			td18 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td18_nodes = children(td18);

			t55 = claim_text(td18_nodes, "Number");
			td18_nodes.forEach(detach);
			t56 = claim_text(tr5_nodes, "\n                ");

			td19 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td19_nodes = children(td19);

			t57 = claim_text(td19_nodes, "The minimum number of files");
			td19_nodes.forEach(detach);
			tr5_nodes.forEach(detach);
			t58 = claim_text(table0_nodes, "\n            ");

			tr6 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr6_nodes = children(tr6);

			td20 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td20_nodes = children(td20);

			code10 = claim_element(td20_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t59 = claim_text(code10_nodes, "minSize");
			code10_nodes.forEach(detach);
			td20_nodes.forEach(detach);
			t60 = claim_text(tr6_nodes, "\n                ");

			td21 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td21_nodes = children(td21);

			code11 = claim_element(td21_nodes, "CODE", {}, false);
			var code11_nodes = children(code11);

			t61 = claim_text(code11_nodes, "data-fv-file___min-size");
			code11_nodes.forEach(detach);
			td21_nodes.forEach(detach);
			t62 = claim_text(tr6_nodes, "\n                ");

			td22 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td22_nodes = children(td22);

			t63 = claim_text(td22_nodes, "Number");
			td22_nodes.forEach(detach);
			t64 = claim_text(tr6_nodes, "\n                ");

			td23 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td23_nodes = children(td23);

			t65 = claim_text(td23_nodes, "The minimum file size in bytes");
			td23_nodes.forEach(detach);
			tr6_nodes.forEach(detach);
			t66 = claim_text(table0_nodes, "\n            ");

			tr7 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr7_nodes = children(tr7);

			td24 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td24_nodes = children(td24);

			code12 = claim_element(td24_nodes, "CODE", {}, false);
			var code12_nodes = children(code12);

			t67 = claim_text(code12_nodes, "minTotalSize");
			code12_nodes.forEach(detach);
			td24_nodes.forEach(detach);
			t68 = claim_text(tr7_nodes, "\n                ");

			td25 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td25_nodes = children(td25);

			code13 = claim_element(td25_nodes, "CODE", {}, false);
			var code13_nodes = children(code13);

			t69 = claim_text(code13_nodes, "data-fv-file___min-total-size");
			code13_nodes.forEach(detach);
			td25_nodes.forEach(detach);
			t70 = claim_text(tr7_nodes, "\n                ");

			td26 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td26_nodes = children(td26);

			t71 = claim_text(td26_nodes, "Number");
			td26_nodes.forEach(detach);
			t72 = claim_text(tr7_nodes, "\n                ");

			td27 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td27_nodes = children(td27);

			t73 = claim_text(td27_nodes, "The minimum size in bytes for all files");
			td27_nodes.forEach(detach);
			tr7_nodes.forEach(detach);
			t74 = claim_text(table0_nodes, "\n            ");

			tr8 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr8_nodes = children(tr8);

			td28 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td28_nodes = children(td28);

			code14 = claim_element(td28_nodes, "CODE", {}, false);
			var code14_nodes = children(code14);

			t75 = claim_text(code14_nodes, "message");
			code14_nodes.forEach(detach);
			td28_nodes.forEach(detach);
			t76 = claim_text(tr8_nodes, "\n                ");

			td29 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td29_nodes = children(td29);

			code15 = claim_element(td29_nodes, "CODE", {}, false);
			var code15_nodes = children(code15);

			t77 = claim_text(code15_nodes, "data-fv-file___message");
			code15_nodes.forEach(detach);
			td29_nodes.forEach(detach);
			t78 = claim_text(tr8_nodes, "\n                ");

			td30 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td30_nodes = children(td30);

			t79 = claim_text(td30_nodes, "String");
			td30_nodes.forEach(detach);
			t80 = claim_text(tr8_nodes, "\n                ");

			td31 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td31_nodes = children(td31);

			t81 = claim_text(td31_nodes, "The error message");
			td31_nodes.forEach(detach);
			tr8_nodes.forEach(detach);
			t82 = claim_text(table0_nodes, "\n            ");

			tr9 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr9_nodes = children(tr9);

			td32 = claim_element(tr9_nodes, "TD", { class: true }, false);
			var td32_nodes = children(td32);

			code16 = claim_element(td32_nodes, "CODE", {}, false);
			var code16_nodes = children(code16);

			t83 = claim_text(code16_nodes, "type");
			code16_nodes.forEach(detach);
			td32_nodes.forEach(detach);
			t84 = claim_text(tr9_nodes, "\n                ");

			td33 = claim_element(tr9_nodes, "TD", { class: true }, false);
			var td33_nodes = children(td33);

			code17 = claim_element(td33_nodes, "CODE", {}, false);
			var code17_nodes = children(code17);

			t85 = claim_text(code17_nodes, "data-fv-file___type");
			code17_nodes.forEach(detach);
			td33_nodes.forEach(detach);
			t86 = claim_text(tr9_nodes, "\n                ");

			td34 = claim_element(tr9_nodes, "TD", { class: true }, false);
			var td34_nodes = children(td34);

			t87 = claim_text(td34_nodes, "String");
			td34_nodes.forEach(detach);
			t88 = claim_text(tr9_nodes, "\n                ");

			td35 = claim_element(tr9_nodes, "TD", { class: true }, false);
			var td35_nodes = children(td35);

			p1 = claim_element(td35_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t89 = claim_text(p1_nodes, "The allowed MIME type, separated by a comma.");
			p1_nodes.forEach(detach);
			t90 = claim_text(td35_nodes, "\n                    ");

			p2 = claim_element(td35_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t91 = claim_text(p2_nodes, "For example: Setting ");

			code18 = claim_element(p2_nodes, "CODE", {}, false);
			var code18_nodes = children(code18);

			t92 = claim_text(code18_nodes, "image/jpeg,image/png,application/pdf");
			code18_nodes.forEach(detach);
			t93 = claim_text(p2_nodes, " only allows to upload JPEG, PNG image and PDF document.");
			p2_nodes.forEach(detach);
			t94 = claim_text(td35_nodes, "\n                    ");

			p3 = claim_element(td35_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t95 = claim_text(p3_nodes, "See popular MIME types listed below.");
			p3_nodes.forEach(detach);
			td35_nodes.forEach(detach);
			tr9_nodes.forEach(detach);
			table0_nodes.forEach(detach);
			t96 = claim_text(section0_nodes, "\n        ");

			p4 = claim_element(section0_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t97 = claim_text(p4_nodes, "The ");

			code19 = claim_element(p4_nodes, "CODE", {}, false);
			var code19_nodes = children(code19);

			t98 = claim_text(code19_nodes, "maxSize");
			code19_nodes.forEach(detach);
			t99 = claim_text(p4_nodes, " and ");

			code20 = claim_element(p4_nodes, "CODE", {}, false);
			var code20_nodes = children(code20);

			t100 = claim_text(code20_nodes, "type");
			code20_nodes.forEach(detach);
			t101 = claim_text(p4_nodes, " are only used if the browser supports HTML 5 File API.");
			p4_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t102 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t103 = claim_text(section1_nodes, "\n        ");

			p5 = claim_element(section1_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t104 = claim_text(p5_nodes, "The following table shows popular MIME types. For other MIME type, you can refer to the ");

			a1 = claim_element(p5_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t105 = claim_text(a1_nodes, "complete list");
			a1_nodes.forEach(detach);
			t106 = claim_text(p5_nodes, ".");
			p5_nodes.forEach(detach);
			t107 = claim_text(section1_nodes, "\n        ");

			table1 = claim_element(section1_nodes, "TABLE", { class: true }, false);
			var table1_nodes = children(table1);

			tr10 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr10_nodes = children(tr10);

			th4 = claim_element(tr10_nodes, "TH", { class: true }, false);
			var th4_nodes = children(th4);

			t108 = claim_text(th4_nodes, "MIME type");
			th4_nodes.forEach(detach);
			t109 = claim_text(tr10_nodes, "\n                ");

			th5 = claim_element(tr10_nodes, "TH", { class: true }, false);
			var th5_nodes = children(th5);

			t110 = claim_text(th5_nodes, "File extensions");
			th5_nodes.forEach(detach);
			tr10_nodes.forEach(detach);
			t111 = claim_text(table1_nodes, "\n            ");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(table1_nodes);
			}

			table1_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t112 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t113 = claim_text(section2_nodes, "\n        ");

			p6 = claim_element(section2_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t114 = claim_text(p6_nodes, "The MIME type of given extension might be different on browsers. For example, MIME type of mp3 file is ");

			code21 = claim_element(p6_nodes, "CODE", {}, false);
			var code21_nodes = children(code21);

			t115 = claim_text(code21_nodes, "audio/mpeg");
			code21_nodes.forEach(detach);
			t116 = claim_text(p6_nodes, " on the Firefox, Opera, IE 7+ browsers. Meanwhile, at the time of writing, Google Chrome 42 returns ");

			code22 = claim_element(p6_nodes, "CODE", {}, false);
			var code22_nodes = children(code22);

			t117 = claim_text(code22_nodes, "audio/mp3");
			code22_nodes.forEach(detach);
			t118 = claim_text(p6_nodes, " for mp3 file.");
			p6_nodes.forEach(detach);
			t119 = claim_text(section2_nodes, "\n        ");

			p7 = claim_element(section2_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t120 = claim_text(p7_nodes, "In this case, you should pass all the possible values separated by a comma to the ");

			code23 = claim_element(p7_nodes, "CODE", {}, false);
			var code23_nodes = children(code23);

			t121 = claim_text(code23_nodes, "type");
			code23_nodes.forEach(detach);
			t122 = claim_text(p7_nodes, " option as following:");
			p7_nodes.forEach(detach);
			t123 = claim_text(section2_nodes, "\n");
			samplecode.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t124 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t125 = claim_text(section3_nodes, "\n\n        ");

			p8 = claim_element(section3_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t126 = claim_text(p8_nodes, "The following form allows to upload JPEG, PNG image which is smaller than 2 MB in size.");
			p8_nodes.forEach(detach);
			t127 = claim_text(section3_nodes, "\n        ");
			tip.$$.fragment.l(section3_nodes);
			t128 = claim_text(section3_nodes, "\n        ");
			demo.$$.fragment.l(section3_nodes);
			section3_nodes.forEach(detach);
			t129 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			div = claim_element(section4_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t130 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section4_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 96);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 148);
			add_location(h3, file, 11, 8, 262);
			a0.href = "/guide/plugins/declarative";
			a0.className = "blue dim link";
			add_location(a0, file, 12, 95, 388);
			p0.className = "lh-copy i";
			add_location(p0, file, 12, 8, 301);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 15, 16, 605);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 16, 16, 665);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 17, 16, 735);
			th3.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th3, file, 18, 16, 795);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 14, 12, 556);
			add_location(code0, file, 21, 36, 945);
			td0.className = "pv2 ph3";
			add_location(td0, file, 21, 16, 925);
			add_location(code1, file, 22, 36, 1009);
			td1.className = "pv2 ph3";
			add_location(td1, file, 22, 16, 989);
			td2.className = "pv2 ph3";
			add_location(td2, file, 23, 16, 1068);
			td3.className = "pv2 ph3";
			add_location(td3, file, 24, 16, 1116);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 20, 12, 876);
			add_location(code2, file, 27, 36, 1285);
			td4.className = "pv2 ph3";
			add_location(td4, file, 27, 16, 1265);
			add_location(code3, file, 28, 36, 1348);
			td5.className = "pv2 ph3";
			add_location(td5, file, 28, 16, 1328);
			td6.className = "pv2 ph3";
			add_location(td6, file, 29, 16, 1407);
			td7.className = "pv2 ph3";
			add_location(td7, file, 30, 16, 1455);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 26, 12, 1216);
			add_location(code4, file, 33, 36, 1607);
			td8.className = "pv2 ph3";
			add_location(td8, file, 33, 16, 1587);
			add_location(code5, file, 34, 36, 1669);
			td9.className = "pv2 ph3";
			add_location(td9, file, 34, 16, 1649);
			td10.className = "pv2 ph3";
			add_location(td10, file, 35, 16, 1727);
			td11.className = "pv2 ph3";
			add_location(td11, file, 36, 16, 1775);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 32, 12, 1538);
			add_location(code6, file, 39, 36, 1930);
			td12.className = "pv2 ph3";
			add_location(td12, file, 39, 16, 1910);
			add_location(code7, file, 40, 36, 1997);
			td13.className = "pv2 ph3";
			add_location(td13, file, 40, 16, 1977);
			td14.className = "pv2 ph3";
			add_location(td14, file, 41, 16, 2061);
			td15.className = "pv2 ph3";
			add_location(td15, file, 42, 16, 2109);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 38, 12, 1861);
			add_location(code8, file, 45, 36, 2273);
			td16.className = "pv2 ph3";
			add_location(td16, file, 45, 16, 2253);
			add_location(code9, file, 46, 36, 2336);
			td17.className = "pv2 ph3";
			add_location(td17, file, 46, 16, 2316);
			td18.className = "pv2 ph3";
			add_location(td18, file, 47, 16, 2395);
			td19.className = "pv2 ph3";
			add_location(td19, file, 48, 16, 2443);
			tr5.className = "striped--light-gray";
			add_location(tr5, file, 44, 12, 2204);
			add_location(code10, file, 51, 36, 2595);
			td20.className = "pv2 ph3";
			add_location(td20, file, 51, 16, 2575);
			add_location(code11, file, 52, 36, 2657);
			td21.className = "pv2 ph3";
			add_location(td21, file, 52, 16, 2637);
			td22.className = "pv2 ph3";
			add_location(td22, file, 53, 16, 2715);
			td23.className = "pv2 ph3";
			add_location(td23, file, 54, 16, 2763);
			tr6.className = "striped--light-gray";
			add_location(tr6, file, 50, 12, 2526);
			add_location(code12, file, 57, 36, 2918);
			td24.className = "pv2 ph3";
			add_location(td24, file, 57, 16, 2898);
			add_location(code13, file, 58, 36, 2985);
			td25.className = "pv2 ph3";
			add_location(td25, file, 58, 16, 2965);
			td26.className = "pv2 ph3";
			add_location(td26, file, 59, 16, 3049);
			td27.className = "pv2 ph3";
			add_location(td27, file, 60, 16, 3097);
			tr7.className = "striped--light-gray";
			add_location(tr7, file, 56, 12, 2849);
			add_location(code14, file, 63, 36, 3261);
			td28.className = "pv2 ph3";
			add_location(td28, file, 63, 16, 3241);
			add_location(code15, file, 64, 36, 3323);
			td29.className = "pv2 ph3";
			add_location(td29, file, 64, 16, 3303);
			td30.className = "pv2 ph3";
			add_location(td30, file, 65, 16, 3380);
			td31.className = "pv2 ph3";
			add_location(td31, file, 66, 16, 3428);
			tr8.className = "striped--light-gray";
			add_location(tr8, file, 62, 12, 3192);
			add_location(code16, file, 69, 36, 3570);
			td32.className = "pv2 ph3";
			add_location(td32, file, 69, 16, 3550);
			add_location(code17, file, 70, 36, 3629);
			td33.className = "pv2 ph3";
			add_location(td33, file, 70, 16, 3609);
			td34.className = "pv2 ph3";
			add_location(td34, file, 71, 16, 3683);
			p1.className = "lh-copy";
			add_location(p1, file, 73, 20, 3772);
			add_location(code18, file, 74, 60, 3900);
			p2.className = "lh-copy";
			add_location(p2, file, 74, 20, 3860);
			p3.className = "lh-copy";
			add_location(p3, file, 75, 20, 4030);
			td35.className = "pv2 ph3";
			add_location(td35, file, 72, 16, 3731);
			tr9.className = "striped--light-gray";
			add_location(tr9, file, 68, 12, 3501);
			table0.className = "collapse ba br2 b--black-10 pv2 ph3 w-100 mb4";
			add_location(table0, file, 13, 8, 482);
			add_location(code19, file, 79, 31, 4178);
			add_location(code20, file, 79, 56, 4203);
			p4.className = "lh-copy";
			add_location(p4, file, 79, 8, 4155);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 196);
			a1.href = "https://www.sitepoint.com/web-foundations/mime-types-complete-list";
			a1.className = "blue dim link";
			add_location(a1, file, 84, 115, 4483);
			p5.className = "lh-copy";
			add_location(p5, file, 84, 8, 4376);
			th4.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th4, file, 87, 16, 4732);
			th5.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th5, file, 88, 16, 4797);
			tr10.className = "striped--light-gray";
			add_location(tr10, file, 86, 12, 4683);
			table1.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table1, file, 85, 8, 4613);
			section1.className = "mv5";
			add_location(section1, file, 82, 4, 4300);
			add_location(code21, file, 101, 130, 5357);
			add_location(code22, file, 101, 253, 5480);
			p6.className = "lh-copy";
			add_location(p6, file, 101, 8, 5235);
			add_location(code23, file, 102, 109, 5630);
			p7.className = "lh-copy";
			add_location(p7, file, 102, 8, 5529);
			section2.className = "mv5";
			add_location(section2, file, 99, 4, 5147);
			p8.className = "lh-copy";
			add_location(p8, file, 126, 8, 6186);
			section3.className = "mv5";
			add_location(section3, file, 123, 4, 6114);
			div.className = "flex";
			add_location(div, file, 132, 8, 6605);
			section4.className = "mv5";
			add_location(section4, file, 131, 4, 6575);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, h3);
			append(h3, t5);
			append(section0, t6);
			append(section0, p0);
			append(p0, t7);
			append(p0, a0);
			append(a0, t8);
			append(p0, t9);
			append(section0, t10);
			append(section0, table0);
			append(table0, tr0);
			append(tr0, th0);
			append(th0, t11);
			append(tr0, t12);
			append(tr0, th1);
			append(th1, t13);
			append(tr0, t14);
			append(tr0, th2);
			append(th2, t15);
			append(tr0, t16);
			append(tr0, th3);
			append(th3, t17);
			append(table0, t18);
			append(table0, tr1);
			append(tr1, td0);
			append(td0, code0);
			append(code0, t19);
			append(tr1, t20);
			append(tr1, td1);
			append(td1, code1);
			append(code1, t21);
			append(tr1, t22);
			append(tr1, td2);
			append(td2, t23);
			append(tr1, t24);
			append(tr1, td3);
			append(td3, t25);
			append(table0, t26);
			append(table0, tr2);
			append(tr2, td4);
			append(td4, code2);
			append(code2, t27);
			append(tr2, t28);
			append(tr2, td5);
			append(td5, code3);
			append(code3, t29);
			append(tr2, t30);
			append(tr2, td6);
			append(td6, t31);
			append(tr2, t32);
			append(tr2, td7);
			append(td7, t33);
			append(table0, t34);
			append(table0, tr3);
			append(tr3, td8);
			append(td8, code4);
			append(code4, t35);
			append(tr3, t36);
			append(tr3, td9);
			append(td9, code5);
			append(code5, t37);
			append(tr3, t38);
			append(tr3, td10);
			append(td10, t39);
			append(tr3, t40);
			append(tr3, td11);
			append(td11, t41);
			append(table0, t42);
			append(table0, tr4);
			append(tr4, td12);
			append(td12, code6);
			append(code6, t43);
			append(tr4, t44);
			append(tr4, td13);
			append(td13, code7);
			append(code7, t45);
			append(tr4, t46);
			append(tr4, td14);
			append(td14, t47);
			append(tr4, t48);
			append(tr4, td15);
			append(td15, t49);
			append(table0, t50);
			append(table0, tr5);
			append(tr5, td16);
			append(td16, code8);
			append(code8, t51);
			append(tr5, t52);
			append(tr5, td17);
			append(td17, code9);
			append(code9, t53);
			append(tr5, t54);
			append(tr5, td18);
			append(td18, t55);
			append(tr5, t56);
			append(tr5, td19);
			append(td19, t57);
			append(table0, t58);
			append(table0, tr6);
			append(tr6, td20);
			append(td20, code10);
			append(code10, t59);
			append(tr6, t60);
			append(tr6, td21);
			append(td21, code11);
			append(code11, t61);
			append(tr6, t62);
			append(tr6, td22);
			append(td22, t63);
			append(tr6, t64);
			append(tr6, td23);
			append(td23, t65);
			append(table0, t66);
			append(table0, tr7);
			append(tr7, td24);
			append(td24, code12);
			append(code12, t67);
			append(tr7, t68);
			append(tr7, td25);
			append(td25, code13);
			append(code13, t69);
			append(tr7, t70);
			append(tr7, td26);
			append(td26, t71);
			append(tr7, t72);
			append(tr7, td27);
			append(td27, t73);
			append(table0, t74);
			append(table0, tr8);
			append(tr8, td28);
			append(td28, code14);
			append(code14, t75);
			append(tr8, t76);
			append(tr8, td29);
			append(td29, code15);
			append(code15, t77);
			append(tr8, t78);
			append(tr8, td30);
			append(td30, t79);
			append(tr8, t80);
			append(tr8, td31);
			append(td31, t81);
			append(table0, t82);
			append(table0, tr9);
			append(tr9, td32);
			append(td32, code16);
			append(code16, t83);
			append(tr9, t84);
			append(tr9, td33);
			append(td33, code17);
			append(code17, t85);
			append(tr9, t86);
			append(tr9, td34);
			append(td34, t87);
			append(tr9, t88);
			append(tr9, td35);
			append(td35, p1);
			append(p1, t89);
			append(td35, t90);
			append(td35, p2);
			append(p2, t91);
			append(p2, code18);
			append(code18, t92);
			append(p2, t93);
			append(td35, t94);
			append(td35, p3);
			append(p3, t95);
			append(section0, t96);
			append(section0, p4);
			append(p4, t97);
			append(p4, code19);
			append(code19, t98);
			append(p4, t99);
			append(p4, code20);
			append(code20, t100);
			append(p4, t101);
			insert(target, t102, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t103);
			append(section1, p5);
			append(p5, t104);
			append(p5, a1);
			append(a1, t105);
			append(p5, t106);
			append(section1, t107);
			append(section1, table1);
			append(table1, tr10);
			append(tr10, th4);
			append(th4, t108);
			append(tr10, t109);
			append(tr10, th5);
			append(th5, t110);
			append(table1, t111);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(table1, null);
			}

			insert(target, t112, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t113);
			append(section2, p6);
			append(p6, t114);
			append(p6, code21);
			append(code21, t115);
			append(p6, t116);
			append(p6, code22);
			append(code22, t117);
			append(p6, t118);
			append(section2, t119);
			append(section2, p7);
			append(p7, t120);
			append(p7, code23);
			append(code23, t121);
			append(p7, t122);
			append(section2, t123);
			mount_component(samplecode, section2, null);
			insert(target, t124, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t125);
			append(section3, p8);
			append(p8, t126);
			append(section3, t127);
			mount_component(tip, section3, null);
			append(section3, t128);
			mount_component(demo, section3, null);
			insert(target, t129, anchor);
			insert(target, section4, anchor);
			append(section4, div);
			mount_component(prevbutton, div, null);
			append(div, t130);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			if (changed._mimeTypes) {
				each_value = Object.entries(ctx._mimeTypes);

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(table1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var tip_changes = {};
			if (changed.$$scope) tip_changes.$$scope = { changed, ctx };
			tip.$set(tip_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			samplecode.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			tip.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			samplecode.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			tip.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			if (detaching) {
				detach(t102);
				detach(section1);
			}

			heading1.$destroy();

			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach(t112);
				detach(section2);
			}

			heading2.$destroy();

			samplecode.$destroy();

			if (detaching) {
				detach(t124);
				detach(section3);
			}

			heading3.$destroy();

			tip.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t129);
				detach(section4);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • file validator";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

function instance($$self) {
	

const _mimeTypes = {
    doc: 'application/msword',
    pdf: 'application/pdf',
    rtf: 'application/rtf',
    xls: 'application/vnd.ms-excel',
    ppt: 'application/vnd.ms-powerpoint',
    rar: 'application/x-rar-compressed',
    swf: 'application/x-shockwave-flash',
    zip: 'application/zip',
    'mid midi kar': 'audio/midi',
    mp3: 'audio/mpeg,audio/mp3',
    ogg: 'audio/ogg',
    m4a: 'audio/x-m4a',
    ra: 'audio/x-realaudio',
    gif: 'image/gif',
    'jpeg jpg': 'image/jpeg',
    png: 'image/png',
    'tif tiff': 'image/tiff',
    wbmp: 'image/vnd.wap.wbmp',
    ico: 'image/x-icon',
    jng: 'image/x-jng',
    bmp: 'image/x-ms-bmp',
    'svg svgz': 'image/svg+xml',
    webp: 'image/webp',
    css: 'text/css',
    'html htm shtml': 'text/html',
    txt: 'text/plain',
    xml: 'text/xml',
    '3gpp 3gp': 'video/3gpp',
    mp4: 'video/mp4',
    'mpeg mpg': 'video/mpeg',
    mov: 'video/quicktime',
    webm: 'video/webm',
    flv: 'video/x-flv',
    m4v: 'video/x-m4v',
    wmv: 'video/x-ms-wmv',
    avi: 'video/x-msvideo',
};

	return { _mimeTypes };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';

/* src/routes/guide/plugins/l10n/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/plugins/l10n/index.svelte";

// (10:8) <Heading>
function create_default_slot_7(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Usage");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Usage");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (75:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Defining messages");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Defining messages");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (133:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Switching locales");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Switching locales");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (179:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (185:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changelog");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changelog");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (193:12) <PrevButton target="/guide/plugins/j">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("J plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "J plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (194:12) <NextButton target="/guide/plugins/mailgun">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Mailgun plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Mailgun plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, p0, t5, code0, t6, t7, t8, t9, p1, t10, t11, t12, p2, t13, code1, t14, t15, t16, section1, t17, p3, t18, code2, t19, t20, code3, t21, t22, code4, t23, t24, t25, p4, t26, t27, h30, t28, t29, p5, t30, t31, t32, h31, t33, t34, p6, t35, t36, t37, h32, t38, t39, p7, t40, t41, t42, section2, t43, p8, t44, a, t45, t46, t47, t48, section3, t49, p9, t50, t51, t52, section4, t53, ul, li, t54, t55, section5, div, t56, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
FormValidation.formValidation(
    document.getElementById('demoForm'),
    {
        fields: {
            userName: {
                validators: {
                    notEmpty: {
                        message: '...'
                    },
                    stringLength: {
                        message: '...'
                    },
                },
            },
            ...
        },
    }
);
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="demoForm" method="POST">
        ...
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>    
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/plugins/L10n.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                l10n: new FormValidation.plugins.L10n({
                    // Replace FIELD_NAME and VALIDATOR_NAME with real names
                    FIELD_NAME: {
                        VALIDATOR_NAME: ...,
                    },
                }),
                ...
            },
        }
    );
});
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "html", code: `
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>

<!--
You can include many language packages as you want. Their order don't matter
as you ensure that they are loaded after FormValidation(.min).js
-->
<script-tag src="/vendors/formvalidation/dist/js/locales/en_US.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/locales/fr_FR.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/locales/vi_VN.min.js"></script-tag>
` },
		$$inline: true
	});

	var samplecode3 = new SampleCode({
		props: { lang: "javascript", code: `
plugins: {
    ...
    l10n: new FormValidation.plugins.L10n({
        username: {
            stringLength: {
                en_US: 'The username must be between %s and %s characters long',
                vi_VN: 'Tên đăng nhập phải có ít nhất %s và nhiều nhất %s ký tự',
            },
        },
    }),
}
` },
		$$inline: true
	});

	var samplecode4 = new SampleCode({
		props: { lang: "javascript", code: `
plugins: {
    ...
    l10n: new FormValidation.plugins.L10n({
        password: {
            stringLength: function(field, validator) {
                // field is the field name
                // validator the name of current validator
                return {
                    en_US: 'The password must have at least %s characters',
                    vi_VN: 'Mật khẩu phải có ít nhất %s ký tự',
                };
            },
        },
    }),
}
` },
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode5 = new SampleCode({
		props: { lang: "html", code: `
<!-- To switch between locales. The data-locale attribute will be used later -->
<button type="button" class="setLocaleButton" data-locale="en_US">English</button>
<button type="button" class="setLocaleButton" data-locale="vi_VN">Tiếng Việt</button>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    const fv = FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            // Set the default locale
            locale: 'en_US',
            localization: FormValidation.locales.en_US,
            
            fields: {
                ...
            },
            plugins: {
                l10n: new FormValidation.plugins.L10n({
                    ...
                }),
                ...
            },
        }
    );

    // Find all buttons that can change locale
    const localeButtons = Array.from(document.querySelectorAll('.setLocaleButton'));
    localeButtons.forEach(function(btn) {
        btn.addEventListener('click', function() {
            // Get the associate locale from data-locale attribute
            const locale = btn.getAttribute('data-locale');

            // Change the locale
            fv.setLocale(locale, FormValidation.locales[locale])
              .resetForm();
        });
    });
});
</script-tag>
` },
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/plugins/l10n/basic",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading4 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/plugins/j",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/plugins/mailgun",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("L10n plugin");
			t1 = space();
			h2 = element("h2");
			t2 = text("Support multiple locales for error messages");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			p0 = element("p");
			t5 = text("As you already knew, you can use the ");
			code0 = element("code");
			t6 = text("message");
			t7 = text(" option to indicate error message for each validator:");
			t8 = space();
			samplecode0.$$.fragment.c();
			t9 = space();
			p1 = element("p");
			t10 = text("This L10n plugin allows to define messages in different languages. The following piece of code is the starting point to use the L10n plugin:");
			t11 = space();
			samplecode1.$$.fragment.c();
			t12 = space();
			p2 = element("p");
			t13 = text("The sample code above assumes that the FormValidation files are placed inside the ");
			code1 = element("code");
			t14 = text("vendors");
			t15 = text(" directory. You might need to change the path depending on where you place them on the server.");
			t16 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t17 = space();
			p3 = element("p");
			t18 = text("The languages are distinguished by locales. A locale is combination of ");
			code2 = element("code");
			t19 = text("countrycode_LANGUAGECODE");
			t20 = text(". Here ");
			code3 = element("code");
			t21 = text("countrycode");
			t22 = text("\n            and ");
			code4 = element("code");
			t23 = text("LANGUAGECODE");
			t24 = text(" are the ISO 3166 country and language codes in lowercase and uppercase respectively. en_US (default), fr_FR, de_DE, vi_VN are some examples.");
			t25 = space();
			p4 = element("p");
			t26 = text("The L10n plugin provides three ways to define messages in different languages.");
			t27 = space();
			h30 = element("h3");
			t28 = text("Using language packages");
			t29 = space();
			p5 = element("p");
			t30 = text("There are many supported language packages which provide the translation of default validator message in given language. In order to use them, you only need to include the language file:");
			t31 = space();
			samplecode2.$$.fragment.c();
			t32 = space();
			h31 = element("h3");
			t33 = text("Using literal object");
			t34 = space();
			p6 = element("p");
			t35 = text("Map the locale with associating message for particular validator:");
			t36 = space();
			samplecode3.$$.fragment.c();
			t37 = space();
			h32 = element("h3");
			t38 = text("Using a callback function");
			t39 = space();
			p7 = element("p");
			t40 = text("You also can use a callback function that returns the literal object as above:");
			t41 = space();
			samplecode4.$$.fragment.c();
			t42 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t43 = space();
			p8 = element("p");
			t44 = text("The previous section introduces various ways to define the message in different locales. To switch messages between them (via a switcher control, for example), you need to call the ");
			a = element("a");
			t45 = text("setLocale()");
			t46 = text(" method:");
			t47 = space();
			samplecode5.$$.fragment.c();
			t48 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t49 = space();
			p9 = element("p");
			t50 = text("The following example uses all of three ways above to define the messages in different languages. It's up to you to choose any way in a multilingual website.");
			t51 = space();
			demo.$$.fragment.c();
			t52 = space();
			section4 = element("section");
			heading4.$$.fragment.c();
			t53 = space();
			ul = element("ul");
			li = element("li");
			t54 = text("v1.0.0: First release");
			t55 = space();
			section5 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t56 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "L10n plugin");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Support multiple locales for error messages");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t5 = claim_text(p0_nodes, "As you already knew, you can use the ");

			code0 = claim_element(p0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t6 = claim_text(code0_nodes, "message");
			code0_nodes.forEach(detach);
			t7 = claim_text(p0_nodes, " option to indicate error message for each validator:");
			p0_nodes.forEach(detach);
			t8 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t9 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t10 = claim_text(p1_nodes, "This L10n plugin allows to define messages in different languages. The following piece of code is the starting point to use the L10n plugin:");
			p1_nodes.forEach(detach);
			t11 = claim_text(section0_nodes, "\n");
			samplecode1.$$.fragment.l(section0_nodes);
			t12 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t13 = claim_text(p2_nodes, "The sample code above assumes that the FormValidation files are placed inside the ");

			code1 = claim_element(p2_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t14 = claim_text(code1_nodes, "vendors");
			code1_nodes.forEach(detach);
			t15 = claim_text(p2_nodes, " directory. You might need to change the path depending on where you place them on the server.");
			p2_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t16 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t17 = claim_text(section1_nodes, "\n\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t18 = claim_text(p3_nodes, "The languages are distinguished by locales. A locale is combination of ");

			code2 = claim_element(p3_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t19 = claim_text(code2_nodes, "countrycode_LANGUAGECODE");
			code2_nodes.forEach(detach);
			t20 = claim_text(p3_nodes, ". Here ");

			code3 = claim_element(p3_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t21 = claim_text(code3_nodes, "countrycode");
			code3_nodes.forEach(detach);
			t22 = claim_text(p3_nodes, "\n            and ");

			code4 = claim_element(p3_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t23 = claim_text(code4_nodes, "LANGUAGECODE");
			code4_nodes.forEach(detach);
			t24 = claim_text(p3_nodes, " are the ISO 3166 country and language codes in lowercase and uppercase respectively. en_US (default), fr_FR, de_DE, vi_VN are some examples.");
			p3_nodes.forEach(detach);
			t25 = claim_text(section1_nodes, "\n        ");

			p4 = claim_element(section1_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t26 = claim_text(p4_nodes, "The L10n plugin provides three ways to define messages in different languages.");
			p4_nodes.forEach(detach);
			t27 = claim_text(section1_nodes, "\n\n        ");

			h30 = claim_element(section1_nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t28 = claim_text(h30_nodes, "Using language packages");
			h30_nodes.forEach(detach);
			t29 = claim_text(section1_nodes, "\n        ");

			p5 = claim_element(section1_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t30 = claim_text(p5_nodes, "There are many supported language packages which provide the translation of default validator message in given language. In order to use them, you only need to include the language file:");
			p5_nodes.forEach(detach);
			t31 = claim_text(section1_nodes, "\n");
			samplecode2.$$.fragment.l(section1_nodes);
			t32 = claim_text(section1_nodes, "\n\n        ");

			h31 = claim_element(section1_nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t33 = claim_text(h31_nodes, "Using literal object");
			h31_nodes.forEach(detach);
			t34 = claim_text(section1_nodes, "\n        ");

			p6 = claim_element(section1_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t35 = claim_text(p6_nodes, "Map the locale with associating message for particular validator:");
			p6_nodes.forEach(detach);
			t36 = claim_text(section1_nodes, "\n");
			samplecode3.$$.fragment.l(section1_nodes);
			t37 = claim_text(section1_nodes, "\n\n        ");

			h32 = claim_element(section1_nodes, "H3", {}, false);
			var h32_nodes = children(h32);

			t38 = claim_text(h32_nodes, "Using a callback function");
			h32_nodes.forEach(detach);
			t39 = claim_text(section1_nodes, "\n        ");

			p7 = claim_element(section1_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t40 = claim_text(p7_nodes, "You also can use a callback function that returns the literal object as above:");
			p7_nodes.forEach(detach);
			t41 = claim_text(section1_nodes, "\n");
			samplecode4.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t42 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t43 = claim_text(section2_nodes, "\n        ");

			p8 = claim_element(section2_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t44 = claim_text(p8_nodes, "The previous section introduces various ways to define the message in different locales. To switch messages between them (via a switcher control, for example), you need to call the ");

			a = claim_element(p8_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t45 = claim_text(a_nodes, "setLocale()");
			a_nodes.forEach(detach);
			t46 = claim_text(p8_nodes, " method:");
			p8_nodes.forEach(detach);
			t47 = claim_text(section2_nodes, "\n");
			samplecode5.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t48 = claim_text(nodes, "\n    \n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t49 = claim_text(section3_nodes, "\n        ");

			p9 = claim_element(section3_nodes, "P", { class: true }, false);
			var p9_nodes = children(p9);

			t50 = claim_text(p9_nodes, "The following example uses all of three ways above to define the messages in different languages. It's up to you to choose any way in a multilingual website.");
			p9_nodes.forEach(detach);
			t51 = claim_text(section3_nodes, "\n        ");
			demo.$$.fragment.l(section3_nodes);
			section3_nodes.forEach(detach);
			t52 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			heading4.$$.fragment.l(section4_nodes);
			t53 = claim_text(section4_nodes, "\n        ");

			ul = claim_element(section4_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li = claim_element(ul_nodes, "LI", {}, false);
			var li_nodes = children(li);

			t54 = claim_text(li_nodes, "v1.0.0: First release");
			li_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			section4_nodes.forEach(detach);
			t55 = claim_text(nodes, "\n\n    ");

			section5 = claim_element(nodes, "SECTION", { class: true }, false);
			var section5_nodes = children(section5);

			div = claim_element(section5_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t56 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section5_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 93);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 142);
			add_location(code0, file, 10, 64, 337);
			p0.className = "lh-copy";
			add_location(p0, file, 10, 8, 281);
			p1.className = "lh-copy";
			add_location(p1, file, 31, 8, 879);
			add_location(code1, file, 70, 109, 2240);
			p2.className = "lh-copy";
			add_location(p2, file, 70, 8, 2139);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 218);
			add_location(code2, file, 76, 98, 2545);
			add_location(code3, file, 76, 142, 2589);
			add_location(code4, file, 77, 16, 2630);
			p3.className = "lh-copy";
			add_location(p3, file, 76, 8, 2455);
			p4.className = "lh-copy";
			add_location(p4, file, 78, 8, 2809);
			add_location(h30, file, 80, 8, 2920);
			p5.className = "lh-copy";
			add_location(p5, file, 81, 8, 2961);
			add_location(h31, file, 94, 8, 3711);
			p6.className = "lh-copy";
			add_location(p6, file, 95, 8, 3749);
			add_location(h32, file, 110, 8, 4201);
			p7.className = "lh-copy";
			add_location(p7, file, 111, 8, 4244);
			section1.className = "mv5";
			add_location(section1, file, 73, 4, 2379);
			a.href = "/guide/api/set-locale";
			a.className = "blue dim link";
			add_location(a, file, 133, 208, 5145);
			p8.className = "lh-copy";
			add_location(p8, file, 133, 8, 4945);
			section2.className = "mv5";
			add_location(section2, file, 131, 4, 4870);
			p9.className = "lh-copy";
			add_location(p9, file, 179, 8, 6671);
			section3.className = "mv5";
			add_location(section3, file, 177, 4, 6600);
			add_location(li, file, 186, 12, 7062);
			ul.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul, file, 185, 8, 7017);
			section4.className = "mv5";
			add_location(section4, file, 183, 4, 6950);
			div.className = "flex";
			add_location(div, file, 191, 8, 7157);
			section5.className = "mv5";
			add_location(section5, file, 190, 4, 7127);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, p0);
			append(p0, t5);
			append(p0, code0);
			append(code0, t6);
			append(p0, t7);
			append(section0, t8);
			mount_component(samplecode0, section0, null);
			append(section0, t9);
			append(section0, p1);
			append(p1, t10);
			append(section0, t11);
			mount_component(samplecode1, section0, null);
			append(section0, t12);
			append(section0, p2);
			append(p2, t13);
			append(p2, code1);
			append(code1, t14);
			append(p2, t15);
			insert(target, t16, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t17);
			append(section1, p3);
			append(p3, t18);
			append(p3, code2);
			append(code2, t19);
			append(p3, t20);
			append(p3, code3);
			append(code3, t21);
			append(p3, t22);
			append(p3, code4);
			append(code4, t23);
			append(p3, t24);
			append(section1, t25);
			append(section1, p4);
			append(p4, t26);
			append(section1, t27);
			append(section1, h30);
			append(h30, t28);
			append(section1, t29);
			append(section1, p5);
			append(p5, t30);
			append(section1, t31);
			mount_component(samplecode2, section1, null);
			append(section1, t32);
			append(section1, h31);
			append(h31, t33);
			append(section1, t34);
			append(section1, p6);
			append(p6, t35);
			append(section1, t36);
			mount_component(samplecode3, section1, null);
			append(section1, t37);
			append(section1, h32);
			append(h32, t38);
			append(section1, t39);
			append(section1, p7);
			append(p7, t40);
			append(section1, t41);
			mount_component(samplecode4, section1, null);
			insert(target, t42, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t43);
			append(section2, p8);
			append(p8, t44);
			append(p8, a);
			append(a, t45);
			append(p8, t46);
			append(section2, t47);
			mount_component(samplecode5, section2, null);
			insert(target, t48, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t49);
			append(section3, p9);
			append(p9, t50);
			append(section3, t51);
			mount_component(demo, section3, null);
			insert(target, t52, anchor);
			insert(target, section4, anchor);
			mount_component(heading4, section4, null);
			append(section4, t53);
			append(section4, ul);
			append(ul, li);
			append(li, t54);
			insert(target, t55, anchor);
			insert(target, section5, anchor);
			append(section5, div);
			mount_component(prevbutton, div, null);
			append(div, t56);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var heading4_changes = {};
			if (changed.$$scope) heading4_changes.$$scope = { changed, ctx };
			heading4.$set(heading4_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			samplecode3.$$.fragment.i(local);

			samplecode4.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			samplecode5.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			heading4.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			samplecode3.$$.fragment.o(local);
			samplecode4.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			samplecode5.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			heading4.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t16);
				detach(section1);
			}

			heading1.$destroy();

			samplecode2.$destroy();

			samplecode3.$destroy();

			samplecode4.$destroy();

			if (detaching) {
				detach(t42);
				detach(section2);
			}

			heading2.$destroy();

			samplecode5.$destroy();

			if (detaching) {
				detach(t48);
				detach(section3);
			}

			heading3.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t52);
				detach(section4);
			}

			heading4.$destroy();

			if (detaching) {
				detach(t55);
				detach(section5);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • L10n plugin";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

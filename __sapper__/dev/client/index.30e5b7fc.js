import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, w as empty, h as element, k as claim_element, l as children, n as add_location, p as append, i as text, r as noop, z as check_outros, I as destroy_each, y as on_outro, x as group_outros } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';
import { a as SampleData } from './chunk.41999a23.js';

/* src/routes/guide/validators/color/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/validators/color/index.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.sample = list[i];
	child_ctx.i = i;
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.type = list[i][0];
	child_ctx.samples = list[i][1];
	return child_ctx;
}

// (10:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (74:40) {#if i === 0}
function create_if_block(ctx) {
	var t_value = ctx.type, t;

	return {
		c: function create() {
			t = text(t_value);
		},

		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (72:16) {#each samples as sample, i}
function create_each_block_1(ctx) {
	var tr, td, t, current;

	var if_block = (ctx.i === 0) && create_if_block(ctx);

	var sampledata = new SampleData({
		props: {
		sample: ctx.sample,
		sender: "/guide/validators/color/basic"
	},
		$$inline: true
	});

	return {
		c: function create() {
			tr = element("tr");
			td = element("td");
			if (if_block) if_block.c();
			t = space();
			sampledata.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", { class: true }, false);
			var tr_nodes = children(tr);

			td = claim_element(tr_nodes, "TD", { class: true }, false);
			var td_nodes = children(td);

			if (if_block) if_block.l(td_nodes);
			td_nodes.forEach(detach);
			t = claim_text(tr_nodes, "\n                    ");
			sampledata.$$.fragment.l(tr_nodes);
			tr_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			td.className = "pv2 ph3";
			add_location(td, file, 73, 20, 2905);
			tr.className = "striped--light-gray";
			add_location(tr, file, 72, 16, 2852);
		},

		m: function mount(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td);
			if (if_block) if_block.m(td, null);
			append(tr, t);
			mount_component(sampledata, tr, null);
			current = true;
		},

		p: function update(changed, ctx) {
			if (ctx.i === 0) {
				if (if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(td, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			var sampledata_changes = {};
			if (changed._types) sampledata_changes.sample = ctx.sample;
			sampledata.$set(sampledata_changes);
		},

		i: function intro(local) {
			if (current) return;
			sampledata.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			sampledata.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(tr);
			}

			if (if_block) if_block.d();

			sampledata.$destroy();
		}
	};
}

// (71:12) {#each Object.entries(_types) as [type, samples]}
function create_each_block(ctx) {
	var each_1_anchor, current;

	var each_value_1 = ctx.samples;

	var each_blocks = [];

	for (var i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	function outro_block(i, detaching, local) {
		if (each_blocks[i]) {
			if (detaching) {
				on_outro(() => {
					each_blocks[i].d(detaching);
					each_blocks[i] = null;
				});
			}

			each_blocks[i].o(local);
		}
	}

	return {
		c: function create() {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},

		l: function claim(nodes) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},

		m: function mount(target, anchor) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			if (changed._types) {
				each_value_1 = ctx.samples;

				for (var i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						each_blocks[i].i(1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].i(1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();
				for (; i < each_blocks.length; i += 1) outro_block(i, 1, 1);
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			for (var i = 0; i < each_value_1.length; i += 1) each_blocks[i].i();

			current = true;
		},

		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) outro_block(i, 0);

			current = false;
		},

		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach(each_1_anchor);
			}
		}
	};
}

// (200:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (206:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("HTML5 Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "HTML5 Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (214:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("ES6 Module Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "ES6 Module Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (254:12) <PrevButton target="/guide/validators/choice">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("choice validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "choice validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (255:12) <NextButton target="/guide/validators/credit-card">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("creditCard validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "creditCard validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, h30, t5, t6, p0, t7, a0, t8, t9, t10, table0, tr0, th0, t11, t12, th1, t13, t14, th2, t15, t16, th3, t17, t18, tr1, td0, code0, t19, t20, td1, code1, t21, t22, td2, t23, t24, td3, p1, t25, t26, ul, li0, t27, t28, li1, t29, t30, li2, t31, t32, tr2, td4, code2, t33, t34, td5, code3, t35, t36, td6, t37, t38, td7, t39, t40, h31, t41, t42, t43, h32, t44, t45, p2, t46, t47, table1, tr3, th4, t48, t49, th5, t50, t51, th6, t52, t53, t54, p3, t55, code4, t56, t57, t58, table2, tr4, th7, t59, t60, th8, t61, t62, tr5, td8, t63, t64, td9, pre0, code5, t65, t66, tr6, td10, t67, t68, td11, pre1, code6, t69, t70, tr7, td12, t71, t72, td13, pre2, code7, t73, t74, tr8, td14, t75, t76, td15, pre3, code8, t77, t78, tr9, td16, t79, t80, td17, pre4, code9, t81, t82, tr10, td18, t83, t84, td19, pre5, code10, t85, t86, tr11, td20, t87, t88, td21, pre6, code11, t89, t90, tr12, td22, t91, t92, td23, pre7, code12, t93, t94, tr13, td24, t95, t96, td25, pre8, code13, t97, t98, tr14, td26, t99, t100, td27, pre9, code14, t101, t102, tr15, td28, t103, t104, td29, pre10, code15, t105, t106, tr16, td30, t107, t108, td31, pre11, code16, t109, t110, tr17, td32, t111, t112, td33, pre12, code17, t113, t114, tr18, td34, t115, t116, td35, pre13, code18, t117, t118, tr19, td36, t119, t120, td37, pre14, code19, t121, t122, tr20, td38, t123, t124, td39, pre15, code20, t125, t126, tr21, td40, t127, t128, td41, pre16, code21, t129, t130, tr22, td42, t131, t132, td43, pre17, code22, t133, t134, tr23, td44, t135, t136, td45, pre18, code23, t137, t138, tr24, td46, t139, t140, td47, pre19, code24, t141, t142, section1, t143, t144, section2, t145, p4, t146, a1, t147, t148, code25, t149, t150, t151, p5, t152, a2, t153, t154, t155, t156, section3, t157, p6, t158, t159, t160, t161, section4, div, t162, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import color from 'formvalidation/dist/es6/validators/color';

const result = color().validate({
    value: ...,
    options: {
        type: ...,
        message: ...,
    },
});
/*
result is an object of
{
    valid: true or false,
    message: The error message
}
*/
` },
		$$inline: true
	});

	var each_value = Object.entries(ctx._types);

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	function outro_block(i, detaching, local) {
		if (each_blocks[i]) {
			if (detaching) {
				on_outro(() => {
					each_blocks[i].d(detaching);
					each_blocks[i] = null;
				});
			}

			each_blocks[i].o(local);
		}
	}

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo0 = new Demo({
		props: {
		prefix: "/guide/validators/color/basic",
		frameworks: ['bootstrap', 'tachyons']
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/validators/color/html5",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import color from 'formvalidation/dist/es6/validators/color';

const res1 = color().validate({
    value: '#0000FF',
    options: {
        type: 'hex',
        message: 'The value is not valid color',
    },
});
// res1.valid === true

const res2 = color().validate({
    value: 'hsl (120,50%,50%)',
    options: {
        type: 'hsl',
        message: 'The value is not valid color',
    },
});
// res2.valid === false

const res3 = color().validate({
    value: 'blue',
    options: {
        type: 'keyword',
        message: 'The value is not valid color',
    },
});
// res3.valid === true
` },
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['regexp'] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/validators/choice",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/validators/credit-card",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("color validator");
			t1 = space();
			h2 = element("h2");
			t2 = text("Validate a color in different formats");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			h30 = element("h3");
			t5 = text("Using with form field");
			t6 = space();
			p0 = element("p");
			t7 = text("The HTML attributes are used to set the validator options via the ");
			a0 = element("a");
			t8 = text("Declarative");
			t9 = text(" plugin");
			t10 = space();
			table0 = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t11 = text("Name");
			t12 = space();
			th1 = element("th");
			t13 = text("HTML attribute");
			t14 = space();
			th2 = element("th");
			t15 = text("Type");
			t16 = space();
			th3 = element("th");
			t17 = text("Description");
			t18 = space();
			tr1 = element("tr");
			td0 = element("td");
			code0 = element("code");
			t19 = text("type");
			t20 = space();
			td1 = element("td");
			code1 = element("code");
			t21 = text("data-fv-color___type");
			t22 = space();
			td2 = element("td");
			t23 = text("String or String[]");
			t24 = space();
			td3 = element("td");
			p1 = element("p");
			t25 = text("The type of color. It can be:");
			t26 = space();
			ul = element("ul");
			li0 = element("li");
			t27 = text("One of supported types listed below");
			t28 = space();
			li1 = element("li");
			t29 = text("Array of supported types");
			t30 = space();
			li2 = element("li");
			t31 = text("A string consists of supported types, separated by a comma");
			t32 = space();
			tr2 = element("tr");
			td4 = element("td");
			code2 = element("code");
			t33 = text("message");
			t34 = space();
			td5 = element("td");
			code3 = element("code");
			t35 = text("data-fv-color___message");
			t36 = space();
			td6 = element("td");
			t37 = text("String");
			t38 = space();
			td7 = element("td");
			t39 = text("The error message");
			t40 = space();
			h31 = element("h3");
			t41 = text("Using with ES6 module");
			t42 = space();
			samplecode0.$$.fragment.c();
			t43 = space();
			h32 = element("h3");
			t44 = text("Supported types");
			t45 = space();
			p2 = element("p");
			t46 = text("Following is the list of supported types:");
			t47 = space();
			table1 = element("table");
			tr3 = element("tr");
			th4 = element("th");
			t48 = text("Type");
			t49 = space();
			th5 = element("th");
			t50 = text("Sample");
			t51 = space();
			th6 = element("th");
			t52 = text("Is it valid?");
			t53 = space();

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t54 = space();
			p3 = element("p");
			t55 = text("The ");
			code4 = element("code");
			t56 = text("keyword");
			t57 = text(" type accepts the following colors:");
			t58 = space();
			table2 = element("table");
			tr4 = element("tr");
			th7 = element("th");
			t59 = text("Starting with");
			t60 = space();
			th8 = element("th");
			t61 = text("Colors");
			t62 = space();
			tr5 = element("tr");
			td8 = element("td");
			t63 = text("A");
			t64 = space();
			td9 = element("td");
			pre0 = element("pre");
			code5 = element("code");
			t65 = text("aliceblue, antiquewhite, aqua, aquamarine, azure");
			t66 = space();
			tr6 = element("tr");
			td10 = element("td");
			t67 = text("B");
			t68 = space();
			td11 = element("td");
			pre1 = element("pre");
			code6 = element("code");
			t69 = text("beige, bisque, black, blanchedalmond, blue,\nblueviolet, brown, burlywood");
			t70 = space();
			tr7 = element("tr");
			td12 = element("td");
			t71 = text("C");
			t72 = space();
			td13 = element("td");
			pre2 = element("pre");
			code7 = element("code");
			t73 = text("cadetblue, chartreuse, chocolate, coral, cornflowerblue,\ncornsilk, crimson, cyan");
			t74 = space();
			tr8 = element("tr");
			td14 = element("td");
			t75 = text("D");
			t76 = space();
			td15 = element("td");
			pre3 = element("pre");
			code8 = element("code");
			t77 = text("darkblue, darkcyan, darkgoldenrod, darkgray, darkgreen,\ndarkgrey, darkkhaki, darkmagenta, darkolivegreen, darkorange,\ndarkorchid, darkred, darksalmon, darkseagreen, darkslateblue,\ndarkslategray, darkslategrey, darkturquoise, darkviolet, deeppink,\ndeepskyblue, dimgray, dimgrey, dodgerblue");
			t78 = space();
			tr9 = element("tr");
			td16 = element("td");
			t79 = text("F");
			t80 = space();
			td17 = element("td");
			pre4 = element("pre");
			code9 = element("code");
			t81 = text("firebrick, floralwhite, forestgreen, fuchsia");
			t82 = space();
			tr10 = element("tr");
			td18 = element("td");
			t83 = text("G");
			t84 = space();
			td19 = element("td");
			pre5 = element("pre");
			code10 = element("code");
			t85 = text("gainsboro, ghostwhite, gold, goldenrod, gray,\ngreen, greenyellow, grey");
			t86 = space();
			tr11 = element("tr");
			td20 = element("td");
			t87 = text("H");
			t88 = space();
			td21 = element("td");
			pre6 = element("pre");
			code11 = element("code");
			t89 = text("honeydew, hotpink");
			t90 = space();
			tr12 = element("tr");
			td22 = element("td");
			t91 = text("I");
			t92 = space();
			td23 = element("td");
			pre7 = element("pre");
			code12 = element("code");
			t93 = text("indianred, indigo, ivory");
			t94 = space();
			tr13 = element("tr");
			td24 = element("td");
			t95 = text("K");
			t96 = space();
			td25 = element("td");
			pre8 = element("pre");
			code13 = element("code");
			t97 = text("khaki");
			t98 = space();
			tr14 = element("tr");
			td26 = element("td");
			t99 = text("L");
			t100 = space();
			td27 = element("td");
			pre9 = element("pre");
			code14 = element("code");
			t101 = text("lavender, lavenderblush, lawngreen, lemonchiffon, lightblue,\nlightcoral, lightcyan, lightgoldenrodyellow, lightgray, lightgreen,\nlightgrey, lightpink, lightsalmon, lightseagreen, lightskyblue,\nlightslategray, lightslategrey, lightsteelblue, lightyellow,\nlime, limegreen, linen");
			t102 = space();
			tr15 = element("tr");
			td28 = element("td");
			t103 = text("M");
			t104 = space();
			td29 = element("td");
			pre10 = element("pre");
			code15 = element("code");
			t105 = text("magenta, maroon, mediumaquamarine, mediumblue, mediumorchid,\nmediumpurple, mediumseagreen, mediumslateblue, mediumspringgreen,\nmediumturquoise, mediumvioletred, midnightblue, mintcream,\nmistyrose, moccasin");
			t106 = space();
			tr16 = element("tr");
			td30 = element("td");
			t107 = text("N");
			t108 = space();
			td31 = element("td");
			pre11 = element("pre");
			code16 = element("code");
			t109 = text("navajowhite, navy");
			t110 = space();
			tr17 = element("tr");
			td32 = element("td");
			t111 = text("O");
			t112 = space();
			td33 = element("td");
			pre12 = element("pre");
			code17 = element("code");
			t113 = text("oldlace, olive, olivedrab, orange, orangered,\norchid");
			t114 = space();
			tr18 = element("tr");
			td34 = element("td");
			t115 = text("P");
			t116 = space();
			td35 = element("td");
			pre13 = element("pre");
			code18 = element("code");
			t117 = text("palegoldenrod, palegreen, paleturquoise, palevioletred, papayawhip,\npeachpuff, peru, pink, plum, powderblue,\npurple");
			t118 = space();
			tr19 = element("tr");
			td36 = element("td");
			t119 = text("R");
			t120 = space();
			td37 = element("td");
			pre14 = element("pre");
			code19 = element("code");
			t121 = text("red, rosybrown, royalblue");
			t122 = space();
			tr20 = element("tr");
			td38 = element("td");
			t123 = text("S");
			t124 = space();
			td39 = element("td");
			pre15 = element("pre");
			code20 = element("code");
			t125 = text("saddlebrown, salmon, sandybrown, seagreen, seashell,\nsienna, silver, skyblue, slateblue, slategray,\nslategrey, snow, springgreen, steelblue");
			t126 = space();
			tr21 = element("tr");
			td40 = element("td");
			t127 = text("T");
			t128 = space();
			td41 = element("td");
			pre16 = element("pre");
			code21 = element("code");
			t129 = text("tan, teal, thistle, tomato, transparent, turquoise");
			t130 = space();
			tr22 = element("tr");
			td42 = element("td");
			t131 = text("V");
			t132 = space();
			td43 = element("td");
			pre17 = element("pre");
			code22 = element("code");
			t133 = text("violet");
			t134 = space();
			tr23 = element("tr");
			td44 = element("td");
			t135 = text("W");
			t136 = space();
			td45 = element("td");
			pre18 = element("pre");
			code23 = element("code");
			t137 = text("wheat, white, whitesmoke");
			t138 = space();
			tr24 = element("tr");
			td46 = element("td");
			t139 = text("Y");
			t140 = space();
			td47 = element("td");
			pre19 = element("pre");
			code24 = element("code");
			t141 = text("yellow, yellowgreen");
			t142 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t143 = space();
			demo0.$$.fragment.c();
			t144 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t145 = space();
			p4 = element("p");
			t146 = text("When the ");
			a1 = element("a");
			t147 = text("Declarative");
			t148 = text(" plugin is used, the color validator will be turned on automatically if the input uses HTML 5 ");
			code25 = element("code");
			t149 = text("type=\"color\"");
			t150 = text(" attribute");
			t151 = space();
			p5 = element("p");
			t152 = text("According to the ");
			a2 = element("a");
			t153 = text("W3C specification");
			t154 = text(", the color input only accepts 6 hex character values. 3 hex character values as #FFF is not valid.");
			t155 = space();
			demo1.$$.fragment.c();
			t156 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t157 = space();
			p6 = element("p");
			t158 = text("The following snippet shows how to use the color validator with ES6 module:");
			t159 = space();
			samplecode1.$$.fragment.c();
			t160 = space();
			relatedvalidators.$$.fragment.c();
			t161 = space();
			section4 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t162 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "color validator");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Validate a color in different formats");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n\n        ");

			h30 = claim_element(section0_nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t5 = claim_text(h30_nodes, "Using with form field");
			h30_nodes.forEach(detach);
			t6 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t7 = claim_text(p0_nodes, "The HTML attributes are used to set the validator options via the ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t8 = claim_text(a0_nodes, "Declarative");
			a0_nodes.forEach(detach);
			t9 = claim_text(p0_nodes, " plugin");
			p0_nodes.forEach(detach);
			t10 = claim_text(section0_nodes, "\n        ");

			table0 = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table0_nodes = children(table0);

			tr0 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t11 = claim_text(th0_nodes, "Name");
			th0_nodes.forEach(detach);
			t12 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t13 = claim_text(th1_nodes, "HTML attribute");
			th1_nodes.forEach(detach);
			t14 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t15 = claim_text(th2_nodes, "Type");
			th2_nodes.forEach(detach);
			t16 = claim_text(tr0_nodes, "\n                ");

			th3 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th3_nodes = children(th3);

			t17 = claim_text(th3_nodes, "Description");
			th3_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t18 = claim_text(table0_nodes, "\n            ");

			tr1 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code0 = claim_element(td0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t19 = claim_text(code0_nodes, "type");
			code0_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t20 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			code1 = claim_element(td1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t21 = claim_text(code1_nodes, "data-fv-color___type");
			code1_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			t22 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t23 = claim_text(td2_nodes, "String or String[]");
			td2_nodes.forEach(detach);
			t24 = claim_text(tr1_nodes, "\n                ");

			td3 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			p1 = claim_element(td3_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t25 = claim_text(p1_nodes, "The type of color. It can be:");
			p1_nodes.forEach(detach);
			t26 = claim_text(td3_nodes, "\n                    ");

			ul = claim_element(td3_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t27 = claim_text(li0_nodes, "One of supported types listed below");
			li0_nodes.forEach(detach);
			t28 = claim_text(ul_nodes, "\n                        ");

			li1 = claim_element(ul_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t29 = claim_text(li1_nodes, "Array of supported types");
			li1_nodes.forEach(detach);
			t30 = claim_text(ul_nodes, "\n                        ");

			li2 = claim_element(ul_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t31 = claim_text(li2_nodes, "A string consists of supported types, separated by a comma");
			li2_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			td3_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t32 = claim_text(table0_nodes, "\n            ");

			tr2 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			code2 = claim_element(td4_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t33 = claim_text(code2_nodes, "message");
			code2_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t34 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			code3 = claim_element(td5_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t35 = claim_text(code3_nodes, "data-fv-color___message");
			code3_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			t36 = claim_text(tr2_nodes, "\n                ");

			td6 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			t37 = claim_text(td6_nodes, "String");
			td6_nodes.forEach(detach);
			t38 = claim_text(tr2_nodes, "\n                ");

			td7 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			t39 = claim_text(td7_nodes, "The error message");
			td7_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			table0_nodes.forEach(detach);
			t40 = claim_text(section0_nodes, "\n        \n        ");

			h31 = claim_element(section0_nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t41 = claim_text(h31_nodes, "Using with ES6 module");
			h31_nodes.forEach(detach);
			t42 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t43 = claim_text(section0_nodes, "\n\n        ");

			h32 = claim_element(section0_nodes, "H3", {}, false);
			var h32_nodes = children(h32);

			t44 = claim_text(h32_nodes, "Supported types");
			h32_nodes.forEach(detach);
			t45 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t46 = claim_text(p2_nodes, "Following is the list of supported types:");
			p2_nodes.forEach(detach);
			t47 = claim_text(section0_nodes, "\n        ");

			table1 = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table1_nodes = children(table1);

			tr3 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			th4 = claim_element(tr3_nodes, "TH", { class: true }, false);
			var th4_nodes = children(th4);

			t48 = claim_text(th4_nodes, "Type");
			th4_nodes.forEach(detach);
			t49 = claim_text(tr3_nodes, "\n                ");

			th5 = claim_element(tr3_nodes, "TH", { class: true }, false);
			var th5_nodes = children(th5);

			t50 = claim_text(th5_nodes, "Sample");
			th5_nodes.forEach(detach);
			t51 = claim_text(tr3_nodes, "\n                ");

			th6 = claim_element(tr3_nodes, "TH", { class: true }, false);
			var th6_nodes = children(th6);

			t52 = claim_text(th6_nodes, "Is it valid?");
			th6_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			t53 = claim_text(table1_nodes, "\n            ");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(table1_nodes);
			}

			table1_nodes.forEach(detach);
			t54 = claim_text(section0_nodes, "\n\n        ");

			p3 = claim_element(section0_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t55 = claim_text(p3_nodes, "The ");

			code4 = claim_element(p3_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t56 = claim_text(code4_nodes, "keyword");
			code4_nodes.forEach(detach);
			t57 = claim_text(p3_nodes, " type accepts the following colors:");
			p3_nodes.forEach(detach);
			t58 = claim_text(section0_nodes, "\n        ");

			table2 = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table2_nodes = children(table2);

			tr4 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			th7 = claim_element(tr4_nodes, "TH", { class: true }, false);
			var th7_nodes = children(th7);

			t59 = claim_text(th7_nodes, "Starting with");
			th7_nodes.forEach(detach);
			t60 = claim_text(tr4_nodes, "\n                ");

			th8 = claim_element(tr4_nodes, "TH", { class: true }, false);
			var th8_nodes = children(th8);

			t61 = claim_text(th8_nodes, "Colors");
			th8_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			t62 = claim_text(table2_nodes, "\n            ");

			tr5 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr5_nodes = children(tr5);

			td8 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			t63 = claim_text(td8_nodes, "A");
			td8_nodes.forEach(detach);
			t64 = claim_text(tr5_nodes, "\n                ");

			td9 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			pre0 = claim_element(td9_nodes, "PRE", {}, false);
			var pre0_nodes = children(pre0);

			code5 = claim_element(pre0_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t65 = claim_text(code5_nodes, "aliceblue, antiquewhite, aqua, aquamarine, azure");
			code5_nodes.forEach(detach);
			pre0_nodes.forEach(detach);
			td9_nodes.forEach(detach);
			tr5_nodes.forEach(detach);
			t66 = claim_text(table2_nodes, "\n            ");

			tr6 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr6_nodes = children(tr6);

			td10 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td10_nodes = children(td10);

			t67 = claim_text(td10_nodes, "B");
			td10_nodes.forEach(detach);
			t68 = claim_text(tr6_nodes, "\n                ");

			td11 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td11_nodes = children(td11);

			pre1 = claim_element(td11_nodes, "PRE", {}, false);
			var pre1_nodes = children(pre1);

			code6 = claim_element(pre1_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t69 = claim_text(code6_nodes, "beige, bisque, black, blanchedalmond, blue,\nblueviolet, brown, burlywood");
			code6_nodes.forEach(detach);
			pre1_nodes.forEach(detach);
			td11_nodes.forEach(detach);
			tr6_nodes.forEach(detach);
			t70 = claim_text(table2_nodes, "\n            ");

			tr7 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr7_nodes = children(tr7);

			td12 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td12_nodes = children(td12);

			t71 = claim_text(td12_nodes, "C");
			td12_nodes.forEach(detach);
			t72 = claim_text(tr7_nodes, "\n                ");

			td13 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td13_nodes = children(td13);

			pre2 = claim_element(td13_nodes, "PRE", {}, false);
			var pre2_nodes = children(pre2);

			code7 = claim_element(pre2_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t73 = claim_text(code7_nodes, "cadetblue, chartreuse, chocolate, coral, cornflowerblue,\ncornsilk, crimson, cyan");
			code7_nodes.forEach(detach);
			pre2_nodes.forEach(detach);
			td13_nodes.forEach(detach);
			tr7_nodes.forEach(detach);
			t74 = claim_text(table2_nodes, "\n            ");

			tr8 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr8_nodes = children(tr8);

			td14 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td14_nodes = children(td14);

			t75 = claim_text(td14_nodes, "D");
			td14_nodes.forEach(detach);
			t76 = claim_text(tr8_nodes, "\n                ");

			td15 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td15_nodes = children(td15);

			pre3 = claim_element(td15_nodes, "PRE", {}, false);
			var pre3_nodes = children(pre3);

			code8 = claim_element(pre3_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t77 = claim_text(code8_nodes, "darkblue, darkcyan, darkgoldenrod, darkgray, darkgreen,\ndarkgrey, darkkhaki, darkmagenta, darkolivegreen, darkorange,\ndarkorchid, darkred, darksalmon, darkseagreen, darkslateblue,\ndarkslategray, darkslategrey, darkturquoise, darkviolet, deeppink,\ndeepskyblue, dimgray, dimgrey, dodgerblue");
			code8_nodes.forEach(detach);
			pre3_nodes.forEach(detach);
			td15_nodes.forEach(detach);
			tr8_nodes.forEach(detach);
			t78 = claim_text(table2_nodes, "\n            ");

			tr9 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr9_nodes = children(tr9);

			td16 = claim_element(tr9_nodes, "TD", { class: true }, false);
			var td16_nodes = children(td16);

			t79 = claim_text(td16_nodes, "F");
			td16_nodes.forEach(detach);
			t80 = claim_text(tr9_nodes, "\n                ");

			td17 = claim_element(tr9_nodes, "TD", { class: true }, false);
			var td17_nodes = children(td17);

			pre4 = claim_element(td17_nodes, "PRE", {}, false);
			var pre4_nodes = children(pre4);

			code9 = claim_element(pre4_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t81 = claim_text(code9_nodes, "firebrick, floralwhite, forestgreen, fuchsia");
			code9_nodes.forEach(detach);
			pre4_nodes.forEach(detach);
			td17_nodes.forEach(detach);
			tr9_nodes.forEach(detach);
			t82 = claim_text(table2_nodes, "\n            ");

			tr10 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr10_nodes = children(tr10);

			td18 = claim_element(tr10_nodes, "TD", { class: true }, false);
			var td18_nodes = children(td18);

			t83 = claim_text(td18_nodes, "G");
			td18_nodes.forEach(detach);
			t84 = claim_text(tr10_nodes, "\n                ");

			td19 = claim_element(tr10_nodes, "TD", { class: true }, false);
			var td19_nodes = children(td19);

			pre5 = claim_element(td19_nodes, "PRE", {}, false);
			var pre5_nodes = children(pre5);

			code10 = claim_element(pre5_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t85 = claim_text(code10_nodes, "gainsboro, ghostwhite, gold, goldenrod, gray,\ngreen, greenyellow, grey");
			code10_nodes.forEach(detach);
			pre5_nodes.forEach(detach);
			td19_nodes.forEach(detach);
			tr10_nodes.forEach(detach);
			t86 = claim_text(table2_nodes, "\n            ");

			tr11 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr11_nodes = children(tr11);

			td20 = claim_element(tr11_nodes, "TD", { class: true }, false);
			var td20_nodes = children(td20);

			t87 = claim_text(td20_nodes, "H");
			td20_nodes.forEach(detach);
			t88 = claim_text(tr11_nodes, "\n                ");

			td21 = claim_element(tr11_nodes, "TD", { class: true }, false);
			var td21_nodes = children(td21);

			pre6 = claim_element(td21_nodes, "PRE", {}, false);
			var pre6_nodes = children(pre6);

			code11 = claim_element(pre6_nodes, "CODE", {}, false);
			var code11_nodes = children(code11);

			t89 = claim_text(code11_nodes, "honeydew, hotpink");
			code11_nodes.forEach(detach);
			pre6_nodes.forEach(detach);
			td21_nodes.forEach(detach);
			tr11_nodes.forEach(detach);
			t90 = claim_text(table2_nodes, "\n            ");

			tr12 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr12_nodes = children(tr12);

			td22 = claim_element(tr12_nodes, "TD", { class: true }, false);
			var td22_nodes = children(td22);

			t91 = claim_text(td22_nodes, "I");
			td22_nodes.forEach(detach);
			t92 = claim_text(tr12_nodes, "\n                ");

			td23 = claim_element(tr12_nodes, "TD", { class: true }, false);
			var td23_nodes = children(td23);

			pre7 = claim_element(td23_nodes, "PRE", {}, false);
			var pre7_nodes = children(pre7);

			code12 = claim_element(pre7_nodes, "CODE", {}, false);
			var code12_nodes = children(code12);

			t93 = claim_text(code12_nodes, "indianred, indigo, ivory");
			code12_nodes.forEach(detach);
			pre7_nodes.forEach(detach);
			td23_nodes.forEach(detach);
			tr12_nodes.forEach(detach);
			t94 = claim_text(table2_nodes, "\n            ");

			tr13 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr13_nodes = children(tr13);

			td24 = claim_element(tr13_nodes, "TD", { class: true }, false);
			var td24_nodes = children(td24);

			t95 = claim_text(td24_nodes, "K");
			td24_nodes.forEach(detach);
			t96 = claim_text(tr13_nodes, "\n                ");

			td25 = claim_element(tr13_nodes, "TD", { class: true }, false);
			var td25_nodes = children(td25);

			pre8 = claim_element(td25_nodes, "PRE", {}, false);
			var pre8_nodes = children(pre8);

			code13 = claim_element(pre8_nodes, "CODE", {}, false);
			var code13_nodes = children(code13);

			t97 = claim_text(code13_nodes, "khaki");
			code13_nodes.forEach(detach);
			pre8_nodes.forEach(detach);
			td25_nodes.forEach(detach);
			tr13_nodes.forEach(detach);
			t98 = claim_text(table2_nodes, "\n            ");

			tr14 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr14_nodes = children(tr14);

			td26 = claim_element(tr14_nodes, "TD", { class: true }, false);
			var td26_nodes = children(td26);

			t99 = claim_text(td26_nodes, "L");
			td26_nodes.forEach(detach);
			t100 = claim_text(tr14_nodes, "\n                ");

			td27 = claim_element(tr14_nodes, "TD", { class: true }, false);
			var td27_nodes = children(td27);

			pre9 = claim_element(td27_nodes, "PRE", {}, false);
			var pre9_nodes = children(pre9);

			code14 = claim_element(pre9_nodes, "CODE", {}, false);
			var code14_nodes = children(code14);

			t101 = claim_text(code14_nodes, "lavender, lavenderblush, lawngreen, lemonchiffon, lightblue,\nlightcoral, lightcyan, lightgoldenrodyellow, lightgray, lightgreen,\nlightgrey, lightpink, lightsalmon, lightseagreen, lightskyblue,\nlightslategray, lightslategrey, lightsteelblue, lightyellow,\nlime, limegreen, linen");
			code14_nodes.forEach(detach);
			pre9_nodes.forEach(detach);
			td27_nodes.forEach(detach);
			tr14_nodes.forEach(detach);
			t102 = claim_text(table2_nodes, "\n            ");

			tr15 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr15_nodes = children(tr15);

			td28 = claim_element(tr15_nodes, "TD", { class: true }, false);
			var td28_nodes = children(td28);

			t103 = claim_text(td28_nodes, "M");
			td28_nodes.forEach(detach);
			t104 = claim_text(tr15_nodes, "\n                ");

			td29 = claim_element(tr15_nodes, "TD", { class: true }, false);
			var td29_nodes = children(td29);

			pre10 = claim_element(td29_nodes, "PRE", {}, false);
			var pre10_nodes = children(pre10);

			code15 = claim_element(pre10_nodes, "CODE", {}, false);
			var code15_nodes = children(code15);

			t105 = claim_text(code15_nodes, "magenta, maroon, mediumaquamarine, mediumblue, mediumorchid,\nmediumpurple, mediumseagreen, mediumslateblue, mediumspringgreen,\nmediumturquoise, mediumvioletred, midnightblue, mintcream,\nmistyrose, moccasin");
			code15_nodes.forEach(detach);
			pre10_nodes.forEach(detach);
			td29_nodes.forEach(detach);
			tr15_nodes.forEach(detach);
			t106 = claim_text(table2_nodes, "\n            ");

			tr16 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr16_nodes = children(tr16);

			td30 = claim_element(tr16_nodes, "TD", { class: true }, false);
			var td30_nodes = children(td30);

			t107 = claim_text(td30_nodes, "N");
			td30_nodes.forEach(detach);
			t108 = claim_text(tr16_nodes, "\n                ");

			td31 = claim_element(tr16_nodes, "TD", { class: true }, false);
			var td31_nodes = children(td31);

			pre11 = claim_element(td31_nodes, "PRE", {}, false);
			var pre11_nodes = children(pre11);

			code16 = claim_element(pre11_nodes, "CODE", {}, false);
			var code16_nodes = children(code16);

			t109 = claim_text(code16_nodes, "navajowhite, navy");
			code16_nodes.forEach(detach);
			pre11_nodes.forEach(detach);
			td31_nodes.forEach(detach);
			tr16_nodes.forEach(detach);
			t110 = claim_text(table2_nodes, "\n            ");

			tr17 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr17_nodes = children(tr17);

			td32 = claim_element(tr17_nodes, "TD", { class: true }, false);
			var td32_nodes = children(td32);

			t111 = claim_text(td32_nodes, "O");
			td32_nodes.forEach(detach);
			t112 = claim_text(tr17_nodes, "\n                ");

			td33 = claim_element(tr17_nodes, "TD", { class: true }, false);
			var td33_nodes = children(td33);

			pre12 = claim_element(td33_nodes, "PRE", {}, false);
			var pre12_nodes = children(pre12);

			code17 = claim_element(pre12_nodes, "CODE", {}, false);
			var code17_nodes = children(code17);

			t113 = claim_text(code17_nodes, "oldlace, olive, olivedrab, orange, orangered,\norchid");
			code17_nodes.forEach(detach);
			pre12_nodes.forEach(detach);
			td33_nodes.forEach(detach);
			tr17_nodes.forEach(detach);
			t114 = claim_text(table2_nodes, "\n            ");

			tr18 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr18_nodes = children(tr18);

			td34 = claim_element(tr18_nodes, "TD", { class: true }, false);
			var td34_nodes = children(td34);

			t115 = claim_text(td34_nodes, "P");
			td34_nodes.forEach(detach);
			t116 = claim_text(tr18_nodes, "\n                ");

			td35 = claim_element(tr18_nodes, "TD", { class: true }, false);
			var td35_nodes = children(td35);

			pre13 = claim_element(td35_nodes, "PRE", {}, false);
			var pre13_nodes = children(pre13);

			code18 = claim_element(pre13_nodes, "CODE", {}, false);
			var code18_nodes = children(code18);

			t117 = claim_text(code18_nodes, "palegoldenrod, palegreen, paleturquoise, palevioletred, papayawhip,\npeachpuff, peru, pink, plum, powderblue,\npurple");
			code18_nodes.forEach(detach);
			pre13_nodes.forEach(detach);
			td35_nodes.forEach(detach);
			tr18_nodes.forEach(detach);
			t118 = claim_text(table2_nodes, "\n            ");

			tr19 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr19_nodes = children(tr19);

			td36 = claim_element(tr19_nodes, "TD", { class: true }, false);
			var td36_nodes = children(td36);

			t119 = claim_text(td36_nodes, "R");
			td36_nodes.forEach(detach);
			t120 = claim_text(tr19_nodes, "\n                ");

			td37 = claim_element(tr19_nodes, "TD", { class: true }, false);
			var td37_nodes = children(td37);

			pre14 = claim_element(td37_nodes, "PRE", {}, false);
			var pre14_nodes = children(pre14);

			code19 = claim_element(pre14_nodes, "CODE", {}, false);
			var code19_nodes = children(code19);

			t121 = claim_text(code19_nodes, "red, rosybrown, royalblue");
			code19_nodes.forEach(detach);
			pre14_nodes.forEach(detach);
			td37_nodes.forEach(detach);
			tr19_nodes.forEach(detach);
			t122 = claim_text(table2_nodes, "\n            ");

			tr20 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr20_nodes = children(tr20);

			td38 = claim_element(tr20_nodes, "TD", { class: true }, false);
			var td38_nodes = children(td38);

			t123 = claim_text(td38_nodes, "S");
			td38_nodes.forEach(detach);
			t124 = claim_text(tr20_nodes, "\n                ");

			td39 = claim_element(tr20_nodes, "TD", { class: true }, false);
			var td39_nodes = children(td39);

			pre15 = claim_element(td39_nodes, "PRE", {}, false);
			var pre15_nodes = children(pre15);

			code20 = claim_element(pre15_nodes, "CODE", {}, false);
			var code20_nodes = children(code20);

			t125 = claim_text(code20_nodes, "saddlebrown, salmon, sandybrown, seagreen, seashell,\nsienna, silver, skyblue, slateblue, slategray,\nslategrey, snow, springgreen, steelblue");
			code20_nodes.forEach(detach);
			pre15_nodes.forEach(detach);
			td39_nodes.forEach(detach);
			tr20_nodes.forEach(detach);
			t126 = claim_text(table2_nodes, "\n            ");

			tr21 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr21_nodes = children(tr21);

			td40 = claim_element(tr21_nodes, "TD", { class: true }, false);
			var td40_nodes = children(td40);

			t127 = claim_text(td40_nodes, "T");
			td40_nodes.forEach(detach);
			t128 = claim_text(tr21_nodes, "\n                ");

			td41 = claim_element(tr21_nodes, "TD", { class: true }, false);
			var td41_nodes = children(td41);

			pre16 = claim_element(td41_nodes, "PRE", {}, false);
			var pre16_nodes = children(pre16);

			code21 = claim_element(pre16_nodes, "CODE", {}, false);
			var code21_nodes = children(code21);

			t129 = claim_text(code21_nodes, "tan, teal, thistle, tomato, transparent, turquoise");
			code21_nodes.forEach(detach);
			pre16_nodes.forEach(detach);
			td41_nodes.forEach(detach);
			tr21_nodes.forEach(detach);
			t130 = claim_text(table2_nodes, "\n            ");

			tr22 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr22_nodes = children(tr22);

			td42 = claim_element(tr22_nodes, "TD", { class: true }, false);
			var td42_nodes = children(td42);

			t131 = claim_text(td42_nodes, "V");
			td42_nodes.forEach(detach);
			t132 = claim_text(tr22_nodes, "\n                ");

			td43 = claim_element(tr22_nodes, "TD", { class: true }, false);
			var td43_nodes = children(td43);

			pre17 = claim_element(td43_nodes, "PRE", {}, false);
			var pre17_nodes = children(pre17);

			code22 = claim_element(pre17_nodes, "CODE", {}, false);
			var code22_nodes = children(code22);

			t133 = claim_text(code22_nodes, "violet");
			code22_nodes.forEach(detach);
			pre17_nodes.forEach(detach);
			td43_nodes.forEach(detach);
			tr22_nodes.forEach(detach);
			t134 = claim_text(table2_nodes, "\n            ");

			tr23 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr23_nodes = children(tr23);

			td44 = claim_element(tr23_nodes, "TD", { class: true }, false);
			var td44_nodes = children(td44);

			t135 = claim_text(td44_nodes, "W");
			td44_nodes.forEach(detach);
			t136 = claim_text(tr23_nodes, "\n                ");

			td45 = claim_element(tr23_nodes, "TD", { class: true }, false);
			var td45_nodes = children(td45);

			pre18 = claim_element(td45_nodes, "PRE", {}, false);
			var pre18_nodes = children(pre18);

			code23 = claim_element(pre18_nodes, "CODE", {}, false);
			var code23_nodes = children(code23);

			t137 = claim_text(code23_nodes, "wheat, white, whitesmoke");
			code23_nodes.forEach(detach);
			pre18_nodes.forEach(detach);
			td45_nodes.forEach(detach);
			tr23_nodes.forEach(detach);
			t138 = claim_text(table2_nodes, "\n            ");

			tr24 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr24_nodes = children(tr24);

			td46 = claim_element(tr24_nodes, "TD", { class: true }, false);
			var td46_nodes = children(td46);

			t139 = claim_text(td46_nodes, "Y");
			td46_nodes.forEach(detach);
			t140 = claim_text(tr24_nodes, "\n                ");

			td47 = claim_element(tr24_nodes, "TD", { class: true }, false);
			var td47_nodes = children(td47);

			pre19 = claim_element(td47_nodes, "PRE", {}, false);
			var pre19_nodes = children(pre19);

			code24 = claim_element(pre19_nodes, "CODE", {}, false);
			var code24_nodes = children(code24);

			t141 = claim_text(code24_nodes, "yellow, yellowgreen");
			code24_nodes.forEach(detach);
			pre19_nodes.forEach(detach);
			td47_nodes.forEach(detach);
			tr24_nodes.forEach(detach);
			table2_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t142 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t143 = claim_text(section1_nodes, "\n\n        ");
			demo0.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t144 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t145 = claim_text(section2_nodes, "\n\n        ");

			p4 = claim_element(section2_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t146 = claim_text(p4_nodes, "When the ");

			a1 = claim_element(p4_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t147 = claim_text(a1_nodes, "Declarative");
			a1_nodes.forEach(detach);
			t148 = claim_text(p4_nodes, " plugin is used, the color validator will be turned on automatically if the input uses HTML 5 ");

			code25 = claim_element(p4_nodes, "CODE", {}, false);
			var code25_nodes = children(code25);

			t149 = claim_text(code25_nodes, "type=\"color\"");
			code25_nodes.forEach(detach);
			t150 = claim_text(p4_nodes, " attribute");
			p4_nodes.forEach(detach);
			t151 = claim_text(section2_nodes, "\n        ");

			p5 = claim_element(section2_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t152 = claim_text(p5_nodes, "According to the ");

			a2 = claim_element(p5_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t153 = claim_text(a2_nodes, "W3C specification");
			a2_nodes.forEach(detach);
			t154 = claim_text(p5_nodes, ", the color input only accepts 6 hex character values. 3 hex character values as #FFF is not valid.");
			p5_nodes.forEach(detach);
			t155 = claim_text(section2_nodes, "\n        ");
			demo1.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t156 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t157 = claim_text(section3_nodes, "\n\n        ");

			p6 = claim_element(section3_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t158 = claim_text(p6_nodes, "The following snippet shows how to use the color validator with ES6 module:");
			p6_nodes.forEach(detach);
			t159 = claim_text(section3_nodes, "\n");
			samplecode1.$$.fragment.l(section3_nodes);
			section3_nodes.forEach(detach);
			t160 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			t161 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			div = claim_element(section4_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t162 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section4_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 97);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 150);
			add_location(h30, file, 11, 8, 286);
			a0.href = "/guide/plugins/declarative";
			a0.className = "blue dim link";
			add_location(a0, file, 12, 95, 412);
			p0.className = "lh-copy i";
			add_location(p0, file, 12, 8, 325);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 15, 16, 625);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 16, 16, 685);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 17, 16, 755);
			th3.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th3, file, 18, 16, 815);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 14, 12, 576);
			add_location(code0, file, 21, 36, 965);
			td0.className = "pv2 ph3";
			add_location(td0, file, 21, 16, 945);
			add_location(code1, file, 22, 36, 1024);
			td1.className = "pv2 ph3";
			add_location(td1, file, 22, 16, 1004);
			td2.className = "pv2 ph3";
			add_location(td2, file, 23, 16, 1079);
			p1.className = "lh-copy";
			add_location(p1, file, 25, 20, 1180);
			add_location(li0, file, 27, 24, 1306);
			add_location(li1, file, 28, 24, 1375);
			add_location(li2, file, 29, 24, 1433);
			ul.className = "ma0 pl3 lh-copy";
			add_location(ul, file, 26, 20, 1253);
			td3.className = "pv2 ph3";
			add_location(td3, file, 24, 16, 1139);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 20, 12, 896);
			add_location(code2, file, 34, 36, 1648);
			td4.className = "pv2 ph3";
			add_location(td4, file, 34, 16, 1628);
			add_location(code3, file, 35, 36, 1710);
			td5.className = "pv2 ph3";
			add_location(td5, file, 35, 16, 1690);
			td6.className = "pv2 ph3";
			add_location(td6, file, 36, 16, 1768);
			td7.className = "pv2 ph3";
			add_location(td7, file, 37, 16, 1816);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 33, 12, 1579);
			table0.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table0, file, 13, 8, 506);
			add_location(h31, file, 41, 8, 1911);
			add_location(h32, file, 62, 8, 2312);
			p2.className = "lh-copy";
			add_location(p2, file, 63, 8, 2345);
			th4.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th4, file, 66, 16, 2537);
			th5.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th5, file, 67, 16, 2597);
			th6.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th6, file, 68, 16, 2659);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 65, 12, 2488);
			table1.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table1, file, 64, 8, 2418);
			add_location(code4, file, 80, 31, 3160);
			p3.className = "lh-copy";
			add_location(p3, file, 80, 8, 3137);
			th7.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th7, file, 83, 16, 3347);
			th8.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th8, file, 84, 16, 3416);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 82, 12, 3298);
			td8.className = "pv2 ph3";
			add_location(td8, file, 87, 16, 3541);
			add_location(code5, file, 88, 41, 3609);
			add_location(pre0, file, 88, 36, 3604);
			td9.className = "pv2 ph3";
			add_location(td9, file, 88, 16, 3584);
			tr5.className = "striped--light-gray";
			add_location(tr5, file, 86, 12, 3492);
			td10.className = "pv2 ph3";
			add_location(td10, file, 91, 16, 3761);
			add_location(code6, file, 92, 41, 3829);
			add_location(pre1, file, 92, 36, 3824);
			td11.className = "pv2 ph3";
			add_location(td11, file, 92, 16, 3804);
			tr6.className = "striped--light-gray";
			add_location(tr6, file, 90, 12, 3712);
			td12.className = "pv2 ph3";
			add_location(td12, file, 96, 16, 4005);
			add_location(code7, file, 97, 41, 4073);
			add_location(pre2, file, 97, 36, 4068);
			td13.className = "pv2 ph3";
			add_location(td13, file, 97, 16, 4048);
			tr7.className = "striped--light-gray";
			add_location(tr7, file, 95, 12, 3956);
			td14.className = "pv2 ph3";
			add_location(td14, file, 101, 16, 4257);
			add_location(code8, file, 103, 5, 4326);
			add_location(pre3, file, 103, 0, 4321);
			td15.className = "pv2 ph3";
			add_location(td15, file, 102, 16, 4300);
			tr8.className = "striped--light-gray";
			add_location(tr8, file, 100, 12, 4208);
			td16.className = "pv2 ph3";
			add_location(td16, file, 111, 16, 4735);
			add_location(code9, file, 112, 41, 4803);
			add_location(pre4, file, 112, 36, 4798);
			td17.className = "pv2 ph3";
			add_location(td17, file, 112, 16, 4778);
			tr9.className = "striped--light-gray";
			add_location(tr9, file, 110, 12, 4686);
			td18.className = "pv2 ph3";
			add_location(td18, file, 115, 16, 4951);
			add_location(code10, file, 116, 41, 5019);
			add_location(pre5, file, 116, 36, 5014);
			td19.className = "pv2 ph3";
			add_location(td19, file, 116, 16, 4994);
			tr10.className = "striped--light-gray";
			add_location(tr10, file, 114, 12, 4902);
			td20.className = "pv2 ph3";
			add_location(td20, file, 120, 16, 5193);
			add_location(code11, file, 121, 41, 5261);
			add_location(pre6, file, 121, 36, 5256);
			td21.className = "pv2 ph3";
			add_location(td21, file, 121, 16, 5236);
			tr11.className = "striped--light-gray";
			add_location(tr11, file, 119, 12, 5144);
			td22.className = "pv2 ph3";
			add_location(td22, file, 124, 16, 5382);
			add_location(code12, file, 125, 41, 5450);
			add_location(pre7, file, 125, 36, 5445);
			td23.className = "pv2 ph3";
			add_location(td23, file, 125, 16, 5425);
			tr12.className = "striped--light-gray";
			add_location(tr12, file, 123, 12, 5333);
			td24.className = "pv2 ph3";
			add_location(td24, file, 128, 16, 5578);
			add_location(code13, file, 129, 41, 5646);
			add_location(pre8, file, 129, 36, 5641);
			td25.className = "pv2 ph3";
			add_location(td25, file, 129, 16, 5621);
			tr13.className = "striped--light-gray";
			add_location(tr13, file, 127, 12, 5529);
			td26.className = "pv2 ph3";
			add_location(td26, file, 132, 16, 5755);
			add_location(code14, file, 134, 5, 5824);
			add_location(pre9, file, 134, 0, 5819);
			td27.className = "pv2 ph3";
			add_location(td27, file, 133, 16, 5798);
			tr14.className = "striped--light-gray";
			add_location(tr14, file, 131, 12, 5706);
			td28.className = "pv2 ph3";
			add_location(td28, file, 142, 16, 6221);
			add_location(code15, file, 144, 5, 6290);
			add_location(pre10, file, 144, 0, 6285);
			td29.className = "pv2 ph3";
			add_location(td29, file, 143, 16, 6264);
			tr15.className = "striped--light-gray";
			add_location(tr15, file, 141, 12, 6172);
			td30.className = "pv2 ph3";
			add_location(td30, file, 151, 16, 6616);
			add_location(code16, file, 152, 41, 6684);
			add_location(pre11, file, 152, 36, 6679);
			td31.className = "pv2 ph3";
			add_location(td31, file, 152, 16, 6659);
			tr16.className = "striped--light-gray";
			add_location(tr16, file, 150, 12, 6567);
			td32.className = "pv2 ph3";
			add_location(td32, file, 155, 16, 6805);
			add_location(code17, file, 156, 41, 6873);
			add_location(pre12, file, 156, 36, 6868);
			td33.className = "pv2 ph3";
			add_location(td33, file, 156, 16, 6848);
			tr17.className = "striped--light-gray";
			add_location(tr17, file, 154, 12, 6756);
			td34.className = "pv2 ph3";
			add_location(td34, file, 160, 16, 7029);
			add_location(code18, file, 162, 5, 7098);
			add_location(pre13, file, 162, 0, 7093);
			td35.className = "pv2 ph3";
			add_location(td35, file, 161, 16, 7072);
			tr18.className = "striped--light-gray";
			add_location(tr18, file, 159, 12, 6980);
			td36.className = "pv2 ph3";
			add_location(td36, file, 168, 16, 7334);
			add_location(code19, file, 169, 41, 7402);
			add_location(pre14, file, 169, 36, 7397);
			td37.className = "pv2 ph3";
			add_location(td37, file, 169, 16, 7377);
			tr19.className = "striped--light-gray";
			add_location(tr19, file, 167, 12, 7285);
			td38.className = "pv2 ph3";
			add_location(td38, file, 172, 16, 7531);
			add_location(code20, file, 174, 5, 7600);
			add_location(pre15, file, 174, 0, 7595);
			td39.className = "pv2 ph3";
			add_location(td39, file, 173, 16, 7574);
			tr20.className = "striped--light-gray";
			add_location(tr20, file, 171, 12, 7482);
			td40.className = "pv2 ph3";
			add_location(td40, file, 180, 16, 7860);
			add_location(code21, file, 181, 41, 7928);
			add_location(pre16, file, 181, 36, 7923);
			td41.className = "pv2 ph3";
			add_location(td41, file, 181, 16, 7903);
			tr21.className = "striped--light-gray";
			add_location(tr21, file, 179, 12, 7811);
			td42.className = "pv2 ph3";
			add_location(td42, file, 184, 16, 8082);
			add_location(code22, file, 185, 41, 8150);
			add_location(pre17, file, 185, 36, 8145);
			td43.className = "pv2 ph3";
			add_location(td43, file, 185, 16, 8125);
			tr22.className = "striped--light-gray";
			add_location(tr22, file, 183, 12, 8033);
			td44.className = "pv2 ph3";
			add_location(td44, file, 188, 16, 8260);
			add_location(code23, file, 189, 41, 8328);
			add_location(pre18, file, 189, 36, 8323);
			td45.className = "pv2 ph3";
			add_location(td45, file, 189, 16, 8303);
			tr23.className = "striped--light-gray";
			add_location(tr23, file, 187, 12, 8211);
			td46.className = "pv2 ph3";
			add_location(td46, file, 192, 16, 8456);
			add_location(code24, file, 193, 41, 8524);
			add_location(pre19, file, 193, 36, 8519);
			td47.className = "pv2 ph3";
			add_location(td47, file, 193, 16, 8499);
			tr24.className = "striped--light-gray";
			add_location(tr24, file, 191, 12, 8407);
			table2.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table2, file, 81, 8, 3228);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 220);
			section1.className = "mv5";
			add_location(section1, file, 198, 4, 8623);
			a1.href = "/guide/plugins/declarative";
			a1.className = "blue dim link";
			add_location(a1, file, 207, 36, 8902);
			add_location(code25, file, 207, 204, 9070);
			p4.className = "lh-copy";
			add_location(p4, file, 207, 8, 8874);
			a2.href = "http://www.w3.org/TR/html-markup/input.color.html#input.color.attrs.value";
			a2.className = "blue dim link";
			add_location(a2, file, 208, 44, 9154);
			p5.className = "lh-copy";
			add_location(p5, file, 208, 8, 9118);
			section2.className = "mv5";
			add_location(section2, file, 204, 4, 8802);
			p6.className = "lh-copy";
			add_location(p6, file, 215, 8, 9564);
			section3.className = "mv5";
			add_location(section3, file, 212, 4, 9487);
			div.className = "flex";
			add_location(div, file, 252, 8, 10451);
			section4.className = "mv5";
			add_location(section4, file, 251, 4, 10421);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, h30);
			append(h30, t5);
			append(section0, t6);
			append(section0, p0);
			append(p0, t7);
			append(p0, a0);
			append(a0, t8);
			append(p0, t9);
			append(section0, t10);
			append(section0, table0);
			append(table0, tr0);
			append(tr0, th0);
			append(th0, t11);
			append(tr0, t12);
			append(tr0, th1);
			append(th1, t13);
			append(tr0, t14);
			append(tr0, th2);
			append(th2, t15);
			append(tr0, t16);
			append(tr0, th3);
			append(th3, t17);
			append(table0, t18);
			append(table0, tr1);
			append(tr1, td0);
			append(td0, code0);
			append(code0, t19);
			append(tr1, t20);
			append(tr1, td1);
			append(td1, code1);
			append(code1, t21);
			append(tr1, t22);
			append(tr1, td2);
			append(td2, t23);
			append(tr1, t24);
			append(tr1, td3);
			append(td3, p1);
			append(p1, t25);
			append(td3, t26);
			append(td3, ul);
			append(ul, li0);
			append(li0, t27);
			append(ul, t28);
			append(ul, li1);
			append(li1, t29);
			append(ul, t30);
			append(ul, li2);
			append(li2, t31);
			append(table0, t32);
			append(table0, tr2);
			append(tr2, td4);
			append(td4, code2);
			append(code2, t33);
			append(tr2, t34);
			append(tr2, td5);
			append(td5, code3);
			append(code3, t35);
			append(tr2, t36);
			append(tr2, td6);
			append(td6, t37);
			append(tr2, t38);
			append(tr2, td7);
			append(td7, t39);
			append(section0, t40);
			append(section0, h31);
			append(h31, t41);
			append(section0, t42);
			mount_component(samplecode0, section0, null);
			append(section0, t43);
			append(section0, h32);
			append(h32, t44);
			append(section0, t45);
			append(section0, p2);
			append(p2, t46);
			append(section0, t47);
			append(section0, table1);
			append(table1, tr3);
			append(tr3, th4);
			append(th4, t48);
			append(tr3, t49);
			append(tr3, th5);
			append(th5, t50);
			append(tr3, t51);
			append(tr3, th6);
			append(th6, t52);
			append(table1, t53);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(table1, null);
			}

			append(section0, t54);
			append(section0, p3);
			append(p3, t55);
			append(p3, code4);
			append(code4, t56);
			append(p3, t57);
			append(section0, t58);
			append(section0, table2);
			append(table2, tr4);
			append(tr4, th7);
			append(th7, t59);
			append(tr4, t60);
			append(tr4, th8);
			append(th8, t61);
			append(table2, t62);
			append(table2, tr5);
			append(tr5, td8);
			append(td8, t63);
			append(tr5, t64);
			append(tr5, td9);
			append(td9, pre0);
			append(pre0, code5);
			append(code5, t65);
			append(table2, t66);
			append(table2, tr6);
			append(tr6, td10);
			append(td10, t67);
			append(tr6, t68);
			append(tr6, td11);
			append(td11, pre1);
			append(pre1, code6);
			append(code6, t69);
			append(table2, t70);
			append(table2, tr7);
			append(tr7, td12);
			append(td12, t71);
			append(tr7, t72);
			append(tr7, td13);
			append(td13, pre2);
			append(pre2, code7);
			append(code7, t73);
			append(table2, t74);
			append(table2, tr8);
			append(tr8, td14);
			append(td14, t75);
			append(tr8, t76);
			append(tr8, td15);
			append(td15, pre3);
			append(pre3, code8);
			append(code8, t77);
			append(table2, t78);
			append(table2, tr9);
			append(tr9, td16);
			append(td16, t79);
			append(tr9, t80);
			append(tr9, td17);
			append(td17, pre4);
			append(pre4, code9);
			append(code9, t81);
			append(table2, t82);
			append(table2, tr10);
			append(tr10, td18);
			append(td18, t83);
			append(tr10, t84);
			append(tr10, td19);
			append(td19, pre5);
			append(pre5, code10);
			append(code10, t85);
			append(table2, t86);
			append(table2, tr11);
			append(tr11, td20);
			append(td20, t87);
			append(tr11, t88);
			append(tr11, td21);
			append(td21, pre6);
			append(pre6, code11);
			append(code11, t89);
			append(table2, t90);
			append(table2, tr12);
			append(tr12, td22);
			append(td22, t91);
			append(tr12, t92);
			append(tr12, td23);
			append(td23, pre7);
			append(pre7, code12);
			append(code12, t93);
			append(table2, t94);
			append(table2, tr13);
			append(tr13, td24);
			append(td24, t95);
			append(tr13, t96);
			append(tr13, td25);
			append(td25, pre8);
			append(pre8, code13);
			append(code13, t97);
			append(table2, t98);
			append(table2, tr14);
			append(tr14, td26);
			append(td26, t99);
			append(tr14, t100);
			append(tr14, td27);
			append(td27, pre9);
			append(pre9, code14);
			append(code14, t101);
			append(table2, t102);
			append(table2, tr15);
			append(tr15, td28);
			append(td28, t103);
			append(tr15, t104);
			append(tr15, td29);
			append(td29, pre10);
			append(pre10, code15);
			append(code15, t105);
			append(table2, t106);
			append(table2, tr16);
			append(tr16, td30);
			append(td30, t107);
			append(tr16, t108);
			append(tr16, td31);
			append(td31, pre11);
			append(pre11, code16);
			append(code16, t109);
			append(table2, t110);
			append(table2, tr17);
			append(tr17, td32);
			append(td32, t111);
			append(tr17, t112);
			append(tr17, td33);
			append(td33, pre12);
			append(pre12, code17);
			append(code17, t113);
			append(table2, t114);
			append(table2, tr18);
			append(tr18, td34);
			append(td34, t115);
			append(tr18, t116);
			append(tr18, td35);
			append(td35, pre13);
			append(pre13, code18);
			append(code18, t117);
			append(table2, t118);
			append(table2, tr19);
			append(tr19, td36);
			append(td36, t119);
			append(tr19, t120);
			append(tr19, td37);
			append(td37, pre14);
			append(pre14, code19);
			append(code19, t121);
			append(table2, t122);
			append(table2, tr20);
			append(tr20, td38);
			append(td38, t123);
			append(tr20, t124);
			append(tr20, td39);
			append(td39, pre15);
			append(pre15, code20);
			append(code20, t125);
			append(table2, t126);
			append(table2, tr21);
			append(tr21, td40);
			append(td40, t127);
			append(tr21, t128);
			append(tr21, td41);
			append(td41, pre16);
			append(pre16, code21);
			append(code21, t129);
			append(table2, t130);
			append(table2, tr22);
			append(tr22, td42);
			append(td42, t131);
			append(tr22, t132);
			append(tr22, td43);
			append(td43, pre17);
			append(pre17, code22);
			append(code22, t133);
			append(table2, t134);
			append(table2, tr23);
			append(tr23, td44);
			append(td44, t135);
			append(tr23, t136);
			append(tr23, td45);
			append(td45, pre18);
			append(pre18, code23);
			append(code23, t137);
			append(table2, t138);
			append(table2, tr24);
			append(tr24, td46);
			append(td46, t139);
			append(tr24, t140);
			append(tr24, td47);
			append(td47, pre19);
			append(pre19, code24);
			append(code24, t141);
			insert(target, t142, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t143);
			mount_component(demo0, section1, null);
			insert(target, t144, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t145);
			append(section2, p4);
			append(p4, t146);
			append(p4, a1);
			append(a1, t147);
			append(p4, t148);
			append(p4, code25);
			append(code25, t149);
			append(p4, t150);
			append(section2, t151);
			append(section2, p5);
			append(p5, t152);
			append(p5, a2);
			append(a2, t153);
			append(p5, t154);
			append(section2, t155);
			mount_component(demo1, section2, null);
			insert(target, t156, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t157);
			append(section3, p6);
			append(p6, t158);
			append(section3, t159);
			mount_component(samplecode1, section3, null);
			insert(target, t160, anchor);
			mount_component(relatedvalidators, target, anchor);
			insert(target, t161, anchor);
			insert(target, section4, anchor);
			append(section4, div);
			mount_component(prevbutton, div, null);
			append(div, t162);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			if (changed._types) {
				each_value = Object.entries(ctx._types);

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						each_blocks[i].i(1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].i(1);
						each_blocks[i].m(table1, null);
					}
				}

				group_outros();
				for (; i < each_blocks.length; i += 1) outro_block(i, 1, 1);
				check_outros();
			}

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			for (var i = 0; i < each_value.length; i += 1) each_blocks[i].i();

			heading1.$$.fragment.i(local);

			demo0.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);

			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) outro_block(i, 0);

			heading1.$$.fragment.o(local);
			demo0.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach(t142);
				detach(section1);
			}

			heading1.$destroy();

			demo0.$destroy();

			if (detaching) {
				detach(t144);
				detach(section2);
			}

			heading2.$destroy();

			demo1.$destroy();

			if (detaching) {
				detach(t156);
				detach(section3);
			}

			heading3.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t160);
			}

			relatedvalidators.$destroy(detaching);

			if (detaching) {
				detach(t161);
				detach(section4);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • color validator";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

function instance($$self) {
	

const _types = {
    hex: [
        // Valid
        '#0000FF', '#00F',
        // Invalid
        '123', '112233', '#4567',
    ],
    hsl: [
        // Valid
        'hsl(120,50%,50%)', 'hsl( 120 , 50% , 50% )', 'hsl(  120,  50%,       50%  )', 'hsl(-120,50%,50%)', 'hsl(480,50%,50%)',
        // Invalid
        'hsl(10,-50%,50%)', 'hsl(10,50%,-50%)', '120,50%,50%', 'hsl(120,100%,101%)', 'hsl (120,50%,50%)', 
        'hsl(50%, 50%, 100%)', 'hsl(120, 50, 100%)', 'hsl(120, 50%, 100)',
    ],
    hsla: [
        // Valid
        'hsla(120,50%,50%,1)', 'hsla( 120 , 50% , 50%, 1 )', 'hsla(  120,  50%,       50% ,   1  )', 'hsla(-120,50%,50%,1)', 'hsla(480,50%,50%,1)',
        'hsla(120,50%,100%,0)', 'hsla(120,50%,100%,1)', 'hsla(120,50%,100%,0.5)', 'hsla(120,50%,100%,.5)', 'hsla(120,50%,100%,.524141)',
        // Invalid
        'hsla(120,50%,100%,50%)', 'hsla(120,50%,100%,2)', 'hsla(120,50%,100%,-1)', 'hsla(120,50%,100%,1.000000000001)', 'hsla(120,50%,100%,-0.5)',
        'hsla(120,50%,100%,2.3)', 'hsla(10,-50%,50%,1)', 'hsla(10,50%,-50%,1)', '120,50%,50%,1', 'hsla(120,100%,101%,1)',
        'hsla (120,50%,50%,1)', 'hsla(50%, 50%, 100%,1)', 'hsla(120, 50, 100%,1)', 'hsla(120, 50%, 100,1)',
    ],
    keyword: [
        // Valid
        'transparent', 'blue',
        // Invalid
        'blueviolet red', 'shady', 'blueish',
    ],
    rgb: [
        // Valid
        'rgb(255,255,255)', 'rgb( 255 , 255 , 255 )', 'rgb(  255,  255,       255  )', 'rgb(100%,100%,100%)',
        // Invalid
        'rgb(255,255,100%)', 'rgb(-10,255,255)', 'rgb(-10%,100%,100%)', '255,255,255', 'rgb(255,255,256)',
        'rgb(100%,100%,101%)', 'rgb (255,255,255)',
    ],
    rgba: [
        // Valid
        'rgba(255,255,255,1)', 'rgba( 255 , 255 , 255 , 1 )', 'rgba(  255  ,  255    ,       255 ,  1     )', 'rgba(100%,100%,100%,1)', 'rgba(255,255,255,0)',
        'rgba(255,255,255,0.5)', 'rgba(255,255,255,.5)', 'rgba(255,255,255,.524141)', 'rgba(100%,100%,100%,0)', 'rgba(100%,100%,100%,0.5)',
        'rgba(100%,100%,100%,.5)', 'rgba(100%,100%,100%,.524141)',
        // Invalid
        'rgba(100%,100%,100%,50%)', 'rgba(255,255,255,2)', 'rgba(255,255,255,-1)', 'rgba(255,255,255,1.000000000001)', 'rgba(255,255,255,-0.5)',
        'rgba(255,255,255,2.3)', 'rgba(255,255,100%,1)', 'rgba(-10,255,255,1)', 'rgba(-10%,100%,100%,1)', '255,255,255,1',
        'rgba(255,255,256),1', 'rgba(100%,100%,101%,1)', 'rgba (255,255,255,1)',
    ],
};

	return { _types };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export default Index;

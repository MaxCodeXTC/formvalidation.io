import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';

/* src/routes/guide/plugins/declarative/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/plugins/declarative/index.svelte";

// (10:8) <Heading>
function create_default_slot_8(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Usage");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Usage");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (86:8) <Heading>
function create_default_slot_7(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options for field declarations");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options for field declarations");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (201:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options for plugin declarations");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options for plugin declarations");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (203:8) <Tip heading="Notice">
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("The plugin declaration isn't supported when using with ES6 module.");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "The plugin declaration isn't supported when using with ES6 module.");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (290:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (295:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changelog");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changelog");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (308:12) <PrevButton target="/guide/plugins/bulma">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Bulma plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Bulma plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (309:12) <NextButton target="/guide/plugins/default-submit">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("DefaultSubmit plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "DefaultSubmit plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, p0, t5, t6, t7, p1, t8, t9, t10, p2, t11, code0, t12, t13, t14, section1, t15, table0, tr0, th0, t16, t17, th1, t18, t19, th2, t20, t21, tr1, td0, code1, t22, t23, td1, t24, t25, td2, t26, code2, t27, t28, code3, t29, t30, span, t31, t32, t33, tr2, td3, code4, t34, t35, td4, t36, t37, td5, t38, code5, t39, t40, p3, t41, code6, t42, t43, t44, ul0, li0, code7, t45, t46, code8, t47, t48, t49, li1, code9, t50, t51, code10, t52, t53, t54, li2, code11, t55, t56, code12, t57, t58, t59, p4, t60, t61, table1, tr3, th3, t62, t63, th4, t64, t65, th5, t66, t67, tr4, td6, a0, t68, t69, td7, t70, td8, t71, tr5, td9, a1, t72, t73, td10, t74, td11, t75, tr6, td12, a2, t76, t77, td13, t78, td14, t79, p5, t80, t81, t82, p6, t83, t84, p7, t85, t86, section2, t87, t88, table2, tr7, th6, t89, t90, th7, t91, t92, th8, t93, t94, tr8, td15, code13, t95, t96, td16, t97, t98, td17, t99, code14, t100, t101, p8, t102, code15, t103, t104, t105, ul1, li3, code16, t106, t107, code17, t108, t109, t110, li4, code18, t111, t112, code19, t113, t114, t115, li5, code20, t116, t117, code21, t118, t119, t120, p9, t121, code22, t122, t123, t124, p10, t125, t126, t127, p11, t128, t129, t130, section3, t131, t132, section4, t133, ul2, li6, t134, t135, li7, t136, t137, t138, section5, div, t139, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_8] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<!-- Field -->
<input name="userName" />

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                userName: {
                    validators: {
                        notEmpty: {
                            message: 'The username is required'
                        },
                        stringLength: {
                            min: 6,
                            message: 'The name must be more than 6 characters long'
                        },
                    }
                }
            },
        }
    );
});
</script-tag>
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="demoForm" method="POST">
        ...
        <!-- Declare the validator rules -->
        <input name="userName"
            data-fv-not-empty="true"
            data-fv-not-empty___message="The username is required"

            data-fv-string-length="true"
            data-fv-string-length___min="6"
            data-fv-string-length___message="The name must be more than 6 characters long"
        />
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>    
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            // You don't need to declare the field validator here anymore
            plugins: {
                ...,
                declarative: new FormValidation.plugins.Declarative({
                    html5Input: ...,
                    prefix: ...,
                }),
            },
        }
    );
});
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "javascript", code: `
notEmpty: {
    message: ...,
}    
` },
		$$inline: true
	});

	var samplecode3 = new SampleCode({
		props: { lang: "html", code: `
data-fv-not-empty="true"
data-fv-not-empty___message="..."
` },
		$$inline: true
	});

	var samplecode4 = new SampleCode({
		props: { lang: "javascript", code: `
stringLength: {
    min: ...,
    max: ...,
    utf8Bytes: ...,
}    
` },
		$$inline: true
	});

	var samplecode5 = new SampleCode({
		props: { lang: "html", code: `
data-fv-string-length="true"
data-fv-string-length___min="..."
data-fv-string-length___max="..."
data-fv-string-length___utf8-bytes="..."
` },
		$$inline: true
	});

	var samplecode6 = new SampleCode({
		props: { lang: "javascript", code: `
uri: {
    allowLocal: ...,
    message: ...,
    allowEmptyProtocol: ...,
}    
` },
		$$inline: true
	});

	var samplecode7 = new SampleCode({
		props: { lang: "html", code: `
data-fv-uri="true"
data-fv-uri___allow-local="..."
data-fv-uri___message="..."
data-fv-uri___allow-empty-protocol="..."
` },
		$$inline: true
	});

	var samplecode8 = new SampleCode({
		props: { lang: "html", code: `
<div class="mb2">
    <label>
        <input type="checkbox" name="size[]" value="s" 
            data-fv-not-empty="true"
            data-fv-not-empty___message="The size is required" /> S
    </label>
</div>
<div class="mb2">
    <label><input type="checkbox" name="size[]" value="m" /> M</label>
</div>
<div class="mb2">
    <label><input type="checkbox" name="size[]" value="l" /> L</label>
</div>
<div class="mb2">
    <label><input type="checkbox" name="size[]" value="xl" /> XL</label>
</div>    
` },
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var tip = new Tip({
		props: {
		heading: "Notice",
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode9 = new SampleCode({
		props: { lang: "html", code: `
<form id="demoForm" method="POST"
    data-fvp-trigger="true"
    data-fvp-trigger___class="FormValidation.plugins.Trigger"
    
    data-fvp-tachyons="true"
    data-fvp-tachyons___class="FormValidation.plugins.Tachyons"

    data-fvp-submit-button="true"
    data-fvp-submit-button___class="FormValidation.plugins.SubmitButton"

    data-fvp-icon="true"
    data-fvp-icon___class="FormValidation.plugins.Icon"
    data-fvp-icon___valid="fa fa-check"
    data-fvp-icon___invalid="fa fa-times"
    data-fvp-icon___validating="fa fa-refresh">
...
</form>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    const form = document.getElementById('demoForm');
    FormValidation.formValidation(form, {
        plugins: {
            // You have to register the Declarative plugin only
            declarative: new FormValidation.plugins.Declarative()
        }
    });
});
</script-tag>
` },
		$$inline: true
	});

	var samplecode10 = new SampleCode({
		props: { lang: "html", code: `
<form id="demoForm">
...
</form>
    
<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    const form = document.getElementById('demoForm');
    FormValidation.formValidation(form, {
        plugins: {
            declarative: new FormValidation.plugins.Declarative(),
            // Other plugins
            trigger: new FormValidation.plugins.Trigger(),
            tachyons: new FormValidation.plugins.Tachyons(),
            submitButton: new FormValidation.plugins.SubmitButton(),
            icon: new FormValidation.plugins.Icon({
                valid: 'fa fa-check',
                invalid: 'fa fa-times',
                validating: 'fa fa-refresh',
            }),
        }
    });  
});
</script-tag>
` },
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/plugins/declarative/basic",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading4 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Using HTML 5 inputs and attributes',
    ] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/plugins/bulma",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/plugins/default-submit",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Declarative plugin");
			t1 = space();
			h2 = element("h2");
			t2 = text("Provide the ability of declaring validator options via HTML attributes");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			p0 = element("p");
			t5 = text("As you know, you can declare the field validators in programmatic way:");
			t6 = space();
			samplecode0.$$.fragment.c();
			t7 = space();
			p1 = element("p");
			t8 = text("This plugin allows to set the validator options by using equivalent HTML attributes. The following piece of code demonstrates how the Declarative plugin does it:");
			t9 = space();
			samplecode1.$$.fragment.c();
			t10 = space();
			p2 = element("p");
			t11 = text("The sample code above assumes that the FormValidation files are placed inside the ");
			code0 = element("code");
			t12 = text("vendors");
			t13 = text(" directory. You might need to change the path depending on where you place them on the server.");
			t14 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t15 = space();
			table0 = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t16 = text("Option");
			t17 = space();
			th1 = element("th");
			t18 = text("Type");
			t19 = space();
			th2 = element("th");
			t20 = text("Description");
			t21 = space();
			tr1 = element("tr");
			td0 = element("td");
			code1 = element("code");
			t22 = text("html5Input");
			t23 = space();
			td1 = element("td");
			t24 = text("Boolean");
			t25 = space();
			td2 = element("td");
			t26 = text("Set it to ");
			code2 = element("code");
			t27 = text("true");
			t28 = text(" to enable the validators automatically based on the input type or particular HTML 5 attributes. By default, it's set to ");
			code3 = element("code");
			t29 = text("false");
			t30 = text(". Look at the ");
			span = element("span");
			t31 = text("HTML 5 example");
			t32 = text(" below for more information.");
			t33 = space();
			tr2 = element("tr");
			td3 = element("td");
			code4 = element("code");
			t34 = text("prefix");
			t35 = space();
			td4 = element("td");
			t36 = text("String");
			t37 = space();
			td5 = element("td");
			t38 = text("The prefix of attributes. By default, it is set to ");
			code5 = element("code");
			t39 = text("data-fv-");
			t40 = space();
			p3 = element("p");
			t41 = text("The HTML attribute is a combination of ");
			code6 = element("code");
			t42 = text("prefixName-validatorName___optionName");
			t43 = text(", where");
			t44 = space();
			ul0 = element("ul");
			li0 = element("li");
			code7 = element("code");
			t45 = text("prefixName");
			t46 = text(" is replaced with the ");
			code8 = element("code");
			t47 = text("prefix");
			t48 = text(" option above");
			t49 = space();
			li1 = element("li");
			code9 = element("code");
			t50 = text("validatorName");
			t51 = text(" is replaced with the lowercase of validator's name. Any uppercase characters found in validator's name has to be turned into a dash (");
			code10 = element("code");
			t52 = text("-");
			t53 = text(") followed by its lowsercase");
			t54 = space();
			li2 = element("li");
			code11 = element("code");
			t55 = text("optionName");
			t56 = text(" is replaced with the lowsercase of validator's option. Any uppercase characters found in validator's option has to be turned into a dash (");
			code12 = element("code");
			t57 = text("-");
			t58 = text(") followed by its lowsercase");
			t59 = space();
			p4 = element("p");
			t60 = text("Below is a few examples of declaring validator options in both programmatic and declarative modes:");
			t61 = space();
			table1 = element("table");
			tr3 = element("tr");
			th3 = element("th");
			t62 = text("Validator");
			t63 = space();
			th4 = element("th");
			t64 = text("Programmatic mode");
			t65 = space();
			th5 = element("th");
			t66 = text("Declarative mode");
			t67 = space();
			tr4 = element("tr");
			td6 = element("td");
			a0 = element("a");
			t68 = text("notEmpty");
			t69 = space();
			td7 = element("td");
			samplecode2.$$.fragment.c();
			t70 = space();
			td8 = element("td");
			samplecode3.$$.fragment.c();
			t71 = space();
			tr5 = element("tr");
			td9 = element("td");
			a1 = element("a");
			t72 = text("stringLength");
			t73 = space();
			td10 = element("td");
			samplecode4.$$.fragment.c();
			t74 = space();
			td11 = element("td");
			samplecode5.$$.fragment.c();
			t75 = space();
			tr6 = element("tr");
			td12 = element("td");
			a2 = element("a");
			t76 = text("uri");
			t77 = space();
			td13 = element("td");
			samplecode6.$$.fragment.c();
			t78 = space();
			td14 = element("td");
			samplecode7.$$.fragment.c();
			t79 = space();
			p5 = element("p");
			t80 = text("If there are multiple elements having the same name, you just need to set the HTML attribute to one of them. For example:");
			t81 = space();
			samplecode8.$$.fragment.c();
			t82 = space();
			p6 = element("p");
			t83 = text("There are some validators which not all options are configurable via HTML attribute. Refer to each validator documentation to see exactly the equivalent HTML attribute for each option.");
			t84 = space();
			p7 = element("p");
			t85 = text("In that case, you can use both programmatic and declarative modes to set the validator options.");
			t86 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t87 = space();
			tip.$$.fragment.c();
			t88 = space();
			table2 = element("table");
			tr7 = element("tr");
			th6 = element("th");
			t89 = text("Option");
			t90 = space();
			th7 = element("th");
			t91 = text("Type");
			t92 = space();
			th8 = element("th");
			t93 = text("Description");
			t94 = space();
			tr8 = element("tr");
			td15 = element("td");
			code13 = element("code");
			t95 = text("pluginPrefix");
			t96 = space();
			td16 = element("td");
			t97 = text("String");
			t98 = space();
			td17 = element("td");
			t99 = text("The prefix of plugin declaration attributes. By default, it is set to ");
			code14 = element("code");
			t100 = text("data-fvp-");
			t101 = space();
			p8 = element("p");
			t102 = text("The HTML attribute is a combination of ");
			code15 = element("code");
			t103 = text("prefixName-pluginName___optionName");
			t104 = text(", where");
			t105 = space();
			ul1 = element("ul");
			li3 = element("li");
			code16 = element("code");
			t106 = text("prefixName");
			t107 = text(" is replaced with the ");
			code17 = element("code");
			t108 = text("pluginPrefix");
			t109 = text(" option above");
			t110 = space();
			li4 = element("li");
			code18 = element("code");
			t111 = text("pluginName");
			t112 = text(" is replaced with the lowercase of plugin's name. Any uppercase characters found in plugin's name has to be turned into a dash (");
			code19 = element("code");
			t113 = text("-");
			t114 = text(") followed by its lowsercase");
			t115 = space();
			li5 = element("li");
			code20 = element("code");
			t116 = text("optionName");
			t117 = text(" is replaced with the lowsercase of plugin's option. Any uppercase characters found in plugin's option has to be turned into a dash (");
			code21 = element("code");
			t118 = text("-");
			t119 = text(") followed by its lowsercase");
			t120 = space();
			p9 = element("p");
			t121 = text("Each plugin declaration requires an attribute named ");
			code22 = element("code");
			t122 = text("prefixName-pluginName___class");
			t123 = text(" which indicates the plugin class. All the plugin declarations need to be set for the form element.");
			t124 = space();
			p10 = element("p");
			t125 = text("Following is a simple code that demonstrates how to declare the attributes for plugins:");
			t126 = space();
			samplecode9.$$.fragment.c();
			t127 = space();
			p11 = element("p");
			t128 = text("It serves the same functionalities such as declaring plugins as");
			t129 = space();
			samplecode10.$$.fragment.c();
			t130 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t131 = space();
			demo.$$.fragment.c();
			t132 = space();
			section4 = element("section");
			heading4.$$.fragment.c();
			t133 = space();
			ul2 = element("ul");
			li6 = element("li");
			t134 = text("v1.4.0: Support the plugin declarations");
			t135 = space();
			li7 = element("li");
			t136 = text("v1.0.0: First release");
			t137 = space();
			examples.$$.fragment.c();
			t138 = space();
			section5 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t139 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Declarative plugin");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Provide the ability of declaring validator options via HTML attributes");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t5 = claim_text(p0_nodes, "As you know, you can declare the field validators in programmatic way:");
			p0_nodes.forEach(detach);
			t6 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t7 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t8 = claim_text(p1_nodes, "This plugin allows to set the validator options by using equivalent HTML attributes. The following piece of code demonstrates how the Declarative plugin does it:");
			p1_nodes.forEach(detach);
			t9 = claim_text(section0_nodes, "\n");
			samplecode1.$$.fragment.l(section0_nodes);
			t10 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t11 = claim_text(p2_nodes, "The sample code above assumes that the FormValidation files are placed inside the ");

			code0 = claim_element(p2_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t12 = claim_text(code0_nodes, "vendors");
			code0_nodes.forEach(detach);
			t13 = claim_text(p2_nodes, " directory. You might need to change the path depending on where you place them on the server.");
			p2_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t14 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t15 = claim_text(section1_nodes, "\n        ");

			table0 = claim_element(section1_nodes, "TABLE", { class: true }, false);
			var table0_nodes = children(table0);

			tr0 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t16 = claim_text(th0_nodes, "Option");
			th0_nodes.forEach(detach);
			t17 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t18 = claim_text(th1_nodes, "Type");
			th1_nodes.forEach(detach);
			t19 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t20 = claim_text(th2_nodes, "Description");
			th2_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t21 = claim_text(table0_nodes, "\n            ");

			tr1 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code1 = claim_element(td0_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t22 = claim_text(code1_nodes, "html5Input");
			code1_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t23 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			t24 = claim_text(td1_nodes, "Boolean");
			td1_nodes.forEach(detach);
			t25 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t26 = claim_text(td2_nodes, "Set it to ");

			code2 = claim_element(td2_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t27 = claim_text(code2_nodes, "true");
			code2_nodes.forEach(detach);
			t28 = claim_text(td2_nodes, " to enable the validators automatically based on the input type or particular HTML 5 attributes. By default, it's set to ");

			code3 = claim_element(td2_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t29 = claim_text(code3_nodes, "false");
			code3_nodes.forEach(detach);
			t30 = claim_text(td2_nodes, ". Look at the ");

			span = claim_element(td2_nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t31 = claim_text(span_nodes, "HTML 5 example");
			span_nodes.forEach(detach);
			t32 = claim_text(td2_nodes, " below for more information.");
			td2_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t33 = claim_text(table0_nodes, "\n            ");

			tr2 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td3 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			code4 = claim_element(td3_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t34 = claim_text(code4_nodes, "prefix");
			code4_nodes.forEach(detach);
			td3_nodes.forEach(detach);
			t35 = claim_text(tr2_nodes, "\n                ");

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			t36 = claim_text(td4_nodes, "String");
			td4_nodes.forEach(detach);
			t37 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			t38 = claim_text(td5_nodes, "The prefix of attributes. By default, it is set to ");

			code5 = claim_element(td5_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t39 = claim_text(code5_nodes, "data-fv-");
			code5_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			table0_nodes.forEach(detach);
			t40 = claim_text(section1_nodes, "\n\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t41 = claim_text(p3_nodes, "The HTML attribute is a combination of ");

			code6 = claim_element(p3_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t42 = claim_text(code6_nodes, "prefixName-validatorName___optionName");
			code6_nodes.forEach(detach);
			t43 = claim_text(p3_nodes, ", where");
			p3_nodes.forEach(detach);
			t44 = claim_text(section1_nodes, "\n        ");

			ul0 = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			code7 = claim_element(li0_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t45 = claim_text(code7_nodes, "prefixName");
			code7_nodes.forEach(detach);
			t46 = claim_text(li0_nodes, " is replaced with the ");

			code8 = claim_element(li0_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t47 = claim_text(code8_nodes, "prefix");
			code8_nodes.forEach(detach);
			t48 = claim_text(li0_nodes, " option above");
			li0_nodes.forEach(detach);
			t49 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			code9 = claim_element(li1_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t50 = claim_text(code9_nodes, "validatorName");
			code9_nodes.forEach(detach);
			t51 = claim_text(li1_nodes, " is replaced with the lowercase of validator's name. Any uppercase characters found in validator's name has to be turned into a dash (");

			code10 = claim_element(li1_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t52 = claim_text(code10_nodes, "-");
			code10_nodes.forEach(detach);
			t53 = claim_text(li1_nodes, ") followed by its lowsercase");
			li1_nodes.forEach(detach);
			t54 = claim_text(ul0_nodes, "\n            ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			code11 = claim_element(li2_nodes, "CODE", {}, false);
			var code11_nodes = children(code11);

			t55 = claim_text(code11_nodes, "optionName");
			code11_nodes.forEach(detach);
			t56 = claim_text(li2_nodes, " is replaced with the lowsercase of validator's option. Any uppercase characters found in validator's option has to be turned into a dash (");

			code12 = claim_element(li2_nodes, "CODE", {}, false);
			var code12_nodes = children(code12);

			t57 = claim_text(code12_nodes, "-");
			code12_nodes.forEach(detach);
			t58 = claim_text(li2_nodes, ") followed by its lowsercase");
			li2_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			t59 = claim_text(section1_nodes, "\n        \n        ");

			p4 = claim_element(section1_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t60 = claim_text(p4_nodes, "Below is a few examples of declaring validator options in both programmatic and declarative modes:");
			p4_nodes.forEach(detach);
			t61 = claim_text(section1_nodes, "\n        ");

			table1 = claim_element(section1_nodes, "TABLE", { class: true }, false);
			var table1_nodes = children(table1);

			tr3 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			th3 = claim_element(tr3_nodes, "TH", { class: true }, false);
			var th3_nodes = children(th3);

			t62 = claim_text(th3_nodes, "Validator");
			th3_nodes.forEach(detach);
			t63 = claim_text(tr3_nodes, "\n                ");

			th4 = claim_element(tr3_nodes, "TH", { class: true }, false);
			var th4_nodes = children(th4);

			t64 = claim_text(th4_nodes, "Programmatic mode");
			th4_nodes.forEach(detach);
			t65 = claim_text(tr3_nodes, "\n                ");

			th5 = claim_element(tr3_nodes, "TH", { class: true }, false);
			var th5_nodes = children(th5);

			t66 = claim_text(th5_nodes, "Declarative mode");
			th5_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			t67 = claim_text(table1_nodes, "\n            ");

			tr4 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			td6 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			a0 = claim_element(td6_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t68 = claim_text(a0_nodes, "notEmpty");
			a0_nodes.forEach(detach);
			td6_nodes.forEach(detach);
			t69 = claim_text(tr4_nodes, "\n                ");

			td7 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			samplecode2.$$.fragment.l(td7_nodes);
			td7_nodes.forEach(detach);
			t70 = claim_text(tr4_nodes, "\n                ");

			td8 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			samplecode3.$$.fragment.l(td8_nodes);
			td8_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			t71 = claim_text(table1_nodes, "\n            ");

			tr5 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr5_nodes = children(tr5);

			td9 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			a1 = claim_element(td9_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t72 = claim_text(a1_nodes, "stringLength");
			a1_nodes.forEach(detach);
			td9_nodes.forEach(detach);
			t73 = claim_text(tr5_nodes, "\n                ");

			td10 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td10_nodes = children(td10);

			samplecode4.$$.fragment.l(td10_nodes);
			td10_nodes.forEach(detach);
			t74 = claim_text(tr5_nodes, "\n                ");

			td11 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td11_nodes = children(td11);

			samplecode5.$$.fragment.l(td11_nodes);
			td11_nodes.forEach(detach);
			tr5_nodes.forEach(detach);
			t75 = claim_text(table1_nodes, "\n            ");

			tr6 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr6_nodes = children(tr6);

			td12 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td12_nodes = children(td12);

			a2 = claim_element(td12_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t76 = claim_text(a2_nodes, "uri");
			a2_nodes.forEach(detach);
			td12_nodes.forEach(detach);
			t77 = claim_text(tr6_nodes, "\n                ");

			td13 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td13_nodes = children(td13);

			samplecode6.$$.fragment.l(td13_nodes);
			td13_nodes.forEach(detach);
			t78 = claim_text(tr6_nodes, "\n                ");

			td14 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td14_nodes = children(td14);

			samplecode7.$$.fragment.l(td14_nodes);
			td14_nodes.forEach(detach);
			tr6_nodes.forEach(detach);
			table1_nodes.forEach(detach);
			t79 = claim_text(section1_nodes, "\n        \n        ");

			p5 = claim_element(section1_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t80 = claim_text(p5_nodes, "If there are multiple elements having the same name, you just need to set the HTML attribute to one of them. For example:");
			p5_nodes.forEach(detach);
			t81 = claim_text(section1_nodes, "\n");
			samplecode8.$$.fragment.l(section1_nodes);
			t82 = claim_text(section1_nodes, "\n        ");

			p6 = claim_element(section1_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t83 = claim_text(p6_nodes, "There are some validators which not all options are configurable via HTML attribute. Refer to each validator documentation to see exactly the equivalent HTML attribute for each option.");
			p6_nodes.forEach(detach);
			t84 = claim_text(section1_nodes, "\n        ");

			p7 = claim_element(section1_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t85 = claim_text(p7_nodes, "In that case, you can use both programmatic and declarative modes to set the validator options.");
			p7_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t86 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t87 = claim_text(section2_nodes, "\n\n        ");
			tip.$$.fragment.l(section2_nodes);
			t88 = claim_text(section2_nodes, "\n\n        ");

			table2 = claim_element(section2_nodes, "TABLE", { class: true }, false);
			var table2_nodes = children(table2);

			tr7 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr7_nodes = children(tr7);

			th6 = claim_element(tr7_nodes, "TH", { class: true }, false);
			var th6_nodes = children(th6);

			t89 = claim_text(th6_nodes, "Option");
			th6_nodes.forEach(detach);
			t90 = claim_text(tr7_nodes, "\n                ");

			th7 = claim_element(tr7_nodes, "TH", { class: true }, false);
			var th7_nodes = children(th7);

			t91 = claim_text(th7_nodes, "Type");
			th7_nodes.forEach(detach);
			t92 = claim_text(tr7_nodes, "\n                ");

			th8 = claim_element(tr7_nodes, "TH", { class: true }, false);
			var th8_nodes = children(th8);

			t93 = claim_text(th8_nodes, "Description");
			th8_nodes.forEach(detach);
			tr7_nodes.forEach(detach);
			t94 = claim_text(table2_nodes, "\n            ");

			tr8 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr8_nodes = children(tr8);

			td15 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td15_nodes = children(td15);

			code13 = claim_element(td15_nodes, "CODE", {}, false);
			var code13_nodes = children(code13);

			t95 = claim_text(code13_nodes, "pluginPrefix");
			code13_nodes.forEach(detach);
			td15_nodes.forEach(detach);
			t96 = claim_text(tr8_nodes, "\n                ");

			td16 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td16_nodes = children(td16);

			t97 = claim_text(td16_nodes, "String");
			td16_nodes.forEach(detach);
			t98 = claim_text(tr8_nodes, "\n                ");

			td17 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td17_nodes = children(td17);

			t99 = claim_text(td17_nodes, "The prefix of plugin declaration attributes. By default, it is set to ");

			code14 = claim_element(td17_nodes, "CODE", {}, false);
			var code14_nodes = children(code14);

			t100 = claim_text(code14_nodes, "data-fvp-");
			code14_nodes.forEach(detach);
			td17_nodes.forEach(detach);
			tr8_nodes.forEach(detach);
			table2_nodes.forEach(detach);
			t101 = claim_text(section2_nodes, "\n\n        ");

			p8 = claim_element(section2_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t102 = claim_text(p8_nodes, "The HTML attribute is a combination of ");

			code15 = claim_element(p8_nodes, "CODE", {}, false);
			var code15_nodes = children(code15);

			t103 = claim_text(code15_nodes, "prefixName-pluginName___optionName");
			code15_nodes.forEach(detach);
			t104 = claim_text(p8_nodes, ", where");
			p8_nodes.forEach(detach);
			t105 = claim_text(section2_nodes, "\n        ");

			ul1 = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li3 = claim_element(ul1_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			code16 = claim_element(li3_nodes, "CODE", {}, false);
			var code16_nodes = children(code16);

			t106 = claim_text(code16_nodes, "prefixName");
			code16_nodes.forEach(detach);
			t107 = claim_text(li3_nodes, " is replaced with the ");

			code17 = claim_element(li3_nodes, "CODE", {}, false);
			var code17_nodes = children(code17);

			t108 = claim_text(code17_nodes, "pluginPrefix");
			code17_nodes.forEach(detach);
			t109 = claim_text(li3_nodes, " option above");
			li3_nodes.forEach(detach);
			t110 = claim_text(ul1_nodes, "\n            ");

			li4 = claim_element(ul1_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			code18 = claim_element(li4_nodes, "CODE", {}, false);
			var code18_nodes = children(code18);

			t111 = claim_text(code18_nodes, "pluginName");
			code18_nodes.forEach(detach);
			t112 = claim_text(li4_nodes, " is replaced with the lowercase of plugin's name. Any uppercase characters found in plugin's name has to be turned into a dash (");

			code19 = claim_element(li4_nodes, "CODE", {}, false);
			var code19_nodes = children(code19);

			t113 = claim_text(code19_nodes, "-");
			code19_nodes.forEach(detach);
			t114 = claim_text(li4_nodes, ") followed by its lowsercase");
			li4_nodes.forEach(detach);
			t115 = claim_text(ul1_nodes, "\n            ");

			li5 = claim_element(ul1_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			code20 = claim_element(li5_nodes, "CODE", {}, false);
			var code20_nodes = children(code20);

			t116 = claim_text(code20_nodes, "optionName");
			code20_nodes.forEach(detach);
			t117 = claim_text(li5_nodes, " is replaced with the lowsercase of plugin's option. Any uppercase characters found in plugin's option has to be turned into a dash (");

			code21 = claim_element(li5_nodes, "CODE", {}, false);
			var code21_nodes = children(code21);

			t118 = claim_text(code21_nodes, "-");
			code21_nodes.forEach(detach);
			t119 = claim_text(li5_nodes, ") followed by its lowsercase");
			li5_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			t120 = claim_text(section2_nodes, "\n\n        ");

			p9 = claim_element(section2_nodes, "P", { class: true }, false);
			var p9_nodes = children(p9);

			t121 = claim_text(p9_nodes, "Each plugin declaration requires an attribute named ");

			code22 = claim_element(p9_nodes, "CODE", {}, false);
			var code22_nodes = children(code22);

			t122 = claim_text(code22_nodes, "prefixName-pluginName___class");
			code22_nodes.forEach(detach);
			t123 = claim_text(p9_nodes, " which indicates the plugin class. All the plugin declarations need to be set for the form element.");
			p9_nodes.forEach(detach);
			t124 = claim_text(section2_nodes, "\n        ");

			p10 = claim_element(section2_nodes, "P", { class: true }, false);
			var p10_nodes = children(p10);

			t125 = claim_text(p10_nodes, "Following is a simple code that demonstrates how to declare the attributes for plugins:");
			p10_nodes.forEach(detach);
			t126 = claim_text(section2_nodes, "\n\n");
			samplecode9.$$.fragment.l(section2_nodes);
			t127 = claim_text(section2_nodes, "\n\n        ");

			p11 = claim_element(section2_nodes, "P", { class: true }, false);
			var p11_nodes = children(p11);

			t128 = claim_text(p11_nodes, "It serves the same functionalities such as declaring plugins as");
			p11_nodes.forEach(detach);
			t129 = claim_text(section2_nodes, "\n\n");
			samplecode10.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t130 = claim_text(nodes, "\n    \n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t131 = claim_text(section3_nodes, "\n        ");
			demo.$$.fragment.l(section3_nodes);
			section3_nodes.forEach(detach);
			t132 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			heading4.$$.fragment.l(section4_nodes);
			t133 = claim_text(section4_nodes, "\n        ");

			ul2 = claim_element(section4_nodes, "UL", { class: true }, false);
			var ul2_nodes = children(ul2);

			li6 = claim_element(ul2_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			t134 = claim_text(li6_nodes, "v1.4.0: Support the plugin declarations");
			li6_nodes.forEach(detach);
			t135 = claim_text(ul2_nodes, "\n            ");

			li7 = claim_element(ul2_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			t136 = claim_text(li7_nodes, "v1.0.0: First release");
			li7_nodes.forEach(detach);
			ul2_nodes.forEach(detach);
			section4_nodes.forEach(detach);
			t137 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			t138 = claim_text(nodes, "\n\n    ");

			section5 = claim_element(nodes, "SECTION", { class: true }, false);
			var section5_nodes = children(section5);

			div = claim_element(section5_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t139 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section5_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 100);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 156);
			p0.className = "lh-copy";
			add_location(p0, file, 10, 8, 322);
			p1.className = "lh-copy";
			add_location(p1, file, 38, 8, 1155);
			add_location(code0, file, 81, 109, 2744);
			p2.className = "lh-copy";
			add_location(p2, file, 81, 8, 2643);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 259);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 88, 16, 3090);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 89, 16, 3152);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 90, 16, 3212);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 87, 12, 3041);
			add_location(code1, file, 93, 36, 3362);
			td0.className = "pv2 ph3";
			add_location(td0, file, 93, 16, 3342);
			td1.className = "pv2 ph3";
			add_location(td1, file, 94, 16, 3407);
			add_location(code2, file, 95, 54, 3494);
			add_location(code3, file, 95, 192, 3632);
			span.className = "i";
			add_location(span, file, 95, 224, 3664);
			td2.className = "pv2 ph3 lh-copy";
			add_location(td2, file, 95, 16, 3456);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 92, 12, 3293);
			add_location(code4, file, 98, 36, 3834);
			td3.className = "pv2 ph3";
			add_location(td3, file, 98, 16, 3814);
			td4.className = "pv2 ph3";
			add_location(td4, file, 99, 16, 3875);
			add_location(code5, file, 100, 95, 4002);
			td5.className = "pv2 ph3 lh-copy";
			add_location(td5, file, 100, 16, 3923);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 97, 12, 3765);
			table0.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table0, file, 86, 8, 2971);
			add_location(code6, file, 104, 66, 4131);
			p3.className = "lh-copy";
			add_location(p3, file, 104, 8, 4073);
			add_location(code7, file, 106, 16, 4246);
			add_location(code8, file, 106, 61, 4291);
			add_location(li0, file, 106, 12, 4242);
			add_location(code9, file, 107, 16, 4345);
			add_location(code10, file, 107, 176, 4505);
			add_location(li1, file, 107, 12, 4341);
			add_location(code11, file, 108, 16, 4569);
			add_location(code12, file, 108, 178, 4731);
			add_location(li2, file, 108, 12, 4565);
			ul0.className = "ma0 pl3 lh-copy";
			add_location(ul0, file, 105, 8, 4201);
			p4.className = "lh-copy";
			add_location(p4, file, 111, 8, 4810);
			th3.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th3, file, 114, 16, 5059);
			th4.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th4, file, 115, 16, 5124);
			th5.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th5, file, 116, 16, 5197);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 113, 12, 5010);
			a0.href = "/guide/validators/not-empty";
			a0.className = "blue dim link";
			add_location(a0, file, 119, 36, 5352);
			td6.className = "pv2 ph3";
			add_location(td6, file, 119, 16, 5332);
			td7.className = "pv2 ph3";
			add_location(td7, file, 120, 16, 5446);
			td8.className = "pv2 ph3";
			add_location(td8, file, 127, 16, 5585);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 118, 12, 5283);
			a1.href = "/guide/validators/string-length";
			a1.className = "blue dim link";
			add_location(a1, file, 135, 36, 5824);
			td9.className = "pv2 ph3";
			add_location(td9, file, 135, 16, 5804);
			td10.className = "pv2 ph3";
			add_location(td10, file, 136, 16, 5926);
			td11.className = "pv2 ph3";
			add_location(td11, file, 145, 16, 6099);
			tr5.className = "striped--light-gray";
			add_location(tr5, file, 134, 12, 5755);
			a2.href = "/guide/validators/uri";
			a2.className = "blue dim link";
			add_location(a2, file, 155, 36, 6417);
			td12.className = "pv2 ph3";
			add_location(td12, file, 155, 16, 6397);
			td13.className = "pv2 ph3";
			add_location(td13, file, 156, 16, 6500);
			td14.className = "pv2 ph3";
			add_location(td14, file, 165, 16, 6684);
			tr6.className = "striped--light-gray";
			add_location(tr6, file, 154, 12, 6348);
			table1.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table1, file, 112, 8, 4940);
			p5.className = "lh-copy";
			add_location(p5, file, 176, 8, 6937);
			p6.className = "lh-copy";
			add_location(p6, file, 195, 8, 7633);
			p7.className = "lh-copy";
			add_location(p7, file, 196, 8, 7849);
			section1.className = "mv5";
			add_location(section1, file, 84, 4, 2883);
			th6.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th6, file, 206, 16, 8301);
			th7.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th7, file, 207, 16, 8363);
			th8.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th8, file, 208, 16, 8423);
			tr7.className = "striped--light-gray";
			add_location(tr7, file, 205, 12, 8252);
			add_location(code13, file, 211, 36, 8573);
			td15.className = "pv2 ph3";
			add_location(td15, file, 211, 16, 8553);
			td16.className = "pv2 ph3";
			add_location(td16, file, 212, 16, 8620);
			add_location(code14, file, 213, 114, 8766);
			td17.className = "pv2 ph3 lh-copy";
			add_location(td17, file, 213, 16, 8668);
			tr8.className = "striped--light-gray";
			add_location(tr8, file, 210, 12, 8504);
			table2.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table2, file, 204, 8, 8182);
			add_location(code15, file, 217, 66, 8896);
			p8.className = "lh-copy";
			add_location(p8, file, 217, 8, 8838);
			add_location(code16, file, 219, 16, 9008);
			add_location(code17, file, 219, 61, 9053);
			add_location(li3, file, 219, 12, 9004);
			add_location(code18, file, 220, 16, 9113);
			add_location(code19, file, 220, 167, 9264);
			add_location(li4, file, 220, 12, 9109);
			add_location(code20, file, 221, 16, 9328);
			add_location(code21, file, 221, 172, 9484);
			add_location(li5, file, 221, 12, 9324);
			ul1.className = "ma0 pl3 lh-copy";
			add_location(ul1, file, 218, 8, 8963);
			add_location(code22, file, 224, 79, 9626);
			p9.className = "lh-copy";
			add_location(p9, file, 224, 8, 9555);
			p10.className = "lh-copy";
			add_location(p10, file, 225, 8, 9780);
			p11.className = "lh-copy";
			add_location(p11, file, 259, 8, 10848);
			section2.className = "mv5";
			add_location(section2, file, 199, 4, 7988);
			section3.className = "mv5";
			add_location(section3, file, 288, 4, 11747);
			add_location(li6, file, 296, 12, 12027);
			add_location(li7, file, 297, 12, 12088);
			ul2.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul2, file, 295, 8, 11982);
			section4.className = "mv5";
			add_location(section4, file, 293, 4, 11915);
			div.className = "flex";
			add_location(div, file, 306, 8, 12266);
			section5.className = "mv5";
			add_location(section5, file, 305, 4, 12236);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, p0);
			append(p0, t5);
			append(section0, t6);
			mount_component(samplecode0, section0, null);
			append(section0, t7);
			append(section0, p1);
			append(p1, t8);
			append(section0, t9);
			mount_component(samplecode1, section0, null);
			append(section0, t10);
			append(section0, p2);
			append(p2, t11);
			append(p2, code0);
			append(code0, t12);
			append(p2, t13);
			insert(target, t14, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t15);
			append(section1, table0);
			append(table0, tr0);
			append(tr0, th0);
			append(th0, t16);
			append(tr0, t17);
			append(tr0, th1);
			append(th1, t18);
			append(tr0, t19);
			append(tr0, th2);
			append(th2, t20);
			append(table0, t21);
			append(table0, tr1);
			append(tr1, td0);
			append(td0, code1);
			append(code1, t22);
			append(tr1, t23);
			append(tr1, td1);
			append(td1, t24);
			append(tr1, t25);
			append(tr1, td2);
			append(td2, t26);
			append(td2, code2);
			append(code2, t27);
			append(td2, t28);
			append(td2, code3);
			append(code3, t29);
			append(td2, t30);
			append(td2, span);
			append(span, t31);
			append(td2, t32);
			append(table0, t33);
			append(table0, tr2);
			append(tr2, td3);
			append(td3, code4);
			append(code4, t34);
			append(tr2, t35);
			append(tr2, td4);
			append(td4, t36);
			append(tr2, t37);
			append(tr2, td5);
			append(td5, t38);
			append(td5, code5);
			append(code5, t39);
			append(section1, t40);
			append(section1, p3);
			append(p3, t41);
			append(p3, code6);
			append(code6, t42);
			append(p3, t43);
			append(section1, t44);
			append(section1, ul0);
			append(ul0, li0);
			append(li0, code7);
			append(code7, t45);
			append(li0, t46);
			append(li0, code8);
			append(code8, t47);
			append(li0, t48);
			append(ul0, t49);
			append(ul0, li1);
			append(li1, code9);
			append(code9, t50);
			append(li1, t51);
			append(li1, code10);
			append(code10, t52);
			append(li1, t53);
			append(ul0, t54);
			append(ul0, li2);
			append(li2, code11);
			append(code11, t55);
			append(li2, t56);
			append(li2, code12);
			append(code12, t57);
			append(li2, t58);
			append(section1, t59);
			append(section1, p4);
			append(p4, t60);
			append(section1, t61);
			append(section1, table1);
			append(table1, tr3);
			append(tr3, th3);
			append(th3, t62);
			append(tr3, t63);
			append(tr3, th4);
			append(th4, t64);
			append(tr3, t65);
			append(tr3, th5);
			append(th5, t66);
			append(table1, t67);
			append(table1, tr4);
			append(tr4, td6);
			append(td6, a0);
			append(a0, t68);
			append(tr4, t69);
			append(tr4, td7);
			mount_component(samplecode2, td7, null);
			append(tr4, t70);
			append(tr4, td8);
			mount_component(samplecode3, td8, null);
			append(table1, t71);
			append(table1, tr5);
			append(tr5, td9);
			append(td9, a1);
			append(a1, t72);
			append(tr5, t73);
			append(tr5, td10);
			mount_component(samplecode4, td10, null);
			append(tr5, t74);
			append(tr5, td11);
			mount_component(samplecode5, td11, null);
			append(table1, t75);
			append(table1, tr6);
			append(tr6, td12);
			append(td12, a2);
			append(a2, t76);
			append(tr6, t77);
			append(tr6, td13);
			mount_component(samplecode6, td13, null);
			append(tr6, t78);
			append(tr6, td14);
			mount_component(samplecode7, td14, null);
			append(section1, t79);
			append(section1, p5);
			append(p5, t80);
			append(section1, t81);
			mount_component(samplecode8, section1, null);
			append(section1, t82);
			append(section1, p6);
			append(p6, t83);
			append(section1, t84);
			append(section1, p7);
			append(p7, t85);
			insert(target, t86, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t87);
			mount_component(tip, section2, null);
			append(section2, t88);
			append(section2, table2);
			append(table2, tr7);
			append(tr7, th6);
			append(th6, t89);
			append(tr7, t90);
			append(tr7, th7);
			append(th7, t91);
			append(tr7, t92);
			append(tr7, th8);
			append(th8, t93);
			append(table2, t94);
			append(table2, tr8);
			append(tr8, td15);
			append(td15, code13);
			append(code13, t95);
			append(tr8, t96);
			append(tr8, td16);
			append(td16, t97);
			append(tr8, t98);
			append(tr8, td17);
			append(td17, t99);
			append(td17, code14);
			append(code14, t100);
			append(section2, t101);
			append(section2, p8);
			append(p8, t102);
			append(p8, code15);
			append(code15, t103);
			append(p8, t104);
			append(section2, t105);
			append(section2, ul1);
			append(ul1, li3);
			append(li3, code16);
			append(code16, t106);
			append(li3, t107);
			append(li3, code17);
			append(code17, t108);
			append(li3, t109);
			append(ul1, t110);
			append(ul1, li4);
			append(li4, code18);
			append(code18, t111);
			append(li4, t112);
			append(li4, code19);
			append(code19, t113);
			append(li4, t114);
			append(ul1, t115);
			append(ul1, li5);
			append(li5, code20);
			append(code20, t116);
			append(li5, t117);
			append(li5, code21);
			append(code21, t118);
			append(li5, t119);
			append(section2, t120);
			append(section2, p9);
			append(p9, t121);
			append(p9, code22);
			append(code22, t122);
			append(p9, t123);
			append(section2, t124);
			append(section2, p10);
			append(p10, t125);
			append(section2, t126);
			mount_component(samplecode9, section2, null);
			append(section2, t127);
			append(section2, p11);
			append(p11, t128);
			append(section2, t129);
			mount_component(samplecode10, section2, null);
			insert(target, t130, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t131);
			mount_component(demo, section3, null);
			insert(target, t132, anchor);
			insert(target, section4, anchor);
			mount_component(heading4, section4, null);
			append(section4, t133);
			append(section4, ul2);
			append(ul2, li6);
			append(li6, t134);
			append(ul2, t135);
			append(ul2, li7);
			append(li7, t136);
			insert(target, t137, anchor);
			mount_component(examples, target, anchor);
			insert(target, t138, anchor);
			insert(target, section5, anchor);
			append(section5, div);
			mount_component(prevbutton, div, null);
			append(div, t139);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var tip_changes = {};
			if (changed.$$scope) tip_changes.$$scope = { changed, ctx };
			tip.$set(tip_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var heading4_changes = {};
			if (changed.$$scope) heading4_changes.$$scope = { changed, ctx };
			heading4.$set(heading4_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			samplecode3.$$.fragment.i(local);

			samplecode4.$$.fragment.i(local);

			samplecode5.$$.fragment.i(local);

			samplecode6.$$.fragment.i(local);

			samplecode7.$$.fragment.i(local);

			samplecode8.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			tip.$$.fragment.i(local);

			samplecode9.$$.fragment.i(local);

			samplecode10.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			heading4.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			samplecode3.$$.fragment.o(local);
			samplecode4.$$.fragment.o(local);
			samplecode5.$$.fragment.o(local);
			samplecode6.$$.fragment.o(local);
			samplecode7.$$.fragment.o(local);
			samplecode8.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			tip.$$.fragment.o(local);
			samplecode9.$$.fragment.o(local);
			samplecode10.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			heading4.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t14);
				detach(section1);
			}

			heading1.$destroy();

			samplecode2.$destroy();

			samplecode3.$destroy();

			samplecode4.$destroy();

			samplecode5.$destroy();

			samplecode6.$destroy();

			samplecode7.$destroy();

			samplecode8.$destroy();

			if (detaching) {
				detach(t86);
				detach(section2);
			}

			heading2.$destroy();

			tip.$destroy();

			samplecode9.$destroy();

			samplecode10.$destroy();

			if (detaching) {
				detach(t130);
				detach(section3);
			}

			heading3.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t132);
				detach(section4);
			}

			heading4.$destroy();

			if (detaching) {
				detach(t137);
			}

			examples.$destroy(detaching);

			if (detaching) {
				detach(t138);
				detach(section5);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Declarative plugin";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

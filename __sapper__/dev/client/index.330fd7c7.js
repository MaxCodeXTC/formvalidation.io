import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, z as check_outros, I as destroy_each, y as on_outro, x as group_outros } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';
import { a as SampleData } from './chunk.41999a23.js';

/* src/routes/guide/validators/credit-card/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/validators/credit-card/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.name = list[i][0];
	child_ctx.sample = list[i][1];
	return child_ctx;
}

// (10:8) <Heading>
function create_default_slot_7(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (37:12) {#each Object.entries(samples) as [name, sample]}
function create_each_block(ctx) {
	var tr, td, t0_value = ctx.name, t0, t1, current;

	var sampledata = new SampleData({
		props: {
		sample: ctx.sample,
		sender: "/guide/validators/credit-card/basic"
	},
		$$inline: true
	});

	return {
		c: function create() {
			tr = element("tr");
			td = element("td");
			t0 = text(t0_value);
			t1 = space();
			sampledata.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", { class: true }, false);
			var tr_nodes = children(tr);

			td = claim_element(tr_nodes, "TD", { class: true }, false);
			var td_nodes = children(td);

			t0 = claim_text(td_nodes, t0_value);
			td_nodes.forEach(detach);
			t1 = claim_text(tr_nodes, "\n                ");
			sampledata.$$.fragment.l(tr_nodes);
			tr_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			td.className = "pv2 ph3";
			add_location(td, file, 38, 16, 1974);
			tr.className = "striped--light-gray";
			add_location(tr, file, 37, 12, 1925);
		},

		m: function mount(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td);
			append(td, t0);
			append(tr, t1);
			mount_component(sampledata, tr, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var sampledata_changes = {};
			if (changed.samples) sampledata_changes.sample = ctx.sample;
			sampledata.$set(sampledata_changes);
		},

		i: function intro(local) {
			if (current) return;
			sampledata.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			sampledata.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(tr);
			}

			sampledata.$destroy();
		}
	};
}

// (44:8) <Tip heading="Note">
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("13 digits Visa credit cards are no longer used and it will be treated as an invalid card number");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "13 digits Visa credit cards are no longer used and it will be treated as an invalid card number");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (71:8) <Tip>
function create_default_slot_5(ctx) {
	var t0, a, t1, t2;

	return {
		c: function create() {
			t0 = text("You can use ");
			a = element("a");
			t1 = text("getcreditcardnumbers.com");
			t2 = text(" to generate fake credit card numbers");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "You can use ");

			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t1 = claim_text(a_nodes, "getcreditcardnumbers.com");
			a_nodes.forEach(detach);
			t2 = claim_text(nodes, " to generate fake credit card numbers");
			this.h();
		},

		h: function hydrate() {
			a.href = "http://www.getcreditcardnumbers.com";
			a.className = "blue dim link";
			add_location(a, file, 70, 25, 2932);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a, anchor);
			append(a, t1);
			insert(target, t2, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(a);
				detach(t2);
			}
		}
	};
}

// (75:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (81:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("ES6 Module Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "ES6 Module Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (119:12) <PrevButton target="/guide/validators/color">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("color validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "color validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (120:12) <NextButton target="/guide/validators/cusip">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("cusip validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "cusip validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, h30, t5, t6, p0, t7, a0, t8, t9, t10, table0, tr0, th0, t11, t12, th1, t13, t14, th2, t15, t16, th3, t17, t18, tr1, td0, code0, t19, t20, td1, code1, t21, t22, td2, t23, t24, td3, t25, t26, p1, t27, a1, t28, t29, t30, p2, t31, t32, table1, tr2, th4, t33, t34, th5, t35, t36, th6, t37, t38, t39, t40, h31, t41, t42, t43, t44, section1, t45, t46, section2, t47, p3, t48, t49, t50, t51, t52, section3, div, t53, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var each_value = Object.entries(ctx.samples);

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	function outro_block(i, detaching, local) {
		if (each_blocks[i]) {
			if (detaching) {
				on_outro(() => {
					each_blocks[i].d(detaching);
					each_blocks[i] = null;
				});
			}

			each_blocks[i].o(local);
		}
	}

	var tip0 = new Tip({
		props: {
		heading: "Note",
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import creditCard from 'formvalidation/dist/es6/validators/creditCard';

const result = creditCard().validate({
    value: ...,
    options: {
        message: ...,
    },
});
/*
result is an object of
{
    valid: true or false,
    message: The error message,
    meta: {
        // The type of credit card
        // Can be null or one of AMERICAN_EXPRESS, DINERS_CLUB, DINERS_CLUB_US, DISCOVER, JCB, LASER,
        // MAESTRO, MASTERCARD, SOLO, UNIONPAY, VISA
        type: ...
    }
}
*/
` },
		$$inline: true
	});

	var tip1 = new Tip({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/validators/credit-card/basic",
		frameworks: ['bootstrap', 'tachyons']
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import creditCard from 'formvalidation/dist/es6/validators/creditCard';

const res1 = creditCard().validate({
    value: '340653705597107',
    options: {
        message: 'The credit card number is not valid',
    },
});
// res1.valid === true
// res1.meta.type === 'AMERICAN_EXPRESS'

const res2 = creditCard().validate({
    value: '5303765013600',
    options: {
        message: 'The credit card number is not valid',
    },
});
// res2.valid === false
// res2.meta.type === null
` },
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Accepting test credit card numbers',
        'Asking credit card number to match with selected type',
        'Showing credit card icon',
        'Validating credit card expiration date',
    ] },
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['bic', 'iban', 'rtn'] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/validators/color",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/validators/cusip",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("creditCard validator");
			t1 = space();
			h2 = element("h2");
			t2 = text("Validate a credit card number");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			h30 = element("h3");
			t5 = text("Using with form field");
			t6 = space();
			p0 = element("p");
			t7 = text("The HTML attributes are used to set the validator options via the ");
			a0 = element("a");
			t8 = text("Declarative");
			t9 = text(" plugin");
			t10 = space();
			table0 = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t11 = text("Name");
			t12 = space();
			th1 = element("th");
			t13 = text("HTML attribute");
			t14 = space();
			th2 = element("th");
			t15 = text("Type");
			t16 = space();
			th3 = element("th");
			t17 = text("Description");
			t18 = space();
			tr1 = element("tr");
			td0 = element("td");
			code0 = element("code");
			t19 = text("message");
			t20 = space();
			td1 = element("td");
			code1 = element("code");
			t21 = text("data-fv-credit-card___message");
			t22 = space();
			td2 = element("td");
			t23 = text("String");
			t24 = space();
			td3 = element("td");
			t25 = text("The error message");
			t26 = space();
			p1 = element("p");
			t27 = text("Behind the scene, in addition to using the ");
			a1 = element("a");
			t28 = text("Luhn algorithm");
			t29 = text(", the validator also validate the IIN ranges and length of credit card number.");
			t30 = space();
			p2 = element("p");
			t31 = text("It supports validating the following cards:");
			t32 = space();
			table1 = element("table");
			tr2 = element("tr");
			th4 = element("th");
			t33 = text("Type");
			t34 = space();
			th5 = element("th");
			t35 = text("Sample");
			t36 = space();
			th6 = element("th");
			t37 = text("Is it valid?");
			t38 = space();

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t39 = space();
			tip0.$$.fragment.c();
			t40 = space();
			h31 = element("h3");
			t41 = text("Using with ES6 module");
			t42 = space();
			samplecode0.$$.fragment.c();
			t43 = space();
			tip1.$$.fragment.c();
			t44 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t45 = space();
			demo.$$.fragment.c();
			t46 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t47 = space();
			p3 = element("p");
			t48 = text("The following snippet shows how to use the creditCard validator with ES6 module:");
			t49 = space();
			samplecode1.$$.fragment.c();
			t50 = space();
			examples.$$.fragment.c();
			t51 = space();
			relatedvalidators.$$.fragment.c();
			t52 = space();
			section3 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t53 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "creditCard validator");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Validate a credit card number");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n\n        ");

			h30 = claim_element(section0_nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t5 = claim_text(h30_nodes, "Using with form field");
			h30_nodes.forEach(detach);
			t6 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t7 = claim_text(p0_nodes, "The HTML attributes are used to set the validator options via the ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t8 = claim_text(a0_nodes, "Declarative");
			a0_nodes.forEach(detach);
			t9 = claim_text(p0_nodes, " plugin");
			p0_nodes.forEach(detach);
			t10 = claim_text(section0_nodes, "\n        ");

			table0 = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table0_nodes = children(table0);

			tr0 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t11 = claim_text(th0_nodes, "Name");
			th0_nodes.forEach(detach);
			t12 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t13 = claim_text(th1_nodes, "HTML attribute");
			th1_nodes.forEach(detach);
			t14 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t15 = claim_text(th2_nodes, "Type");
			th2_nodes.forEach(detach);
			t16 = claim_text(tr0_nodes, "\n                ");

			th3 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th3_nodes = children(th3);

			t17 = claim_text(th3_nodes, "Description");
			th3_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t18 = claim_text(table0_nodes, "\n            ");

			tr1 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code0 = claim_element(td0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t19 = claim_text(code0_nodes, "message");
			code0_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t20 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			code1 = claim_element(td1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t21 = claim_text(code1_nodes, "data-fv-credit-card___message");
			code1_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			t22 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t23 = claim_text(td2_nodes, "String");
			td2_nodes.forEach(detach);
			t24 = claim_text(tr1_nodes, "\n                ");

			td3 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			t25 = claim_text(td3_nodes, "The error message");
			td3_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			table0_nodes.forEach(detach);
			t26 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t27 = claim_text(p1_nodes, "Behind the scene, in addition to using the ");

			a1 = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t28 = claim_text(a1_nodes, "Luhn algorithm");
			a1_nodes.forEach(detach);
			t29 = claim_text(p1_nodes, ", the validator also validate the IIN ranges and length of credit card number.");
			p1_nodes.forEach(detach);
			t30 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t31 = claim_text(p2_nodes, "It supports validating the following cards:");
			p2_nodes.forEach(detach);
			t32 = claim_text(section0_nodes, "\n\n        ");

			table1 = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table1_nodes = children(table1);

			tr2 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			th4 = claim_element(tr2_nodes, "TH", { class: true }, false);
			var th4_nodes = children(th4);

			t33 = claim_text(th4_nodes, "Type");
			th4_nodes.forEach(detach);
			t34 = claim_text(tr2_nodes, "\n                ");

			th5 = claim_element(tr2_nodes, "TH", { class: true }, false);
			var th5_nodes = children(th5);

			t35 = claim_text(th5_nodes, "Sample");
			th5_nodes.forEach(detach);
			t36 = claim_text(tr2_nodes, "\n                ");

			th6 = claim_element(tr2_nodes, "TH", { class: true }, false);
			var th6_nodes = children(th6);

			t37 = claim_text(th6_nodes, "Is it valid?");
			th6_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t38 = claim_text(table1_nodes, "\n            ");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(table1_nodes);
			}

			table1_nodes.forEach(detach);
			t39 = claim_text(section0_nodes, "\n        ");
			tip0.$$.fragment.l(section0_nodes);
			t40 = claim_text(section0_nodes, "\n\n        ");

			h31 = claim_element(section0_nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t41 = claim_text(h31_nodes, "Using with ES6 module");
			h31_nodes.forEach(detach);
			t42 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t43 = claim_text(section0_nodes, "\n        ");
			tip1.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t44 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t45 = claim_text(section1_nodes, "\n\n        ");
			demo.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t46 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t47 = claim_text(section2_nodes, "\n\n        ");

			p3 = claim_element(section2_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t48 = claim_text(p3_nodes, "The following snippet shows how to use the creditCard validator with ES6 module:");
			p3_nodes.forEach(detach);
			t49 = claim_text(section2_nodes, "\n");
			samplecode1.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t50 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			t51 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			t52 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			div = claim_element(section3_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t53 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 102);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 160);
			add_location(h30, file, 11, 8, 288);
			a0.href = "/guide/plugins/declarative";
			a0.className = "blue dim link";
			add_location(a0, file, 12, 95, 414);
			p0.className = "lh-copy i";
			add_location(p0, file, 12, 8, 327);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 15, 16, 627);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 16, 16, 687);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 17, 16, 757);
			th3.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th3, file, 18, 16, 817);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 14, 12, 578);
			add_location(code0, file, 21, 36, 967);
			td0.className = "pv2 ph3";
			add_location(td0, file, 21, 16, 947);
			add_location(code1, file, 22, 36, 1029);
			td1.className = "pv2 ph3";
			add_location(td1, file, 22, 16, 1009);
			td2.className = "pv2 ph3";
			add_location(td2, file, 23, 16, 1093);
			td3.className = "pv2 ph3";
			add_location(td3, file, 24, 16, 1141);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 20, 12, 898);
			table0.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table0, file, 13, 8, 508);
			a1.href = "http://en.wikipedia.org/wiki/Luhn";
			a1.className = "blue dim link";
			add_location(a1, file, 27, 70, 1289);
			p1.className = "lh-copy";
			add_location(p1, file, 27, 8, 1227);
			p2.className = "lh-copy";
			add_location(p2, file, 28, 8, 1464);
			th4.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th4, file, 32, 16, 1659);
			th5.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th5, file, 33, 16, 1719);
			th6.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th6, file, 34, 16, 1781);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 31, 12, 1610);
			table1.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table1, file, 30, 8, 1540);
			add_location(h31, file, 45, 8, 2292);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 222);
			section1.className = "mv5";
			add_location(section1, file, 73, 4, 3092);
			p3.className = "lh-copy";
			add_location(p3, file, 82, 8, 3354);
			section2.className = "mv5";
			add_location(section2, file, 79, 4, 3277);
			div.className = "flex";
			add_location(div, file, 117, 8, 4381);
			section3.className = "mv5";
			add_location(section3, file, 116, 4, 4351);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, h30);
			append(h30, t5);
			append(section0, t6);
			append(section0, p0);
			append(p0, t7);
			append(p0, a0);
			append(a0, t8);
			append(p0, t9);
			append(section0, t10);
			append(section0, table0);
			append(table0, tr0);
			append(tr0, th0);
			append(th0, t11);
			append(tr0, t12);
			append(tr0, th1);
			append(th1, t13);
			append(tr0, t14);
			append(tr0, th2);
			append(th2, t15);
			append(tr0, t16);
			append(tr0, th3);
			append(th3, t17);
			append(table0, t18);
			append(table0, tr1);
			append(tr1, td0);
			append(td0, code0);
			append(code0, t19);
			append(tr1, t20);
			append(tr1, td1);
			append(td1, code1);
			append(code1, t21);
			append(tr1, t22);
			append(tr1, td2);
			append(td2, t23);
			append(tr1, t24);
			append(tr1, td3);
			append(td3, t25);
			append(section0, t26);
			append(section0, p1);
			append(p1, t27);
			append(p1, a1);
			append(a1, t28);
			append(p1, t29);
			append(section0, t30);
			append(section0, p2);
			append(p2, t31);
			append(section0, t32);
			append(section0, table1);
			append(table1, tr2);
			append(tr2, th4);
			append(th4, t33);
			append(tr2, t34);
			append(tr2, th5);
			append(th5, t35);
			append(tr2, t36);
			append(tr2, th6);
			append(th6, t37);
			append(table1, t38);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(table1, null);
			}

			append(section0, t39);
			mount_component(tip0, section0, null);
			append(section0, t40);
			append(section0, h31);
			append(h31, t41);
			append(section0, t42);
			mount_component(samplecode0, section0, null);
			append(section0, t43);
			mount_component(tip1, section0, null);
			insert(target, t44, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t45);
			mount_component(demo, section1, null);
			insert(target, t46, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t47);
			append(section2, p3);
			append(p3, t48);
			append(section2, t49);
			mount_component(samplecode1, section2, null);
			insert(target, t50, anchor);
			mount_component(examples, target, anchor);
			insert(target, t51, anchor);
			mount_component(relatedvalidators, target, anchor);
			insert(target, t52, anchor);
			insert(target, section3, anchor);
			append(section3, div);
			mount_component(prevbutton, div, null);
			append(div, t53);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			if (changed.samples) {
				each_value = Object.entries(ctx.samples);

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						each_blocks[i].i(1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].i(1);
						each_blocks[i].m(table1, null);
					}
				}

				group_outros();
				for (; i < each_blocks.length; i += 1) outro_block(i, 1, 1);
				check_outros();
			}

			var tip0_changes = {};
			if (changed.$$scope) tip0_changes.$$scope = { changed, ctx };
			tip0.$set(tip0_changes);

			var tip1_changes = {};
			if (changed.$$scope) tip1_changes.$$scope = { changed, ctx };
			tip1.$set(tip1_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			for (var i = 0; i < each_value.length; i += 1) each_blocks[i].i();

			tip0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			tip1.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);

			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) outro_block(i, 0);

			tip0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			tip1.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			destroy_each(each_blocks, detaching);

			tip0.$destroy();

			samplecode0.$destroy();

			tip1.$destroy();

			if (detaching) {
				detach(t44);
				detach(section1);
			}

			heading1.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t46);
				detach(section2);
			}

			heading2.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t50);
			}

			examples.$destroy(detaching);

			if (detaching) {
				detach(t51);
			}

			relatedvalidators.$destroy(detaching);

			if (detaching) {
				detach(t52);
				detach(section3);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • creditCard validator";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

function instance($$self) {
	

const samples = {
    'American Express': '340653705597107',
    'Dankort': '5019717010103742',
    'Diners Club': '30130708434187',
    'Diners Club (US)': '5517479515603901',
    'Discover': '6011734674929094',
    'Elo': '6362970000457013',
    'JCB': '3566002020360505',
    'Laser': '6304 9000 1774 0292 441',
    'Maestro': '6762835098779303',
    'Mastercard': '5303765013600904',
    'Solo': '6334580500000000',
    'Visa': '4929248980295542',
    'Visa Electron': '4917300800000000',
};

	return { samples };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export default Index;

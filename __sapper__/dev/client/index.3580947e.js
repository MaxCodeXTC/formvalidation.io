import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';

/* src/routes/guide/examples/changing-success-and-error-colors/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/changing-success-and-error-colors/index.svelte";

// (15:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Overriding the colors");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Overriding the colors");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (53:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Overriding row classes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Overriding row classes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section0, p0, t2, a0, t3, t4, t5, p1, t6, t7, section1, t8, p2, t9, a1, t10, t11, code0, t12, t13, code1, t14, t15, code2, t16, t17, code3, t18, t19, t20, p3, t21, t22, t23, p4, t24, t25, div0, t26, t27, section2, t28, p5, t29, t30, p6, t31, code4, t32, t33, code5, t34, t35, t36, table, tr0, th0, t37, t38, th1, t39, t40, th2, t41, t42, tr1, td0, a2, t43, t44, td1, code6, t45, t46, td2, code7, t47, t48, tr2, td3, a3, t49, t50, td4, code8, t51, t52, td5, code9, t53, t54, tr3, td6, a4, t55, t56, td7, code10, t57, t58, td8, code11, t59, t60, tr4, td9, a5, t61, t62, td10, code12, t63, t64, td11, code13, t65, t66, tr5, td12, a6, t67, t68, td13, code14, t69, t70, td14, code15, t71, t72, tr6, td15, a7, t73, t74, td16, code16, t75, t76, td17, code17, t77, t78, tr7, td18, a8, t79, t80, td19, code18, t81, t82, td20, code19, t83, t84, tr8, td21, a9, t85, t86, td22, code20, t87, t88, td23, code21, t89, t90, tr9, td24, a10, t91, t92, td25, code22, t93, t94, td26, code23, t95, t96, tr10, td27, a11, t97, t98, td28, code24, t99, t100, td29, code25, t101, t102, tr11, td30, a12, t103, t104, td31, code26, t105, t106, td32, code27, t107, t108, tr12, td33, a13, t109, t110, td34, code28, t111, t112, td35, code29, t113, t114, tr13, td36, a14, t115, t116, td37, code30, t117, t118, td38, code31, t119, t120, tr14, td39, a15, t121, t122, td40, code32, t123, t124, td41, code33, t125, t126, tr15, td42, a16, t127, t128, td43, code34, t129, t130, td44, code35, t131, t132, p7, t133, t134, t135, p8, t136, t137, div1, t138, t139, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "css", code: `
/* The color of error message */
.fv-help-block {
    color: #dc3545;
}

/* The color of valid icon */
.has-danger .fv-plugins-icon {
    color: #dc3545;
}

/* The color of invalid icon */
.has-success .fv-plugins-icon {
    color: #28a745;
}
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "css", code: `
.my-form.fv-plugins-bootstrap .fv-help-block {
    color: #f39c12;
}
.my-form.fv-plugins-bootstrap .has-danger .fv-plugins-icon {
    color: #f39c12;
}
.my-form.fv-plugins-bootstrap .has-success .fv-plugins-icon {
    color: #18bc9c;
}
` },
		$$inline: true
	});

	var demo0 = new Demo({
		props: {
		prefix: "/guide/examples/changing-success-and-error-colors/override-colors",
		frameworks: ['bootstrap']
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "css", code: `
.my-field-error .fv-plugins-message-container,
.my-field-error .fv-plugins-icon {
    color: #ff0039;
}

.my-field-success .fv-plugins-message-container,
.my-field-success .fv-plugins-icon {
    color: #2780e3;
}
` },
		$$inline: true
	});

	var samplecode3 = new SampleCode({
		props: { lang: "javascript", code: `
FormValidation.formValidation(
    document.getElementById('demoForm'),
    {
        fields: {
            ...
        },
        plugins: {
            tachyons: new FormValidation.plugins.Tachyons({
                rowInvalidClass: 'my-field-error',
                rowValidClass: 'my-field-success',
            }),
        },
    }
);
` },
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/examples/changing-success-and-error-colors/row-options",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Changing success and error colors',
        'Hiding success class',
    ] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Changing success and error colors");
			t1 = space();
			section0 = element("section");
			p0 = element("p");
			t2 = text("We can distinguish a valid and invalid field by colors. The label, message and ");
			a0 = element("a");
			t3 = text("feedback icon");
			t4 = text(" associated with a\n        valid field usually have a color which looks like green. When the field is not valid, these elements have a red-like color.");
			t5 = space();
			p1 = element("p");
			t6 = text("This example shows two approaches for changing these colors.");
			t7 = space();
			section1 = element("section");
			heading0.$$.fragment.c();
			t8 = space();
			p2 = element("p");
			t9 = text("If your form uses the ");
			a1 = element("a");
			t10 = text("Bootstrap");
			t11 = text(" framework, FormValidation adds ");
			code0 = element("code");
			t12 = text(".has-success");
			t13 = text("\n            or ");
			code1 = element("code");
			t14 = text(".has-danger");
			t15 = text(" class to the field container based on the field validity. The field element will be added ");
			code2 = element("code");
			t16 = text(".is-valid");
			t17 = text(" or ");
			code3 = element("code");
			t18 = text(".is-invalid");
			t19 = text(" class.");
			t20 = space();
			p3 = element("p");
			t21 = text("The label, field, message and feedback icon elements will receive the associated validation styles:");
			t22 = space();
			samplecode0.$$.fragment.c();
			t23 = space();
			p4 = element("p");
			t24 = text("So, it's quite easy for you to override these colors for all forms or particular form as below:");
			t25 = space();
			div0 = element("div");
			samplecode1.$$.fragment.c();
			t26 = space();
			demo0.$$.fragment.c();
			t27 = space();
			section2 = element("section");
			heading1.$$.fragment.c();
			t28 = space();
			p5 = element("p");
			t29 = text("As mentioned in the previous section, based on the field validity, the plugin will adds different classes for the field container.");
			t30 = space();
			p6 = element("p");
			t31 = text("The valid and invalid classes can be defined via the ");
			code4 = element("code");
			t32 = text("rowValidClass");
			t33 = text(" and ");
			code5 = element("code");
			t34 = text("rowInvalidClass");
			t35 = text(" options which take the following default values:");
			t36 = space();
			table = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t37 = text("Plugin");
			t38 = space();
			th1 = element("th");
			t39 = text("rowValidClass");
			t40 = space();
			th2 = element("th");
			t41 = text("rowInvalidClass");
			t42 = space();
			tr1 = element("tr");
			td0 = element("td");
			a2 = element("a");
			t43 = text("Bootstrap");
			t44 = space();
			td1 = element("td");
			code6 = element("code");
			t45 = text("has-success");
			t46 = space();
			td2 = element("td");
			code7 = element("code");
			t47 = text("has-danger");
			t48 = space();
			tr2 = element("tr");
			td3 = element("td");
			a3 = element("a");
			t49 = text("Bootstrap3");
			t50 = space();
			td4 = element("td");
			code8 = element("code");
			t51 = text("has-success");
			t52 = space();
			td5 = element("td");
			code9 = element("code");
			t53 = text("has-error");
			t54 = space();
			tr3 = element("tr");
			td6 = element("td");
			a4 = element("a");
			t55 = text("Bulma");
			t56 = space();
			td7 = element("td");
			code10 = element("code");
			t57 = text("fv-has-success");
			t58 = space();
			td8 = element("td");
			code11 = element("code");
			t59 = text("fv-has-error");
			t60 = space();
			tr4 = element("tr");
			td9 = element("td");
			a5 = element("a");
			t61 = text("Foundation");
			t62 = space();
			td10 = element("td");
			code12 = element("code");
			t63 = text("fv-row__success");
			t64 = space();
			td11 = element("td");
			code13 = element("code");
			t65 = text("fv-row__error");
			t66 = space();
			tr5 = element("tr");
			td12 = element("td");
			a6 = element("a");
			t67 = text("Materialize");
			t68 = space();
			td13 = element("td");
			code14 = element("code");
			t69 = text("fv-valid-row");
			t70 = space();
			td14 = element("td");
			code15 = element("code");
			t71 = text("fv-invalid-row");
			t72 = space();
			tr6 = element("tr");
			td15 = element("td");
			a7 = element("a");
			t73 = text("Milligram");
			t74 = space();
			td16 = element("td");
			code16 = element("code");
			t75 = text("fv-valid-row");
			t76 = space();
			td17 = element("td");
			code17 = element("code");
			t77 = text("fv-invalid-row");
			t78 = space();
			tr7 = element("tr");
			td18 = element("td");
			a8 = element("a");
			t79 = text("Mini");
			t80 = space();
			td19 = element("td");
			code18 = element("code");
			t81 = text("fv-valid-row");
			t82 = space();
			td20 = element("td");
			code19 = element("code");
			t83 = text("fv-invalid-row");
			t84 = space();
			tr8 = element("tr");
			td21 = element("td");
			a9 = element("a");
			t85 = text("Mui");
			t86 = space();
			td22 = element("td");
			code20 = element("code");
			t87 = text("fv-valid-row");
			t88 = space();
			td23 = element("td");
			code21 = element("code");
			t89 = text("fv-invalid-row");
			t90 = space();
			tr9 = element("tr");
			td24 = element("td");
			a10 = element("a");
			t91 = text("Pure");
			t92 = space();
			td25 = element("td");
			code22 = element("code");
			t93 = text("fv-has-success");
			t94 = space();
			td26 = element("td");
			code23 = element("code");
			t95 = text("fv-has-error");
			t96 = space();
			tr10 = element("tr");
			td27 = element("td");
			a11 = element("a");
			t97 = text("Semantic");
			t98 = space();
			td28 = element("td");
			code24 = element("code");
			t99 = text("fv-has-success");
			t100 = space();
			td29 = element("td");
			code25 = element("code");
			t101 = text("error");
			t102 = space();
			tr11 = element("tr");
			td30 = element("td");
			a12 = element("a");
			t103 = text("Shoelace");
			t104 = space();
			td31 = element("td");
			code26 = element("code");
			t105 = text("input-valid");
			t106 = space();
			td32 = element("td");
			code27 = element("code");
			t107 = text("input-invalid");
			t108 = space();
			tr12 = element("tr");
			td33 = element("td");
			a13 = element("a");
			t109 = text("Spectre");
			t110 = space();
			td34 = element("td");
			code28 = element("code");
			t111 = text("has-success");
			t112 = space();
			td35 = element("td");
			code29 = element("code");
			t113 = text("has-error");
			t114 = space();
			tr13 = element("tr");
			td36 = element("td");
			a14 = element("a");
			t115 = text("Tachyons");
			t116 = space();
			td37 = element("td");
			code30 = element("code");
			t117 = text("green");
			t118 = space();
			td38 = element("td");
			code31 = element("code");
			t119 = text("red");
			t120 = space();
			tr14 = element("tr");
			td39 = element("td");
			a15 = element("a");
			t121 = text("Turret");
			t122 = space();
			td40 = element("td");
			code32 = element("code");
			t123 = text("fv-valid-row");
			t124 = space();
			td41 = element("td");
			code33 = element("code");
			t125 = text("fv-invalid-row");
			t126 = space();
			tr15 = element("tr");
			td42 = element("td");
			a16 = element("a");
			t127 = text("Uikit");
			t128 = space();
			td43 = element("td");
			code34 = element("code");
			t129 = text("uk-form-success");
			t130 = space();
			td44 = element("td");
			code35 = element("code");
			t131 = text("uk-form-danger");
			t132 = space();
			p7 = element("p");
			t133 = text("By using your own classes for these options, you can easily customize the look and feel of valid and invalid fields:");
			t134 = space();
			samplecode2.$$.fragment.c();
			t135 = space();
			p8 = element("p");
			t136 = text("The last step is to use the new options:");
			t137 = space();
			div1 = element("div");
			samplecode3.$$.fragment.c();
			t138 = space();
			demo1.$$.fragment.c();
			t139 = space();
			examples.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Changing success and error colors");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "We can distinguish a valid and invalid field by colors. The label, message and ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t3 = claim_text(a0_nodes, "feedback icon");
			a0_nodes.forEach(detach);
			t4 = claim_text(p0_nodes, " associated with a\n        valid field usually have a color which looks like green. When the field is not valid, these elements have a red-like color.");
			p0_nodes.forEach(detach);
			t5 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t6 = claim_text(p1_nodes, "This example shows two approaches for changing these colors.");
			p1_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t7 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading0.$$.fragment.l(section1_nodes);
			t8 = claim_text(section1_nodes, "\n        ");

			p2 = claim_element(section1_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t9 = claim_text(p2_nodes, "If your form uses the ");

			a1 = claim_element(p2_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t10 = claim_text(a1_nodes, "Bootstrap");
			a1_nodes.forEach(detach);
			t11 = claim_text(p2_nodes, " framework, FormValidation adds ");

			code0 = claim_element(p2_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t12 = claim_text(code0_nodes, ".has-success");
			code0_nodes.forEach(detach);
			t13 = claim_text(p2_nodes, "\n            or ");

			code1 = claim_element(p2_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t14 = claim_text(code1_nodes, ".has-danger");
			code1_nodes.forEach(detach);
			t15 = claim_text(p2_nodes, " class to the field container based on the field validity. The field element will be added ");

			code2 = claim_element(p2_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t16 = claim_text(code2_nodes, ".is-valid");
			code2_nodes.forEach(detach);
			t17 = claim_text(p2_nodes, " or ");

			code3 = claim_element(p2_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t18 = claim_text(code3_nodes, ".is-invalid");
			code3_nodes.forEach(detach);
			t19 = claim_text(p2_nodes, " class.");
			p2_nodes.forEach(detach);
			t20 = claim_text(section1_nodes, "\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t21 = claim_text(p3_nodes, "The label, field, message and feedback icon elements will receive the associated validation styles:");
			p3_nodes.forEach(detach);
			t22 = claim_text(section1_nodes, "\n");
			samplecode0.$$.fragment.l(section1_nodes);
			t23 = claim_text(section1_nodes, "\n        ");

			p4 = claim_element(section1_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t24 = claim_text(p4_nodes, "So, it's quite easy for you to override these colors for all forms or particular form as below:");
			p4_nodes.forEach(detach);
			t25 = claim_text(section1_nodes, "\n        ");

			div0 = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			samplecode1.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach);
			t26 = claim_text(section1_nodes, "        \n        ");
			demo0.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t27 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading1.$$.fragment.l(section2_nodes);
			t28 = claim_text(section2_nodes, "\n        ");

			p5 = claim_element(section2_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t29 = claim_text(p5_nodes, "As mentioned in the previous section, based on the field validity, the plugin will adds different classes for the field container.");
			p5_nodes.forEach(detach);
			t30 = claim_text(section2_nodes, "\n        ");

			p6 = claim_element(section2_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t31 = claim_text(p6_nodes, "The valid and invalid classes can be defined via the ");

			code4 = claim_element(p6_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t32 = claim_text(code4_nodes, "rowValidClass");
			code4_nodes.forEach(detach);
			t33 = claim_text(p6_nodes, " and ");

			code5 = claim_element(p6_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t34 = claim_text(code5_nodes, "rowInvalidClass");
			code5_nodes.forEach(detach);
			t35 = claim_text(p6_nodes, " options which take the following default values:");
			p6_nodes.forEach(detach);
			t36 = claim_text(section2_nodes, "\n        ");

			table = claim_element(section2_nodes, "TABLE", { class: true }, false);
			var table_nodes = children(table);

			tr0 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t37 = claim_text(th0_nodes, "Plugin");
			th0_nodes.forEach(detach);
			t38 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t39 = claim_text(th1_nodes, "rowValidClass");
			th1_nodes.forEach(detach);
			t40 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t41 = claim_text(th2_nodes, "rowInvalidClass");
			th2_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t42 = claim_text(table_nodes, "\n            ");

			tr1 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			a2 = claim_element(td0_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t43 = claim_text(a2_nodes, "Bootstrap");
			a2_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t44 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			code6 = claim_element(td1_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t45 = claim_text(code6_nodes, "has-success");
			code6_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			t46 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			code7 = claim_element(td2_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t47 = claim_text(code7_nodes, "has-danger");
			code7_nodes.forEach(detach);
			td2_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t48 = claim_text(table_nodes, "\n            ");

			tr2 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td3 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			a3 = claim_element(td3_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t49 = claim_text(a3_nodes, "Bootstrap3");
			a3_nodes.forEach(detach);
			td3_nodes.forEach(detach);
			t50 = claim_text(tr2_nodes, "\n                ");

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			code8 = claim_element(td4_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t51 = claim_text(code8_nodes, "has-success");
			code8_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t52 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			code9 = claim_element(td5_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t53 = claim_text(code9_nodes, "has-error");
			code9_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t54 = claim_text(table_nodes, "\n            ");

			tr3 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td6 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			a4 = claim_element(td6_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t55 = claim_text(a4_nodes, "Bulma");
			a4_nodes.forEach(detach);
			td6_nodes.forEach(detach);
			t56 = claim_text(tr3_nodes, "\n                ");

			td7 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			code10 = claim_element(td7_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t57 = claim_text(code10_nodes, "fv-has-success");
			code10_nodes.forEach(detach);
			td7_nodes.forEach(detach);
			t58 = claim_text(tr3_nodes, "\n                ");

			td8 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			code11 = claim_element(td8_nodes, "CODE", {}, false);
			var code11_nodes = children(code11);

			t59 = claim_text(code11_nodes, "fv-has-error");
			code11_nodes.forEach(detach);
			td8_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			t60 = claim_text(table_nodes, "\n            ");

			tr4 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			td9 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			a5 = claim_element(td9_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t61 = claim_text(a5_nodes, "Foundation");
			a5_nodes.forEach(detach);
			td9_nodes.forEach(detach);
			t62 = claim_text(tr4_nodes, "\n                ");

			td10 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td10_nodes = children(td10);

			code12 = claim_element(td10_nodes, "CODE", {}, false);
			var code12_nodes = children(code12);

			t63 = claim_text(code12_nodes, "fv-row__success");
			code12_nodes.forEach(detach);
			td10_nodes.forEach(detach);
			t64 = claim_text(tr4_nodes, "\n                ");

			td11 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td11_nodes = children(td11);

			code13 = claim_element(td11_nodes, "CODE", {}, false);
			var code13_nodes = children(code13);

			t65 = claim_text(code13_nodes, "fv-row__error");
			code13_nodes.forEach(detach);
			td11_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			t66 = claim_text(table_nodes, "\n            ");

			tr5 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr5_nodes = children(tr5);

			td12 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td12_nodes = children(td12);

			a6 = claim_element(td12_nodes, "A", { href: true, class: true }, false);
			var a6_nodes = children(a6);

			t67 = claim_text(a6_nodes, "Materialize");
			a6_nodes.forEach(detach);
			td12_nodes.forEach(detach);
			t68 = claim_text(tr5_nodes, "\n                ");

			td13 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td13_nodes = children(td13);

			code14 = claim_element(td13_nodes, "CODE", {}, false);
			var code14_nodes = children(code14);

			t69 = claim_text(code14_nodes, "fv-valid-row");
			code14_nodes.forEach(detach);
			td13_nodes.forEach(detach);
			t70 = claim_text(tr5_nodes, "\n                ");

			td14 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td14_nodes = children(td14);

			code15 = claim_element(td14_nodes, "CODE", {}, false);
			var code15_nodes = children(code15);

			t71 = claim_text(code15_nodes, "fv-invalid-row");
			code15_nodes.forEach(detach);
			td14_nodes.forEach(detach);
			tr5_nodes.forEach(detach);
			t72 = claim_text(table_nodes, "\n            ");

			tr6 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr6_nodes = children(tr6);

			td15 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td15_nodes = children(td15);

			a7 = claim_element(td15_nodes, "A", { href: true, class: true }, false);
			var a7_nodes = children(a7);

			t73 = claim_text(a7_nodes, "Milligram");
			a7_nodes.forEach(detach);
			td15_nodes.forEach(detach);
			t74 = claim_text(tr6_nodes, "\n                ");

			td16 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td16_nodes = children(td16);

			code16 = claim_element(td16_nodes, "CODE", {}, false);
			var code16_nodes = children(code16);

			t75 = claim_text(code16_nodes, "fv-valid-row");
			code16_nodes.forEach(detach);
			td16_nodes.forEach(detach);
			t76 = claim_text(tr6_nodes, "\n                ");

			td17 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td17_nodes = children(td17);

			code17 = claim_element(td17_nodes, "CODE", {}, false);
			var code17_nodes = children(code17);

			t77 = claim_text(code17_nodes, "fv-invalid-row");
			code17_nodes.forEach(detach);
			td17_nodes.forEach(detach);
			tr6_nodes.forEach(detach);
			t78 = claim_text(table_nodes, "\n            ");

			tr7 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr7_nodes = children(tr7);

			td18 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td18_nodes = children(td18);

			a8 = claim_element(td18_nodes, "A", { href: true, class: true }, false);
			var a8_nodes = children(a8);

			t79 = claim_text(a8_nodes, "Mini");
			a8_nodes.forEach(detach);
			td18_nodes.forEach(detach);
			t80 = claim_text(tr7_nodes, "\n                ");

			td19 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td19_nodes = children(td19);

			code18 = claim_element(td19_nodes, "CODE", {}, false);
			var code18_nodes = children(code18);

			t81 = claim_text(code18_nodes, "fv-valid-row");
			code18_nodes.forEach(detach);
			td19_nodes.forEach(detach);
			t82 = claim_text(tr7_nodes, "\n                ");

			td20 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td20_nodes = children(td20);

			code19 = claim_element(td20_nodes, "CODE", {}, false);
			var code19_nodes = children(code19);

			t83 = claim_text(code19_nodes, "fv-invalid-row");
			code19_nodes.forEach(detach);
			td20_nodes.forEach(detach);
			tr7_nodes.forEach(detach);
			t84 = claim_text(table_nodes, "\n            ");

			tr8 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr8_nodes = children(tr8);

			td21 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td21_nodes = children(td21);

			a9 = claim_element(td21_nodes, "A", { href: true, class: true }, false);
			var a9_nodes = children(a9);

			t85 = claim_text(a9_nodes, "Mui");
			a9_nodes.forEach(detach);
			td21_nodes.forEach(detach);
			t86 = claim_text(tr8_nodes, "\n                ");

			td22 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td22_nodes = children(td22);

			code20 = claim_element(td22_nodes, "CODE", {}, false);
			var code20_nodes = children(code20);

			t87 = claim_text(code20_nodes, "fv-valid-row");
			code20_nodes.forEach(detach);
			td22_nodes.forEach(detach);
			t88 = claim_text(tr8_nodes, "\n                ");

			td23 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td23_nodes = children(td23);

			code21 = claim_element(td23_nodes, "CODE", {}, false);
			var code21_nodes = children(code21);

			t89 = claim_text(code21_nodes, "fv-invalid-row");
			code21_nodes.forEach(detach);
			td23_nodes.forEach(detach);
			tr8_nodes.forEach(detach);
			t90 = claim_text(table_nodes, "\n            ");

			tr9 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr9_nodes = children(tr9);

			td24 = claim_element(tr9_nodes, "TD", { class: true }, false);
			var td24_nodes = children(td24);

			a10 = claim_element(td24_nodes, "A", { href: true, class: true }, false);
			var a10_nodes = children(a10);

			t91 = claim_text(a10_nodes, "Pure");
			a10_nodes.forEach(detach);
			td24_nodes.forEach(detach);
			t92 = claim_text(tr9_nodes, "\n                ");

			td25 = claim_element(tr9_nodes, "TD", { class: true }, false);
			var td25_nodes = children(td25);

			code22 = claim_element(td25_nodes, "CODE", {}, false);
			var code22_nodes = children(code22);

			t93 = claim_text(code22_nodes, "fv-has-success");
			code22_nodes.forEach(detach);
			td25_nodes.forEach(detach);
			t94 = claim_text(tr9_nodes, "\n                ");

			td26 = claim_element(tr9_nodes, "TD", { class: true }, false);
			var td26_nodes = children(td26);

			code23 = claim_element(td26_nodes, "CODE", {}, false);
			var code23_nodes = children(code23);

			t95 = claim_text(code23_nodes, "fv-has-error");
			code23_nodes.forEach(detach);
			td26_nodes.forEach(detach);
			tr9_nodes.forEach(detach);
			t96 = claim_text(table_nodes, "\n            ");

			tr10 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr10_nodes = children(tr10);

			td27 = claim_element(tr10_nodes, "TD", { class: true }, false);
			var td27_nodes = children(td27);

			a11 = claim_element(td27_nodes, "A", { href: true, class: true }, false);
			var a11_nodes = children(a11);

			t97 = claim_text(a11_nodes, "Semantic");
			a11_nodes.forEach(detach);
			td27_nodes.forEach(detach);
			t98 = claim_text(tr10_nodes, "\n                ");

			td28 = claim_element(tr10_nodes, "TD", { class: true }, false);
			var td28_nodes = children(td28);

			code24 = claim_element(td28_nodes, "CODE", {}, false);
			var code24_nodes = children(code24);

			t99 = claim_text(code24_nodes, "fv-has-success");
			code24_nodes.forEach(detach);
			td28_nodes.forEach(detach);
			t100 = claim_text(tr10_nodes, "\n                ");

			td29 = claim_element(tr10_nodes, "TD", { class: true }, false);
			var td29_nodes = children(td29);

			code25 = claim_element(td29_nodes, "CODE", {}, false);
			var code25_nodes = children(code25);

			t101 = claim_text(code25_nodes, "error");
			code25_nodes.forEach(detach);
			td29_nodes.forEach(detach);
			tr10_nodes.forEach(detach);
			t102 = claim_text(table_nodes, "\n            ");

			tr11 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr11_nodes = children(tr11);

			td30 = claim_element(tr11_nodes, "TD", { class: true }, false);
			var td30_nodes = children(td30);

			a12 = claim_element(td30_nodes, "A", { href: true, class: true }, false);
			var a12_nodes = children(a12);

			t103 = claim_text(a12_nodes, "Shoelace");
			a12_nodes.forEach(detach);
			td30_nodes.forEach(detach);
			t104 = claim_text(tr11_nodes, "\n                ");

			td31 = claim_element(tr11_nodes, "TD", { class: true }, false);
			var td31_nodes = children(td31);

			code26 = claim_element(td31_nodes, "CODE", {}, false);
			var code26_nodes = children(code26);

			t105 = claim_text(code26_nodes, "input-valid");
			code26_nodes.forEach(detach);
			td31_nodes.forEach(detach);
			t106 = claim_text(tr11_nodes, "\n                ");

			td32 = claim_element(tr11_nodes, "TD", { class: true }, false);
			var td32_nodes = children(td32);

			code27 = claim_element(td32_nodes, "CODE", {}, false);
			var code27_nodes = children(code27);

			t107 = claim_text(code27_nodes, "input-invalid");
			code27_nodes.forEach(detach);
			td32_nodes.forEach(detach);
			tr11_nodes.forEach(detach);
			t108 = claim_text(table_nodes, "\n            ");

			tr12 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr12_nodes = children(tr12);

			td33 = claim_element(tr12_nodes, "TD", { class: true }, false);
			var td33_nodes = children(td33);

			a13 = claim_element(td33_nodes, "A", { href: true, class: true }, false);
			var a13_nodes = children(a13);

			t109 = claim_text(a13_nodes, "Spectre");
			a13_nodes.forEach(detach);
			td33_nodes.forEach(detach);
			t110 = claim_text(tr12_nodes, "\n                ");

			td34 = claim_element(tr12_nodes, "TD", { class: true }, false);
			var td34_nodes = children(td34);

			code28 = claim_element(td34_nodes, "CODE", {}, false);
			var code28_nodes = children(code28);

			t111 = claim_text(code28_nodes, "has-success");
			code28_nodes.forEach(detach);
			td34_nodes.forEach(detach);
			t112 = claim_text(tr12_nodes, "\n                ");

			td35 = claim_element(tr12_nodes, "TD", { class: true }, false);
			var td35_nodes = children(td35);

			code29 = claim_element(td35_nodes, "CODE", {}, false);
			var code29_nodes = children(code29);

			t113 = claim_text(code29_nodes, "has-error");
			code29_nodes.forEach(detach);
			td35_nodes.forEach(detach);
			tr12_nodes.forEach(detach);
			t114 = claim_text(table_nodes, "\n            ");

			tr13 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr13_nodes = children(tr13);

			td36 = claim_element(tr13_nodes, "TD", { class: true }, false);
			var td36_nodes = children(td36);

			a14 = claim_element(td36_nodes, "A", { href: true, class: true }, false);
			var a14_nodes = children(a14);

			t115 = claim_text(a14_nodes, "Tachyons");
			a14_nodes.forEach(detach);
			td36_nodes.forEach(detach);
			t116 = claim_text(tr13_nodes, "\n                ");

			td37 = claim_element(tr13_nodes, "TD", { class: true }, false);
			var td37_nodes = children(td37);

			code30 = claim_element(td37_nodes, "CODE", {}, false);
			var code30_nodes = children(code30);

			t117 = claim_text(code30_nodes, "green");
			code30_nodes.forEach(detach);
			td37_nodes.forEach(detach);
			t118 = claim_text(tr13_nodes, "\n                ");

			td38 = claim_element(tr13_nodes, "TD", { class: true }, false);
			var td38_nodes = children(td38);

			code31 = claim_element(td38_nodes, "CODE", {}, false);
			var code31_nodes = children(code31);

			t119 = claim_text(code31_nodes, "red");
			code31_nodes.forEach(detach);
			td38_nodes.forEach(detach);
			tr13_nodes.forEach(detach);
			t120 = claim_text(table_nodes, "\n            ");

			tr14 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr14_nodes = children(tr14);

			td39 = claim_element(tr14_nodes, "TD", { class: true }, false);
			var td39_nodes = children(td39);

			a15 = claim_element(td39_nodes, "A", { href: true, class: true }, false);
			var a15_nodes = children(a15);

			t121 = claim_text(a15_nodes, "Turret");
			a15_nodes.forEach(detach);
			td39_nodes.forEach(detach);
			t122 = claim_text(tr14_nodes, "\n                ");

			td40 = claim_element(tr14_nodes, "TD", { class: true }, false);
			var td40_nodes = children(td40);

			code32 = claim_element(td40_nodes, "CODE", {}, false);
			var code32_nodes = children(code32);

			t123 = claim_text(code32_nodes, "fv-valid-row");
			code32_nodes.forEach(detach);
			td40_nodes.forEach(detach);
			t124 = claim_text(tr14_nodes, "\n                ");

			td41 = claim_element(tr14_nodes, "TD", { class: true }, false);
			var td41_nodes = children(td41);

			code33 = claim_element(td41_nodes, "CODE", {}, false);
			var code33_nodes = children(code33);

			t125 = claim_text(code33_nodes, "fv-invalid-row");
			code33_nodes.forEach(detach);
			td41_nodes.forEach(detach);
			tr14_nodes.forEach(detach);
			t126 = claim_text(table_nodes, "\n            ");

			tr15 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr15_nodes = children(tr15);

			td42 = claim_element(tr15_nodes, "TD", { class: true }, false);
			var td42_nodes = children(td42);

			a16 = claim_element(td42_nodes, "A", { href: true, class: true }, false);
			var a16_nodes = children(a16);

			t127 = claim_text(a16_nodes, "Uikit");
			a16_nodes.forEach(detach);
			td42_nodes.forEach(detach);
			t128 = claim_text(tr15_nodes, "\n                ");

			td43 = claim_element(tr15_nodes, "TD", { class: true }, false);
			var td43_nodes = children(td43);

			code34 = claim_element(td43_nodes, "CODE", {}, false);
			var code34_nodes = children(code34);

			t129 = claim_text(code34_nodes, "uk-form-success");
			code34_nodes.forEach(detach);
			td43_nodes.forEach(detach);
			t130 = claim_text(tr15_nodes, "\n                ");

			td44 = claim_element(tr15_nodes, "TD", { class: true }, false);
			var td44_nodes = children(td44);

			code35 = claim_element(td44_nodes, "CODE", {}, false);
			var code35_nodes = children(code35);

			t131 = claim_text(code35_nodes, "uk-form-danger");
			code35_nodes.forEach(detach);
			td44_nodes.forEach(detach);
			tr15_nodes.forEach(detach);
			table_nodes.forEach(detach);
			t132 = claim_text(section2_nodes, "\n        ");

			p7 = claim_element(section2_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t133 = claim_text(p7_nodes, "By using your own classes for these options, you can easily customize the look and feel of valid and invalid fields:");
			p7_nodes.forEach(detach);
			t134 = claim_text(section2_nodes, "\n");
			samplecode2.$$.fragment.l(section2_nodes);
			t135 = claim_text(section2_nodes, "\n        ");

			p8 = claim_element(section2_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t136 = claim_text(p8_nodes, "The last step is to use the new options:");
			p8_nodes.forEach(detach);
			t137 = claim_text(section2_nodes, "\n        ");

			div1 = claim_element(section2_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			samplecode3.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach);
			t138 = claim_text(section2_nodes, "\n        ");
			demo1.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t139 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 115);
			a0.href = "/guide/plugins/icon";
			a0.className = "blue dim link";
			add_location(a0, file, 8, 106, 310);
			p0.className = "lh-copy";
			add_location(p0, file, 8, 8, 212);
			p1.className = "lh-copy";
			add_location(p1, file, 10, 8, 542);
			section0.className = "mv5";
			add_location(section0, file, 7, 4, 182);
			a1.href = "/guide/plugins/bootstrap";
			a1.className = "blue dim link";
			add_location(a1, file, 15, 49, 766);
			add_location(code0, file, 15, 151, 868);
			add_location(code1, file, 16, 15, 909);
			add_location(code2, file, 16, 130, 1024);
			add_location(code3, file, 16, 156, 1050);
			p2.className = "lh-copy";
			add_location(p2, file, 15, 8, 725);
			p3.className = "lh-copy";
			add_location(p3, file, 17, 8, 1094);
			p4.className = "lh-copy";
			add_location(p4, file, 34, 8, 1505);
			div0.className = "mb4";
			add_location(div0, file, 35, 8, 1632);
			section1.className = "mv5";
			add_location(section1, file, 13, 4, 646);
			p5.className = "lh-copy";
			add_location(p5, file, 53, 8, 2165);
			add_location(code4, file, 54, 80, 2399);
			add_location(code5, file, 54, 111, 2430);
			p6.className = "lh-copy";
			add_location(p6, file, 54, 8, 2327);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 57, 16, 2643);
			th1.className = "pv2 ph3 tl f6 fw6";
			add_location(th1, file, 58, 16, 2705);
			th2.className = "pv2 ph3 tl f6 fw6";
			add_location(th2, file, 59, 16, 2770);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 56, 12, 2594);
			a2.href = "/guide/plugins/bootstrap";
			a2.className = "blue dim link";
			add_location(a2, file, 62, 36, 2920);
			td0.className = "pv2 ph3";
			add_location(td0, file, 62, 16, 2900);
			add_location(code6, file, 63, 36, 3032);
			td1.className = "pv2 ph3";
			add_location(td1, file, 63, 16, 3012);
			add_location(code7, file, 64, 36, 3098);
			td2.className = "pv2 ph3";
			add_location(td2, file, 64, 16, 3078);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 61, 12, 2851);
			a3.href = "/guide/plugins/bootstrap3";
			a3.className = "blue dim link";
			add_location(a3, file, 67, 36, 3226);
			td3.className = "pv2 ph3";
			add_location(td3, file, 67, 16, 3206);
			add_location(code8, file, 68, 36, 3340);
			td4.className = "pv2 ph3";
			add_location(td4, file, 68, 16, 3320);
			add_location(code9, file, 69, 36, 3406);
			td5.className = "pv2 ph3";
			add_location(td5, file, 69, 16, 3386);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 66, 12, 3157);
			a4.href = "/guide/plugins/bulma";
			a4.className = "blue dim link";
			add_location(a4, file, 72, 36, 3533);
			td6.className = "pv2 ph3";
			add_location(td6, file, 72, 16, 3513);
			add_location(code10, file, 73, 36, 3637);
			td7.className = "pv2 ph3";
			add_location(td7, file, 73, 16, 3617);
			add_location(code11, file, 74, 36, 3706);
			td8.className = "pv2 ph3";
			add_location(td8, file, 74, 16, 3686);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 71, 12, 3464);
			a5.href = "/guide/plugins/foundation";
			a5.className = "blue dim link";
			add_location(a5, file, 77, 36, 3836);
			td9.className = "pv2 ph3";
			add_location(td9, file, 77, 16, 3816);
			add_location(code12, file, 78, 36, 3950);
			td10.className = "pv2 ph3";
			add_location(td10, file, 78, 16, 3930);
			add_location(code13, file, 79, 36, 4020);
			td11.className = "pv2 ph3";
			add_location(td11, file, 79, 16, 4000);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 76, 12, 3767);
			a6.href = "/guide/plugins/materialize";
			a6.className = "blue dim link";
			add_location(a6, file, 82, 36, 4151);
			td12.className = "pv2 ph3";
			add_location(td12, file, 82, 16, 4131);
			add_location(code14, file, 83, 36, 4267);
			td13.className = "pv2 ph3";
			add_location(td13, file, 83, 16, 4247);
			add_location(code15, file, 84, 36, 4334);
			td14.className = "pv2 ph3";
			add_location(td14, file, 84, 16, 4314);
			tr5.className = "striped--light-gray";
			add_location(tr5, file, 81, 12, 4082);
			a7.href = "/guide/plugins/milligram";
			a7.className = "blue dim link";
			add_location(a7, file, 87, 36, 4466);
			td15.className = "pv2 ph3";
			add_location(td15, file, 87, 16, 4446);
			add_location(code16, file, 88, 36, 4578);
			td16.className = "pv2 ph3";
			add_location(td16, file, 88, 16, 4558);
			add_location(code17, file, 89, 36, 4645);
			td17.className = "pv2 ph3";
			add_location(td17, file, 89, 16, 4625);
			tr6.className = "striped--light-gray";
			add_location(tr6, file, 86, 12, 4397);
			a8.href = "/guide/plugins/mini";
			a8.className = "blue dim link";
			add_location(a8, file, 92, 36, 4777);
			td18.className = "pv2 ph3";
			add_location(td18, file, 92, 16, 4757);
			add_location(code18, file, 93, 36, 4879);
			td19.className = "pv2 ph3";
			add_location(td19, file, 93, 16, 4859);
			add_location(code19, file, 94, 36, 4946);
			td20.className = "pv2 ph3";
			add_location(td20, file, 94, 16, 4926);
			tr7.className = "striped--light-gray";
			add_location(tr7, file, 91, 12, 4708);
			a9.href = "/guide/plugins/mui";
			a9.className = "blue dim link";
			add_location(a9, file, 97, 36, 5078);
			td21.className = "pv2 ph3";
			add_location(td21, file, 97, 16, 5058);
			add_location(code20, file, 98, 36, 5178);
			td22.className = "pv2 ph3";
			add_location(td22, file, 98, 16, 5158);
			add_location(code21, file, 99, 36, 5245);
			td23.className = "pv2 ph3";
			add_location(td23, file, 99, 16, 5225);
			tr8.className = "striped--light-gray";
			add_location(tr8, file, 96, 12, 5009);
			a10.href = "/guide/plugins/pure";
			a10.className = "blue dim link";
			add_location(a10, file, 102, 36, 5377);
			td24.className = "pv2 ph3";
			add_location(td24, file, 102, 16, 5357);
			add_location(code22, file, 103, 36, 5479);
			td25.className = "pv2 ph3";
			add_location(td25, file, 103, 16, 5459);
			add_location(code23, file, 104, 36, 5548);
			td26.className = "pv2 ph3";
			add_location(td26, file, 104, 16, 5528);
			tr9.className = "striped--light-gray";
			add_location(tr9, file, 101, 12, 5308);
			a11.href = "/guide/plugins/semantic";
			a11.className = "blue dim link";
			add_location(a11, file, 107, 36, 5678);
			td27.className = "pv2 ph3";
			add_location(td27, file, 107, 16, 5658);
			add_location(code24, file, 108, 36, 5788);
			td28.className = "pv2 ph3";
			add_location(td28, file, 108, 16, 5768);
			add_location(code25, file, 109, 36, 5857);
			td29.className = "pv2 ph3";
			add_location(td29, file, 109, 16, 5837);
			tr10.className = "striped--light-gray";
			add_location(tr10, file, 106, 12, 5609);
			a12.href = "/guide/plugins/shoelace";
			a12.className = "blue dim link";
			add_location(a12, file, 112, 36, 5980);
			td30.className = "pv2 ph3";
			add_location(td30, file, 112, 16, 5960);
			add_location(code26, file, 113, 36, 6090);
			td31.className = "pv2 ph3";
			add_location(td31, file, 113, 16, 6070);
			add_location(code27, file, 114, 36, 6156);
			td32.className = "pv2 ph3";
			add_location(td32, file, 114, 16, 6136);
			tr11.className = "striped--light-gray";
			add_location(tr11, file, 111, 12, 5911);
			a13.href = "/guide/plugins/spectre";
			a13.className = "blue dim link";
			add_location(a13, file, 117, 36, 6287);
			td33.className = "pv2 ph3";
			add_location(td33, file, 117, 16, 6267);
			add_location(code28, file, 118, 36, 6395);
			td34.className = "pv2 ph3";
			add_location(td34, file, 118, 16, 6375);
			add_location(code29, file, 119, 36, 6461);
			td35.className = "pv2 ph3";
			add_location(td35, file, 119, 16, 6441);
			tr12.className = "striped--light-gray";
			add_location(tr12, file, 116, 12, 6218);
			a14.href = "/guide/plugins/tachyons";
			a14.className = "blue dim link";
			add_location(a14, file, 122, 36, 6588);
			td36.className = "pv2 ph3";
			add_location(td36, file, 122, 16, 6568);
			add_location(code30, file, 123, 36, 6698);
			td37.className = "pv2 ph3";
			add_location(td37, file, 123, 16, 6678);
			add_location(code31, file, 124, 36, 6758);
			td38.className = "pv2 ph3";
			add_location(td38, file, 124, 16, 6738);
			tr13.className = "striped--light-gray";
			add_location(tr13, file, 121, 12, 6519);
			a15.href = "/guide/plugins/turret";
			a15.className = "blue dim link";
			add_location(a15, file, 127, 36, 6879);
			td39.className = "pv2 ph3";
			add_location(td39, file, 127, 16, 6859);
			add_location(code32, file, 128, 36, 6985);
			td40.className = "pv2 ph3";
			add_location(td40, file, 128, 16, 6965);
			add_location(code33, file, 129, 36, 7052);
			td41.className = "pv2 ph3";
			add_location(td41, file, 129, 16, 7032);
			tr14.className = "striped--light-gray";
			add_location(tr14, file, 126, 12, 6810);
			a16.href = "/guide/plugins/uikit";
			a16.className = "blue dim link";
			add_location(a16, file, 132, 36, 7184);
			td42.className = "pv2 ph3";
			add_location(td42, file, 132, 16, 7164);
			add_location(code34, file, 133, 36, 7288);
			td43.className = "pv2 ph3";
			add_location(td43, file, 133, 16, 7268);
			add_location(code35, file, 134, 36, 7358);
			td44.className = "pv2 ph3";
			add_location(td44, file, 134, 16, 7338);
			tr15.className = "striped--light-gray";
			add_location(tr15, file, 131, 12, 7115);
			table.className = "collapse ba br2 b--black-10 pv2 ph3 w-100 mb4";
			add_location(table, file, 55, 8, 2520);
			p7.className = "lh-copy";
			add_location(p7, file, 137, 8, 7434);
			p8.className = "lh-copy";
			add_location(p8, file, 149, 8, 7832);
			div1.className = "mb4";
			add_location(div1, file, 150, 8, 7904);
			section2.className = "mv5";
			add_location(section2, file, 51, 4, 2085);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section0, anchor);
			append(section0, p0);
			append(p0, t2);
			append(p0, a0);
			append(a0, t3);
			append(p0, t4);
			append(section0, t5);
			append(section0, p1);
			append(p1, t6);
			insert(target, t7, anchor);
			insert(target, section1, anchor);
			mount_component(heading0, section1, null);
			append(section1, t8);
			append(section1, p2);
			append(p2, t9);
			append(p2, a1);
			append(a1, t10);
			append(p2, t11);
			append(p2, code0);
			append(code0, t12);
			append(p2, t13);
			append(p2, code1);
			append(code1, t14);
			append(p2, t15);
			append(p2, code2);
			append(code2, t16);
			append(p2, t17);
			append(p2, code3);
			append(code3, t18);
			append(p2, t19);
			append(section1, t20);
			append(section1, p3);
			append(p3, t21);
			append(section1, t22);
			mount_component(samplecode0, section1, null);
			append(section1, t23);
			append(section1, p4);
			append(p4, t24);
			append(section1, t25);
			append(section1, div0);
			mount_component(samplecode1, div0, null);
			append(section1, t26);
			mount_component(demo0, section1, null);
			insert(target, t27, anchor);
			insert(target, section2, anchor);
			mount_component(heading1, section2, null);
			append(section2, t28);
			append(section2, p5);
			append(p5, t29);
			append(section2, t30);
			append(section2, p6);
			append(p6, t31);
			append(p6, code4);
			append(code4, t32);
			append(p6, t33);
			append(p6, code5);
			append(code5, t34);
			append(p6, t35);
			append(section2, t36);
			append(section2, table);
			append(table, tr0);
			append(tr0, th0);
			append(th0, t37);
			append(tr0, t38);
			append(tr0, th1);
			append(th1, t39);
			append(tr0, t40);
			append(tr0, th2);
			append(th2, t41);
			append(table, t42);
			append(table, tr1);
			append(tr1, td0);
			append(td0, a2);
			append(a2, t43);
			append(tr1, t44);
			append(tr1, td1);
			append(td1, code6);
			append(code6, t45);
			append(tr1, t46);
			append(tr1, td2);
			append(td2, code7);
			append(code7, t47);
			append(table, t48);
			append(table, tr2);
			append(tr2, td3);
			append(td3, a3);
			append(a3, t49);
			append(tr2, t50);
			append(tr2, td4);
			append(td4, code8);
			append(code8, t51);
			append(tr2, t52);
			append(tr2, td5);
			append(td5, code9);
			append(code9, t53);
			append(table, t54);
			append(table, tr3);
			append(tr3, td6);
			append(td6, a4);
			append(a4, t55);
			append(tr3, t56);
			append(tr3, td7);
			append(td7, code10);
			append(code10, t57);
			append(tr3, t58);
			append(tr3, td8);
			append(td8, code11);
			append(code11, t59);
			append(table, t60);
			append(table, tr4);
			append(tr4, td9);
			append(td9, a5);
			append(a5, t61);
			append(tr4, t62);
			append(tr4, td10);
			append(td10, code12);
			append(code12, t63);
			append(tr4, t64);
			append(tr4, td11);
			append(td11, code13);
			append(code13, t65);
			append(table, t66);
			append(table, tr5);
			append(tr5, td12);
			append(td12, a6);
			append(a6, t67);
			append(tr5, t68);
			append(tr5, td13);
			append(td13, code14);
			append(code14, t69);
			append(tr5, t70);
			append(tr5, td14);
			append(td14, code15);
			append(code15, t71);
			append(table, t72);
			append(table, tr6);
			append(tr6, td15);
			append(td15, a7);
			append(a7, t73);
			append(tr6, t74);
			append(tr6, td16);
			append(td16, code16);
			append(code16, t75);
			append(tr6, t76);
			append(tr6, td17);
			append(td17, code17);
			append(code17, t77);
			append(table, t78);
			append(table, tr7);
			append(tr7, td18);
			append(td18, a8);
			append(a8, t79);
			append(tr7, t80);
			append(tr7, td19);
			append(td19, code18);
			append(code18, t81);
			append(tr7, t82);
			append(tr7, td20);
			append(td20, code19);
			append(code19, t83);
			append(table, t84);
			append(table, tr8);
			append(tr8, td21);
			append(td21, a9);
			append(a9, t85);
			append(tr8, t86);
			append(tr8, td22);
			append(td22, code20);
			append(code20, t87);
			append(tr8, t88);
			append(tr8, td23);
			append(td23, code21);
			append(code21, t89);
			append(table, t90);
			append(table, tr9);
			append(tr9, td24);
			append(td24, a10);
			append(a10, t91);
			append(tr9, t92);
			append(tr9, td25);
			append(td25, code22);
			append(code22, t93);
			append(tr9, t94);
			append(tr9, td26);
			append(td26, code23);
			append(code23, t95);
			append(table, t96);
			append(table, tr10);
			append(tr10, td27);
			append(td27, a11);
			append(a11, t97);
			append(tr10, t98);
			append(tr10, td28);
			append(td28, code24);
			append(code24, t99);
			append(tr10, t100);
			append(tr10, td29);
			append(td29, code25);
			append(code25, t101);
			append(table, t102);
			append(table, tr11);
			append(tr11, td30);
			append(td30, a12);
			append(a12, t103);
			append(tr11, t104);
			append(tr11, td31);
			append(td31, code26);
			append(code26, t105);
			append(tr11, t106);
			append(tr11, td32);
			append(td32, code27);
			append(code27, t107);
			append(table, t108);
			append(table, tr12);
			append(tr12, td33);
			append(td33, a13);
			append(a13, t109);
			append(tr12, t110);
			append(tr12, td34);
			append(td34, code28);
			append(code28, t111);
			append(tr12, t112);
			append(tr12, td35);
			append(td35, code29);
			append(code29, t113);
			append(table, t114);
			append(table, tr13);
			append(tr13, td36);
			append(td36, a14);
			append(a14, t115);
			append(tr13, t116);
			append(tr13, td37);
			append(td37, code30);
			append(code30, t117);
			append(tr13, t118);
			append(tr13, td38);
			append(td38, code31);
			append(code31, t119);
			append(table, t120);
			append(table, tr14);
			append(tr14, td39);
			append(td39, a15);
			append(a15, t121);
			append(tr14, t122);
			append(tr14, td40);
			append(td40, code32);
			append(code32, t123);
			append(tr14, t124);
			append(tr14, td41);
			append(td41, code33);
			append(code33, t125);
			append(table, t126);
			append(table, tr15);
			append(tr15, td42);
			append(td42, a16);
			append(a16, t127);
			append(tr15, t128);
			append(tr15, td43);
			append(td43, code34);
			append(code34, t129);
			append(tr15, t130);
			append(tr15, td44);
			append(td44, code35);
			append(code35, t131);
			append(section2, t132);
			append(section2, p7);
			append(p7, t133);
			append(section2, t134);
			mount_component(samplecode2, section2, null);
			append(section2, t135);
			append(section2, p8);
			append(p8, t136);
			append(section2, t137);
			append(section2, div1);
			mount_component(samplecode3, div1, null);
			append(section2, t138);
			mount_component(demo1, section2, null);
			insert(target, t139, anchor);
			mount_component(examples, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			demo0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			samplecode3.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			demo0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			samplecode3.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section0);
				detach(t7);
				detach(section1);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			samplecode1.$destroy();

			demo0.$destroy();

			if (detaching) {
				detach(t27);
				detach(section2);
			}

			heading1.$destroy();

			samplecode2.$destroy();

			samplecode3.$destroy();

			demo1.$destroy();

			if (detaching) {
				detach(t139);
			}

			examples.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Changing success and error colors";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

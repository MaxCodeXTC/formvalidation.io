import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as ChangelogLayout } from './chunk.4a563e90.js';

/* src/routes/updates/v1.3.0/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/updates/v1.3.0/index.svelte";

// (10:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("New features");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "New features");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (24:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Bug fixes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Bug fixes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (31:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Upgrading to v1.3.0");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Upgrading to v1.3.0");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <ChangelogLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, h30, t5, t6, p0, t7, a0, t8, t9, code0, t10, t11, t12, t13, h31, t14, t15, p1, t16, a1, t17, t18, t19, t20, p2, t21, code1, t22, t23, a2, t24, t25, t26, section1, t27, ul0, li0, t28, a3, t29, t30, a4, t31, t32, t33, section2, t34, ul1, li1, t35, a5, t36, t37, t38, li2, t39, t40, section3, a6, t41, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo0 = new Demo({
		props: {
		prefix: "/guide/examples/excluding-field-by-given-condition",
		frameworks: ['bootstrap']
	},
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/plugins/wizard/basic",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Version v1.3.0");
			t1 = space();
			h2 = element("h2");
			t2 = text("Released 10 August 2018");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			h30 = element("h3");
			t5 = text("New Excluded plugin");
			t6 = space();
			p0 = element("p");
			t7 = text("The ");
			a0 = element("a");
			t8 = text("Excluded");
			t9 = text(" plugin allows you to indicate fields which won't be validated. It severs the same functionality as the ");
			code0 = element("code");
			t10 = text("excluded");
			t11 = text(" option in v0.8.1 and earlier versions.");
			t12 = space();
			demo0.$$.fragment.c();
			t13 = space();
			h31 = element("h3");
			t14 = text("New Wizard plugin");
			t15 = space();
			p1 = element("p");
			t16 = text("The ");
			a1 = element("a");
			t17 = text("Wizard");
			t18 = text(" plugin supports validating multiple steps form:");
			t19 = space();
			demo1.$$.fragment.c();
			t20 = space();
			p2 = element("p");
			t21 = text("This version provides new ");
			code1 = element("code");
			t22 = text("onPrefocus");
			t23 = text(" option in the ");
			a2 = element("a");
			t24 = text("AutoFocus");
			t25 = text(". This option is useful when you want to activate the tab containing the first invalid field.");
			t26 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t27 = space();
			ul0 = element("ul");
			li0 = element("li");
			t28 = text("Fix an issue that the ");
			a3 = element("a");
			t29 = text("resetForm");
			t30 = text(", ");
			a4 = element("a");
			t31 = text("resetField");
			t32 = text(" methods don't reset value for textarea element");
			t33 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t34 = space();
			ul1 = element("ul");
			li1 = element("li");
			t35 = text("From v0.8.1 and older versions: Follow the ");
			a5 = element("a");
			t36 = text("Upgrading to v1.0.0");
			t37 = text(" guide");
			t38 = space();
			li2 = element("li");
			t39 = text("From v1.0.0: Just download the new version and replace the old files in v1.0.0 with new files in v1.3.0.");
			t40 = space();
			section3 = element("section");
			a6 = element("a");
			t41 = text("Download v1.3.0");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Version v1.3.0");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Released 10 August 2018");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n\n        ");

			h30 = claim_element(section0_nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t5 = claim_text(h30_nodes, "New Excluded plugin");
			h30_nodes.forEach(detach);
			t6 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t7 = claim_text(p0_nodes, "The ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t8 = claim_text(a0_nodes, "Excluded");
			a0_nodes.forEach(detach);
			t9 = claim_text(p0_nodes, " plugin allows you to indicate fields which won't be validated. It severs the same functionality as the ");

			code0 = claim_element(p0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t10 = claim_text(code0_nodes, "excluded");
			code0_nodes.forEach(detach);
			t11 = claim_text(p0_nodes, " option in v0.8.1 and earlier versions.");
			p0_nodes.forEach(detach);
			t12 = claim_text(section0_nodes, "\n        ");
			demo0.$$.fragment.l(section0_nodes);
			t13 = claim_text(section0_nodes, "\n\n        ");

			h31 = claim_element(section0_nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t14 = claim_text(h31_nodes, "New Wizard plugin");
			h31_nodes.forEach(detach);
			t15 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t16 = claim_text(p1_nodes, "The ");

			a1 = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t17 = claim_text(a1_nodes, "Wizard");
			a1_nodes.forEach(detach);
			t18 = claim_text(p1_nodes, " plugin supports validating multiple steps form:");
			p1_nodes.forEach(detach);
			t19 = claim_text(section0_nodes, "\n        ");
			demo1.$$.fragment.l(section0_nodes);
			t20 = claim_text(section0_nodes, "\n\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t21 = claim_text(p2_nodes, "This version provides new ");

			code1 = claim_element(p2_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t22 = claim_text(code1_nodes, "onPrefocus");
			code1_nodes.forEach(detach);
			t23 = claim_text(p2_nodes, " option in the ");

			a2 = claim_element(p2_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t24 = claim_text(a2_nodes, "AutoFocus");
			a2_nodes.forEach(detach);
			t25 = claim_text(p2_nodes, ". This option is useful when you want to activate the tab containing the first invalid field.");
			p2_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t26 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t27 = claim_text(section1_nodes, "\n        ");

			ul0 = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t28 = claim_text(li0_nodes, "Fix an issue that the ");

			a3 = claim_element(li0_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t29 = claim_text(a3_nodes, "resetForm");
			a3_nodes.forEach(detach);
			t30 = claim_text(li0_nodes, ", ");

			a4 = claim_element(li0_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t31 = claim_text(a4_nodes, "resetField");
			a4_nodes.forEach(detach);
			t32 = claim_text(li0_nodes, " methods don't reset value for textarea element");
			li0_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t33 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t34 = claim_text(section2_nodes, "\n        ");

			ul1 = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li1 = claim_element(ul1_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t35 = claim_text(li1_nodes, "From v0.8.1 and older versions: Follow the ");

			a5 = claim_element(li1_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t36 = claim_text(a5_nodes, "Upgrading to v1.0.0");
			a5_nodes.forEach(detach);
			t37 = claim_text(li1_nodes, " guide");
			li1_nodes.forEach(detach);
			t38 = claim_text(ul1_nodes, "\n            ");

			li2 = claim_element(ul1_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t39 = claim_text(li2_nodes, "From v1.0.0: Just download the new version and replace the old files in v1.0.0 with new files in v1.3.0.");
			li2_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			t40 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			a6 = claim_element(section3_nodes, "A", { href: true, class: true, title: true }, false);
			var a6_nodes = children(a6);

			t41 = claim_text(a6_nodes, "Download v1.3.0");
			a6_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 92);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 144);
			add_location(h30, file, 11, 8, 271);
			a0.href = "/guide/plugins/excluded";
			a0.className = "blue dim link";
			add_location(a0, file, 12, 31, 331);
			add_location(code0, file, 12, 203, 503);
			p0.className = "lh-copy";
			add_location(p0, file, 12, 8, 308);
			add_location(h31, file, 15, 8, 681);
			a1.href = "/guide/plugins/wizard";
			a1.className = "blue dim link";
			add_location(a1, file, 16, 31, 739);
			p1.className = "lh-copy";
			add_location(p1, file, 16, 8, 716);
			add_location(code1, file, 19, 53, 990);
			a2.href = "/guide/plugins/auto-focus";
			a2.className = "blue dim link";
			add_location(a2, file, 19, 91, 1028);
			p2.className = "lh-copy";
			add_location(p2, file, 19, 8, 945);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 200);
			a3.href = "/guide/api/reset-form";
			a3.className = "blue dim link";
			add_location(a3, file, 25, 38, 1355);
			a4.href = "/guide/api/reset-field";
			a4.className = "blue dim link";
			add_location(a4, file, 25, 107, 1424);
			add_location(li0, file, 25, 12, 1329);
			ul0.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul0, file, 24, 8, 1284);
			section1.className = "mv5";
			add_location(section1, file, 22, 4, 1217);
			a5.href = "/updates/v1.0.0/#upgrading-to-v1-0-0";
			a5.className = "blue dim link";
			add_location(a5, file, 32, 59, 1749);
			add_location(li1, file, 32, 12, 1702);
			add_location(li2, file, 33, 12, 1865);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 31, 8, 1657);
			section2.className = "mv5";
			add_location(section2, file, 29, 4, 1580);
			a6.href = "/download";
			a6.className = "f6 f5-ns fw6 dib ba b--black-20 bg-blue white ph3 ph4-ns pv2 pv3-ns br2 grow no-underline";
			a6.title = "Download";
			add_location(a6, file, 38, 8, 2046);
			section3.className = "tc mv5";
			add_location(section3, file, 37, 4, 2013);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, h30);
			append(h30, t5);
			append(section0, t6);
			append(section0, p0);
			append(p0, t7);
			append(p0, a0);
			append(a0, t8);
			append(p0, t9);
			append(p0, code0);
			append(code0, t10);
			append(p0, t11);
			append(section0, t12);
			mount_component(demo0, section0, null);
			append(section0, t13);
			append(section0, h31);
			append(h31, t14);
			append(section0, t15);
			append(section0, p1);
			append(p1, t16);
			append(p1, a1);
			append(a1, t17);
			append(p1, t18);
			append(section0, t19);
			mount_component(demo1, section0, null);
			append(section0, t20);
			append(section0, p2);
			append(p2, t21);
			append(p2, code1);
			append(code1, t22);
			append(p2, t23);
			append(p2, a2);
			append(a2, t24);
			append(p2, t25);
			insert(target, t26, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t27);
			append(section1, ul0);
			append(ul0, li0);
			append(li0, t28);
			append(li0, a3);
			append(a3, t29);
			append(li0, t30);
			append(li0, a4);
			append(a4, t31);
			append(li0, t32);
			insert(target, t33, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t34);
			append(section2, ul1);
			append(ul1, li1);
			append(li1, t35);
			append(li1, a5);
			append(a5, t36);
			append(li1, t37);
			append(ul1, t38);
			append(ul1, li2);
			append(li2, t39);
			insert(target, t40, anchor);
			insert(target, section3, anchor);
			append(section3, a6);
			append(a6, t41);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			demo0.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			demo0.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			demo0.$destroy();

			demo1.$destroy();

			if (detaching) {
				detach(t26);
				detach(section1);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t33);
				detach(section2);
			}

			heading2.$destroy();

			if (detaching) {
				detach(t40);
				detach(section3);
			}
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var changeloglayout = new ChangelogLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			changeloglayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			changeloglayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • v1.3.0";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(changeloglayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var changeloglayout_changes = {};
			if (changed.$$scope) changeloglayout_changes.$$scope = { changed, ctx };
			changeloglayout.$set(changeloglayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			changeloglayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			changeloglayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			changeloglayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

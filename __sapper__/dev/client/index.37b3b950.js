import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, r as noop, w as empty, I as destroy_each, y as on_outro } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import { a as Cards, b as Card } from './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';

/* src/routes/guide/getting-started/usage/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/getting-started/usage/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.framework = list[i];
	child_ctx.i = i;
	return child_ctx;
}

// (10:8) <Heading>
function create_default_slot_17(ctx) {
	var t;

	return {
		c: function create() {
			t = text("1. Uploading required files to server");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "1. Uploading required files to server");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (15:8) <Heading>
function create_default_slot_16(ctx) {
	var t;

	return {
		c: function create() {
			t = text("2. Including necessary files");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "2. Including necessary files");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (40:8) <Heading>
function create_default_slot_15(ctx) {
	var t;

	return {
		c: function create() {
			t = text("3. Writing form and declaring validator rules");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "3. Writing form and declaring validator rules");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (113:8) <Tip>
function create_default_slot_14(ctx) {
	var t0, a, t1, t2;

	return {
		c: function create() {
			t0 = text("If the field name contains special characters such as ., [, ], you must wrap it between single or double quote. See the ");
			a = element("a");
			t1 = text("Special field name");
			t2 = text(" page");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "If the field name contains special characters such as ., [, ], you must wrap it between single or double quote. See the ");

			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t1 = claim_text(a_nodes, "Special field name");
			a_nodes.forEach(detach);
			t2 = claim_text(nodes, " page");
			this.h();
		},

		h: function hydrate() {
			a.href = "/guide/getting-started/special-field-name";
			a.className = "blue dim link";
			add_location(a, file, 112, 133, 5180);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a, anchor);
			append(a, t1);
			insert(target, t2, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(a);
				detach(t2);
			}
		}
	};
}

// (114:8) <Tip>
function create_default_slot_13(ctx) {
	var t0, code, t1, t2, a, t3, t4;

	return {
		c: function create() {
			t0 = text("If the field doesn't have the ");
			code = element("code");
			t1 = text("name");
			t2 = text(" attribute, you can use a ");
			a = element("a");
			t3 = text("CSS selector");
			t4 = text(" to specify it");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "If the field doesn't have the ");

			code = claim_element(nodes, "CODE", {}, false);
			var code_nodes = children(code);

			t1 = claim_text(code_nodes, "name");
			code_nodes.forEach(detach);
			t2 = claim_text(nodes, " attribute, you can use a ");

			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t3 = claim_text(a_nodes, "CSS selector");
			a_nodes.forEach(detach);
			t4 = claim_text(nodes, " to specify it");
			this.h();
		},

		h: function hydrate() {
			add_location(code, file, 113, 43, 5331);
			a.href = "/guide/getting-started/field-selector";
			a.className = "blue dim link";
			add_location(a, file, 113, 86, 5374);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, code, anchor);
			append(code, t1);
			insert(target, t2, anchor);
			insert(target, a, anchor);
			append(a, t3);
			insert(target, t4, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(code);
				detach(t2);
				detach(a);
				detach(t4);
			}
		}
	};
}

// (116:8) <Tip>
function create_default_slot_12(ctx) {
	var t0, a, t1, t2;

	return {
		c: function create() {
			t0 = text("The options can be updated on the fly with the ");
			a = element("a");
			t1 = text("updateValidatorOption()");
			t2 = text(" method");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "The options can be updated on the fly with the ");

			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t1 = claim_text(a_nodes, "updateValidatorOption()");
			a_nodes.forEach(detach);
			t2 = claim_text(nodes, " method");
			this.h();
		},

		h: function hydrate() {
			a.href = "/guide/api/update-validator-option";
			a.className = "blue dim link";
			add_location(a, file, 115, 60, 5708);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a, anchor);
			append(a, t1);
			insert(target, t2, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(a);
				detach(t2);
			}
		}
	};
}

// (125:8) <Heading>
function create_default_slot_11(ctx) {
	var t;

	return {
		c: function create() {
			t = text("4. Adding plugins");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "4. Adding plugins");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (173:12) <Card target="/guide/plugins/message" title="Message">
function create_default_slot_10(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Display error message that is defined in each validator options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Display error message that is defined in each validator options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (174:12) <Card target="/guide/plugins/trigger" title="Trigger">
function create_default_slot_9(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Indicate the events which the validation will be executed.");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Indicate the events which the validation will be executed.");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (175:12) <Card target="/guide/plugins/submit-button" title="SubmitButton">
function create_default_slot_8(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Automatically validate the form when pressing its Submit button");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Automatically validate the form when pressing its Submit button");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (176:12) <Card target="/guide/plugins/default-submit" title="DefaultSubmit">
function create_default_slot_7(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Submit the form if all fields are valid after validating");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Submit the form if all fields are valid after validating");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (172:8) <Cards cols="2">
function create_default_slot_6(ctx) {
	var t0, t1, t2, current;

	var card0 = new Card({
		props: {
		target: "/guide/plugins/message",
		title: "Message",
		$$slots: { default: [create_default_slot_10] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card1 = new Card({
		props: {
		target: "/guide/plugins/trigger",
		title: "Trigger",
		$$slots: { default: [create_default_slot_9] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card2 = new Card({
		props: {
		target: "/guide/plugins/submit-button",
		title: "SubmitButton",
		$$slots: { default: [create_default_slot_8] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card3 = new Card({
		props: {
		target: "/guide/plugins/default-submit",
		title: "DefaultSubmit",
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			card0.$$.fragment.c();
			t0 = space();
			card1.$$.fragment.c();
			t1 = space();
			card2.$$.fragment.c();
			t2 = space();
			card3.$$.fragment.c();
		},

		l: function claim(nodes) {
			card0.$$.fragment.l(nodes);
			t0 = claim_text(nodes, "\n            ");
			card1.$$.fragment.l(nodes);
			t1 = claim_text(nodes, "\n            ");
			card2.$$.fragment.l(nodes);
			t2 = claim_text(nodes, "\n            ");
			card3.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(card0, target, anchor);
			insert(target, t0, anchor);
			mount_component(card1, target, anchor);
			insert(target, t1, anchor);
			mount_component(card2, target, anchor);
			insert(target, t2, anchor);
			mount_component(card3, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var card0_changes = {};
			if (changed.$$scope) card0_changes.$$scope = { changed, ctx };
			card0.$set(card0_changes);

			var card1_changes = {};
			if (changed.$$scope) card1_changes.$$scope = { changed, ctx };
			card1.$set(card1_changes);

			var card2_changes = {};
			if (changed.$$scope) card2_changes.$$scope = { changed, ctx };
			card2.$set(card2_changes);

			var card3_changes = {};
			if (changed.$$scope) card3_changes.$$scope = { changed, ctx };
			card3.$set(card3_changes);
		},

		i: function intro(local) {
			if (current) return;
			card0.$$.fragment.i(local);

			card1.$$.fragment.i(local);

			card2.$$.fragment.i(local);

			card3.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			card0.$$.fragment.o(local);
			card1.$$.fragment.o(local);
			card2.$$.fragment.o(local);
			card3.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			card0.$destroy(detaching);

			if (detaching) {
				detach(t0);
			}

			card1.$destroy(detaching);

			if (detaching) {
				detach(t1);
			}

			card2.$destroy(detaching);

			if (detaching) {
				detach(t2);
			}

			card3.$destroy(detaching);
		}
	};
}

// (224:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("5. Using with popular CSS frameworks");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "5. Using with popular CSS frameworks");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (281:8) <Tip heading="Note">
function create_default_slot_4(ctx) {
	var code0, t0, t1, code1, t2, t3;

	return {
		c: function create() {
			code0 = element("code");
			t0 = text("Bootstrap.min.js");
			t1 = text(" is the plugin provided by FormValidation. It is NOT the same as ");
			code1 = element("code");
			t2 = text("Bootstrap(.min).js");
			t3 = text(" file provided by Bootstrap framework.");
			this.h();
		},

		l: function claim(nodes) {
			code0 = claim_element(nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t0 = claim_text(code0_nodes, "Bootstrap.min.js");
			code0_nodes.forEach(detach);
			t1 = claim_text(nodes, " is the plugin provided by FormValidation. It is NOT the same as ");

			code1 = claim_element(nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t2 = claim_text(code1_nodes, "Bootstrap(.min).js");
			code1_nodes.forEach(detach);
			t3 = claim_text(nodes, " file provided by Bootstrap framework.");
			this.h();
		},

		h: function hydrate() {
			add_location(code0, file, 280, 28, 13642);
			add_location(code1, file, 280, 122, 13736);
		},

		m: function mount(target, anchor) {
			insert(target, code0, anchor);
			append(code0, t0);
			insert(target, t1, anchor);
			insert(target, code1, anchor);
			append(code1, t2);
			insert(target, t3, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(code0);
				detach(t1);
				detach(code1);
				detach(t3);
			}
		}
	};
}

// (288:8) {#each ['Bootstrap', 'Bootstrap3', 'Bulma', 'Foundation', 'Materialize', 'Milligram', 'Mini', 'Mui', 'Pure', 'Semantic', 'Shoelace', 'Spectre', 'Tachyons', 'Turret', 'Uikit'] as framework, i}
function create_each_block(ctx) {
	var current;

	var card = new Card({
		props: {
		target: "/guide/plugins/" + ctx.framework.toLowerCase(),
		title: ctx.framework
	},
		$$inline: true
	});

	return {
		c: function create() {
			card.$$.fragment.c();
		},

		l: function claim(nodes) {
			card.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			card.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			card.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			card.$destroy(detaching);
		}
	};
}

// (287:8) <Cards>
function create_default_slot_3(ctx) {
	var each_1_anchor, current;

	var each_value = ['Bootstrap', 'Bootstrap3', 'Bulma', 'Foundation', 'Materialize', 'Milligram', 'Mini', 'Mui', 'Pure', 'Semantic', 'Shoelace', 'Spectre', 'Tachyons', 'Turret', 'Uikit'];

	var each_blocks = [];

	for (var i = 0; i < 15; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	function outro_block(i, detaching, local) {
		if (each_blocks[i]) {
			if (detaching) {
				on_outro(() => {
					each_blocks[i].d(detaching);
					each_blocks[i] = null;
				});
			}

			each_blocks[i].o(local);
		}
	}

	return {
		c: function create() {
			for (var i = 0; i < 15; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},

		l: function claim(nodes) {
			for (var i = 0; i < 15; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},

		m: function mount(target, anchor) {
			for (var i = 0; i < 15; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			for (var i = 0; i < 15; i += 1) each_blocks[i].i();

			current = true;
		},

		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < 15; i += 1) outro_block(i, 0);

			current = false;
		},

		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach(each_1_anchor);
			}
		}
	};
}

// (296:12) <PrevButton target="/guide/getting-started">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Overview");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Overview");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (297:12) <NextButton target="/guide/getting-started/localization">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Localization");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Localization");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, p0, t5, code0, t6, t7, code1, t8, t9, code2, t10, t11, t12, section1, t13, p1, t14, code3, t15, t16, code4, t17, t18, t19, t20, p2, t21, a0, t22, t23, t24, p3, t25, code5, t26, t27, code6, t28, t29, t30, p4, t31, t32, ul0, li0, t33, code7, t34, t35, code8, t36, t37, t38, li1, t39, code9, t40, t41, t42, section2, t43, p5, t44, code10, t45, t46, t47, t48, p6, t49, code11, t50, t51, t52, ul1, li2, t53, code12, t54, t55, t56, li3, t57, code13, t58, t59, code14, t60, t61, t62, t63, t64, p7, t65, code15, t66, t67, t68, t69, p8, t70, a1, t71, t72, t73, p9, t74, t75, t76, p10, span0, t77, t78, span1, t79, t80, t81, p11, t82, t83, section3, t84, p12, t85, a2, t86, t87, a3, t88, t89, t90, p13, t91, code16, t92, t93, t94, t95, p14, t96, t97, t98, p15, t99, t100, t101, p16, t102, span2, t103, t104, t105, t106, section4, t107, p17, t108, a4, t109, t110, t111, p18, t112, a5, t113, t114, a6, t115, t116, t117, t118, t119, p19, t120, t121, t122, p20, t123, t124, t125, section5, div, t126, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_17] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_16] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <!-- Your form goes here -->
    ...
<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>    
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_15] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="loginForm" method="POST">
        <div>
            <label>Username</label>
            <input type="text" name="username" />
        </div>

        <div>
            <label>Password</label>
            <input type="password" name="password" />
        </div>

        <button type="submit">Submit</button>
    </form>
    
<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>    
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('loginForm'),
        {
            fields: {
                username: {
                    validators: {
                        notEmpty: {
                            message: 'The username is required'
                        },
                        stringLength: {
                            min: 6,
                            max: 30,
                            message: 'The username must be more than 6 and less than 30 characters long',
                        },
                        regexp: {
                            regexp: /^[a-zA-Z0-9_]+$/,
                            message: 'The username can only consist of alphabetical, number and underscore',
                        },
                    }
                },
                password: {
                    validators: {
                        notEmpty: {
                            message: 'The password is required'
                        },
                        stringLength: {
                            min: 8,
                            message: 'The password must have at least 8 characters',
                        },
                    }
                },
            }
        }
    );
});    
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var tip0 = new Tip({
		props: {
		$$slots: { default: [create_default_slot_14] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var tip1 = new Tip({
		props: {
		$$slots: { default: [create_default_slot_13] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var tip2 = new Tip({
		props: {
		$$slots: { default: [create_default_slot_12] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo0 = new Demo({
		props: {
		prefix: "/guide/getting-started/usage/writing-form",
		frameworks: ['native']
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_11] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="demoForm" method="POST">
        ...
    </form>
    
<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>    
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<!--
Some additional plugins are not included in FormValidation(.min).js.
You have to insert it here after FormValidation(.min).js
-->
<script-tag src="/vendors/formvalidation/dist/js/plugins/PluginNameHere.min.js"></script-tag>
<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                pluginName: new FormValidation.plugins.PluginNameHere({
                    // The plugin options. Some plugins don't require any options
                    ... 
                }),
                // Other plugins can be enabled here, of course
                ...
            },
        }
    );
});    
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var cards0 = new Cards({
		props: {
		cols: "2",
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode3 = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="signinForm" method="POST">
        ...
    </form>
    
<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>    
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<!--
The Message, Trigger, SubmitButton and DefaultSubmit are core plugins. They are already included
in FormValidation(.min).js. Hence, you don't need to insert external plugin scripts here.
-->
<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('signinForm'),
        {
            fields: {
                ...
            },
            plugins: {
                message: new FormValidation.plugins.Message({
                    clazz: '...',
                }),
                trigger: new FormValidation.plugins.Trigger(),
                submitButton: new FormValidation.plugins.SubmitButton(),
                defaultSubmit: new FormValidation.plugins.DefaultSubmit(),
            },
        }
    );
});    
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/getting-started/usage/adding-plugins",
		frameworks: ['native']
	},
		$$inline: true
	});

	var heading4 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode4 = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <!-- FontAwesome is used to show the feedback icons -->
    <link-tag rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

    <!-- Bootstrap CSS has to be inserted before FormValidation CSS -->
    <link-tag rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap.min.css">
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="yourForm" method="POST">
        ...
    </form>
    
<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>

<!-- 
You need to insert the plugin that supports CSS framework.
It has to be inserted after FormValidation.min.js
-->
<script-tag src="/vendors/formvalidation/dist/js/plugins/Bootstrap.min.js"></script-tag>
<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('yourForm'),
        {
            fields: {
                ...
            },
            plugins: {
                trigger: new FormValidation.plugins.Trigger(),
                submitButton: new FormValidation.plugins.SubmitButton(),
                defaultSubmit: new FormValidation.plugins.DefaultSubmit(),
                // Support the form made in Bootstrap 4
                bootstrap: new FormValidation.plugins.Bootstrap(),
                // Show the feedback icons taken from FontAwesome
                icon: new FormValidation.plugins.Icon({
                    valid: 'fa fa-check',
                    invalid: 'fa fa-times',
                    validating: 'fa fa-refresh',
                }),
            },
        }
    );
});    
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var tip3 = new Tip({
		props: {
		heading: "Note",
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo2 = new Demo({
		props: {
		prefix: "/guide/getting-started/usage/frameworks",
		selected: "bootstrap",
		frameworks: ['bootstrap', 'bootstrap3', 'bulma', 'foundation', 'materialize', 'milligram', 'mini', 'mui', 'pure', 'semantic', 'shoelace', 'spectre', 'tachyons', 'turret', 'uikit', 'native']
	},
		$$inline: true
	});

	var cards1 = new Cards({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/getting-started",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/getting-started/localization",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Usage");
			t1 = space();
			h2 = element("h2");
			t2 = text("Steps to use FormValidation");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			p0 = element("p");
			t5 = text("You need to upload entire ");
			code0 = element("code");
			t6 = text("dist/css");
			t7 = text(" and ");
			code1 = element("code");
			t8 = text("dist/js");
			t9 = text(" folders to your server. The next steps assume that these folders are placed inside ");
			code2 = element("code");
			t10 = text("vendors/formvalidation");
			t11 = text(".");
			t12 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t13 = space();
			p1 = element("p");
			t14 = text("Add library's CSS and JavaScript files to the ");
			code3 = element("code");
			t15 = text("head");
			t16 = text(" and right before the ");
			code4 = element("code");
			t17 = text("body");
			t18 = text(" tags:");
			t19 = space();
			samplecode0.$$.fragment.c();
			t20 = space();
			p2 = element("p");
			t21 = text("Since the library is written completely in ECMAScript 6 (ES 6), we need ");
			a0 = element("a");
			t22 = text("es6-shim.min.js");
			t23 = text(" to help the older browsers understand the mordern features in ES6.");
			t24 = space();
			p3 = element("p");
			t25 = text("As mentioned in the previous section, ");
			code5 = element("code");
			t26 = text("FormValidation.min.js");
			t27 = text(" provides the most popular validators. You have to replaced it with ");
			code6 = element("code");
			t28 = text("FormValidation.full.min.js");
			t29 = text(" if you want to use all validators.");
			t30 = space();
			p4 = element("p");
			t31 = text("To reduce the page loading time:");
			t32 = space();
			ul0 = element("ul");
			li0 = element("li");
			t33 = text("Use the minified versions (");
			code7 = element("code");
			t34 = text(".min.css");
			t35 = text(" and ");
			code8 = element("code");
			t36 = text("min.js");
			t37 = text(" files)");
			t38 = space();
			li1 = element("li");
			t39 = text("Insert the JavaScript files right before the ");
			code9 = element("code");
			t40 = text("body");
			t41 = text(" tag");
			t42 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t43 = space();
			p5 = element("p");
			t44 = text("The library allows to define the validator for field that is taken from the value of ");
			code10 = element("code");
			t45 = text("name");
			t46 = text(" attribute. The following snippet is a basic example of a logging in form:");
			t47 = space();
			samplecode1.$$.fragment.c();
			t48 = space();
			p6 = element("p");
			t49 = text("As you can see, ");
			code11 = element("code");
			t50 = text("FormValidation.formValidation");
			t51 = text(" accepts two parameters:");
			t52 = space();
			ul1 = element("ul");
			li2 = element("li");
			t53 = text("The first parameter is the form element, which can be retrieved by the ");
			code12 = element("code");
			t54 = text("document.getElementById()");
			t55 = text(" method");
			t56 = space();
			li3 = element("li");
			t57 = text("The second parameter contains the options which is actually a JavaScript object. Its ");
			code13 = element("code");
			t58 = text("fields");
			t59 = text(" property maps the field name to the validator rules. \n                    The field name is defined by the ");
			code14 = element("code");
			t60 = text("name");
			t61 = text(" attribute, while the validator rules are defined by mapping the validator name to its options.");
			t62 = space();
			tip0.$$.fragment.c();
			t63 = space();
			tip1.$$.fragment.c();
			t64 = space();
			p7 = element("p");
			t65 = text("All validators provides a common option named ");
			code15 = element("code");
			t66 = text("message");
			t67 = text(" that will be used to inform user if the associated field is invalid.");
			t68 = space();
			tip2.$$.fragment.c();
			t69 = space();
			p8 = element("p");
			t70 = text("You don't need to remember the options of any validator, because you can refer to them in each ");
			a1 = element("a");
			t71 = text("validator");
			t72 = text(" page.");
			t73 = space();
			p9 = element("p");
			t74 = text("Here is what we have been following so far:");
			t75 = space();
			demo0.$$.fragment.c();
			t76 = space();
			p10 = element("p");
			span0 = element("span");
			t77 = text("Hey, I try to play with the form");
			t78 = text(". Neither clicking the ");
			span1 = element("span");
			t79 = text("Submit");
			t80 = text(" button nor typing on the username or password field does perform any validations.");
			t81 = space();
			p11 = element("p");
			t82 = text("That is the time to register plugins.");
			t83 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t84 = space();
			p12 = element("p");
			t85 = text("FormValidation is developed on plugin based architecture. Its solid, lighweight core libary only implements needed ");
			a2 = element("a");
			t86 = text("methods");
			t87 = text(" and connects ");
			a3 = element("a");
			t88 = text("all plugins");
			t89 = text(" together. We need to enable some basic plugins to\n            make the validation works.");
			t90 = space();
			p13 = element("p");
			t91 = text("In order to enable a particular plugin, you need to insert the plugin script (if required) and map a name with its instance in the ");
			code16 = element("code");
			t92 = text("plugins");
			t93 = text(" option:");
			t94 = space();
			samplecode2.$$.fragment.c();
			t95 = space();
			p14 = element("p");
			t96 = text("We are going to enable some plugins to make the validations happen:");
			t97 = space();
			cards0.$$.fragment.c();
			t98 = space();
			p15 = element("p");
			t99 = text("Our demo page now looks like:");
			t100 = space();
			samplecode3.$$.fragment.c();
			t101 = space();
			p16 = element("p");
			t102 = text("Finally, you can try it in the following form to see how the validation works. Either clicking the ");
			span2 = element("span");
			t103 = text("Submit");
			t104 = text(" button or filling in the fields to see it in action.");
			t105 = space();
			demo1.$$.fragment.c();
			t106 = space();
			section4 = element("section");
			heading4.$$.fragment.c();
			t107 = space();
			p17 = element("p");
			t108 = text("In the previous section, you learn how to use FormValidation with a native form. Nowadays, it's very common that you rely on a CSS framework to speed up the development. FormValidation brings support for a lot of popular CSS frameworks.\n            Each of them is supported by specific plugin which helps you minimize the integration parts such as automatically enabling the ");
			a4 = element("a");
			t109 = text("Message");
			t110 = text(" plugin, displaying the error messages at desired area instead of putting them at the bottom of form, etc.");
			t111 = space();
			p18 = element("p");
			t112 = text("The following sample code is a starter page for using the ");
			a5 = element("a");
			t113 = text("Bootstrap");
			t114 = text(" plugin to validate a form made in the ");
			a6 = element("a");
			t115 = text("Bootstrap 4");
			t116 = text(" framework:");
			t117 = space();
			samplecode4.$$.fragment.c();
			t118 = space();
			tip3.$$.fragment.c();
			t119 = space();
			p19 = element("p");
			t120 = text("You can see the sample code demonstrating for each plugin in the following example:");
			t121 = space();
			demo2.$$.fragment.c();
			t122 = space();
			p20 = element("p");
			t123 = text("Refer to each plugin below if you want to get supports for particular CSS framework:");
			t124 = space();
			cards1.$$.fragment.c();
			t125 = space();
			section5 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t126 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Usage");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Steps to use FormValidation");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t5 = claim_text(p0_nodes, "You need to upload entire ");

			code0 = claim_element(p0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t6 = claim_text(code0_nodes, "dist/css");
			code0_nodes.forEach(detach);
			t7 = claim_text(p0_nodes, " and ");

			code1 = claim_element(p0_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t8 = claim_text(code1_nodes, "dist/js");
			code1_nodes.forEach(detach);
			t9 = claim_text(p0_nodes, " folders to your server. The next steps assume that these folders are placed inside ");

			code2 = claim_element(p0_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t10 = claim_text(code2_nodes, "vendors/formvalidation");
			code2_nodes.forEach(detach);
			t11 = claim_text(p0_nodes, ".");
			p0_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t12 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t13 = claim_text(section1_nodes, "\n        ");

			p1 = claim_element(section1_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t14 = claim_text(p1_nodes, "Add library's CSS and JavaScript files to the ");

			code3 = claim_element(p1_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t15 = claim_text(code3_nodes, "head");
			code3_nodes.forEach(detach);
			t16 = claim_text(p1_nodes, " and right before the ");

			code4 = claim_element(p1_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t17 = claim_text(code4_nodes, "body");
			code4_nodes.forEach(detach);
			t18 = claim_text(p1_nodes, " tags:");
			p1_nodes.forEach(detach);
			t19 = claim_text(section1_nodes, "\n");
			samplecode0.$$.fragment.l(section1_nodes);
			t20 = claim_text(section1_nodes, "\n        ");

			p2 = claim_element(section1_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t21 = claim_text(p2_nodes, "Since the library is written completely in ECMAScript 6 (ES 6), we need ");

			a0 = claim_element(p2_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t22 = claim_text(a0_nodes, "es6-shim.min.js");
			a0_nodes.forEach(detach);
			t23 = claim_text(p2_nodes, " to help the older browsers understand the mordern features in ES6.");
			p2_nodes.forEach(detach);
			t24 = claim_text(section1_nodes, "\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t25 = claim_text(p3_nodes, "As mentioned in the previous section, ");

			code5 = claim_element(p3_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t26 = claim_text(code5_nodes, "FormValidation.min.js");
			code5_nodes.forEach(detach);
			t27 = claim_text(p3_nodes, " provides the most popular validators. You have to replaced it with ");

			code6 = claim_element(p3_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t28 = claim_text(code6_nodes, "FormValidation.full.min.js");
			code6_nodes.forEach(detach);
			t29 = claim_text(p3_nodes, " if you want to use all validators.");
			p3_nodes.forEach(detach);
			t30 = claim_text(section1_nodes, "\n        ");

			p4 = claim_element(section1_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t31 = claim_text(p4_nodes, "To reduce the page loading time:");
			p4_nodes.forEach(detach);
			t32 = claim_text(section1_nodes, "\n        ");

			ul0 = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t33 = claim_text(li0_nodes, "Use the minified versions (");

			code7 = claim_element(li0_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t34 = claim_text(code7_nodes, ".min.css");
			code7_nodes.forEach(detach);
			t35 = claim_text(li0_nodes, " and ");

			code8 = claim_element(li0_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t36 = claim_text(code8_nodes, "min.js");
			code8_nodes.forEach(detach);
			t37 = claim_text(li0_nodes, " files)");
			li0_nodes.forEach(detach);
			t38 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t39 = claim_text(li1_nodes, "Insert the JavaScript files right before the ");

			code9 = claim_element(li1_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t40 = claim_text(code9_nodes, "body");
			code9_nodes.forEach(detach);
			t41 = claim_text(li1_nodes, " tag");
			li1_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t42 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t43 = claim_text(section2_nodes, "\n\n        ");

			p5 = claim_element(section2_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t44 = claim_text(p5_nodes, "The library allows to define the validator for field that is taken from the value of ");

			code10 = claim_element(p5_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t45 = claim_text(code10_nodes, "name");
			code10_nodes.forEach(detach);
			t46 = claim_text(p5_nodes, " attribute. The following snippet is a basic example of a logging in form:");
			p5_nodes.forEach(detach);
			t47 = claim_text(section2_nodes, "\n");
			samplecode1.$$.fragment.l(section2_nodes);
			t48 = claim_text(section2_nodes, "\n        ");

			p6 = claim_element(section2_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t49 = claim_text(p6_nodes, "As you can see, ");

			code11 = claim_element(p6_nodes, "CODE", {}, false);
			var code11_nodes = children(code11);

			t50 = claim_text(code11_nodes, "FormValidation.formValidation");
			code11_nodes.forEach(detach);
			t51 = claim_text(p6_nodes, " accepts two parameters:");
			p6_nodes.forEach(detach);
			t52 = claim_text(section2_nodes, "\n        ");

			ul1 = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li2 = claim_element(ul1_nodes, "LI", { class: true }, false);
			var li2_nodes = children(li2);

			t53 = claim_text(li2_nodes, "The first parameter is the form element, which can be retrieved by the ");

			code12 = claim_element(li2_nodes, "CODE", {}, false);
			var code12_nodes = children(code12);

			t54 = claim_text(code12_nodes, "document.getElementById()");
			code12_nodes.forEach(detach);
			t55 = claim_text(li2_nodes, " method");
			li2_nodes.forEach(detach);
			t56 = claim_text(ul1_nodes, "\n            ");

			li3 = claim_element(ul1_nodes, "LI", { class: true }, false);
			var li3_nodes = children(li3);

			t57 = claim_text(li3_nodes, "The second parameter contains the options which is actually a JavaScript object. Its ");

			code13 = claim_element(li3_nodes, "CODE", {}, false);
			var code13_nodes = children(code13);

			t58 = claim_text(code13_nodes, "fields");
			code13_nodes.forEach(detach);
			t59 = claim_text(li3_nodes, " property maps the field name to the validator rules. \n                    The field name is defined by the ");

			code14 = claim_element(li3_nodes, "CODE", {}, false);
			var code14_nodes = children(code14);

			t60 = claim_text(code14_nodes, "name");
			code14_nodes.forEach(detach);
			t61 = claim_text(li3_nodes, " attribute, while the validator rules are defined by mapping the validator name to its options.");
			li3_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			t62 = claim_text(section2_nodes, "\n        ");
			tip0.$$.fragment.l(section2_nodes);
			t63 = claim_text(section2_nodes, "\n        ");
			tip1.$$.fragment.l(section2_nodes);
			t64 = claim_text(section2_nodes, "\n        ");

			p7 = claim_element(section2_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t65 = claim_text(p7_nodes, "All validators provides a common option named ");

			code15 = claim_element(p7_nodes, "CODE", {}, false);
			var code15_nodes = children(code15);

			t66 = claim_text(code15_nodes, "message");
			code15_nodes.forEach(detach);
			t67 = claim_text(p7_nodes, " that will be used to inform user if the associated field is invalid.");
			p7_nodes.forEach(detach);
			t68 = claim_text(section2_nodes, "\n        ");
			tip2.$$.fragment.l(section2_nodes);
			t69 = claim_text(section2_nodes, "\n        ");

			p8 = claim_element(section2_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t70 = claim_text(p8_nodes, "You don't need to remember the options of any validator, because you can refer to them in each ");

			a1 = claim_element(p8_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t71 = claim_text(a1_nodes, "validator");
			a1_nodes.forEach(detach);
			t72 = claim_text(p8_nodes, " page.");
			p8_nodes.forEach(detach);
			t73 = claim_text(section2_nodes, "\n        ");

			p9 = claim_element(section2_nodes, "P", { class: true }, false);
			var p9_nodes = children(p9);

			t74 = claim_text(p9_nodes, "Here is what we have been following so far:");
			p9_nodes.forEach(detach);
			t75 = claim_text(section2_nodes, "\n        ");
			demo0.$$.fragment.l(section2_nodes);
			t76 = claim_text(section2_nodes, "\n        ");

			p10 = claim_element(section2_nodes, "P", { class: true }, false);
			var p10_nodes = children(p10);

			span0 = claim_element(p10_nodes, "SPAN", { class: true }, false);
			var span0_nodes = children(span0);

			t77 = claim_text(span0_nodes, "Hey, I try to play with the form");
			span0_nodes.forEach(detach);
			t78 = claim_text(p10_nodes, ". Neither clicking the ");

			span1 = claim_element(p10_nodes, "SPAN", { class: true }, false);
			var span1_nodes = children(span1);

			t79 = claim_text(span1_nodes, "Submit");
			span1_nodes.forEach(detach);
			t80 = claim_text(p10_nodes, " button nor typing on the username or password field does perform any validations.");
			p10_nodes.forEach(detach);
			t81 = claim_text(section2_nodes, "\n        ");

			p11 = claim_element(section2_nodes, "P", { class: true }, false);
			var p11_nodes = children(p11);

			t82 = claim_text(p11_nodes, "That is the time to register plugins.");
			p11_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			t83 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t84 = claim_text(section3_nodes, "\n\n        ");

			p12 = claim_element(section3_nodes, "P", { class: true }, false);
			var p12_nodes = children(p12);

			t85 = claim_text(p12_nodes, "FormValidation is developed on plugin based architecture. Its solid, lighweight core libary only implements needed ");

			a2 = claim_element(p12_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t86 = claim_text(a2_nodes, "methods");
			a2_nodes.forEach(detach);
			t87 = claim_text(p12_nodes, " and connects ");

			a3 = claim_element(p12_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t88 = claim_text(a3_nodes, "all plugins");
			a3_nodes.forEach(detach);
			t89 = claim_text(p12_nodes, " together. We need to enable some basic plugins to\n            make the validation works.");
			p12_nodes.forEach(detach);
			t90 = claim_text(section3_nodes, "\n        ");

			p13 = claim_element(section3_nodes, "P", { class: true }, false);
			var p13_nodes = children(p13);

			t91 = claim_text(p13_nodes, "In order to enable a particular plugin, you need to insert the plugin script (if required) and map a name with its instance in the ");

			code16 = claim_element(p13_nodes, "CODE", {}, false);
			var code16_nodes = children(code16);

			t92 = claim_text(code16_nodes, "plugins");
			code16_nodes.forEach(detach);
			t93 = claim_text(p13_nodes, " option:");
			p13_nodes.forEach(detach);
			t94 = claim_text(section3_nodes, "\n");
			samplecode2.$$.fragment.l(section3_nodes);
			t95 = claim_text(section3_nodes, "\n        ");

			p14 = claim_element(section3_nodes, "P", { class: true }, false);
			var p14_nodes = children(p14);

			t96 = claim_text(p14_nodes, "We are going to enable some plugins to make the validations happen:");
			p14_nodes.forEach(detach);
			t97 = claim_text(section3_nodes, "\n\n        ");
			cards0.$$.fragment.l(section3_nodes);
			t98 = claim_text(section3_nodes, "\n        \n        ");

			p15 = claim_element(section3_nodes, "P", { class: true }, false);
			var p15_nodes = children(p15);

			t99 = claim_text(p15_nodes, "Our demo page now looks like:");
			p15_nodes.forEach(detach);
			t100 = claim_text(section3_nodes, "\n");
			samplecode3.$$.fragment.l(section3_nodes);
			t101 = claim_text(section3_nodes, "\n        ");

			p16 = claim_element(section3_nodes, "P", { class: true }, false);
			var p16_nodes = children(p16);

			t102 = claim_text(p16_nodes, "Finally, you can try it in the following form to see how the validation works. Either clicking the ");

			span2 = claim_element(p16_nodes, "SPAN", { class: true }, false);
			var span2_nodes = children(span2);

			t103 = claim_text(span2_nodes, "Submit");
			span2_nodes.forEach(detach);
			t104 = claim_text(p16_nodes, " button or filling in the fields to see it in action.");
			p16_nodes.forEach(detach);
			t105 = claim_text(section3_nodes, "\n        ");
			demo1.$$.fragment.l(section3_nodes);
			section3_nodes.forEach(detach);
			t106 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			heading4.$$.fragment.l(section4_nodes);
			t107 = claim_text(section4_nodes, "\n\n        ");

			p17 = claim_element(section4_nodes, "P", { class: true }, false);
			var p17_nodes = children(p17);

			t108 = claim_text(p17_nodes, "In the previous section, you learn how to use FormValidation with a native form. Nowadays, it's very common that you rely on a CSS framework to speed up the development. FormValidation brings support for a lot of popular CSS frameworks.\n            Each of them is supported by specific plugin which helps you minimize the integration parts such as automatically enabling the ");

			a4 = claim_element(p17_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t109 = claim_text(a4_nodes, "Message");
			a4_nodes.forEach(detach);
			t110 = claim_text(p17_nodes, " plugin, displaying the error messages at desired area instead of putting them at the bottom of form, etc.");
			p17_nodes.forEach(detach);
			t111 = claim_text(section4_nodes, "\n        ");

			p18 = claim_element(section4_nodes, "P", { class: true }, false);
			var p18_nodes = children(p18);

			t112 = claim_text(p18_nodes, "The following sample code is a starter page for using the ");

			a5 = claim_element(p18_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t113 = claim_text(a5_nodes, "Bootstrap");
			a5_nodes.forEach(detach);
			t114 = claim_text(p18_nodes, " plugin to validate a form made in the ");

			a6 = claim_element(p18_nodes, "A", { href: true, class: true }, false);
			var a6_nodes = children(a6);

			t115 = claim_text(a6_nodes, "Bootstrap 4");
			a6_nodes.forEach(detach);
			t116 = claim_text(p18_nodes, " framework:");
			p18_nodes.forEach(detach);
			t117 = claim_text(section4_nodes, "\n");
			samplecode4.$$.fragment.l(section4_nodes);
			t118 = claim_text(section4_nodes, " \n        ");
			tip3.$$.fragment.l(section4_nodes);
			t119 = claim_text(section4_nodes, "\n        ");

			p19 = claim_element(section4_nodes, "P", { class: true }, false);
			var p19_nodes = children(p19);

			t120 = claim_text(p19_nodes, "You can see the sample code demonstrating for each plugin in the following example:");
			p19_nodes.forEach(detach);
			t121 = claim_text(section4_nodes, "\n        ");
			demo2.$$.fragment.l(section4_nodes);
			t122 = claim_text(section4_nodes, "\n        \n        ");

			p20 = claim_element(section4_nodes, "P", { class: true }, false);
			var p20_nodes = children(p20);

			t123 = claim_text(p20_nodes, "Refer to each plugin below if you want to get supports for particular CSS framework:");
			p20_nodes.forEach(detach);
			t124 = claim_text(section4_nodes, "\n\n        ");
			cards1.$$.fragment.l(section4_nodes);
			section4_nodes.forEach(detach);
			t125 = claim_text(nodes, "\n\n    ");

			section5 = claim_element(nodes, "SECTION", { class: true }, false);
			var section5_nodes = children(section5);

			div = claim_element(section5_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t126 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section5_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 87);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 130);
			add_location(code0, file, 10, 53, 330);
			add_location(code1, file, 10, 79, 356);
			add_location(code2, file, 10, 183, 460);
			p0.className = "lh-copy";
			add_location(p0, file, 10, 8, 285);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 190);
			add_location(code3, file, 15, 73, 672);
			add_location(code4, file, 15, 112, 711);
			p1.className = "lh-copy";
			add_location(p1, file, 15, 8, 607);
			a0.href = "https://github.com/paulmillr/es6-shim";
			a0.className = "blue dim link";
			add_location(a0, file, 29, 99, 1250);
			p2.className = "lh-copy";
			add_location(p2, file, 29, 8, 1159);
			add_location(code5, file, 30, 65, 1476);
			add_location(code6, file, 30, 167, 1578);
			p3.className = "lh-copy";
			add_location(p3, file, 30, 8, 1419);
			p4.className = "lh-copy";
			add_location(p4, file, 31, 8, 1665);
			add_location(code7, file, 33, 43, 1801);
			add_location(code8, file, 33, 69, 1827);
			add_location(li0, file, 33, 12, 1770);
			add_location(code9, file, 34, 61, 1920);
			add_location(li1, file, 34, 12, 1871);
			ul0.className = "ma0 pl3 lh-copy";
			add_location(ul0, file, 32, 8, 1729);
			section1.className = "mv5";
			add_location(section1, file, 13, 4, 521);
			add_location(code10, file, 41, 112, 2197);
			p5.className = "lh-copy";
			add_location(p5, file, 41, 8, 2093);
			add_location(code11, file, 105, 43, 4404);
			p6.className = "lh-copy";
			add_location(p6, file, 105, 8, 4369);
			add_location(code12, file, 107, 103, 4607);
			li2.className = "lh-copy";
			add_location(li2, file, 107, 12, 4516);
			add_location(code13, file, 108, 117, 4775);
			add_location(code14, file, 109, 53, 4902);
			li3.className = "lh-copy";
			add_location(li3, file, 108, 12, 4670);
			ul1.className = "ma0 pl3";
			add_location(ul1, file, 106, 8, 4483);
			add_location(code15, file, 114, 73, 5554);
			p7.className = "lh-copy";
			add_location(p7, file, 114, 8, 5489);
			a1.href = "/guide/validators";
			a1.className = "blue dim link";
			add_location(a1, file, 116, 122, 5938);
			p8.className = "lh-copy";
			add_location(p8, file, 116, 8, 5824);
			p9.className = "lh-copy";
			add_location(p9, file, 117, 8, 6020);
			span0.className = "b";
			add_location(span0, file, 119, 27, 6206);
			span1.className = "i";
			add_location(span1, file, 119, 105, 6284);
			p10.className = "lh-copy";
			add_location(p10, file, 119, 8, 6187);
			p11.className = "lh-copy";
			add_location(p11, file, 120, 8, 6408);
			section2.className = "mv5";
			add_location(section2, file, 38, 4, 1989);
			a2.href = "/guide/api";
			a2.className = "blue dim link";
			add_location(a2, file, 126, 142, 6699);
			a3.href = "/guide/plugins";
			a3.className = "blue dim link";
			add_location(a3, file, 126, 210, 6767);
			p12.className = "lh-copy";
			add_location(p12, file, 126, 8, 6565);
			add_location(code16, file, 128, 158, 7081);
			p13.className = "lh-copy";
			add_location(p13, file, 128, 8, 6931);
			p14.className = "lh-copy";
			add_location(p14, file, 169, 8, 8370);
			p15.className = "lh-copy";
			add_location(p15, file, 178, 8, 9081);
			span2.className = "i";
			add_location(span2, file, 218, 126, 10523);
			p16.className = "lh-copy";
			add_location(p16, file, 218, 8, 10405);
			section3.className = "mv5";
			add_location(section3, file, 123, 4, 6489);
			a4.href = "/guide/plugins/message";
			a4.className = "blue dim link";
			add_location(a4, file, 226, 139, 11214);
			p17.className = "lh-copy";
			add_location(p17, file, 225, 8, 10819);
			a5.href = "/guide/plugins/bootstrap";
			a5.className = "blue dim link";
			add_location(a5, file, 228, 85, 11485);
			a6.href = "https://getbootstrap.com";
			a6.className = "blue dim link";
			add_location(a6, file, 228, 194, 11594);
			p18.className = "lh-copy";
			add_location(p18, file, 228, 8, 11408);
			p19.className = "lh-copy";
			add_location(p19, file, 281, 8, 13820);
			p20.className = "lh-copy";
			add_location(p20, file, 284, 8, 14222);
			section4.className = "mv5";
			add_location(section4, file, 222, 4, 10724);
			div.className = "flex";
			add_location(div, file, 294, 8, 14726);
			section5.className = "mv5";
			add_location(section5, file, 293, 4, 14696);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, p0);
			append(p0, t5);
			append(p0, code0);
			append(code0, t6);
			append(p0, t7);
			append(p0, code1);
			append(code1, t8);
			append(p0, t9);
			append(p0, code2);
			append(code2, t10);
			append(p0, t11);
			insert(target, t12, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t13);
			append(section1, p1);
			append(p1, t14);
			append(p1, code3);
			append(code3, t15);
			append(p1, t16);
			append(p1, code4);
			append(code4, t17);
			append(p1, t18);
			append(section1, t19);
			mount_component(samplecode0, section1, null);
			append(section1, t20);
			append(section1, p2);
			append(p2, t21);
			append(p2, a0);
			append(a0, t22);
			append(p2, t23);
			append(section1, t24);
			append(section1, p3);
			append(p3, t25);
			append(p3, code5);
			append(code5, t26);
			append(p3, t27);
			append(p3, code6);
			append(code6, t28);
			append(p3, t29);
			append(section1, t30);
			append(section1, p4);
			append(p4, t31);
			append(section1, t32);
			append(section1, ul0);
			append(ul0, li0);
			append(li0, t33);
			append(li0, code7);
			append(code7, t34);
			append(li0, t35);
			append(li0, code8);
			append(code8, t36);
			append(li0, t37);
			append(ul0, t38);
			append(ul0, li1);
			append(li1, t39);
			append(li1, code9);
			append(code9, t40);
			append(li1, t41);
			insert(target, t42, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t43);
			append(section2, p5);
			append(p5, t44);
			append(p5, code10);
			append(code10, t45);
			append(p5, t46);
			append(section2, t47);
			mount_component(samplecode1, section2, null);
			append(section2, t48);
			append(section2, p6);
			append(p6, t49);
			append(p6, code11);
			append(code11, t50);
			append(p6, t51);
			append(section2, t52);
			append(section2, ul1);
			append(ul1, li2);
			append(li2, t53);
			append(li2, code12);
			append(code12, t54);
			append(li2, t55);
			append(ul1, t56);
			append(ul1, li3);
			append(li3, t57);
			append(li3, code13);
			append(code13, t58);
			append(li3, t59);
			append(li3, code14);
			append(code14, t60);
			append(li3, t61);
			append(section2, t62);
			mount_component(tip0, section2, null);
			append(section2, t63);
			mount_component(tip1, section2, null);
			append(section2, t64);
			append(section2, p7);
			append(p7, t65);
			append(p7, code15);
			append(code15, t66);
			append(p7, t67);
			append(section2, t68);
			mount_component(tip2, section2, null);
			append(section2, t69);
			append(section2, p8);
			append(p8, t70);
			append(p8, a1);
			append(a1, t71);
			append(p8, t72);
			append(section2, t73);
			append(section2, p9);
			append(p9, t74);
			append(section2, t75);
			mount_component(demo0, section2, null);
			append(section2, t76);
			append(section2, p10);
			append(p10, span0);
			append(span0, t77);
			append(p10, t78);
			append(p10, span1);
			append(span1, t79);
			append(p10, t80);
			append(section2, t81);
			append(section2, p11);
			append(p11, t82);
			insert(target, t83, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t84);
			append(section3, p12);
			append(p12, t85);
			append(p12, a2);
			append(a2, t86);
			append(p12, t87);
			append(p12, a3);
			append(a3, t88);
			append(p12, t89);
			append(section3, t90);
			append(section3, p13);
			append(p13, t91);
			append(p13, code16);
			append(code16, t92);
			append(p13, t93);
			append(section3, t94);
			mount_component(samplecode2, section3, null);
			append(section3, t95);
			append(section3, p14);
			append(p14, t96);
			append(section3, t97);
			mount_component(cards0, section3, null);
			append(section3, t98);
			append(section3, p15);
			append(p15, t99);
			append(section3, t100);
			mount_component(samplecode3, section3, null);
			append(section3, t101);
			append(section3, p16);
			append(p16, t102);
			append(p16, span2);
			append(span2, t103);
			append(p16, t104);
			append(section3, t105);
			mount_component(demo1, section3, null);
			insert(target, t106, anchor);
			insert(target, section4, anchor);
			mount_component(heading4, section4, null);
			append(section4, t107);
			append(section4, p17);
			append(p17, t108);
			append(p17, a4);
			append(a4, t109);
			append(p17, t110);
			append(section4, t111);
			append(section4, p18);
			append(p18, t112);
			append(p18, a5);
			append(a5, t113);
			append(p18, t114);
			append(p18, a6);
			append(a6, t115);
			append(p18, t116);
			append(section4, t117);
			mount_component(samplecode4, section4, null);
			append(section4, t118);
			mount_component(tip3, section4, null);
			append(section4, t119);
			append(section4, p19);
			append(p19, t120);
			append(section4, t121);
			mount_component(demo2, section4, null);
			append(section4, t122);
			append(section4, p20);
			append(p20, t123);
			append(section4, t124);
			mount_component(cards1, section4, null);
			insert(target, t125, anchor);
			insert(target, section5, anchor);
			append(section5, div);
			mount_component(prevbutton, div, null);
			append(div, t126);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var tip0_changes = {};
			if (changed.$$scope) tip0_changes.$$scope = { changed, ctx };
			tip0.$set(tip0_changes);

			var tip1_changes = {};
			if (changed.$$scope) tip1_changes.$$scope = { changed, ctx };
			tip1.$set(tip1_changes);

			var tip2_changes = {};
			if (changed.$$scope) tip2_changes.$$scope = { changed, ctx };
			tip2.$set(tip2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var cards0_changes = {};
			if (changed.$$scope) cards0_changes.$$scope = { changed, ctx };
			cards0.$set(cards0_changes);

			var heading4_changes = {};
			if (changed.$$scope) heading4_changes.$$scope = { changed, ctx };
			heading4.$set(heading4_changes);

			var tip3_changes = {};
			if (changed.$$scope) tip3_changes.$$scope = { changed, ctx };
			tip3.$set(tip3_changes);

			var cards1_changes = {};
			if (changed.$$scope) cards1_changes.$$scope = { changed, ctx };
			cards1.$set(cards1_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			tip0.$$.fragment.i(local);

			tip1.$$.fragment.i(local);

			tip2.$$.fragment.i(local);

			demo0.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			cards0.$$.fragment.i(local);

			samplecode3.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			heading4.$$.fragment.i(local);

			samplecode4.$$.fragment.i(local);

			tip3.$$.fragment.i(local);

			demo2.$$.fragment.i(local);

			cards1.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			tip0.$$.fragment.o(local);
			tip1.$$.fragment.o(local);
			tip2.$$.fragment.o(local);
			demo0.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			cards0.$$.fragment.o(local);
			samplecode3.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			heading4.$$.fragment.o(local);
			samplecode4.$$.fragment.o(local);
			tip3.$$.fragment.o(local);
			demo2.$$.fragment.o(local);
			cards1.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			if (detaching) {
				detach(t12);
				detach(section1);
			}

			heading1.$destroy();

			samplecode0.$destroy();

			if (detaching) {
				detach(t42);
				detach(section2);
			}

			heading2.$destroy();

			samplecode1.$destroy();

			tip0.$destroy();

			tip1.$destroy();

			tip2.$destroy();

			demo0.$destroy();

			if (detaching) {
				detach(t83);
				detach(section3);
			}

			heading3.$destroy();

			samplecode2.$destroy();

			cards0.$destroy();

			samplecode3.$destroy();

			demo1.$destroy();

			if (detaching) {
				detach(t106);
				detach(section4);
			}

			heading4.$destroy();

			samplecode4.$destroy();

			tip3.$destroy();

			demo2.$destroy();

			cards1.$destroy();

			if (detaching) {
				detach(t125);
				detach(section5);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Usage";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';

/* src/routes/guide/plugins/sequence/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/plugins/sequence/index.svelte";

// (10:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Usage");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Usage");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (92:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (121:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (129:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changelog");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changelog");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (137:12) <PrevButton target="/guide/plugins/semantic">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Semantic plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Semantic plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (138:12) <NextButton target="/guide/plugins/shoelace">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Shoelace plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Shoelace plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, p0, t5, t6, t7, p1, t8, a, t9, t10, t11, p2, t12, t13, p3, t14, t15, p4, t16, t17, t18, p5, t19, code0, t20, t21, t22, section1, t23, table, tr0, th0, t24, t25, th1, t26, t27, th2, t28, t29, tr1, td0, code1, t30, t31, td1, t32, t33, td2, t34, li0, code2, t35, t36, t37, li1, code3, t38, t39, li2, t40, t41, section2, t42, p6, t43, t44, p7, t45, t46, p8, t47, t48, t49, section3, t50, ul, li3, t51, t52, section4, div, t53, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
FormValidation.formValidation(document.getElementById('signupForm'), {
    fields: {
        username: {
            validators: {
                notEmpty: {
                    message: 'The username is required'
                },
                callback: {
                    message: 'This username is not allowed',
                    callback: function(input) {
                        // Do not accept the username starting with "admin"
                        return !input.value.startsWith('admin');
                    }
                },
                stringLength: {
                    min: 6,
                    max: 30,
                    message: 'The username must be more than 6 and less than 30 characters long'
                },
                regexp: {
                    regexp: /^[a-zA-Z0-9_]+$/,
                    message: 'The username can only consist of alphabetical, number and underscore'
                },
                remote: {
                    message: 'The username is already taken',
                    method: 'GET',
                    url: '/path/to/your/back-end/',
                },
            },
        },
    },
    plugins: {
        ...
    },
});
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="demoForm" method="POST">
        ...
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>    
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                sequence: new FormValidation.plugins.Sequence({
                    enabled: true,
                }),
                ...
            },
        }
    );
});
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "javascript", code: `
enabled: {
    username: true,
    // All the validators for password field 
    // will be performed as usual
    password: false,
},
` },
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/plugins/sequence/basic",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/plugins/semantic",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/plugins/shoelace",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Sequence plugin");
			t1 = space();
			h2 = element("h2");
			t2 = text("Stop performing remaining validators if there is a validator that the field does not pass");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			p0 = element("p");
			t5 = text("By default, when a field is being validated, all validators for a field will be executed. Let's take a look at a simple signing up form that its username field has to pass all of the following validator rules:");
			t6 = space();
			samplecode0.$$.fragment.c();
			t7 = space();
			p1 = element("p");
			t8 = text("After each key stroke, all validators will perform their jobs. Some of them might be expensive tasks such as checking the validity in the server side via the ");
			a = element("a");
			t9 = text("remote");
			t10 = text(" validator.");
			t11 = space();
			p2 = element("p");
			t12 = text("It is better if the expensive validator is performed at the end when the field passes all other remaining validators. It reduces the number of server side requests (for example, it will not hit the database server to check if an username is taken).\n            Also, our users don't have to wait for these validators to run and return the results. It brings a better user experience.");
			t13 = space();
			p3 = element("p");
			t14 = text("The Sequence plugin is handy for this requirement. It will stop performing a given validator if the field does not pass the previous validator.");
			t15 = space();
			p4 = element("p");
			t16 = text("The following piece of code is the starting point to use the Sequence plugin:");
			t17 = space();
			samplecode1.$$.fragment.c();
			t18 = space();
			p5 = element("p");
			t19 = text("The sample code above assumes that the FormValidation files are placed inside the ");
			code0 = element("code");
			t20 = text("vendors");
			t21 = text(" directory. You might need to change the path depending on where you place them on the server.");
			t22 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t23 = space();
			table = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t24 = text("Option");
			t25 = space();
			th1 = element("th");
			t26 = text("Type");
			t27 = space();
			th2 = element("th");
			t28 = text("Description");
			t29 = space();
			tr1 = element("tr");
			td0 = element("td");
			code1 = element("code");
			t30 = text("enabled");
			t31 = space();
			td1 = element("td");
			t32 = text("Boolean or Object");
			t33 = space();
			td2 = element("td");
			t34 = text("It can be\n                    ");
			li0 = element("li");
			code2 = element("code");
			t35 = text("true");
			t36 = text(" (default value)");
			t37 = space();
			li1 = element("li");
			code3 = element("code");
			t38 = text("false");
			t39 = space();
			li2 = element("li");
			t40 = text("or an object indicating a given field will use the behaviour. For example:\n");
			samplecode2.$$.fragment.c();
			t41 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t42 = space();
			p6 = element("p");
			t43 = text("In the following form, all validators are performed in sequential order. A validator will not be executed if the field doesn't pass the previous validator.");
			t44 = space();
			p7 = element("p");
			t45 = text("By putting the remote validator at the end, we only send a request to server to check if the username is taken if it passes all other validators.");
			t46 = space();
			p8 = element("p");
			t47 = text("For testing purpose, the demo always answers that the username is already taken no matter what you input.");
			t48 = space();
			demo.$$.fragment.c();
			t49 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t50 = space();
			ul = element("ul");
			li3 = element("li");
			t51 = text("v1.1.0: First release. It means that the Sequence plugin requires FormValidation v1.1.0 or newer.");
			t52 = space();
			section4 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t53 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Sequence plugin");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Stop performing remaining validators if there is a validator that the field does not pass");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t5 = claim_text(p0_nodes, "By default, when a field is being validated, all validators for a field will be executed. Let's take a look at a simple signing up form that its username field has to pass all of the following validator rules:");
			p0_nodes.forEach(detach);
			t6 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t7 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t8 = claim_text(p1_nodes, "After each key stroke, all validators will perform their jobs. Some of them might be expensive tasks such as checking the validity in the server side via the ");

			a = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t9 = claim_text(a_nodes, "remote");
			a_nodes.forEach(detach);
			t10 = claim_text(p1_nodes, " validator.");
			p1_nodes.forEach(detach);
			t11 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t12 = claim_text(p2_nodes, "It is better if the expensive validator is performed at the end when the field passes all other remaining validators. It reduces the number of server side requests (for example, it will not hit the database server to check if an username is taken).\n            Also, our users don't have to wait for these validators to run and return the results. It brings a better user experience.");
			p2_nodes.forEach(detach);
			t13 = claim_text(section0_nodes, "\n        ");

			p3 = claim_element(section0_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t14 = claim_text(p3_nodes, "The Sequence plugin is handy for this requirement. It will stop performing a given validator if the field does not pass the previous validator.");
			p3_nodes.forEach(detach);
			t15 = claim_text(section0_nodes, "\n        ");

			p4 = claim_element(section0_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t16 = claim_text(p4_nodes, "The following piece of code is the starting point to use the Sequence plugin:");
			p4_nodes.forEach(detach);
			t17 = claim_text(section0_nodes, "\n");
			samplecode1.$$.fragment.l(section0_nodes);
			t18 = claim_text(section0_nodes, "\n        ");

			p5 = claim_element(section0_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t19 = claim_text(p5_nodes, "The sample code above assumes that the FormValidation files are placed inside the ");

			code0 = claim_element(p5_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t20 = claim_text(code0_nodes, "vendors");
			code0_nodes.forEach(detach);
			t21 = claim_text(p5_nodes, " directory. You might need to change the path depending on where you place them on the server.");
			p5_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t22 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t23 = claim_text(section1_nodes, "\n        ");

			table = claim_element(section1_nodes, "TABLE", { class: true }, false);
			var table_nodes = children(table);

			tr0 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t24 = claim_text(th0_nodes, "Option");
			th0_nodes.forEach(detach);
			t25 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t26 = claim_text(th1_nodes, "Type");
			th1_nodes.forEach(detach);
			t27 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t28 = claim_text(th2_nodes, "Description");
			th2_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t29 = claim_text(table_nodes, "\n            ");

			tr1 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code1 = claim_element(td0_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t30 = claim_text(code1_nodes, "enabled");
			code1_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t31 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			t32 = claim_text(td1_nodes, "Boolean or Object");
			td1_nodes.forEach(detach);
			t33 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t34 = claim_text(td2_nodes, "It can be\n                    ");

			li0 = claim_element(td2_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			code2 = claim_element(li0_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t35 = claim_text(code2_nodes, "true");
			code2_nodes.forEach(detach);
			t36 = claim_text(li0_nodes, " (default value)");
			li0_nodes.forEach(detach);
			t37 = claim_text(td2_nodes, "\n                    ");

			li1 = claim_element(td2_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			code3 = claim_element(li1_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t38 = claim_text(code3_nodes, "false");
			code3_nodes.forEach(detach);
			li1_nodes.forEach(detach);
			t39 = claim_text(td2_nodes, "\n                    ");

			li2 = claim_element(td2_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t40 = claim_text(li2_nodes, "or an object indicating a given field will use the behaviour. For example:\n");
			samplecode2.$$.fragment.l(li2_nodes);
			li2_nodes.forEach(detach);
			td2_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			table_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t41 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t42 = claim_text(section2_nodes, "\n        ");

			p6 = claim_element(section2_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t43 = claim_text(p6_nodes, "In the following form, all validators are performed in sequential order. A validator will not be executed if the field doesn't pass the previous validator.");
			p6_nodes.forEach(detach);
			t44 = claim_text(section2_nodes, "\n        ");

			p7 = claim_element(section2_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t45 = claim_text(p7_nodes, "By putting the remote validator at the end, we only send a request to server to check if the username is taken if it passes all other validators.");
			p7_nodes.forEach(detach);
			t46 = claim_text(section2_nodes, "\n        ");

			p8 = claim_element(section2_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t47 = claim_text(p8_nodes, "For testing purpose, the demo always answers that the username is already taken no matter what you input.");
			p8_nodes.forEach(detach);
			t48 = claim_text(section2_nodes, "\n        ");
			demo.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t49 = claim_text(nodes, "\n    \n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t50 = claim_text(section3_nodes, "\n        ");

			ul = claim_element(section3_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li3 = claim_element(ul_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t51 = claim_text(li3_nodes, "v1.1.0: First release. It means that the Sequence plugin requires FormValidation v1.1.0 or newer.");
			li3_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			t52 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			div = claim_element(section4_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t53 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section4_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 97);
			h2.className = "f4 fw4 tc lh-copy";
			add_location(h2, file, 6, 4, 150);
			p0.className = "lh-copy";
			add_location(p0, file, 10, 8, 343);
			a.href = "/guide/validators/remote";
			a.className = "blue dim link";
			add_location(a, file, 48, 185, 2020);
			p1.className = "lh-copy";
			add_location(p1, file, 48, 8, 1843);
			p2.className = "lh-copy";
			add_location(p2, file, 49, 8, 2111);
			p3.className = "lh-copy";
			add_location(p3, file, 51, 8, 2526);
			p4.className = "lh-copy";
			add_location(p4, file, 52, 8, 2701);
			add_location(code0, file, 87, 109, 3779);
			p5.className = "lh-copy";
			add_location(p5, file, 87, 8, 3678);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 280);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 94, 16, 4102);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 95, 16, 4164);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 96, 16, 4224);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 93, 12, 4053);
			add_location(code1, file, 99, 36, 4374);
			td0.className = "pv2 ph3";
			add_location(td0, file, 99, 16, 4354);
			td1.className = "pv2 ph3";
			add_location(td1, file, 100, 16, 4416);
			add_location(code2, file, 102, 24, 4537);
			add_location(li0, file, 102, 20, 4533);
			add_location(code3, file, 103, 24, 4600);
			add_location(li1, file, 103, 20, 4596);
			add_location(li2, file, 104, 20, 4644);
			td2.className = "pv2 ph3 lh-copy";
			add_location(td2, file, 101, 16, 4475);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 98, 12, 4305);
			table.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table, file, 92, 8, 3983);
			section1.className = "mv5";
			add_location(section1, file, 90, 4, 3918);
			p6.className = "lh-copy";
			add_location(p6, file, 121, 8, 5076);
			p7.className = "lh-copy";
			add_location(p7, file, 122, 8, 5263);
			p8.className = "lh-copy";
			add_location(p8, file, 123, 8, 5440);
			section2.className = "mv5";
			add_location(section2, file, 119, 4, 5005);
			add_location(li3, file, 130, 12, 5787);
			ul.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul, file, 129, 8, 5742);
			section3.className = "mv5";
			add_location(section3, file, 127, 4, 5675);
			div.className = "flex";
			add_location(div, file, 135, 8, 5958);
			section4.className = "mv5";
			add_location(section4, file, 134, 4, 5928);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, p0);
			append(p0, t5);
			append(section0, t6);
			mount_component(samplecode0, section0, null);
			append(section0, t7);
			append(section0, p1);
			append(p1, t8);
			append(p1, a);
			append(a, t9);
			append(p1, t10);
			append(section0, t11);
			append(section0, p2);
			append(p2, t12);
			append(section0, t13);
			append(section0, p3);
			append(p3, t14);
			append(section0, t15);
			append(section0, p4);
			append(p4, t16);
			append(section0, t17);
			mount_component(samplecode1, section0, null);
			append(section0, t18);
			append(section0, p5);
			append(p5, t19);
			append(p5, code0);
			append(code0, t20);
			append(p5, t21);
			insert(target, t22, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t23);
			append(section1, table);
			append(table, tr0);
			append(tr0, th0);
			append(th0, t24);
			append(tr0, t25);
			append(tr0, th1);
			append(th1, t26);
			append(tr0, t27);
			append(tr0, th2);
			append(th2, t28);
			append(table, t29);
			append(table, tr1);
			append(tr1, td0);
			append(td0, code1);
			append(code1, t30);
			append(tr1, t31);
			append(tr1, td1);
			append(td1, t32);
			append(tr1, t33);
			append(tr1, td2);
			append(td2, t34);
			append(td2, li0);
			append(li0, code2);
			append(code2, t35);
			append(li0, t36);
			append(td2, t37);
			append(td2, li1);
			append(li1, code3);
			append(code3, t38);
			append(td2, t39);
			append(td2, li2);
			append(li2, t40);
			mount_component(samplecode2, li2, null);
			insert(target, t41, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t42);
			append(section2, p6);
			append(p6, t43);
			append(section2, t44);
			append(section2, p7);
			append(p7, t45);
			append(section2, t46);
			append(section2, p8);
			append(p8, t47);
			append(section2, t48);
			mount_component(demo, section2, null);
			insert(target, t49, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t50);
			append(section3, ul);
			append(ul, li3);
			append(li3, t51);
			insert(target, t52, anchor);
			insert(target, section4, anchor);
			append(section4, div);
			mount_component(prevbutton, div, null);
			append(div, t53);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t22);
				detach(section1);
			}

			heading1.$destroy();

			samplecode2.$destroy();

			if (detaching) {
				detach(t41);
				detach(section2);
			}

			heading2.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t49);
				detach(section3);
			}

			heading3.$destroy();

			if (detaching) {
				detach(t52);
				detach(section4);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Sequence plugin";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

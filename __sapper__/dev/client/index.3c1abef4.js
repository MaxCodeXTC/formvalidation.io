import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';

/* src/routes/guide/getting-started/special-field-name/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/getting-started/special-field-name/index.svelte";

// (57:12) <PrevButton target="/guide/getting-started/localization">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Localization");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Localization");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (58:12) <NextButton target="/guide/getting-started/field-selector">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Field selector");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Field selector");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, p0, t4, a0, t5, t6, a1, t7, t8, a2, t9, t10, a3, t11, t12, code0, t13, t14, t15, p1, t16, code1, t17, t18, code2, t19, t20, code3, t21, t22, code4, t23, t24, code5, t25, t26, t27, p2, t28, t29, t30, p3, t31, t32, t33, p4, t34, t35, t36, section1, div, t37, current;

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<input type="text" name="user[firstName]" />
<input type="text" name="user[lastName]" />
<input type="text" name="user[emails][]" />

<!-- or -->
<input type="text" name="user.lastName" />
<input type="text" name="user.firstName" />
<input type="text" name="user.emails[]" />
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
FormValidation.formValidation(
    form,
    {
        fields: {
            'user[firstName]': {
                validators: {
                    ...
                }
            },
            'user[lastName]': {
                validators: {
                    ...
                }
            },
            'user[emails][]': {
                validators: {
                    ...
                }
            },
        },
    }
);
` },
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/getting-started/special-field-name/basic",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/getting-started/localization",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/getting-started/field-selector",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Special field name");
			t1 = space();
			h2 = element("h2");
			t2 = text("Validating field with special name");
			t3 = space();
			section0 = element("section");
			p0 = element("p");
			t4 = text("When using FormValidation with some server-side frameworks such as ");
			a0 = element("a");
			t5 = text("CakePHP");
			t6 = text(",\n            ");
			a1 = element("a");
			t7 = text("Symfony");
			t8 = text(", ");
			a2 = element("a");
			t9 = text("Rails");
			t10 = text(",\n            ");
			a3 = element("a");
			t11 = text("Spring");
			t12 = text(", etc, there is a relationship between\n            the model name and the ");
			code0 = element("code");
			t13 = text("name");
			t14 = text(" attribute of input.");
			t15 = space();
			p1 = element("p");
			t16 = text("For example, assuming that an user is modeled by ");
			code1 = element("code");
			t17 = text("User");
			t18 = text(" class with ");
			code2 = element("code");
			t19 = text("firstName");
			t20 = text(", ");
			code3 = element("code");
			t21 = text("lastName");
			t22 = text(", ");
			code4 = element("code");
			t23 = text("username");
			t24 = text(", ");
			code5 = element("code");
			t25 = text("emails[]");
			t26 = text(" properties.");
			t27 = space();
			p2 = element("p");
			t28 = text("Following the naming convention defined by these frameworks, the inputs in the form of adding new user might have the name attribute such as:");
			t29 = space();
			samplecode0.$$.fragment.c();
			t30 = space();
			p3 = element("p");
			t31 = text("When using FormValidation to validate these kind of fields, you must wrap the field name between single or double quote as following:");
			t32 = space();
			samplecode1.$$.fragment.c();
			t33 = space();
			p4 = element("p");
			t34 = text("Below is a sample example:");
			t35 = space();
			demo.$$.fragment.c();
			t36 = space();
			section1 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t37 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Special field name");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Validating field with special name");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t4 = claim_text(p0_nodes, "When using FormValidation with some server-side frameworks such as ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t5 = claim_text(a0_nodes, "CakePHP");
			a0_nodes.forEach(detach);
			t6 = claim_text(p0_nodes, ",\n            ");

			a1 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t7 = claim_text(a1_nodes, "Symfony");
			a1_nodes.forEach(detach);
			t8 = claim_text(p0_nodes, ", ");

			a2 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t9 = claim_text(a2_nodes, "Rails");
			a2_nodes.forEach(detach);
			t10 = claim_text(p0_nodes, ",\n            ");

			a3 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t11 = claim_text(a3_nodes, "Spring");
			a3_nodes.forEach(detach);
			t12 = claim_text(p0_nodes, ", etc, there is a relationship between\n            the model name and the ");

			code0 = claim_element(p0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t13 = claim_text(code0_nodes, "name");
			code0_nodes.forEach(detach);
			t14 = claim_text(p0_nodes, " attribute of input.");
			p0_nodes.forEach(detach);
			t15 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t16 = claim_text(p1_nodes, "For example, assuming that an user is modeled by ");

			code1 = claim_element(p1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t17 = claim_text(code1_nodes, "User");
			code1_nodes.forEach(detach);
			t18 = claim_text(p1_nodes, " class with ");

			code2 = claim_element(p1_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t19 = claim_text(code2_nodes, "firstName");
			code2_nodes.forEach(detach);
			t20 = claim_text(p1_nodes, ", ");

			code3 = claim_element(p1_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t21 = claim_text(code3_nodes, "lastName");
			code3_nodes.forEach(detach);
			t22 = claim_text(p1_nodes, ", ");

			code4 = claim_element(p1_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t23 = claim_text(code4_nodes, "username");
			code4_nodes.forEach(detach);
			t24 = claim_text(p1_nodes, ", ");

			code5 = claim_element(p1_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t25 = claim_text(code5_nodes, "emails[]");
			code5_nodes.forEach(detach);
			t26 = claim_text(p1_nodes, " properties.");
			p1_nodes.forEach(detach);
			t27 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t28 = claim_text(p2_nodes, "Following the naming convention defined by these frameworks, the inputs in the form of adding new user might have the name attribute such as:");
			p2_nodes.forEach(detach);
			t29 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t30 = claim_text(section0_nodes, "  \n        ");

			p3 = claim_element(section0_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t31 = claim_text(p3_nodes, "When using FormValidation to validate these kind of fields, you must wrap the field name between single or double quote as following:");
			p3_nodes.forEach(detach);
			t32 = claim_text(section0_nodes, "\n");
			samplecode1.$$.fragment.l(section0_nodes);
			t33 = claim_text(section0_nodes, "\n        ");

			p4 = claim_element(section0_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t34 = claim_text(p4_nodes, "Below is a sample example:");
			p4_nodes.forEach(detach);
			t35 = claim_text(section0_nodes, "\n        ");
			demo.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t36 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			div = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t37 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 100);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 156);
			a0.href = "http://cakephp.org";
			a0.className = "blue dim link";
			add_location(a0, file, 9, 94, 339);
			a1.href = "http://symfony.com";
			a1.className = "blue dim link";
			add_location(a1, file, 10, 12, 415);
			a2.href = "http://rubyonrails.org";
			a2.className = "blue dim link";
			add_location(a2, file, 10, 76, 479);
			a3.href = "http://projects.spring.io/spring-framework";
			a3.className = "blue dim link";
			add_location(a3, file, 11, 12, 557);
			add_location(code0, file, 12, 35, 716);
			p0.className = "lh-copy";
			add_location(p0, file, 9, 8, 253);
			add_location(code1, file, 13, 76, 834);
			add_location(code2, file, 13, 105, 863);
			add_location(code3, file, 13, 129, 887);
			add_location(code4, file, 13, 152, 910);
			add_location(code5, file, 13, 175, 933);
			p1.className = "lh-copy";
			add_location(p1, file, 13, 8, 766);
			p2.className = "lh-copy";
			add_location(p2, file, 14, 8, 979);
			p3.className = "lh-copy";
			add_location(p3, file, 25, 8, 1468);
			p4.className = "lh-copy";
			add_location(p4, file, 50, 8, 2120);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 223);
			div.className = "flex";
			add_location(div, file, 55, 8, 2320);
			section1.className = "mv5";
			add_location(section1, file, 54, 4, 2290);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			append(section0, p0);
			append(p0, t4);
			append(p0, a0);
			append(a0, t5);
			append(p0, t6);
			append(p0, a1);
			append(a1, t7);
			append(p0, t8);
			append(p0, a2);
			append(a2, t9);
			append(p0, t10);
			append(p0, a3);
			append(a3, t11);
			append(p0, t12);
			append(p0, code0);
			append(code0, t13);
			append(p0, t14);
			append(section0, t15);
			append(section0, p1);
			append(p1, t16);
			append(p1, code1);
			append(code1, t17);
			append(p1, t18);
			append(p1, code2);
			append(code2, t19);
			append(p1, t20);
			append(p1, code3);
			append(code3, t21);
			append(p1, t22);
			append(p1, code4);
			append(code4, t23);
			append(p1, t24);
			append(p1, code5);
			append(code5, t25);
			append(p1, t26);
			append(section0, t27);
			append(section0, p2);
			append(p2, t28);
			append(section0, t29);
			mount_component(samplecode0, section0, null);
			append(section0, t30);
			append(section0, p3);
			append(p3, t31);
			append(section0, t32);
			mount_component(samplecode1, section0, null);
			append(section0, t33);
			append(section0, p4);
			append(p4, t34);
			append(section0, t35);
			mount_component(demo, section0, null);
			insert(target, t36, anchor);
			insert(target, section1, anchor);
			append(section1, div);
			mount_component(prevbutton, div, null);
			append(div, t37);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			samplecode0.$destroy();

			samplecode1.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t36);
				detach(section1);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Special field name";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

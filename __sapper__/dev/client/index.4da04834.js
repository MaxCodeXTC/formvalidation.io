import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';

/* src/routes/guide/validators/remote/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/validators/remote/index.svelte";

// (10:8) <Heading>
function create_default_slot_8(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (139:8) <Heading>
function create_default_slot_7(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (204:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Sending static data example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Sending static data example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (306:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Sending dynamic data example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Sending dynamic data example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (395:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Overriding name example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Overriding name example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (402:8) <Tip heading="Note">
function create_default_slot_3(ctx) {
	var t0, a, t1, t2;

	return {
		c: function create() {
			t0 = text("Remember to use the ");
			a = element("a");
			t1 = text("Declarative");
			t2 = text(" plugin to turn on the validator options with the equivalent HTML attributes");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "Remember to use the ");

			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t1 = claim_text(a_nodes, "Declarative");
			a_nodes.forEach(detach);
			t2 = claim_text(nodes, " plugin to turn on the validator options with the equivalent HTML attributes");
			this.h();
		},

		h: function hydrate() {
			a.href = "/guide/plugins/declarative";
			a.className = "blue dim link";
			add_location(a, file, 401, 48, 15804);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a, anchor);
			append(a, t1);
			insert(target, t2, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(a);
				detach(t2);
			}
		}
	};
}

// (464:12) <PrevButton target="/guide/validators/regexp">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("regexp validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "regexp validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (465:12) <NextButton target="/guide/validators/rtn">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("rtn validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "rtn validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, h30, t5, t6, p0, sup0, t7, t8, a, t9, t10, t11, table, tr0, th0, t12, t13, th1, t14, t15, th2, t16, t17, th3, t18, t19, tr1, td0, code0, t20, t21, td1, code1, t22, t23, td2, t24, t25, td3, t26, code2, t27, t28, code3, t29, t30, tr2, td4, code4, t31, t32, td5, code5, t33, t34, td6, t35, t36, td7, p1, t37, t38, p2, t39, t40, t41, p3, t42, code6, t43, t44, t45, tr3, td8, code7, t46, t47, td9, code8, t48, t49, td10, t50, t51, td11, t52, t53, tr4, td12, code9, t54, t55, td13, code10, t56, t57, td14, t58, t59, td15, t60, t61, tr5, td16, code11, t62, t63, td17, code12, t64, t65, td18, t66, t67, td19, t68, t69, tr6, td20, code13, t70, t71, td21, code14, t72, t73, td22, t74, t75, td23, t76, code15, t77, t78, code16, t79, t80, tr7, td24, code17, t81, sup1, t82, t83, td25, code18, t84, t85, td26, t86, t87, td27, p4, t88, t89, t90, tr8, td28, code19, t91, t92, td29, code20, t93, t94, td30, t95, t96, td31, t97, code21, t98, t99, t100, p5, t101, code22, t102, t103, code23, t104, t105, t106, p6, t107, code24, t108, t109, code25, t110, t111, t112, t113, h31, t114, t115, t116, section1, t117, p7, t118, t119, t120, p8, t121, code26, raw0_value = `{ "valid": true }`, t122, code27, raw1_value = `{ "valid": false }`, t123, t124, t125, section2, t126, p9, t127, code28, t128, t129, t130, t131, p10, t132, t133, t134, section3, t135, p11, t136, t137, t138, section4, t139, p12, t140, code29, t141, t142, code30, t143, t144, t145, h32, t146, t147, p13, t148, span0, t149, t150, span1, t151, t152, t153, p14, t154, code31, t155, t156, t157, t158, t159, h33, t160, t161, p15, t162, t163, p16, t164, code32, t165, t166, t167, t168, t169, t170, section5, div, t171, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_8] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
data: function() {
    ...
    // Return an object
    return {
        key: value,
        otherKey: otherValue,
    };
}
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
url: function() {
    ...

    return 'the URL';
}
` },
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "javascript", code: `
{
    "valid": true
}
// or
{
    "valid": false
}
` },
		$$inline: true
	});

	var samplecode3 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import remote from 'formvalidation/dist/es6/validators/remote';

const result = remote().validate({
    value: ...,
    options: {
        crossDomain: ...,
        data: ...,
        headers: ...,
        message: ...,
        name: ...,
        method: ...,
        url: ...,
        validKey: ...,
    },
});
/*
result is a Promise object which can be resolved by an object of
{
    valid: true or false,
    message: The error message,
    meta: The additional data returned by server
}
or can be rejected by an object of
{
    valid: false,
}
*/
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode4 = new SampleCode({
		props: { lang: "html", code: `
<form id="registrationForm">
    <div class="cf mb2">
        <div class="fl w-100">
            <div class="fl w-25 pa2">Username</div>
            <div class="fl w-50">
                <input type="text" name="username" class="input-reset ba b--black-20 pa2 mb2 db w-100" />
            </div>
        </div>
    </div>
</form>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('registrationForm'),
        {
            fields: {
                username: {
                    message: 'The username is not valid',
                    validators: {
                        // The validator will create an Ajax request
                        // sending { username: 'its value' } to the back-end
                        remote: {
                            message: 'The username is not available',
                            method: 'POST',
                            url: '/path/to/backend/',
                        }
                    }
                },
            },
            plugins: {
                trigger: new FormValidation.plugins.Trigger(),
                tachyons: new FormValidation.plugins.Tachyons(),
                submitButton: new FormValidation.plugins.SubmitButton(),
                icon: new FormValidation.plugins.Icon({
                    valid: 'fa fa-check',
                    invalid: 'fa fa-times',
                    validating: 'fa fa-refresh'
                }),
            },
        }
    );
});
</script-tag>
` },
		$$inline: true
	});

	var samplecode5 = new SampleCode({
		props: { lang: "php", code: `
&lt;?php
// Get the username from request
$username = $_POST['username'];

// Check its existence (for example, execute a query from the database) ...
$isAvailable = true; // or false

// Finally, return a JSON
echo json_encode(array(
    'valid' => $isAvailable,
));
` },
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode6 = new SampleCode({
		props: { lang: "html", code: `
<form id="signupForm">
    <div class="cf mb2">
        <div class="fl w-100">
            <div class="fl w-25 pa2">Username</div>
            <div class="fl w-50">
                <input type="text" name="username" class="input-reset ba b--black-20 pa2 mb2 db w-100" />
            </div>
        </div>
    </div>

    <div class="cf mb2">
        <div class="fl w-100">
            <div class="fl w-25 pa2">Email</div>
            <div class="fl w-50">
                <input type="text" name="email" class="input-reset ba b--black-20 pa2 mb2 db w-100" />
            </div>
        </div>
    </div>
</form>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('signupForm'),
        {
            fields: {
                username: {
                    message: 'The username is not valid',
                    validators: {
                        // Send { username: 'its value', type: 'username' } to the back-end
                        remote: {
                            data: {
                                type: 'username',
                            },
                            message: 'The username is not available',
                            method: 'POST',
                            url: '/path/to/backend/',
                        }
                    }
                },
                email: {
                    message: 'The email address is not valid',
                    validators: {
                        // Send { email: 'its value', type: 'email' } to the back-end
                        remote: {
                            data: {
                                type: 'email',
                            },
                            message: 'The email is not available',
                            method: 'POST',
                            url: '/path/to/backend/',
                        }
                    }
                }
            },
            plugins: {
                trigger: new FormValidation.plugins.Trigger(),
                tachyons: new FormValidation.plugins.Tachyons(),
                submitButton: new FormValidation.plugins.SubmitButton(),
                icon: new FormValidation.plugins.Icon({
                    valid: 'fa fa-check',
                    invalid: 'fa fa-times',
                    validating: 'fa fa-refresh'
                }),
            },
        }
    );
});
</script-tag>
` },
		$$inline: true
	});

	var samplecode7 = new SampleCode({
		props: { lang: "php", code: `
&lt;?php   
// Determine which field you want to check its existence
$isAvailable = true;

switch ($_POST['type']) {
    case 'email':
        $email = $_POST['email'];
        // Check the email existence ...
        $isAvailable = true; // or false
        break;

    case 'username':
    default:
        $username = $_POST['username'];
        // Check the username existence ...
        $isAvailable = true; // or false
        break;
}

// Finally, return a JSON
echo json_encode(array(
    'valid' => $isAvailable,
));
` },
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode8 = new SampleCode({
		props: { lang: "html", code: `
<form id="regForm">
    <div class="cf mb2">
        <div class="fl w-100">
            <div class="fl w-25 pa2">Username</div>
            <div class="fl w-50">
                <input type="text" name="username" class="input-reset ba b--black-20 pa2 mb2 db w-100" />
            </div>
        </div>
    </div>

    <div class="cf mb2">
        <div class="fl w-100">
            <div class="fl w-25 pa2">Email</div>
            <div class="fl w-50">
                <input type="text" name="email" class="input-reset ba b--black-20 pa2 mb2 db w-100" />
            </div>
        </div>
    </div>

    <div class="cf mb2">
        <div class="fl w-100">
            <div class="fl w-25 pa2">Password</div>
            <div class="fl w-50">
                <input type="password" name="password" class="input-reset ba b--black-20 pa2 mb2 db w-100" />
            </div>
        </div>
    </div>
</form>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    const form = document.getElementById('regForm');
    FormValidation.formValidation(
        form,
        {
            fields: {
                username: {
                    message: 'The username is not valid',
                    validators: {
                        remote: {
                            url: '/path/to/backend/',
                            // Send { username: 'its value', email: 'its value' } to the back-end
                            data: function() {
                                return {
                                    email: form.querySelector('[name="email"]').value,
                                };
                            },
                            message: 'The username is not available',
                            type: 'POST'
                        }
                    }
                },
                email: {
                    validators: {
                        remote: {
                            url: '/path/to/backend/',
                            // Send { email: 'its value', username: 'its value' } to the back-end
                            data: function() {
                                return {
                                    email: form.querySelector('[name="username"]').value,
                                };
                            },
                            message: 'The email is not available',
                            type: 'POST'
                        }
                    }
                },
            },
            plugins: {
                trigger: new FormValidation.plugins.Trigger(),
                tachyons: new FormValidation.plugins.Tachyons(),
                submitButton: new FormValidation.plugins.SubmitButton(),
                icon: new FormValidation.plugins.Icon({
                    valid: 'fa fa-check',
                    invalid: 'fa fa-times',
                    validating: 'fa fa-refresh'
                }),
            },
        }
    );
});
</script-tag>
` },
		$$inline: true
	});

	var heading4 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var tip = new Tip({
		props: {
		heading: "Note",
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode9 = new SampleCode({
		props: { lang: "html", code: `
// In the signup form, the email address field is named as "login"
<form id="signForm" class="form-horizontal">
    <div class="cf mb2">
        <div class="fl w-100">
            <div class="fl w-25 pa2">Email</div>
            <div class="fl w-50">
                <input type="text" name="login" data-fv-remote___name="email" class="input-reset ba b--black-20 pa2 mb2 db w-100" />
            </div>
        </div>
    </div>
</form>

// In the edit profile form, the email address field is named as "email"
<form id="profileForm" class="form-horizontal">
    <div class="form-group">
        <label class="col-lg-3 control-label">Email</label>
        <div class="col-lg-5">
            <input type="text" class="form-control" name="email" data-fv-remote___name="email" />
        </div>
    </div>
</form>
` },
		$$inline: true
	});

	var samplecode10 = new SampleCode({
		props: { lang: "html", code: `
<form id="demoForm" class="form-horizontal">
    <div class="cf mb2">
        <div class="fl w-100">
            <div class="fl w-25 pa2">Primary email</div>
            <div class="fl w-50">
                <input type="text" name="primary_email" data-fv-remote___name="email" class="input-reset ba b--black-20 pa2 mb2 db w-100" />
            </div>
        </div>
    </div>

    <div class="cf mb2">
        <div class="fl w-100">
            <div class="fl w-25 pa2">Secondary email</div>
            <div class="fl w-50">
                <input type="text" name="secondary_email" data-fv-remote___name="email" class="input-reset ba b--black-20 pa2 mb2 db w-100" />
            </div>
        </div>
    </div>
</form>
` },
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Getting notified while field is being validated',
        'Pending validation for a given number of seconds',
        'Performing validation if field value exceed given number of characters',
    ] },
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['callback', 'promise'] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/validators/regexp",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/validators/rtn",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("remote validator");
			t1 = space();
			h2 = element("h2");
			t2 = text("Perform remote checking via Ajax request");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			h30 = element("h3");
			t5 = text("Using with form field");
			t6 = space();
			p0 = element("p");
			sup0 = element("sup");
			t7 = text("*");
			t8 = text(" presents a required option. The HTML attributes are used to set the validator options via the ");
			a = element("a");
			t9 = text("Declarative");
			t10 = text(" plugin");
			t11 = space();
			table = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t12 = text("Name");
			t13 = space();
			th1 = element("th");
			t14 = text("HTML attribute");
			t15 = space();
			th2 = element("th");
			t16 = text("Type");
			t17 = space();
			th3 = element("th");
			t18 = text("Description");
			t19 = space();
			tr1 = element("tr");
			td0 = element("td");
			code0 = element("code");
			t20 = text("crossDomain");
			t21 = space();
			td1 = element("td");
			code1 = element("code");
			t22 = text("data-fv-remote___cross-domain");
			t23 = space();
			td2 = element("td");
			t24 = text("Boolean");
			t25 = space();
			td3 = element("td");
			t26 = text("Set it to ");
			code2 = element("code");
			t27 = text("true");
			t28 = text(" if you want to have a cross domain request. By default, it's set to ");
			code3 = element("code");
			t29 = text("false");
			t30 = space();
			tr2 = element("tr");
			td4 = element("td");
			code4 = element("code");
			t31 = text("data");
			t32 = space();
			td5 = element("td");
			code5 = element("code");
			t33 = text("data-fv-remote___data");
			t34 = space();
			td6 = element("td");
			t35 = text("Object or Function");
			t36 = space();
			td7 = element("td");
			p1 = element("p");
			t37 = text("The data sent to remote URL. You don't need to use this option if there is only field, defined as field name, sent to the remote URL.");
			t38 = space();
			p2 = element("p");
			t39 = text("If you want to use dynamic data, then use a callback as following:");
			t40 = space();
			samplecode0.$$.fragment.c();
			t41 = space();
			p3 = element("p");
			t42 = text("When using ");
			code6 = element("code");
			t43 = text("data-fv-remote___data");
			t44 = text(" attribute, its value must be an encoded JSON string.");
			t45 = space();
			tr3 = element("tr");
			td8 = element("td");
			code7 = element("code");
			t46 = text("headers");
			t47 = space();
			td9 = element("td");
			code8 = element("code");
			t48 = text("data-fv-remote___headers");
			t49 = space();
			td10 = element("td");
			t50 = text("Object");
			t51 = space();
			td11 = element("td");
			t52 = text("Additonal headers that will be sent with the request");
			t53 = space();
			tr4 = element("tr");
			td12 = element("td");
			code9 = element("code");
			t54 = text("message");
			t55 = space();
			td13 = element("td");
			code10 = element("code");
			t56 = text("data-fv-remote___message");
			t57 = space();
			td14 = element("td");
			t58 = text("String");
			t59 = space();
			td15 = element("td");
			t60 = text("The error message");
			t61 = space();
			tr5 = element("tr");
			td16 = element("td");
			code11 = element("code");
			t62 = text("name");
			t63 = space();
			td17 = element("td");
			code12 = element("code");
			t64 = text("data-fv-remote___name");
			t65 = space();
			td18 = element("td");
			t66 = text("String");
			t67 = space();
			td19 = element("td");
			t68 = text("The name of field which need to validate");
			t69 = space();
			tr6 = element("tr");
			td20 = element("td");
			code13 = element("code");
			t70 = text("method");
			t71 = space();
			td21 = element("td");
			code14 = element("code");
			t72 = text("data-fv-remote___method");
			t73 = space();
			td22 = element("td");
			t74 = text("String");
			t75 = space();
			td23 = element("td");
			t76 = text("The method used to send data to back-end. It can be ");
			code15 = element("code");
			t77 = text("GET");
			t78 = text(" (the default value) or ");
			code16 = element("code");
			t79 = text("POST");
			t80 = space();
			tr7 = element("tr");
			td24 = element("td");
			code17 = element("code");
			t81 = text("url");
			sup1 = element("sup");
			t82 = text("*");
			t83 = space();
			td25 = element("td");
			code18 = element("code");
			t84 = text("data-fv-remote___url");
			t85 = space();
			td26 = element("td");
			t86 = text("String or Function");
			t87 = space();
			td27 = element("td");
			p4 = element("p");
			t88 = text("The remote URL. If you want to use a dynamic URL, then use a callback as following:");
			t89 = space();
			samplecode1.$$.fragment.c();
			t90 = space();
			tr8 = element("tr");
			td28 = element("td");
			code19 = element("code");
			t91 = text("validKey");
			t92 = space();
			td29 = element("td");
			code20 = element("code");
			t93 = text("data-fv-remote___valid-key");
			t94 = space();
			td30 = element("td");
			t95 = text("String");
			t96 = space();
			td31 = element("td");
			t97 = text("The valid key. It's ");
			code21 = element("code");
			t98 = text("valid");
			t99 = text(" by default. This option is useful when connecting to external remote server or APIs provided by 3rd parties.");
			t100 = space();
			p5 = element("p");
			t101 = text("The ");
			code22 = element("code");
			t102 = text("crossDomain");
			t103 = text(" and ");
			code23 = element("code");
			t104 = text("validKey");
			t105 = text(" options are mostly used when you need to connect to external API endpoint.");
			t106 = space();
			p6 = element("p");
			t107 = text("The remote URL has to return an encoded JSON of array containing the ");
			code24 = element("code");
			t108 = text("valid");
			t109 = text(" key (the key name can be changed by the ");
			code25 = element("code");
			t110 = text("validKey");
			t111 = text(" option):");
			t112 = space();
			samplecode2.$$.fragment.c();
			t113 = space();
			h31 = element("h3");
			t114 = text("Using with ES6 module");
			t115 = space();
			samplecode3.$$.fragment.c();
			t116 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t117 = space();
			p7 = element("p");
			t118 = text("The following example shows how to use a remote back-end to check if a given username is already taken or not.");
			t119 = space();
			samplecode4.$$.fragment.c();
			t120 = space();
			p8 = element("p");
			t121 = text("The back-end then will determine if the username is available or not, and finally returns a JSON ");
			code26 = element("code");
			t122 = text(" or ");
			code27 = element("code");
			t123 = text(". The code bellow demonstrates a simple back-end written in PHP:");
			t124 = space();
			samplecode5.$$.fragment.c();
			t125 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t126 = space();
			p9 = element("p");
			t127 = text("For example, there is same back-end for validating both username and email address. The back-end uses additional parameter named ");
			code28 = element("code");
			t128 = text("type");
			t129 = text(" to determine which field is going to be validated.");
			t130 = space();
			samplecode6.$$.fragment.c();
			t131 = space();
			p10 = element("p");
			t132 = text("The code bellow demonstrates a simple back-end written in PHP:");
			t133 = space();
			samplecode7.$$.fragment.c();
			t134 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t135 = space();
			p11 = element("p");
			t136 = text("For instance, the registration form need to validate both the username and emails.");
			t137 = space();
			samplecode8.$$.fragment.c();
			t138 = space();
			section4 = element("section");
			heading4.$$.fragment.c();
			t139 = space();
			p12 = element("p");
			t140 = text("By default, it will be set as the name of field. You can override the ");
			code29 = element("code");
			t141 = text("name");
			t142 = text(" option by using the ");
			code30 = element("code");
			t143 = text("data-fv-remote___name");
			t144 = text(" attribute. Here are two cases which you might need to use this attribute.");
			t145 = space();
			h32 = element("h3");
			t146 = text("Using different names for same field");
			t147 = space();
			p13 = element("p");
			t148 = text("For example, the ");
			span0 = element("span");
			t149 = text("Sign up");
			t150 = text(" and ");
			span1 = element("span");
			t151 = text("Profile");
			t152 = text(" forms use the same back-end URL to validate the email address which is declared with different name.");
			t153 = space();
			p14 = element("p");
			t154 = text("In this case, use the same ");
			code31 = element("code");
			t155 = text("data-fv-remote___name");
			t156 = text(" attribute and the back-end will get the same data key.");
			t157 = space();
			tip.$$.fragment.c();
			t158 = space();
			samplecode9.$$.fragment.c();
			t159 = space();
			h33 = element("h3");
			t160 = text("Using same backend for different fields");
			t161 = space();
			p15 = element("p");
			t162 = text("Assume that the profile form asks you to update multiple email address (primary, secondary, for example). These emails will be validated by the same backend.");
			t163 = space();
			p16 = element("p");
			t164 = text("In this case, just use the same ");
			code32 = element("code");
			t165 = text("data-fv-remote___name");
			t166 = text(" attribute for these email address fields.");
			t167 = space();
			samplecode10.$$.fragment.c();
			t168 = space();
			examples.$$.fragment.c();
			t169 = space();
			relatedvalidators.$$.fragment.c();
			t170 = space();
			section5 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t171 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "remote validator");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Perform remote checking via Ajax request");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n\n        ");

			h30 = claim_element(section0_nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t5 = claim_text(h30_nodes, "Using with form field");
			h30_nodes.forEach(detach);
			t6 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			sup0 = claim_element(p0_nodes, "SUP", {}, false);
			var sup0_nodes = children(sup0);

			t7 = claim_text(sup0_nodes, "*");
			sup0_nodes.forEach(detach);
			t8 = claim_text(p0_nodes, " presents a required option. The HTML attributes are used to set the validator options via the ");

			a = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t9 = claim_text(a_nodes, "Declarative");
			a_nodes.forEach(detach);
			t10 = claim_text(p0_nodes, " plugin");
			p0_nodes.forEach(detach);
			t11 = claim_text(section0_nodes, "\n        ");

			table = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table_nodes = children(table);

			tr0 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t12 = claim_text(th0_nodes, "Name");
			th0_nodes.forEach(detach);
			t13 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t14 = claim_text(th1_nodes, "HTML attribute");
			th1_nodes.forEach(detach);
			t15 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t16 = claim_text(th2_nodes, "Type");
			th2_nodes.forEach(detach);
			t17 = claim_text(tr0_nodes, "\n                ");

			th3 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th3_nodes = children(th3);

			t18 = claim_text(th3_nodes, "Description");
			th3_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t19 = claim_text(table_nodes, "\n            ");

			tr1 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code0 = claim_element(td0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t20 = claim_text(code0_nodes, "crossDomain");
			code0_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t21 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			code1 = claim_element(td1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t22 = claim_text(code1_nodes, "data-fv-remote___cross-domain");
			code1_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			t23 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t24 = claim_text(td2_nodes, "Boolean");
			td2_nodes.forEach(detach);
			t25 = claim_text(tr1_nodes, "\n                ");

			td3 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			t26 = claim_text(td3_nodes, "Set it to ");

			code2 = claim_element(td3_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t27 = claim_text(code2_nodes, "true");
			code2_nodes.forEach(detach);
			t28 = claim_text(td3_nodes, " if you want to have a cross domain request. By default, it's set to ");

			code3 = claim_element(td3_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t29 = claim_text(code3_nodes, "false");
			code3_nodes.forEach(detach);
			td3_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t30 = claim_text(table_nodes, "\n            ");

			tr2 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			code4 = claim_element(td4_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t31 = claim_text(code4_nodes, "data");
			code4_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t32 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			code5 = claim_element(td5_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t33 = claim_text(code5_nodes, "data-fv-remote___data");
			code5_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			t34 = claim_text(tr2_nodes, "\n                ");

			td6 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			t35 = claim_text(td6_nodes, "Object or Function");
			td6_nodes.forEach(detach);
			t36 = claim_text(tr2_nodes, "\n                ");

			td7 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			p1 = claim_element(td7_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t37 = claim_text(p1_nodes, "The data sent to remote URL. You don't need to use this option if there is only field, defined as field name, sent to the remote URL.");
			p1_nodes.forEach(detach);
			t38 = claim_text(td7_nodes, "\n                    ");

			p2 = claim_element(td7_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t39 = claim_text(p2_nodes, "If you want to use dynamic data, then use a callback as following:");
			p2_nodes.forEach(detach);
			t40 = claim_text(td7_nodes, "\n                    ");
			samplecode0.$$.fragment.l(td7_nodes);
			t41 = claim_text(td7_nodes, "\n                    ");

			p3 = claim_element(td7_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t42 = claim_text(p3_nodes, "When using ");

			code6 = claim_element(p3_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t43 = claim_text(code6_nodes, "data-fv-remote___data");
			code6_nodes.forEach(detach);
			t44 = claim_text(p3_nodes, " attribute, its value must be an encoded JSON string.");
			p3_nodes.forEach(detach);
			td7_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t45 = claim_text(table_nodes, "\n            ");

			tr3 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td8 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			code7 = claim_element(td8_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t46 = claim_text(code7_nodes, "headers");
			code7_nodes.forEach(detach);
			td8_nodes.forEach(detach);
			t47 = claim_text(tr3_nodes, "\n                ");

			td9 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			code8 = claim_element(td9_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t48 = claim_text(code8_nodes, "data-fv-remote___headers");
			code8_nodes.forEach(detach);
			td9_nodes.forEach(detach);
			t49 = claim_text(tr3_nodes, "\n                ");

			td10 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td10_nodes = children(td10);

			t50 = claim_text(td10_nodes, "Object");
			td10_nodes.forEach(detach);
			t51 = claim_text(tr3_nodes, "\n                ");

			td11 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td11_nodes = children(td11);

			t52 = claim_text(td11_nodes, "Additonal headers that will be sent with the request");
			td11_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			t53 = claim_text(table_nodes, "\n            ");

			tr4 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			td12 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td12_nodes = children(td12);

			code9 = claim_element(td12_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t54 = claim_text(code9_nodes, "message");
			code9_nodes.forEach(detach);
			td12_nodes.forEach(detach);
			t55 = claim_text(tr4_nodes, "\n                ");

			td13 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td13_nodes = children(td13);

			code10 = claim_element(td13_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t56 = claim_text(code10_nodes, "data-fv-remote___message");
			code10_nodes.forEach(detach);
			td13_nodes.forEach(detach);
			t57 = claim_text(tr4_nodes, "\n                ");

			td14 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td14_nodes = children(td14);

			t58 = claim_text(td14_nodes, "String");
			td14_nodes.forEach(detach);
			t59 = claim_text(tr4_nodes, "\n                ");

			td15 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td15_nodes = children(td15);

			t60 = claim_text(td15_nodes, "The error message");
			td15_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			t61 = claim_text(table_nodes, "\n            ");

			tr5 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr5_nodes = children(tr5);

			td16 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td16_nodes = children(td16);

			code11 = claim_element(td16_nodes, "CODE", {}, false);
			var code11_nodes = children(code11);

			t62 = claim_text(code11_nodes, "name");
			code11_nodes.forEach(detach);
			td16_nodes.forEach(detach);
			t63 = claim_text(tr5_nodes, "\n                ");

			td17 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td17_nodes = children(td17);

			code12 = claim_element(td17_nodes, "CODE", {}, false);
			var code12_nodes = children(code12);

			t64 = claim_text(code12_nodes, "data-fv-remote___name");
			code12_nodes.forEach(detach);
			td17_nodes.forEach(detach);
			t65 = claim_text(tr5_nodes, "\n                ");

			td18 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td18_nodes = children(td18);

			t66 = claim_text(td18_nodes, "String");
			td18_nodes.forEach(detach);
			t67 = claim_text(tr5_nodes, "\n                ");

			td19 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td19_nodes = children(td19);

			t68 = claim_text(td19_nodes, "The name of field which need to validate");
			td19_nodes.forEach(detach);
			tr5_nodes.forEach(detach);
			t69 = claim_text(table_nodes, "\n            ");

			tr6 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr6_nodes = children(tr6);

			td20 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td20_nodes = children(td20);

			code13 = claim_element(td20_nodes, "CODE", {}, false);
			var code13_nodes = children(code13);

			t70 = claim_text(code13_nodes, "method");
			code13_nodes.forEach(detach);
			td20_nodes.forEach(detach);
			t71 = claim_text(tr6_nodes, "\n                ");

			td21 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td21_nodes = children(td21);

			code14 = claim_element(td21_nodes, "CODE", {}, false);
			var code14_nodes = children(code14);

			t72 = claim_text(code14_nodes, "data-fv-remote___method");
			code14_nodes.forEach(detach);
			td21_nodes.forEach(detach);
			t73 = claim_text(tr6_nodes, "\n                ");

			td22 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td22_nodes = children(td22);

			t74 = claim_text(td22_nodes, "String");
			td22_nodes.forEach(detach);
			t75 = claim_text(tr6_nodes, "\n                ");

			td23 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td23_nodes = children(td23);

			t76 = claim_text(td23_nodes, "The method used to send data to back-end. It can be ");

			code15 = claim_element(td23_nodes, "CODE", {}, false);
			var code15_nodes = children(code15);

			t77 = claim_text(code15_nodes, "GET");
			code15_nodes.forEach(detach);
			t78 = claim_text(td23_nodes, " (the default value) or ");

			code16 = claim_element(td23_nodes, "CODE", {}, false);
			var code16_nodes = children(code16);

			t79 = claim_text(code16_nodes, "POST");
			code16_nodes.forEach(detach);
			td23_nodes.forEach(detach);
			tr6_nodes.forEach(detach);
			t80 = claim_text(table_nodes, "\n            ");

			tr7 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr7_nodes = children(tr7);

			td24 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td24_nodes = children(td24);

			code17 = claim_element(td24_nodes, "CODE", {}, false);
			var code17_nodes = children(code17);

			t81 = claim_text(code17_nodes, "url");
			code17_nodes.forEach(detach);

			sup1 = claim_element(td24_nodes, "SUP", {}, false);
			var sup1_nodes = children(sup1);

			t82 = claim_text(sup1_nodes, "*");
			sup1_nodes.forEach(detach);
			td24_nodes.forEach(detach);
			t83 = claim_text(tr7_nodes, "\n                ");

			td25 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td25_nodes = children(td25);

			code18 = claim_element(td25_nodes, "CODE", {}, false);
			var code18_nodes = children(code18);

			t84 = claim_text(code18_nodes, "data-fv-remote___url");
			code18_nodes.forEach(detach);
			td25_nodes.forEach(detach);
			t85 = claim_text(tr7_nodes, "\n                ");

			td26 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td26_nodes = children(td26);

			t86 = claim_text(td26_nodes, "String or Function");
			td26_nodes.forEach(detach);
			t87 = claim_text(tr7_nodes, "\n                ");

			td27 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td27_nodes = children(td27);

			p4 = claim_element(td27_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t88 = claim_text(p4_nodes, "The remote URL. If you want to use a dynamic URL, then use a callback as following:");
			p4_nodes.forEach(detach);
			t89 = claim_text(td27_nodes, "\n");
			samplecode1.$$.fragment.l(td27_nodes);
			td27_nodes.forEach(detach);
			tr7_nodes.forEach(detach);
			t90 = claim_text(table_nodes, "\n            ");

			tr8 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr8_nodes = children(tr8);

			td28 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td28_nodes = children(td28);

			code19 = claim_element(td28_nodes, "CODE", {}, false);
			var code19_nodes = children(code19);

			t91 = claim_text(code19_nodes, "validKey");
			code19_nodes.forEach(detach);
			td28_nodes.forEach(detach);
			t92 = claim_text(tr8_nodes, "\n                ");

			td29 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td29_nodes = children(td29);

			code20 = claim_element(td29_nodes, "CODE", {}, false);
			var code20_nodes = children(code20);

			t93 = claim_text(code20_nodes, "data-fv-remote___valid-key");
			code20_nodes.forEach(detach);
			td29_nodes.forEach(detach);
			t94 = claim_text(tr8_nodes, "\n                ");

			td30 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td30_nodes = children(td30);

			t95 = claim_text(td30_nodes, "String");
			td30_nodes.forEach(detach);
			t96 = claim_text(tr8_nodes, "\n                ");

			td31 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td31_nodes = children(td31);

			t97 = claim_text(td31_nodes, "The valid key. It's ");

			code21 = claim_element(td31_nodes, "CODE", {}, false);
			var code21_nodes = children(code21);

			t98 = claim_text(code21_nodes, "valid");
			code21_nodes.forEach(detach);
			t99 = claim_text(td31_nodes, " by default. This option is useful when connecting to external remote server or APIs provided by 3rd parties.");
			td31_nodes.forEach(detach);
			tr8_nodes.forEach(detach);
			table_nodes.forEach(detach);
			t100 = claim_text(section0_nodes, "\n        ");

			p5 = claim_element(section0_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t101 = claim_text(p5_nodes, "The ");

			code22 = claim_element(p5_nodes, "CODE", {}, false);
			var code22_nodes = children(code22);

			t102 = claim_text(code22_nodes, "crossDomain");
			code22_nodes.forEach(detach);
			t103 = claim_text(p5_nodes, " and ");

			code23 = claim_element(p5_nodes, "CODE", {}, false);
			var code23_nodes = children(code23);

			t104 = claim_text(code23_nodes, "validKey");
			code23_nodes.forEach(detach);
			t105 = claim_text(p5_nodes, " options are mostly used when you need to connect to external API endpoint.");
			p5_nodes.forEach(detach);
			t106 = claim_text(section0_nodes, "\n        ");

			p6 = claim_element(section0_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t107 = claim_text(p6_nodes, "The remote URL has to return an encoded JSON of array containing the ");

			code24 = claim_element(p6_nodes, "CODE", {}, false);
			var code24_nodes = children(code24);

			t108 = claim_text(code24_nodes, "valid");
			code24_nodes.forEach(detach);
			t109 = claim_text(p6_nodes, " key (the key name can be changed by the ");

			code25 = claim_element(p6_nodes, "CODE", {}, false);
			var code25_nodes = children(code25);

			t110 = claim_text(code25_nodes, "validKey");
			code25_nodes.forEach(detach);
			t111 = claim_text(p6_nodes, " option):");
			p6_nodes.forEach(detach);
			t112 = claim_text(section0_nodes, "\n");
			samplecode2.$$.fragment.l(section0_nodes);
			t113 = claim_text(section0_nodes, "\n\n        ");

			h31 = claim_element(section0_nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t114 = claim_text(h31_nodes, "Using with ES6 module");
			h31_nodes.forEach(detach);
			t115 = claim_text(section0_nodes, "\n");
			samplecode3.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t116 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t117 = claim_text(section1_nodes, "\n        ");

			p7 = claim_element(section1_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t118 = claim_text(p7_nodes, "The following example shows how to use a remote back-end to check if a given username is already taken or not.");
			p7_nodes.forEach(detach);
			t119 = claim_text(section1_nodes, "\n");
			samplecode4.$$.fragment.l(section1_nodes);
			t120 = claim_text(section1_nodes, "\n        ");

			p8 = claim_element(section1_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t121 = claim_text(p8_nodes, "The back-end then will determine if the username is available or not, and finally returns a JSON ");

			code26 = claim_element(p8_nodes, "CODE", {}, false);
			var code26_nodes = children(code26);

			code26_nodes.forEach(detach);
			t122 = claim_text(p8_nodes, " or ");

			code27 = claim_element(p8_nodes, "CODE", {}, false);
			var code27_nodes = children(code27);

			code27_nodes.forEach(detach);
			t123 = claim_text(p8_nodes, ". The code bellow demonstrates a simple back-end written in PHP:");
			p8_nodes.forEach(detach);
			t124 = claim_text(section1_nodes, "\n");
			samplecode5.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t125 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t126 = claim_text(section2_nodes, "\n        ");

			p9 = claim_element(section2_nodes, "P", { class: true }, false);
			var p9_nodes = children(p9);

			t127 = claim_text(p9_nodes, "For example, there is same back-end for validating both username and email address. The back-end uses additional parameter named ");

			code28 = claim_element(p9_nodes, "CODE", {}, false);
			var code28_nodes = children(code28);

			t128 = claim_text(code28_nodes, "type");
			code28_nodes.forEach(detach);
			t129 = claim_text(p9_nodes, " to determine which field is going to be validated.");
			p9_nodes.forEach(detach);
			t130 = claim_text(section2_nodes, "\n");
			samplecode6.$$.fragment.l(section2_nodes);
			t131 = claim_text(section2_nodes, "\n        ");

			p10 = claim_element(section2_nodes, "P", { class: true }, false);
			var p10_nodes = children(p10);

			t132 = claim_text(p10_nodes, "The code bellow demonstrates a simple back-end written in PHP:");
			p10_nodes.forEach(detach);
			t133 = claim_text(section2_nodes, "\n");
			samplecode7.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t134 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t135 = claim_text(section3_nodes, "\n        ");

			p11 = claim_element(section3_nodes, "P", { class: true }, false);
			var p11_nodes = children(p11);

			t136 = claim_text(p11_nodes, "For instance, the registration form need to validate both the username and emails.");
			p11_nodes.forEach(detach);
			t137 = claim_text(section3_nodes, "\n");
			samplecode8.$$.fragment.l(section3_nodes);
			section3_nodes.forEach(detach);
			t138 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			heading4.$$.fragment.l(section4_nodes);
			t139 = claim_text(section4_nodes, "\n\n        ");

			p12 = claim_element(section4_nodes, "P", { class: true }, false);
			var p12_nodes = children(p12);

			t140 = claim_text(p12_nodes, "By default, it will be set as the name of field. You can override the ");

			code29 = claim_element(p12_nodes, "CODE", {}, false);
			var code29_nodes = children(code29);

			t141 = claim_text(code29_nodes, "name");
			code29_nodes.forEach(detach);
			t142 = claim_text(p12_nodes, " option by using the ");

			code30 = claim_element(p12_nodes, "CODE", {}, false);
			var code30_nodes = children(code30);

			t143 = claim_text(code30_nodes, "data-fv-remote___name");
			code30_nodes.forEach(detach);
			t144 = claim_text(p12_nodes, " attribute. Here are two cases which you might need to use this attribute.");
			p12_nodes.forEach(detach);
			t145 = claim_text(section4_nodes, "\n\n        ");

			h32 = claim_element(section4_nodes, "H3", {}, false);
			var h32_nodes = children(h32);

			t146 = claim_text(h32_nodes, "Using different names for same field");
			h32_nodes.forEach(detach);
			t147 = claim_text(section4_nodes, "\n        ");

			p13 = claim_element(section4_nodes, "P", { class: true }, false);
			var p13_nodes = children(p13);

			t148 = claim_text(p13_nodes, "For example, the ");

			span0 = claim_element(p13_nodes, "SPAN", { class: true }, false);
			var span0_nodes = children(span0);

			t149 = claim_text(span0_nodes, "Sign up");
			span0_nodes.forEach(detach);
			t150 = claim_text(p13_nodes, " and ");

			span1 = claim_element(p13_nodes, "SPAN", { class: true }, false);
			var span1_nodes = children(span1);

			t151 = claim_text(span1_nodes, "Profile");
			span1_nodes.forEach(detach);
			t152 = claim_text(p13_nodes, " forms use the same back-end URL to validate the email address which is declared with different name.");
			p13_nodes.forEach(detach);
			t153 = claim_text(section4_nodes, "\n        ");

			p14 = claim_element(section4_nodes, "P", { class: true }, false);
			var p14_nodes = children(p14);

			t154 = claim_text(p14_nodes, "In this case, use the same ");

			code31 = claim_element(p14_nodes, "CODE", {}, false);
			var code31_nodes = children(code31);

			t155 = claim_text(code31_nodes, "data-fv-remote___name");
			code31_nodes.forEach(detach);
			t156 = claim_text(p14_nodes, " attribute and the back-end will get the same data key.");
			p14_nodes.forEach(detach);
			t157 = claim_text(section4_nodes, "\n        ");
			tip.$$.fragment.l(section4_nodes);
			t158 = claim_text(section4_nodes, "\n\n");
			samplecode9.$$.fragment.l(section4_nodes);
			t159 = claim_text(section4_nodes, "\n\n        ");

			h33 = claim_element(section4_nodes, "H3", {}, false);
			var h33_nodes = children(h33);

			t160 = claim_text(h33_nodes, "Using same backend for different fields");
			h33_nodes.forEach(detach);
			t161 = claim_text(section4_nodes, "\n        ");

			p15 = claim_element(section4_nodes, "P", { class: true }, false);
			var p15_nodes = children(p15);

			t162 = claim_text(p15_nodes, "Assume that the profile form asks you to update multiple email address (primary, secondary, for example). These emails will be validated by the same backend.");
			p15_nodes.forEach(detach);
			t163 = claim_text(section4_nodes, "\n        ");

			p16 = claim_element(section4_nodes, "P", { class: true }, false);
			var p16_nodes = children(p16);

			t164 = claim_text(p16_nodes, "In this case, just use the same ");

			code32 = claim_element(p16_nodes, "CODE", {}, false);
			var code32_nodes = children(code32);

			t165 = claim_text(code32_nodes, "data-fv-remote___name");
			code32_nodes.forEach(detach);
			t166 = claim_text(p16_nodes, " attribute for these email address fields.");
			p16_nodes.forEach(detach);
			t167 = claim_text(section4_nodes, "\n");
			samplecode10.$$.fragment.l(section4_nodes);
			section4_nodes.forEach(detach);
			t168 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			t169 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			t170 = claim_text(nodes, "\n\n    ");

			section5 = claim_element(nodes, "SECTION", { class: true }, false);
			var section5_nodes = children(section5);

			div = claim_element(section5_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t171 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section5_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 98);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 152);
			add_location(h30, file, 11, 8, 291);
			add_location(sup0, file, 12, 29, 351);
			a.href = "/guide/plugins/declarative";
			a.className = "blue dim link";
			add_location(a, file, 12, 136, 458);
			p0.className = "lh-copy i";
			add_location(p0, file, 12, 8, 330);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 15, 16, 675);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 16, 16, 735);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 17, 16, 805);
			th3.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th3, file, 18, 16, 865);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 14, 12, 626);
			add_location(code0, file, 21, 36, 1015);
			td0.className = "pv2 ph3";
			add_location(td0, file, 21, 16, 995);
			add_location(code1, file, 22, 36, 1081);
			td1.className = "pv2 ph3";
			add_location(td1, file, 22, 16, 1061);
			td2.className = "pv2 ph3";
			add_location(td2, file, 23, 16, 1145);
			add_location(code2, file, 24, 54, 1232);
			add_location(code3, file, 24, 140, 1318);
			td3.className = "pv2 ph3 lh-copy";
			add_location(td3, file, 24, 16, 1194);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 20, 12, 946);
			add_location(code4, file, 27, 36, 1441);
			td4.className = "pv2 ph3";
			add_location(td4, file, 27, 16, 1421);
			add_location(code5, file, 28, 36, 1500);
			td5.className = "pv2 ph3";
			add_location(td5, file, 28, 16, 1480);
			td6.className = "pv2 ph3";
			add_location(td6, file, 29, 16, 1556);
			p1.className = "lh-copy";
			add_location(p1, file, 31, 20, 1657);
			p2.className = "lh-copy";
			add_location(p2, file, 32, 20, 1834);
			add_location(code6, file, 43, 50, 2161);
			p3.className = "lh-copy";
			add_location(p3, file, 43, 20, 2131);
			td7.className = "pv2 ph3";
			add_location(td7, file, 30, 16, 1616);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 26, 12, 1372);
			add_location(code7, file, 47, 36, 2374);
			td8.className = "pv2 ph3";
			add_location(td8, file, 47, 16, 2354);
			add_location(code8, file, 48, 36, 2436);
			td9.className = "pv2 ph3";
			add_location(td9, file, 48, 16, 2416);
			td10.className = "pv2 ph3";
			add_location(td10, file, 49, 16, 2495);
			td11.className = "pv2 ph3";
			add_location(td11, file, 50, 16, 2543);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 46, 12, 2305);
			add_location(code9, file, 53, 36, 2720);
			td12.className = "pv2 ph3";
			add_location(td12, file, 53, 16, 2700);
			add_location(code10, file, 54, 36, 2782);
			td13.className = "pv2 ph3";
			add_location(td13, file, 54, 16, 2762);
			td14.className = "pv2 ph3";
			add_location(td14, file, 55, 16, 2841);
			td15.className = "pv2 ph3";
			add_location(td15, file, 56, 16, 2889);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 52, 12, 2651);
			add_location(code11, file, 59, 36, 3031);
			td16.className = "pv2 ph3";
			add_location(td16, file, 59, 16, 3011);
			add_location(code12, file, 60, 36, 3090);
			td17.className = "pv2 ph3";
			add_location(td17, file, 60, 16, 3070);
			td18.className = "pv2 ph3";
			add_location(td18, file, 61, 16, 3146);
			td19.className = "pv2 ph3";
			add_location(td19, file, 62, 16, 3194);
			tr5.className = "striped--light-gray";
			add_location(tr5, file, 58, 12, 2962);
			add_location(code13, file, 65, 36, 3359);
			td20.className = "pv2 ph3";
			add_location(td20, file, 65, 16, 3339);
			add_location(code14, file, 66, 36, 3420);
			td21.className = "pv2 ph3";
			add_location(td21, file, 66, 16, 3400);
			td22.className = "pv2 ph3";
			add_location(td22, file, 67, 16, 3478);
			add_location(code15, file, 68, 96, 3606);
			add_location(code16, file, 68, 136, 3646);
			td23.className = "pv2 ph3 lh-copy";
			add_location(td23, file, 68, 16, 3526);
			tr6.className = "striped--light-gray";
			add_location(tr6, file, 64, 12, 3290);
			add_location(code17, file, 71, 36, 3768);
			add_location(sup1, file, 71, 52, 3784);
			td24.className = "pv2 ph3";
			add_location(td24, file, 71, 16, 3748);
			add_location(code18, file, 72, 36, 3838);
			td25.className = "pv2 ph3";
			add_location(td25, file, 72, 16, 3818);
			td26.className = "pv2 ph3";
			add_location(td26, file, 73, 16, 3893);
			p4.className = "lh-copy";
			add_location(p4, file, 75, 20, 3994);
			td27.className = "pv2 ph3";
			add_location(td27, file, 74, 16, 3953);
			tr7.className = "striped--light-gray";
			add_location(tr7, file, 70, 12, 3699);
			add_location(code19, file, 86, 36, 4317);
			td28.className = "pv2 ph3";
			add_location(td28, file, 86, 16, 4297);
			add_location(code20, file, 87, 36, 4380);
			td29.className = "pv2 ph3";
			add_location(td29, file, 87, 16, 4360);
			td30.className = "pv2 ph3";
			add_location(td30, file, 88, 16, 4441);
			add_location(code21, file, 89, 64, 4537);
			td31.className = "pv2 ph3 lh-copy";
			add_location(td31, file, 89, 16, 4489);
			tr8.className = "striped--light-gray";
			add_location(tr8, file, 85, 12, 4248);
			table.className = "collapse ba br2 b--black-10 pv2 ph3 w-100 mb4";
			add_location(table, file, 13, 8, 552);
			add_location(code22, file, 92, 31, 4736);
			add_location(code23, file, 92, 60, 4765);
			p5.className = "lh-copy";
			add_location(p5, file, 92, 8, 4713);
			add_location(code24, file, 93, 96, 4962);
			add_location(code25, file, 93, 155, 5021);
			p6.className = "lh-copy";
			add_location(p6, file, 93, 8, 4874);
			add_location(h31, file, 104, 8, 5160);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 225);
			p7.className = "lh-copy";
			add_location(p7, file, 139, 8, 5924);
			add_location(code26, file, 186, 124, 7778);
			add_location(code27, file, 186, 168, 7822);
			p8.className = "lh-copy";
			add_location(p8, file, 186, 8, 7662);
			section1.className = "mv5";
			add_location(section1, file, 137, 4, 5853);
			add_location(code28, file, 204, 156, 8490);
			p9.className = "lh-copy";
			add_location(p9, file, 204, 8, 8342);
			p10.className = "lh-copy";
			add_location(p10, file, 276, 8, 11093);
			section2.className = "mv5";
			add_location(section2, file, 202, 4, 8257);
			p11.className = "lh-copy";
			add_location(p11, file, 306, 8, 11849);
			section3.className = "mv5";
			add_location(section3, file, 304, 4, 11763);
			add_location(code29, file, 396, 97, 15187);
			add_location(code30, file, 396, 135, 15225);
			p12.className = "lh-copy";
			add_location(p12, file, 396, 8, 15098);
			add_location(h32, file, 398, 8, 15347);
			span0.className = "i";
			add_location(span0, file, 399, 44, 15437);
			span1.className = "i";
			add_location(span1, file, 399, 79, 15472);
			p13.className = "lh-copy";
			add_location(p13, file, 399, 8, 15401);
			add_location(code31, file, 400, 54, 15662);
			p14.className = "lh-copy";
			add_location(p14, file, 400, 8, 15616);
			add_location(h33, file, 427, 8, 16820);
			p15.className = "lh-copy";
			add_location(p15, file, 428, 8, 16877);
			add_location(code32, file, 429, 59, 17117);
			p16.className = "lh-copy";
			add_location(p16, file, 429, 8, 17066);
			section4.className = "mv5";
			add_location(section4, file, 393, 4, 15016);
			div.className = "flex";
			add_location(div, file, 462, 8, 18312);
			section5.className = "mv5";
			add_location(section5, file, 461, 4, 18282);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, h30);
			append(h30, t5);
			append(section0, t6);
			append(section0, p0);
			append(p0, sup0);
			append(sup0, t7);
			append(p0, t8);
			append(p0, a);
			append(a, t9);
			append(p0, t10);
			append(section0, t11);
			append(section0, table);
			append(table, tr0);
			append(tr0, th0);
			append(th0, t12);
			append(tr0, t13);
			append(tr0, th1);
			append(th1, t14);
			append(tr0, t15);
			append(tr0, th2);
			append(th2, t16);
			append(tr0, t17);
			append(tr0, th3);
			append(th3, t18);
			append(table, t19);
			append(table, tr1);
			append(tr1, td0);
			append(td0, code0);
			append(code0, t20);
			append(tr1, t21);
			append(tr1, td1);
			append(td1, code1);
			append(code1, t22);
			append(tr1, t23);
			append(tr1, td2);
			append(td2, t24);
			append(tr1, t25);
			append(tr1, td3);
			append(td3, t26);
			append(td3, code2);
			append(code2, t27);
			append(td3, t28);
			append(td3, code3);
			append(code3, t29);
			append(table, t30);
			append(table, tr2);
			append(tr2, td4);
			append(td4, code4);
			append(code4, t31);
			append(tr2, t32);
			append(tr2, td5);
			append(td5, code5);
			append(code5, t33);
			append(tr2, t34);
			append(tr2, td6);
			append(td6, t35);
			append(tr2, t36);
			append(tr2, td7);
			append(td7, p1);
			append(p1, t37);
			append(td7, t38);
			append(td7, p2);
			append(p2, t39);
			append(td7, t40);
			mount_component(samplecode0, td7, null);
			append(td7, t41);
			append(td7, p3);
			append(p3, t42);
			append(p3, code6);
			append(code6, t43);
			append(p3, t44);
			append(table, t45);
			append(table, tr3);
			append(tr3, td8);
			append(td8, code7);
			append(code7, t46);
			append(tr3, t47);
			append(tr3, td9);
			append(td9, code8);
			append(code8, t48);
			append(tr3, t49);
			append(tr3, td10);
			append(td10, t50);
			append(tr3, t51);
			append(tr3, td11);
			append(td11, t52);
			append(table, t53);
			append(table, tr4);
			append(tr4, td12);
			append(td12, code9);
			append(code9, t54);
			append(tr4, t55);
			append(tr4, td13);
			append(td13, code10);
			append(code10, t56);
			append(tr4, t57);
			append(tr4, td14);
			append(td14, t58);
			append(tr4, t59);
			append(tr4, td15);
			append(td15, t60);
			append(table, t61);
			append(table, tr5);
			append(tr5, td16);
			append(td16, code11);
			append(code11, t62);
			append(tr5, t63);
			append(tr5, td17);
			append(td17, code12);
			append(code12, t64);
			append(tr5, t65);
			append(tr5, td18);
			append(td18, t66);
			append(tr5, t67);
			append(tr5, td19);
			append(td19, t68);
			append(table, t69);
			append(table, tr6);
			append(tr6, td20);
			append(td20, code13);
			append(code13, t70);
			append(tr6, t71);
			append(tr6, td21);
			append(td21, code14);
			append(code14, t72);
			append(tr6, t73);
			append(tr6, td22);
			append(td22, t74);
			append(tr6, t75);
			append(tr6, td23);
			append(td23, t76);
			append(td23, code15);
			append(code15, t77);
			append(td23, t78);
			append(td23, code16);
			append(code16, t79);
			append(table, t80);
			append(table, tr7);
			append(tr7, td24);
			append(td24, code17);
			append(code17, t81);
			append(td24, sup1);
			append(sup1, t82);
			append(tr7, t83);
			append(tr7, td25);
			append(td25, code18);
			append(code18, t84);
			append(tr7, t85);
			append(tr7, td26);
			append(td26, t86);
			append(tr7, t87);
			append(tr7, td27);
			append(td27, p4);
			append(p4, t88);
			append(td27, t89);
			mount_component(samplecode1, td27, null);
			append(table, t90);
			append(table, tr8);
			append(tr8, td28);
			append(td28, code19);
			append(code19, t91);
			append(tr8, t92);
			append(tr8, td29);
			append(td29, code20);
			append(code20, t93);
			append(tr8, t94);
			append(tr8, td30);
			append(td30, t95);
			append(tr8, t96);
			append(tr8, td31);
			append(td31, t97);
			append(td31, code21);
			append(code21, t98);
			append(td31, t99);
			append(section0, t100);
			append(section0, p5);
			append(p5, t101);
			append(p5, code22);
			append(code22, t102);
			append(p5, t103);
			append(p5, code23);
			append(code23, t104);
			append(p5, t105);
			append(section0, t106);
			append(section0, p6);
			append(p6, t107);
			append(p6, code24);
			append(code24, t108);
			append(p6, t109);
			append(p6, code25);
			append(code25, t110);
			append(p6, t111);
			append(section0, t112);
			mount_component(samplecode2, section0, null);
			append(section0, t113);
			append(section0, h31);
			append(h31, t114);
			append(section0, t115);
			mount_component(samplecode3, section0, null);
			insert(target, t116, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t117);
			append(section1, p7);
			append(p7, t118);
			append(section1, t119);
			mount_component(samplecode4, section1, null);
			append(section1, t120);
			append(section1, p8);
			append(p8, t121);
			append(p8, code26);
			code26.innerHTML = raw0_value;
			append(p8, t122);
			append(p8, code27);
			code27.innerHTML = raw1_value;
			append(p8, t123);
			append(section1, t124);
			mount_component(samplecode5, section1, null);
			insert(target, t125, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t126);
			append(section2, p9);
			append(p9, t127);
			append(p9, code28);
			append(code28, t128);
			append(p9, t129);
			append(section2, t130);
			mount_component(samplecode6, section2, null);
			append(section2, t131);
			append(section2, p10);
			append(p10, t132);
			append(section2, t133);
			mount_component(samplecode7, section2, null);
			insert(target, t134, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t135);
			append(section3, p11);
			append(p11, t136);
			append(section3, t137);
			mount_component(samplecode8, section3, null);
			insert(target, t138, anchor);
			insert(target, section4, anchor);
			mount_component(heading4, section4, null);
			append(section4, t139);
			append(section4, p12);
			append(p12, t140);
			append(p12, code29);
			append(code29, t141);
			append(p12, t142);
			append(p12, code30);
			append(code30, t143);
			append(p12, t144);
			append(section4, t145);
			append(section4, h32);
			append(h32, t146);
			append(section4, t147);
			append(section4, p13);
			append(p13, t148);
			append(p13, span0);
			append(span0, t149);
			append(p13, t150);
			append(p13, span1);
			append(span1, t151);
			append(p13, t152);
			append(section4, t153);
			append(section4, p14);
			append(p14, t154);
			append(p14, code31);
			append(code31, t155);
			append(p14, t156);
			append(section4, t157);
			mount_component(tip, section4, null);
			append(section4, t158);
			mount_component(samplecode9, section4, null);
			append(section4, t159);
			append(section4, h33);
			append(h33, t160);
			append(section4, t161);
			append(section4, p15);
			append(p15, t162);
			append(section4, t163);
			append(section4, p16);
			append(p16, t164);
			append(p16, code32);
			append(code32, t165);
			append(p16, t166);
			append(section4, t167);
			mount_component(samplecode10, section4, null);
			insert(target, t168, anchor);
			mount_component(examples, target, anchor);
			insert(target, t169, anchor);
			mount_component(relatedvalidators, target, anchor);
			insert(target, t170, anchor);
			insert(target, section5, anchor);
			append(section5, div);
			mount_component(prevbutton, div, null);
			append(div, t171);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var heading4_changes = {};
			if (changed.$$scope) heading4_changes.$$scope = { changed, ctx };
			heading4.$set(heading4_changes);

			var tip_changes = {};
			if (changed.$$scope) tip_changes.$$scope = { changed, ctx };
			tip.$set(tip_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			samplecode3.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode4.$$.fragment.i(local);

			samplecode5.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			samplecode6.$$.fragment.i(local);

			samplecode7.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			samplecode8.$$.fragment.i(local);

			heading4.$$.fragment.i(local);

			tip.$$.fragment.i(local);

			samplecode9.$$.fragment.i(local);

			samplecode10.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			samplecode3.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode4.$$.fragment.o(local);
			samplecode5.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			samplecode6.$$.fragment.o(local);
			samplecode7.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			samplecode8.$$.fragment.o(local);
			heading4.$$.fragment.o(local);
			tip.$$.fragment.o(local);
			samplecode9.$$.fragment.o(local);
			samplecode10.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			samplecode1.$destroy();

			samplecode2.$destroy();

			samplecode3.$destroy();

			if (detaching) {
				detach(t116);
				detach(section1);
			}

			heading1.$destroy();

			samplecode4.$destroy();

			samplecode5.$destroy();

			if (detaching) {
				detach(t125);
				detach(section2);
			}

			heading2.$destroy();

			samplecode6.$destroy();

			samplecode7.$destroy();

			if (detaching) {
				detach(t134);
				detach(section3);
			}

			heading3.$destroy();

			samplecode8.$destroy();

			if (detaching) {
				detach(t138);
				detach(section4);
			}

			heading4.$destroy();

			tip.$destroy();

			samplecode9.$destroy();

			samplecode10.$destroy();

			if (detaching) {
				detach(t168);
			}

			examples.$destroy(detaching);

			if (detaching) {
				detach(t169);
			}

			relatedvalidators.$destroy(detaching);

			if (detaching) {
				detach(t170);
				detach(section5);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • remote validator";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, z as check_outros, I as destroy_each, r as noop, y as on_outro, x as group_outros } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import { a as slug } from './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';
import { a as SampleData } from './chunk.41999a23.js';
import { a as data } from './chunk.259bc606.js';
import { a as random } from './chunk.83a1f42c.js';

/* src/routes/guide/validators/id/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/validators/id/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.item = list[i];
	child_ctx.index = i;
	return child_ctx;
}

// (10:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (45:12) {#each data as item, index}
function create_each_block(ctx) {
	var tr, td0, t0_value = ctx.index + 1, t0, t1, td1, a, t2_value = ctx.item.country, t2, a_href_value, a_title_value, t3, td2, t4_value = ctx.item.abbr || '-', t4, t5, td3, t6_value = ctx.item.code, t6, t7, current;

	var sampledata = new SampleData({
		props: {
		sample: { country: ctx.item.code, sample: random(ctx.item.validExamples.concat(ctx.item.invalidExamples)) },
		sender: "/guide/validators/id/basic",
		renderSample: func
	},
		$$inline: true
	});

	return {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			td1 = element("td");
			a = element("a");
			t2 = text(t2_value);
			t3 = space();
			td2 = element("td");
			t4 = text(t4_value);
			t5 = space();
			td3 = element("td");
			t6 = text(t6_value);
			t7 = space();
			sampledata.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", { class: true }, false);
			var tr_nodes = children(tr);

			td0 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			t0 = claim_text(td0_nodes, t0_value);
			td0_nodes.forEach(detach);
			t1 = claim_text(tr_nodes, "\n                    ");

			td1 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			a = claim_element(td1_nodes, "A", { href: true, title: true, class: true }, false);
			var a_nodes = children(a);

			t2 = claim_text(a_nodes, t2_value);
			a_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			t3 = claim_text(tr_nodes, "\n                    ");

			td2 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t4 = claim_text(td2_nodes, t4_value);
			td2_nodes.forEach(detach);
			t5 = claim_text(tr_nodes, "\n                    ");

			td3 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			t6 = claim_text(td3_nodes, t6_value);
			td3_nodes.forEach(detach);
			t7 = claim_text(tr_nodes, "\n                    ");
			sampledata.$$.fragment.l(tr_nodes);
			tr_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			td0.className = "pv2 ph3";
			add_location(td0, file, 46, 20, 2432);
			a.href = a_href_value = "/guide/validators/id/" + slug(ctx.item.adjective) + "-identification-number";
			a.title = a_title_value = "" + ctx.item.adjective + " identification number validator";
			a.className = "blue dim link pa2";
			add_location(a, file, 47, 40, 2509);
			td1.className = "pv2 ph3";
			add_location(td1, file, 47, 20, 2489);
			td2.className = "pv2 ph3";
			add_location(td2, file, 48, 20, 2712);
			td3.className = "pv2 ph3";
			add_location(td3, file, 49, 20, 2776);
			tr.className = "striped--light-gray";
			add_location(tr, file, 45, 16, 2379);
		},

		m: function mount(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td0);
			append(td0, t0);
			append(tr, t1);
			append(tr, td1);
			append(td1, a);
			append(a, t2);
			append(tr, t3);
			append(tr, td2);
			append(td2, t4);
			append(tr, t5);
			append(tr, td3);
			append(td3, t6);
			append(tr, t7);
			mount_component(sampledata, tr, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var sampledata_changes = {};
			if (changed.data || changed.random) sampledata_changes.sample = { country: ctx.item.code, sample: random(ctx.item.validExamples.concat(ctx.item.invalidExamples)) };
			sampledata.$set(sampledata_changes);
		},

		i: function intro(local) {
			if (current) return;
			sampledata.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			sampledata.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(tr);
			}

			sampledata.$destroy();
		}
	};
}

// (83:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (89:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("ES6 Module Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "ES6 Module Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (124:12) <PrevButton target="/guide/validators/iban">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("iban validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "iban validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (125:12) <NextButton target="/guide/validators/id/{slug(data[0].adjective)}-identification-number">
function create_default_slot_1(ctx) {
	var t0_value = data[0].adjective, t0, t1;

	return {
		c: function create() {
			t0 = text(t0_value);
			t1 = text(" id validator");
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, t0_value);
			t1 = claim_text(nodes, " id validator");
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(t1);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, a0, t3, t4, section0, t5, h30, t6, t7, p0, sup0, t8, t9, a1, t10, t11, t12, table0, tr0, th0, t13, t14, th1, t15, t16, th2, t17, t18, th3, t19, t20, tr1, td0, code0, t21, sup1, t22, t23, td1, code1, t24, t25, td2, t26, t27, td3, t28, t29, tr2, td4, code2, t30, t31, td5, code3, t32, t33, td6, t34, t35, td7, t36, t37, p1, t38, t39, table1, tr3, th4, t40, t41, th5, t42, t43, th6, t44, t45, th7, t46, t47, th8, t48, t49, th9, t50, t51, t52, h31, t53, t54, t55, section1, t56, p2, t57, t58, t59, section2, t60, p3, t61, t62, t63, t64, t65, section3, div, t66, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var each_value = data;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	function outro_block(i, detaching, local) {
		if (each_blocks[i]) {
			if (detaching) {
				on_outro(() => {
					each_blocks[i].d(detaching);
					each_blocks[i] = null;
				});
			}

			each_blocks[i].o(local);
		}
	}

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import id from 'formvalidation/dist/es6/validators/id';

const result = id().validate({
    value: ...,
    options: {
        // Can be a string or a function returns a string
        country: ...,
        message: ...,
    },
});
/*
result is an object of
{
    valid: true or false,
    message: The error message
}
*/
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/validators/id/basic",
		frameworks: ['bootstrap', 'tachyons']
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import id from 'formvalidation/dist/es6/validators/id';

const res1 = id().validate({
    value: '54362315K',
    options: {
        country: 'ES',
        message: 'The value is not a valid ID',
    },
});
// res1.valid === true

const res2 = id().validate({
    value: '511062-5629',
    options: {
        country: 'DK',
        message: 'The value is not a valid ID',
    },
});
// res2.valid === false
` },
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Switching validators on the same field',
    ] },
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['vat'] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/validators/iban",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/validators/id/" + slug(data[0].adjective) + "-identification-number",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("id validator");
			t1 = space();
			h2 = element("h2");
			t2 = text("Validate an ");
			a0 = element("a");
			t3 = text("identification number");
			t4 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t5 = space();
			h30 = element("h3");
			t6 = text("Using with form field");
			t7 = space();
			p0 = element("p");
			sup0 = element("sup");
			t8 = text("*");
			t9 = text(" presents a required option. The HTML attributes are used to set the validator options via the ");
			a1 = element("a");
			t10 = text("Declarative");
			t11 = text(" plugin");
			t12 = space();
			table0 = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t13 = text("Name");
			t14 = space();
			th1 = element("th");
			t15 = text("HTML attribute");
			t16 = space();
			th2 = element("th");
			t17 = text("Type");
			t18 = space();
			th3 = element("th");
			t19 = text("Description");
			t20 = space();
			tr1 = element("tr");
			td0 = element("td");
			code0 = element("code");
			t21 = text("country");
			sup1 = element("sup");
			t22 = text("*");
			t23 = space();
			td1 = element("td");
			code1 = element("code");
			t24 = text("data-fv-id___country");
			t25 = space();
			td2 = element("td");
			t26 = text("String or Function");
			t27 = space();
			td3 = element("td");
			t28 = text("An ISO-3166 country code");
			t29 = space();
			tr2 = element("tr");
			td4 = element("td");
			code2 = element("code");
			t30 = text("message");
			t31 = space();
			td5 = element("td");
			code3 = element("code");
			t32 = text("data-fv-id___message");
			t33 = space();
			td6 = element("td");
			t34 = text("String");
			t35 = space();
			td7 = element("td");
			t36 = text("The error message");
			t37 = space();
			p1 = element("p");
			t38 = text("The validator supports the following countries (click the sample number to validate it):");
			t39 = space();
			table1 = element("table");
			tr3 = element("tr");
			th4 = element("th");
			t40 = text("#");
			t41 = space();
			th5 = element("th");
			t42 = text("Country");
			t43 = space();
			th6 = element("th");
			t44 = text("Abbreviation ID system");
			t45 = space();
			th7 = element("th");
			t46 = text("Country code");
			t47 = space();
			th8 = element("th");
			t48 = text("Sample ID");
			t49 = space();
			th9 = element("th");
			t50 = text("Is it valid?");
			t51 = space();

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t52 = space();
			h31 = element("h3");
			t53 = text("Using with ES6 module");
			t54 = space();
			samplecode0.$$.fragment.c();
			t55 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t56 = space();
			p2 = element("p");
			t57 = text("You can click on sample from the table above to see if it's a valid or invalid id.");
			t58 = space();
			demo.$$.fragment.c();
			t59 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t60 = space();
			p3 = element("p");
			t61 = text("The following snippet shows how to use the id validator with ES6 module:");
			t62 = space();
			samplecode1.$$.fragment.c();
			t63 = space();
			examples.$$.fragment.c();
			t64 = space();
			relatedvalidators.$$.fragment.c();
			t65 = space();
			section3 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t66 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "id validator");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Validate an ");

			a0 = claim_element(h2_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t3 = claim_text(a0_nodes, "identification number");
			a0_nodes.forEach(detach);
			h2_nodes.forEach(detach);
			t4 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t5 = claim_text(section0_nodes, "\n\n        ");

			h30 = claim_element(section0_nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t6 = claim_text(h30_nodes, "Using with form field");
			h30_nodes.forEach(detach);
			t7 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			sup0 = claim_element(p0_nodes, "SUP", {}, false);
			var sup0_nodes = children(sup0);

			t8 = claim_text(sup0_nodes, "*");
			sup0_nodes.forEach(detach);
			t9 = claim_text(p0_nodes, " presents a required option. The HTML attributes are used to set the validator options via the ");

			a1 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t10 = claim_text(a1_nodes, "Declarative");
			a1_nodes.forEach(detach);
			t11 = claim_text(p0_nodes, " plugin");
			p0_nodes.forEach(detach);
			t12 = claim_text(section0_nodes, "\n        ");

			table0 = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table0_nodes = children(table0);

			tr0 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t13 = claim_text(th0_nodes, "Name");
			th0_nodes.forEach(detach);
			t14 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t15 = claim_text(th1_nodes, "HTML attribute");
			th1_nodes.forEach(detach);
			t16 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t17 = claim_text(th2_nodes, "Type");
			th2_nodes.forEach(detach);
			t18 = claim_text(tr0_nodes, "\n                ");

			th3 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th3_nodes = children(th3);

			t19 = claim_text(th3_nodes, "Description");
			th3_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t20 = claim_text(table0_nodes, "\n            ");

			tr1 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code0 = claim_element(td0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t21 = claim_text(code0_nodes, "country");
			code0_nodes.forEach(detach);

			sup1 = claim_element(td0_nodes, "SUP", {}, false);
			var sup1_nodes = children(sup1);

			t22 = claim_text(sup1_nodes, "*");
			sup1_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t23 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			code1 = claim_element(td1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t24 = claim_text(code1_nodes, "data-fv-id___country");
			code1_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			t25 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t26 = claim_text(td2_nodes, "String or Function");
			td2_nodes.forEach(detach);
			t27 = claim_text(tr1_nodes, "\n                ");

			td3 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			t28 = claim_text(td3_nodes, "An ISO-3166 country code");
			td3_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t29 = claim_text(table0_nodes, "\n            ");

			tr2 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			code2 = claim_element(td4_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t30 = claim_text(code2_nodes, "message");
			code2_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t31 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			code3 = claim_element(td5_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t32 = claim_text(code3_nodes, "data-fv-id___message");
			code3_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			t33 = claim_text(tr2_nodes, "\n                ");

			td6 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			t34 = claim_text(td6_nodes, "String");
			td6_nodes.forEach(detach);
			t35 = claim_text(tr2_nodes, "\n                ");

			td7 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			t36 = claim_text(td7_nodes, "The error message");
			td7_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			table0_nodes.forEach(detach);
			t37 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t38 = claim_text(p1_nodes, "The validator supports the following countries (click the sample number to validate it):");
			p1_nodes.forEach(detach);
			t39 = claim_text(section0_nodes, "\n\n        ");

			table1 = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table1_nodes = children(table1);

			tr3 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			th4 = claim_element(tr3_nodes, "TH", { class: true }, false);
			var th4_nodes = children(th4);

			t40 = claim_text(th4_nodes, "#");
			th4_nodes.forEach(detach);
			t41 = claim_text(tr3_nodes, "\n                ");

			th5 = claim_element(tr3_nodes, "TH", { class: true }, false);
			var th5_nodes = children(th5);

			t42 = claim_text(th5_nodes, "Country");
			th5_nodes.forEach(detach);
			t43 = claim_text(tr3_nodes, "\n                ");

			th6 = claim_element(tr3_nodes, "TH", { class: true }, false);
			var th6_nodes = children(th6);

			t44 = claim_text(th6_nodes, "Abbreviation ID system");
			th6_nodes.forEach(detach);
			t45 = claim_text(tr3_nodes, "\n                ");

			th7 = claim_element(tr3_nodes, "TH", { class: true }, false);
			var th7_nodes = children(th7);

			t46 = claim_text(th7_nodes, "Country code");
			th7_nodes.forEach(detach);
			t47 = claim_text(tr3_nodes, "\n                ");

			th8 = claim_element(tr3_nodes, "TH", { class: true }, false);
			var th8_nodes = children(th8);

			t48 = claim_text(th8_nodes, "Sample ID");
			th8_nodes.forEach(detach);
			t49 = claim_text(tr3_nodes, "\n                ");

			th9 = claim_element(tr3_nodes, "TH", { class: true }, false);
			var th9_nodes = children(th9);

			t50 = claim_text(th9_nodes, "Is it valid?");
			th9_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			t51 = claim_text(table1_nodes, "\n            ");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(table1_nodes);
			}

			table1_nodes.forEach(detach);
			t52 = claim_text(section0_nodes, "\n\n        ");

			h31 = claim_element(section0_nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t53 = claim_text(h31_nodes, "Using with ES6 module");
			h31_nodes.forEach(detach);
			t54 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t55 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t56 = claim_text(section1_nodes, "\n        ");

			p2 = claim_element(section1_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t57 = claim_text(p2_nodes, "You can click on sample from the table above to see if it's a valid or invalid id.");
			p2_nodes.forEach(detach);
			t58 = claim_text(section1_nodes, "\n        ");
			demo.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t59 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t60 = claim_text(section2_nodes, "\n\n        ");

			p3 = claim_element(section2_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t61 = claim_text(p3_nodes, "The following snippet shows how to use the id validator with ES6 module:");
			p3_nodes.forEach(detach);
			t62 = claim_text(section2_nodes, "\n");
			samplecode1.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t63 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			t64 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			t65 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			div = claim_element(section3_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t66 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 94);
			a0.href = "https://en.wikipedia.org/wiki/National_identification_number";
			a0.className = "blue dim link";
			add_location(a0, file, 6, 38, 178);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 144);
			add_location(h30, file, 11, 8, 373);
			add_location(sup0, file, 12, 29, 433);
			a1.href = "/guide/plugins/declarative";
			a1.className = "blue dim link";
			add_location(a1, file, 12, 136, 540);
			p0.className = "lh-copy i";
			add_location(p0, file, 12, 8, 412);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 15, 16, 753);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 16, 16, 813);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 17, 16, 883);
			th3.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th3, file, 18, 16, 943);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 14, 12, 704);
			add_location(code0, file, 21, 36, 1093);
			add_location(sup1, file, 21, 56, 1113);
			td0.className = "pv2 ph3";
			add_location(td0, file, 21, 16, 1073);
			add_location(code1, file, 22, 36, 1167);
			td1.className = "pv2 ph3";
			add_location(td1, file, 22, 16, 1147);
			td2.className = "pv2 ph3";
			add_location(td2, file, 23, 16, 1222);
			td3.className = "pv2 ph3";
			add_location(td3, file, 24, 16, 1282);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 20, 12, 1024);
			add_location(code2, file, 27, 36, 1431);
			td4.className = "pv2 ph3";
			add_location(td4, file, 27, 16, 1411);
			add_location(code3, file, 28, 36, 1493);
			td5.className = "pv2 ph3";
			add_location(td5, file, 28, 16, 1473);
			td6.className = "pv2 ph3";
			add_location(td6, file, 29, 16, 1548);
			td7.className = "pv2 ph3";
			add_location(td7, file, 30, 16, 1596);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 26, 12, 1362);
			table0.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table0, file, 13, 8, 634);
			p1.className = "lh-copy";
			add_location(p1, file, 33, 8, 1682);
			th4.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th4, file, 37, 16, 1922);
			th5.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th5, file, 38, 16, 1979);
			th6.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th6, file, 39, 16, 2042);
			th7.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th7, file, 40, 16, 2120);
			th8.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th8, file, 41, 16, 2188);
			th9.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th9, file, 42, 16, 2253);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 36, 12, 1873);
			table1.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table1, file, 35, 8, 1803);
			add_location(h31, file, 58, 8, 3153);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 307);
			p2.className = "lh-copy";
			add_location(p2, file, 83, 8, 3688);
			section1.className = "mv5";
			add_location(section1, file, 81, 4, 3617);
			p3.className = "lh-copy";
			add_location(p3, file, 90, 8, 3983);
			section2.className = "mv5";
			add_location(section2, file, 87, 4, 3906);
			div.className = "flex";
			add_location(div, file, 122, 8, 4762);
			section3.className = "mv5";
			add_location(section3, file, 121, 4, 4732);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			append(h2, a0);
			append(a0, t3);
			insert(target, t4, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t5);
			append(section0, h30);
			append(h30, t6);
			append(section0, t7);
			append(section0, p0);
			append(p0, sup0);
			append(sup0, t8);
			append(p0, t9);
			append(p0, a1);
			append(a1, t10);
			append(p0, t11);
			append(section0, t12);
			append(section0, table0);
			append(table0, tr0);
			append(tr0, th0);
			append(th0, t13);
			append(tr0, t14);
			append(tr0, th1);
			append(th1, t15);
			append(tr0, t16);
			append(tr0, th2);
			append(th2, t17);
			append(tr0, t18);
			append(tr0, th3);
			append(th3, t19);
			append(table0, t20);
			append(table0, tr1);
			append(tr1, td0);
			append(td0, code0);
			append(code0, t21);
			append(td0, sup1);
			append(sup1, t22);
			append(tr1, t23);
			append(tr1, td1);
			append(td1, code1);
			append(code1, t24);
			append(tr1, t25);
			append(tr1, td2);
			append(td2, t26);
			append(tr1, t27);
			append(tr1, td3);
			append(td3, t28);
			append(table0, t29);
			append(table0, tr2);
			append(tr2, td4);
			append(td4, code2);
			append(code2, t30);
			append(tr2, t31);
			append(tr2, td5);
			append(td5, code3);
			append(code3, t32);
			append(tr2, t33);
			append(tr2, td6);
			append(td6, t34);
			append(tr2, t35);
			append(tr2, td7);
			append(td7, t36);
			append(section0, t37);
			append(section0, p1);
			append(p1, t38);
			append(section0, t39);
			append(section0, table1);
			append(table1, tr3);
			append(tr3, th4);
			append(th4, t40);
			append(tr3, t41);
			append(tr3, th5);
			append(th5, t42);
			append(tr3, t43);
			append(tr3, th6);
			append(th6, t44);
			append(tr3, t45);
			append(tr3, th7);
			append(th7, t46);
			append(tr3, t47);
			append(tr3, th8);
			append(th8, t48);
			append(tr3, t49);
			append(tr3, th9);
			append(th9, t50);
			append(table1, t51);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(table1, null);
			}

			append(section0, t52);
			append(section0, h31);
			append(h31, t53);
			append(section0, t54);
			mount_component(samplecode0, section0, null);
			insert(target, t55, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t56);
			append(section1, p2);
			append(p2, t57);
			append(section1, t58);
			mount_component(demo, section1, null);
			insert(target, t59, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t60);
			append(section2, p3);
			append(p3, t61);
			append(section2, t62);
			mount_component(samplecode1, section2, null);
			insert(target, t63, anchor);
			mount_component(examples, target, anchor);
			insert(target, t64, anchor);
			mount_component(relatedvalidators, target, anchor);
			insert(target, t65, anchor);
			insert(target, section3, anchor);
			append(section3, div);
			mount_component(prevbutton, div, null);
			append(div, t66);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			if (changed.data || changed.random || changed.slug) {
				each_value = data;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						each_blocks[i].i(1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].i(1);
						each_blocks[i].m(table1, null);
					}
				}

				group_outros();
				for (; i < each_blocks.length; i += 1) outro_block(i, 1, 1);
				check_outros();
			}

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.slug || changed.data) nextbutton_changes.target = "/guide/validators/id/" + slug(data[0].adjective) + "-identification-number";
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			for (var i = 0; i < each_value.length; i += 1) each_blocks[i].i();

			samplecode0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);

			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) outro_block(i, 0);

			samplecode0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t4);
				detach(section0);
			}

			heading0.$destroy();

			destroy_each(each_blocks, detaching);

			samplecode0.$destroy();

			if (detaching) {
				detach(t55);
				detach(section1);
			}

			heading1.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t59);
				detach(section2);
			}

			heading2.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t63);
			}

			examples.$destroy(detaching);

			if (detaching) {
				detach(t64);
			}

			relatedvalidators.$destroy(detaching);

			if (detaching) {
				detach(t65);
				detach(section3);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • id validator";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

function func(s) {
	return s.sample;
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

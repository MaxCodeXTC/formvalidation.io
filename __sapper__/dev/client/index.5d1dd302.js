import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, w as empty, h as element, k as claim_element, l as children, n as add_location, p as append, i as text, r as noop, O as detach_between, z as check_outros, I as destroy_each, y as on_outro, x as group_outros } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';
import { a as SampleData } from './chunk.41999a23.js';

/* src/routes/guide/validators/integer/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/validators/integer/index.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.example = list[i];
	child_ctx.index = i;
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.sample = list[i];
	return child_ctx;
}

// (10:8) <Heading>
function create_default_slot_8(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (81:8) <Heading>
function create_default_slot_7(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Supporting locales");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Supporting locales");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (96:36) {#if index == 0}
function create_if_block_2(ctx) {
	var t_value = ctx.sample.country, t;

	return {
		c: function create() {
			t = text(t_value);
		},

		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (97:44) {#if index == 0}
function create_if_block_1(ctx) {
	var raw_value = ctx.sample.thousandsSeparatorDesc, raw_before, raw_after;

	return {
		c: function create() {
			raw_before = element('noscript');
			raw_after = element('noscript');
		},

		l: function claim(nodes) {
			raw_before = element('noscript');
			raw_after = element('noscript');
		},

		m: function mount(target, anchor) {
			insert(target, raw_before, anchor);
			raw_before.insertAdjacentHTML("afterend", raw_value);
			insert(target, raw_after, anchor);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_between(raw_before, raw_after);
				detach(raw_before);
				detach(raw_after);
			}
		}
	};
}

// (98:44) {#if index == 0}
function create_if_block(ctx) {
	var raw_value = ctx.sample.decimalSeparatorDesc, raw_before, raw_after;

	return {
		c: function create() {
			raw_before = element('noscript');
			raw_after = element('noscript');
		},

		l: function claim(nodes) {
			raw_before = element('noscript');
			raw_after = element('noscript');
		},

		m: function mount(target, anchor) {
			insert(target, raw_before, anchor);
			raw_before.insertAdjacentHTML("afterend", raw_value);
			insert(target, raw_after, anchor);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_between(raw_before, raw_after);
				detach(raw_before);
				detach(raw_after);
			}
		}
	};
}

// (94:16) {#each sample.examples as example, index}
function create_each_block_1(ctx) {
	var tr, td0, t0, td1, t1, td2, t2, current;

	var if_block0 = (ctx.index == 0) && create_if_block_2(ctx);

	var if_block1 = (ctx.index == 0) && create_if_block_1(ctx);

	var if_block2 = (ctx.index == 0) && create_if_block(ctx);

	var sampledata = new SampleData({
		props: {
		sample: {sample: ctx.example, country: ctx.sample.code, thousandsSeparator: ctx.sample.thousandsSeparator, decimalSeparator: ctx.sample.decimalSeparator},
		sender: "/guide/validators/integer/locale",
		renderSample: func
	},
		$$inline: true
	});

	return {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			if (if_block0) if_block0.c();
			t0 = space();
			td1 = element("td");
			if (if_block1) if_block1.c();
			t1 = space();
			td2 = element("td");
			if (if_block2) if_block2.c();
			t2 = space();
			sampledata.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", { class: true }, false);
			var tr_nodes = children(tr);

			td0 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			if (if_block0) if_block0.l(td0_nodes);
			td0_nodes.forEach(detach);
			t0 = claim_text(tr_nodes, "\n                ");

			td1 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			if (if_block1) if_block1.l(td1_nodes);
			td1_nodes.forEach(detach);
			t1 = claim_text(tr_nodes, "\n                ");

			td2 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			if (if_block2) if_block2.l(td2_nodes);
			td2_nodes.forEach(detach);
			t2 = claim_text(tr_nodes, "\n                ");
			sampledata.$$.fragment.l(tr_nodes);
			tr_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			td0.className = "pv2 ph3";
			add_location(td0, file, 95, 16, 4298);
			td1.className = "pv2 ph3 lh-copy";
			add_location(td1, file, 96, 16, 4377);
			td2.className = "pv2 ph3 lh-copy";
			add_location(td2, file, 97, 16, 4485);
			tr.className = "striped--light-gray";
			add_location(tr, file, 94, 16, 4249);
		},

		m: function mount(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td0);
			if (if_block0) if_block0.m(td0, null);
			append(tr, t0);
			append(tr, td1);
			if (if_block1) if_block1.m(td1, null);
			append(tr, t1);
			append(tr, td2);
			if (if_block2) if_block2.m(td2, null);
			append(tr, t2);
			mount_component(sampledata, tr, null);
			current = true;
		},

		p: function update(changed, ctx) {
			if (ctx.index == 0) {
				if (if_block0) {
					if_block0.p(changed, ctx);
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					if_block0.m(td0, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (ctx.index == 0) {
				if (if_block1) {
					if_block1.p(changed, ctx);
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					if_block1.m(td1, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (ctx.index == 0) {
				if (if_block2) {
					if_block2.p(changed, ctx);
				} else {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					if_block2.m(td2, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			var sampledata_changes = {};
			if (changed._samples) sampledata_changes.sample = {sample: ctx.example, country: ctx.sample.code, thousandsSeparator: ctx.sample.thousandsSeparator, decimalSeparator: ctx.sample.decimalSeparator};
			sampledata.$set(sampledata_changes);
		},

		i: function intro(local) {
			if (current) return;
			sampledata.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			sampledata.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(tr);
			}

			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();

			sampledata.$destroy();
		}
	};
}

// (93:12) {#each _samples as sample}
function create_each_block(ctx) {
	var each_1_anchor, current;

	var each_value_1 = ctx.sample.examples;

	var each_blocks = [];

	for (var i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	function outro_block(i, detaching, local) {
		if (each_blocks[i]) {
			if (detaching) {
				on_outro(() => {
					each_blocks[i].d(detaching);
					each_blocks[i] = null;
				});
			}

			each_blocks[i].o(local);
		}
	}

	return {
		c: function create() {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},

		l: function claim(nodes) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},

		m: function mount(target, anchor) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			if (changed._samples) {
				each_value_1 = ctx.sample.examples;

				for (var i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						each_blocks[i].i(1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].i(1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();
				for (; i < each_blocks.length; i += 1) outro_block(i, 1, 1);
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			for (var i = 0; i < each_value_1.length; i += 1) each_blocks[i].i();

			current = true;
		},

		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) outro_block(i, 0);

			current = false;
		},

		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach(each_1_anchor);
			}
		}
	};
}

// (116:8) <Tip>
function create_default_slot_6(ctx) {
	var t0, code0, t1, t2, code1, t3, t4;

	return {
		c: function create() {
			t0 = text("Since the thousands and decimal separators are various, the field should use ");
			code0 = element("code");
			t1 = text("type=\"text\"");
			t2 = text(" attribute.\n            Using ");
			code1 = element("code");
			t3 = text("type=\"number\"");
			t4 = text(" for field will restrict the input to use default separators for an integer number (an empty string for thousands, and a dot for decimal parts).");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "Since the thousands and decimal separators are various, the field should use ");

			code0 = claim_element(nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t1 = claim_text(code0_nodes, "type=\"text\"");
			code0_nodes.forEach(detach);
			t2 = claim_text(nodes, " attribute.\n            Using ");

			code1 = claim_element(nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t3 = claim_text(code1_nodes, "type=\"number\"");
			code1_nodes.forEach(detach);
			t4 = claim_text(nodes, " for field will restrict the input to use default separators for an integer number (an empty string for thousands, and a dot for decimal parts).");
			this.h();
		},

		h: function hydrate() {
			add_location(code0, file, 116, 89, 5581);
			add_location(code1, file, 117, 18, 5635);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, code0, anchor);
			append(code0, t1);
			insert(target, t2, anchor);
			insert(target, code1, anchor);
			append(code1, t3);
			insert(target, t4, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(code0);
				detach(t2);
				detach(code1);
				detach(t4);
			}
		}
	};
}

// (125:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (130:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("HTML5 Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "HTML5 Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (136:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("ES6 Module Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "ES6 Module Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (179:12) <PrevButton target="/guide/validators/imo">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("imo validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "imo validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (180:12) <NextButton target="/guide/validators/ip">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("ip validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "ip validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, h30, t5, t6, p0, t7, a0, t8, t9, t10, table0, tr0, th0, t11, t12, th1, t13, t14, th2, t15, t16, th3, t17, t18, tr1, td0, code0, t19, t20, td1, code1, t21, t22, td2, t23, t24, td3, t25, t26, tr2, td4, code2, t27, t28, td5, code3, t29, t30, td6, t31, t32, td7, t33, ul0, li0, t34, t35, li1, t36, t37, li2, t38, code4, t39, t40, t41, li3, t42, code5, t43, t44, t45, tr3, td8, code6, t46, t47, td9, code7, t48, t49, td10, t50, t51, td11, t52, ul1, li4, t53, code8, t54, t55, t56, li5, t57, code9, t58, t59, t60, p1, t61, code10, t62, t63, code11, t64, t65, span, t66, t67, t68, h31, t69, t70, t71, section1, t72, p2, t73, t74, p3, t75, t76, table1, tr4, th4, t77, t78, th5, t79, t80, th6, t81, t82, th7, t83, t84, th8, t85, t86, t87, p4, t88, a1, t89, t90, code12, t91, t92, code13, t93, t94, t95, t96, t97, t98, section2, t99, t100, section3, t101, p5, t102, a2, t103, t104, code14, t105, t106, t107, t108, section4, t109, p6, t110, t111, t112, t113, section5, div, t114, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_8] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import integer from 'formvalidation/dist/es6/validators/integer';

const result = integer().validate({
    value: ...,
    options: {
        decimalSeparator: ...,
        message: ...,
        thousandsSeparator: ...,
    },
});
/*
result is an object of
{
    valid: true or false,
    message: The error message
}
*/
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var each_value = ctx._samples;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	function outro_block(i, detaching, local) {
		if (each_blocks[i]) {
			if (detaching) {
				on_outro(() => {
					each_blocks[i].d(detaching);
					each_blocks[i] = null;
				});
			}

			each_blocks[i].o(local);
		}
	}

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
formValidationInstance
    // Update the options
    .updateValidatorOption('number', 'integer', 'thousandsSeparator', thousandsSeparator)
    .updateValidatorOption('number', 'integer', 'decimalSeparator', decimalSeparator);
` },
		$$inline: true
	});

	var tip = new Tip({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo0 = new Demo({
		props: {
		prefix: "/guide/validators/integer/locale",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/validators/integer/basic",
		frameworks: ['bootstrap', 'tachyons']
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo2 = new Demo({
		props: {
		prefix: "/guide/validators/integer/html5",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading4 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import integer from 'formvalidation/dist/es6/validators/integer';

const res1 = integer().validate({
    value: '967295.00',
    options: {
        thousandsSeparator: '',
        decimalSeparator: '.',
        message: 'The value is not a valid integer number',
    },
});
// res1.valid === true

const res2 = integer().validate({
    value: '4967,295',
    options: {
        thousandsSeparator: ',',
        decimalSeparator: '.',
        message: 'The value is not a valid integer number',
    },
});
// res2.valid === false

const res3 = integer().validate({
    value: '4 294 967 295',
    options: {
        thousandsSeparator: ' ',
        decimalSeparator: ',',
        message: 'The value is not a valid integer number',
    },
});
// res3.valid === true
` },
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['digits', 'numeric'] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/validators/imo",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/validators/ip",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("integer validator");
			t1 = space();
			h2 = element("h2");
			t2 = text("Validate an integer number. Accept both positive and negative number");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			h30 = element("h3");
			t5 = text("Using with form field");
			t6 = space();
			p0 = element("p");
			t7 = text("The HTML attributes are used to set the validator options via the ");
			a0 = element("a");
			t8 = text("Declarative");
			t9 = text(" plugin");
			t10 = space();
			table0 = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t11 = text("Name");
			t12 = space();
			th1 = element("th");
			t13 = text("HTML attribute");
			t14 = space();
			th2 = element("th");
			t15 = text("Type");
			t16 = space();
			th3 = element("th");
			t17 = text("Description");
			t18 = space();
			tr1 = element("tr");
			td0 = element("td");
			code0 = element("code");
			t19 = text("message");
			t20 = space();
			td1 = element("td");
			code1 = element("code");
			t21 = text("data-fv-integer___message");
			t22 = space();
			td2 = element("td");
			t23 = text("String");
			t24 = space();
			td3 = element("td");
			t25 = text("The error message");
			t26 = space();
			tr2 = element("tr");
			td4 = element("td");
			code2 = element("code");
			t27 = text("thousandsSeparator");
			t28 = space();
			td5 = element("td");
			code3 = element("code");
			t29 = text("data-fv-integer___thousands-separator");
			t30 = space();
			td6 = element("td");
			t31 = text("String");
			t32 = space();
			td7 = element("td");
			t33 = text("The thousands separator. The popular values are\n                    ");
			ul0 = element("ul");
			li0 = element("li");
			t34 = text("An empty string (the default value)");
			t35 = space();
			li1 = element("li");
			t36 = text("A bank space");
			t37 = space();
			li2 = element("li");
			t38 = text("A comma (");
			code4 = element("code");
			t39 = text(",");
			t40 = text(")");
			t41 = space();
			li3 = element("li");
			t42 = text("A dot (");
			code5 = element("code");
			t43 = text(".");
			t44 = text(")");
			t45 = space();
			tr3 = element("tr");
			td8 = element("td");
			code6 = element("code");
			t46 = text("decimalSeparator");
			t47 = space();
			td9 = element("td");
			code7 = element("code");
			t48 = text("data-fv-integer___decimal-separator");
			t49 = space();
			td10 = element("td");
			t50 = text("String");
			t51 = space();
			td11 = element("td");
			t52 = text("The decimal separator. The popular values are\n                    ");
			ul1 = element("ul");
			li4 = element("li");
			t53 = text("A dot (");
			code8 = element("code");
			t54 = text(".");
			t55 = text(") (the default value)");
			t56 = space();
			li5 = element("li");
			t57 = text("A comma (");
			code9 = element("code");
			t58 = text(",");
			t59 = text(")");
			t60 = space();
			p1 = element("p");
			t61 = text("The ");
			code10 = element("code");
			t62 = text("thousandsSeparator");
			t63 = text(" and ");
			code11 = element("code");
			t64 = text("decimalSeparator");
			t65 = text(" options are useful if your country use particular separators for thousands and decimal parts.\n            See the next ");
			span = element("span");
			t66 = text("Supporting locales");
			t67 = text(" section for more details.");
			t68 = space();
			h31 = element("h3");
			t69 = text("Using with ES6 module");
			t70 = space();
			samplecode0.$$.fragment.c();
			t71 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t72 = space();
			p2 = element("p");
			t73 = text("The thousands and decimal separators might take different value in certain countries. The following table introduces some popular values that are defined by various countries.");
			t74 = space();
			p3 = element("p");
			t75 = text("You can click the sample number to test:");
			t76 = space();
			table1 = element("table");
			tr4 = element("tr");
			th4 = element("th");
			t77 = text("Country");
			t78 = space();
			th5 = element("th");
			t79 = text("Thousands separator");
			t80 = space();
			th6 = element("th");
			t81 = text("Decimal separator");
			t82 = space();
			th7 = element("th");
			t83 = text("Sample");
			t84 = space();
			th8 = element("th");
			t85 = text("Is valid?");
			t86 = space();

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t87 = space();
			p4 = element("p");
			t88 = text("The example also uses the ");
			a1 = element("a");
			t89 = text("updateValidatorOption()");
			t90 = text(" method to set values for ");
			code12 = element("code");
			t91 = text("thousandsSeparator");
			t92 = text(" and ");
			code13 = element("code");
			t93 = text("decimalSeparator");
			t94 = text(" options.");
			t95 = space();
			samplecode1.$$.fragment.c();
			t96 = space();
			tip.$$.fragment.c();
			t97 = space();
			demo0.$$.fragment.c();
			t98 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t99 = space();
			demo1.$$.fragment.c();
			t100 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t101 = space();
			p5 = element("p");
			t102 = text("When the ");
			a2 = element("a");
			t103 = text("Declarative");
			t104 = text(" plugin is used, the integer validator will be enabled automatically when using HTML5 ");
			code14 = element("code");
			t105 = text("type=\"number\"");
			t106 = text(" attribute.");
			t107 = space();
			demo2.$$.fragment.c();
			t108 = space();
			section4 = element("section");
			heading4.$$.fragment.c();
			t109 = space();
			p6 = element("p");
			t110 = text("The following snippet shows how to use the integer validator with ES6 module:");
			t111 = space();
			samplecode2.$$.fragment.c();
			t112 = space();
			relatedvalidators.$$.fragment.c();
			t113 = space();
			section5 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t114 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "integer validator");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Validate an integer number. Accept both positive and negative number");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n\n        ");

			h30 = claim_element(section0_nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t5 = claim_text(h30_nodes, "Using with form field");
			h30_nodes.forEach(detach);
			t6 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t7 = claim_text(p0_nodes, "The HTML attributes are used to set the validator options via the ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t8 = claim_text(a0_nodes, "Declarative");
			a0_nodes.forEach(detach);
			t9 = claim_text(p0_nodes, " plugin");
			p0_nodes.forEach(detach);
			t10 = claim_text(section0_nodes, "\n        ");

			table0 = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table0_nodes = children(table0);

			tr0 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t11 = claim_text(th0_nodes, "Name");
			th0_nodes.forEach(detach);
			t12 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t13 = claim_text(th1_nodes, "HTML attribute");
			th1_nodes.forEach(detach);
			t14 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t15 = claim_text(th2_nodes, "Type");
			th2_nodes.forEach(detach);
			t16 = claim_text(tr0_nodes, "\n                ");

			th3 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th3_nodes = children(th3);

			t17 = claim_text(th3_nodes, "Description");
			th3_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t18 = claim_text(table0_nodes, "\n            ");

			tr1 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code0 = claim_element(td0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t19 = claim_text(code0_nodes, "message");
			code0_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t20 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			code1 = claim_element(td1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t21 = claim_text(code1_nodes, "data-fv-integer___message");
			code1_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			t22 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t23 = claim_text(td2_nodes, "String");
			td2_nodes.forEach(detach);
			t24 = claim_text(tr1_nodes, "\n                ");

			td3 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			t25 = claim_text(td3_nodes, "The error message");
			td3_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t26 = claim_text(table0_nodes, "\n            ");

			tr2 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			code2 = claim_element(td4_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t27 = claim_text(code2_nodes, "thousandsSeparator");
			code2_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t28 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			code3 = claim_element(td5_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t29 = claim_text(code3_nodes, "data-fv-integer___thousands-separator");
			code3_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			t30 = claim_text(tr2_nodes, "\n                ");

			td6 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			t31 = claim_text(td6_nodes, "String");
			td6_nodes.forEach(detach);
			t32 = claim_text(tr2_nodes, "\n                ");

			td7 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			t33 = claim_text(td7_nodes, "The thousands separator. The popular values are\n                    ");

			ul0 = claim_element(td7_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t34 = claim_text(li0_nodes, "An empty string (the default value)");
			li0_nodes.forEach(detach);
			t35 = claim_text(ul0_nodes, "\n                        ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t36 = claim_text(li1_nodes, "A bank space");
			li1_nodes.forEach(detach);
			t37 = claim_text(ul0_nodes, "\n                        ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t38 = claim_text(li2_nodes, "A comma (");

			code4 = claim_element(li2_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t39 = claim_text(code4_nodes, ",");
			code4_nodes.forEach(detach);
			t40 = claim_text(li2_nodes, ")");
			li2_nodes.forEach(detach);
			t41 = claim_text(ul0_nodes, "\n                        ");

			li3 = claim_element(ul0_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t42 = claim_text(li3_nodes, "A dot (");

			code5 = claim_element(li3_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t43 = claim_text(code5_nodes, ".");
			code5_nodes.forEach(detach);
			t44 = claim_text(li3_nodes, ")");
			li3_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			td7_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t45 = claim_text(table0_nodes, "\n            ");

			tr3 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td8 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			code6 = claim_element(td8_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t46 = claim_text(code6_nodes, "decimalSeparator");
			code6_nodes.forEach(detach);
			td8_nodes.forEach(detach);
			t47 = claim_text(tr3_nodes, "\n                ");

			td9 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			code7 = claim_element(td9_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t48 = claim_text(code7_nodes, "data-fv-integer___decimal-separator");
			code7_nodes.forEach(detach);
			td9_nodes.forEach(detach);
			t49 = claim_text(tr3_nodes, "\n                ");

			td10 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td10_nodes = children(td10);

			t50 = claim_text(td10_nodes, "String");
			td10_nodes.forEach(detach);
			t51 = claim_text(tr3_nodes, "\n                ");

			td11 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td11_nodes = children(td11);

			t52 = claim_text(td11_nodes, "The decimal separator. The popular values are\n                    ");

			ul1 = claim_element(td11_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li4 = claim_element(ul1_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			t53 = claim_text(li4_nodes, "A dot (");

			code8 = claim_element(li4_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t54 = claim_text(code8_nodes, ".");
			code8_nodes.forEach(detach);
			t55 = claim_text(li4_nodes, ") (the default value)");
			li4_nodes.forEach(detach);
			t56 = claim_text(ul1_nodes, "\n                        ");

			li5 = claim_element(ul1_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			t57 = claim_text(li5_nodes, "A comma (");

			code9 = claim_element(li5_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t58 = claim_text(code9_nodes, ",");
			code9_nodes.forEach(detach);
			t59 = claim_text(li5_nodes, ")");
			li5_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			td11_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			table0_nodes.forEach(detach);
			t60 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t61 = claim_text(p1_nodes, "The ");

			code10 = claim_element(p1_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t62 = claim_text(code10_nodes, "thousandsSeparator");
			code10_nodes.forEach(detach);
			t63 = claim_text(p1_nodes, " and ");

			code11 = claim_element(p1_nodes, "CODE", {}, false);
			var code11_nodes = children(code11);

			t64 = claim_text(code11_nodes, "decimalSeparator");
			code11_nodes.forEach(detach);
			t65 = claim_text(p1_nodes, " options are useful if your country use particular separators for thousands and decimal parts.\n            See the next ");

			span = claim_element(p1_nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t66 = claim_text(span_nodes, "Supporting locales");
			span_nodes.forEach(detach);
			t67 = claim_text(p1_nodes, " section for more details.");
			p1_nodes.forEach(detach);
			t68 = claim_text(section0_nodes, "\n\n        ");

			h31 = claim_element(section0_nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t69 = claim_text(h31_nodes, "Using with ES6 module");
			h31_nodes.forEach(detach);
			t70 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t71 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t72 = claim_text(section1_nodes, "\n        ");

			p2 = claim_element(section1_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t73 = claim_text(p2_nodes, "The thousands and decimal separators might take different value in certain countries. The following table introduces some popular values that are defined by various countries.");
			p2_nodes.forEach(detach);
			t74 = claim_text(section1_nodes, "\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t75 = claim_text(p3_nodes, "You can click the sample number to test:");
			p3_nodes.forEach(detach);
			t76 = claim_text(section1_nodes, "\n\n        ");

			table1 = claim_element(section1_nodes, "TABLE", { class: true }, false);
			var table1_nodes = children(table1);

			tr4 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			th4 = claim_element(tr4_nodes, "TH", { class: true }, false);
			var th4_nodes = children(th4);

			t77 = claim_text(th4_nodes, "Country");
			th4_nodes.forEach(detach);
			t78 = claim_text(tr4_nodes, "\n                ");

			th5 = claim_element(tr4_nodes, "TH", { class: true }, false);
			var th5_nodes = children(th5);

			t79 = claim_text(th5_nodes, "Thousands separator");
			th5_nodes.forEach(detach);
			t80 = claim_text(tr4_nodes, "\n                ");

			th6 = claim_element(tr4_nodes, "TH", { class: true }, false);
			var th6_nodes = children(th6);

			t81 = claim_text(th6_nodes, "Decimal separator");
			th6_nodes.forEach(detach);
			t82 = claim_text(tr4_nodes, "\n                ");

			th7 = claim_element(tr4_nodes, "TH", { class: true }, false);
			var th7_nodes = children(th7);

			t83 = claim_text(th7_nodes, "Sample");
			th7_nodes.forEach(detach);
			t84 = claim_text(tr4_nodes, "\n                ");

			th8 = claim_element(tr4_nodes, "TH", { class: true }, false);
			var th8_nodes = children(th8);

			t85 = claim_text(th8_nodes, "Is valid?");
			th8_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			t86 = claim_text(table1_nodes, "\n            ");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(table1_nodes);
			}

			table1_nodes.forEach(detach);
			t87 = claim_text(section1_nodes, "\n\n        ");

			p4 = claim_element(section1_nodes, "P", {}, false);
			var p4_nodes = children(p4);

			t88 = claim_text(p4_nodes, "The example also uses the ");

			a1 = claim_element(p4_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t89 = claim_text(a1_nodes, "updateValidatorOption()");
			a1_nodes.forEach(detach);
			t90 = claim_text(p4_nodes, " method to set values for ");

			code12 = claim_element(p4_nodes, "CODE", {}, false);
			var code12_nodes = children(code12);

			t91 = claim_text(code12_nodes, "thousandsSeparator");
			code12_nodes.forEach(detach);
			t92 = claim_text(p4_nodes, " and ");

			code13 = claim_element(p4_nodes, "CODE", {}, false);
			var code13_nodes = children(code13);

			t93 = claim_text(code13_nodes, "decimalSeparator");
			code13_nodes.forEach(detach);
			t94 = claim_text(p4_nodes, " options.");
			p4_nodes.forEach(detach);
			t95 = claim_text(section1_nodes, "\n\n        ");
			samplecode1.$$.fragment.l(section1_nodes);
			t96 = claim_text(section1_nodes, "\n        ");
			tip.$$.fragment.l(section1_nodes);
			t97 = claim_text(section1_nodes, "\n\n        ");
			demo0.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t98 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t99 = claim_text(section2_nodes, "\n        ");
			demo1.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t100 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t101 = claim_text(section3_nodes, "\n        ");

			p5 = claim_element(section3_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t102 = claim_text(p5_nodes, "When the ");

			a2 = claim_element(p5_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t103 = claim_text(a2_nodes, "Declarative");
			a2_nodes.forEach(detach);
			t104 = claim_text(p5_nodes, " plugin is used, the integer validator will be enabled automatically when using HTML5 ");

			code14 = claim_element(p5_nodes, "CODE", {}, false);
			var code14_nodes = children(code14);

			t105 = claim_text(code14_nodes, "type=\"number\"");
			code14_nodes.forEach(detach);
			t106 = claim_text(p5_nodes, " attribute.");
			p5_nodes.forEach(detach);
			t107 = claim_text(section3_nodes, "\n        ");
			demo2.$$.fragment.l(section3_nodes);
			section3_nodes.forEach(detach);
			t108 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			heading4.$$.fragment.l(section4_nodes);
			t109 = claim_text(section4_nodes, "\n\n        ");

			p6 = claim_element(section4_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t110 = claim_text(p6_nodes, "The following snippet shows how to use the integer validator with ES6 module:");
			p6_nodes.forEach(detach);
			t111 = claim_text(section4_nodes, "\n");
			samplecode2.$$.fragment.l(section4_nodes);
			section4_nodes.forEach(detach);
			t112 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			t113 = claim_text(nodes, "\n\n    ");

			section5 = claim_element(nodes, "SECTION", { class: true }, false);
			var section5_nodes = children(section5);

			div = claim_element(section5_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t114 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section5_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 99);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 154);
			add_location(h30, file, 11, 8, 321);
			a0.href = "/guide/plugins/declarative";
			a0.className = "blue dim link";
			add_location(a0, file, 12, 95, 447);
			p0.className = "lh-copy i";
			add_location(p0, file, 12, 8, 360);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 15, 16, 660);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 16, 16, 720);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 17, 16, 790);
			th3.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th3, file, 18, 16, 850);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 14, 12, 611);
			add_location(code0, file, 21, 36, 1000);
			td0.className = "pv2 ph3";
			add_location(td0, file, 21, 16, 980);
			add_location(code1, file, 22, 36, 1062);
			td1.className = "pv2 ph3";
			add_location(td1, file, 22, 16, 1042);
			td2.className = "pv2 ph3";
			add_location(td2, file, 23, 16, 1122);
			td3.className = "pv2 ph3";
			add_location(td3, file, 24, 16, 1170);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 20, 12, 931);
			add_location(code2, file, 27, 36, 1312);
			td4.className = "pv2 ph3";
			add_location(td4, file, 27, 16, 1292);
			add_location(code3, file, 28, 36, 1385);
			td5.className = "pv2 ph3";
			add_location(td5, file, 28, 16, 1365);
			td6.className = "pv2 ph3";
			add_location(td6, file, 29, 16, 1457);
			add_location(li0, file, 33, 24, 1667);
			add_location(li1, file, 34, 24, 1736);
			add_location(code4, file, 35, 37, 1795);
			add_location(li2, file, 35, 24, 1782);
			add_location(code5, file, 36, 35, 1851);
			add_location(li3, file, 36, 24, 1840);
			ul0.className = "ma0 pl3";
			add_location(ul0, file, 32, 20, 1622);
			td7.className = "pv2 ph3 lh-copy";
			add_location(td7, file, 30, 16, 1505);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 26, 12, 1243);
			add_location(code6, file, 41, 36, 2019);
			td8.className = "pv2 ph3";
			add_location(td8, file, 41, 16, 1999);
			add_location(code7, file, 42, 36, 2090);
			td9.className = "pv2 ph3";
			add_location(td9, file, 42, 16, 2070);
			td10.className = "pv2 ph3";
			add_location(td10, file, 43, 16, 2160);
			add_location(code8, file, 47, 35, 2379);
			add_location(li4, file, 47, 24, 2368);
			add_location(code9, file, 48, 37, 2457);
			add_location(li5, file, 48, 24, 2444);
			ul1.className = "ma0 pl3";
			add_location(ul1, file, 46, 20, 2323);
			td11.className = "pv2 ph3 lh-copy";
			add_location(td11, file, 44, 16, 2208);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 40, 12, 1950);
			table0.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table0, file, 13, 8, 541);
			add_location(code10, file, 53, 31, 2592);
			add_location(code11, file, 53, 67, 2628);
			span.className = "i";
			add_location(span, file, 54, 25, 2777);
			p1.className = "lh-copy";
			add_location(p1, file, 53, 8, 2569);
			add_location(h31, file, 56, 8, 2858);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 255);
			p2.className = "lh-copy";
			add_location(p2, file, 81, 8, 3397);
			p3.className = "lh-copy";
			add_location(p3, file, 82, 8, 3604);
			th4.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th4, file, 86, 16, 3796);
			th5.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th5, file, 87, 16, 3859);
			th6.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th6, file, 88, 16, 3934);
			th7.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th7, file, 89, 16, 4007);
			th8.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th8, file, 90, 16, 4069);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 85, 12, 3747);
			table1.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table1, file, 84, 8, 3677);
			a1.href = "/guide/api/update-validator-option";
			a1.className = "blue dim link";
			add_location(a1, file, 107, 37, 5000);
			add_location(code12, file, 107, 157, 5120);
			add_location(code13, file, 107, 193, 5156);
			add_location(p4, file, 107, 8, 4971);
			section1.className = "mv5";
			add_location(section1, file, 79, 4, 3321);
			section2.className = "mv5";
			add_location(section2, file, 123, 4, 5927);
			a2.href = "/guide/plugins/declarative";
			a2.className = "blue dim link";
			add_location(a2, file, 130, 36, 6206);
			add_location(code14, file, 130, 196, 6366);
			p5.className = "lh-copy";
			add_location(p5, file, 130, 8, 6178);
			section3.className = "mv5";
			add_location(section3, file, 128, 4, 6107);
			p6.className = "lh-copy";
			add_location(p6, file, 137, 8, 6589);
			section4.className = "mv5";
			add_location(section4, file, 134, 4, 6512);
			div.className = "flex";
			add_location(div, file, 177, 8, 7658);
			section5.className = "mv5";
			add_location(section5, file, 176, 4, 7628);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, h30);
			append(h30, t5);
			append(section0, t6);
			append(section0, p0);
			append(p0, t7);
			append(p0, a0);
			append(a0, t8);
			append(p0, t9);
			append(section0, t10);
			append(section0, table0);
			append(table0, tr0);
			append(tr0, th0);
			append(th0, t11);
			append(tr0, t12);
			append(tr0, th1);
			append(th1, t13);
			append(tr0, t14);
			append(tr0, th2);
			append(th2, t15);
			append(tr0, t16);
			append(tr0, th3);
			append(th3, t17);
			append(table0, t18);
			append(table0, tr1);
			append(tr1, td0);
			append(td0, code0);
			append(code0, t19);
			append(tr1, t20);
			append(tr1, td1);
			append(td1, code1);
			append(code1, t21);
			append(tr1, t22);
			append(tr1, td2);
			append(td2, t23);
			append(tr1, t24);
			append(tr1, td3);
			append(td3, t25);
			append(table0, t26);
			append(table0, tr2);
			append(tr2, td4);
			append(td4, code2);
			append(code2, t27);
			append(tr2, t28);
			append(tr2, td5);
			append(td5, code3);
			append(code3, t29);
			append(tr2, t30);
			append(tr2, td6);
			append(td6, t31);
			append(tr2, t32);
			append(tr2, td7);
			append(td7, t33);
			append(td7, ul0);
			append(ul0, li0);
			append(li0, t34);
			append(ul0, t35);
			append(ul0, li1);
			append(li1, t36);
			append(ul0, t37);
			append(ul0, li2);
			append(li2, t38);
			append(li2, code4);
			append(code4, t39);
			append(li2, t40);
			append(ul0, t41);
			append(ul0, li3);
			append(li3, t42);
			append(li3, code5);
			append(code5, t43);
			append(li3, t44);
			append(table0, t45);
			append(table0, tr3);
			append(tr3, td8);
			append(td8, code6);
			append(code6, t46);
			append(tr3, t47);
			append(tr3, td9);
			append(td9, code7);
			append(code7, t48);
			append(tr3, t49);
			append(tr3, td10);
			append(td10, t50);
			append(tr3, t51);
			append(tr3, td11);
			append(td11, t52);
			append(td11, ul1);
			append(ul1, li4);
			append(li4, t53);
			append(li4, code8);
			append(code8, t54);
			append(li4, t55);
			append(ul1, t56);
			append(ul1, li5);
			append(li5, t57);
			append(li5, code9);
			append(code9, t58);
			append(li5, t59);
			append(section0, t60);
			append(section0, p1);
			append(p1, t61);
			append(p1, code10);
			append(code10, t62);
			append(p1, t63);
			append(p1, code11);
			append(code11, t64);
			append(p1, t65);
			append(p1, span);
			append(span, t66);
			append(p1, t67);
			append(section0, t68);
			append(section0, h31);
			append(h31, t69);
			append(section0, t70);
			mount_component(samplecode0, section0, null);
			insert(target, t71, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t72);
			append(section1, p2);
			append(p2, t73);
			append(section1, t74);
			append(section1, p3);
			append(p3, t75);
			append(section1, t76);
			append(section1, table1);
			append(table1, tr4);
			append(tr4, th4);
			append(th4, t77);
			append(tr4, t78);
			append(tr4, th5);
			append(th5, t79);
			append(tr4, t80);
			append(tr4, th6);
			append(th6, t81);
			append(tr4, t82);
			append(tr4, th7);
			append(th7, t83);
			append(tr4, t84);
			append(tr4, th8);
			append(th8, t85);
			append(table1, t86);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(table1, null);
			}

			append(section1, t87);
			append(section1, p4);
			append(p4, t88);
			append(p4, a1);
			append(a1, t89);
			append(p4, t90);
			append(p4, code12);
			append(code12, t91);
			append(p4, t92);
			append(p4, code13);
			append(code13, t93);
			append(p4, t94);
			append(section1, t95);
			mount_component(samplecode1, section1, null);
			append(section1, t96);
			mount_component(tip, section1, null);
			append(section1, t97);
			mount_component(demo0, section1, null);
			insert(target, t98, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t99);
			mount_component(demo1, section2, null);
			insert(target, t100, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t101);
			append(section3, p5);
			append(p5, t102);
			append(p5, a2);
			append(a2, t103);
			append(p5, t104);
			append(p5, code14);
			append(code14, t105);
			append(p5, t106);
			append(section3, t107);
			mount_component(demo2, section3, null);
			insert(target, t108, anchor);
			insert(target, section4, anchor);
			mount_component(heading4, section4, null);
			append(section4, t109);
			append(section4, p6);
			append(p6, t110);
			append(section4, t111);
			mount_component(samplecode2, section4, null);
			insert(target, t112, anchor);
			mount_component(relatedvalidators, target, anchor);
			insert(target, t113, anchor);
			insert(target, section5, anchor);
			append(section5, div);
			mount_component(prevbutton, div, null);
			append(div, t114);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			if (changed._samples) {
				each_value = ctx._samples;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						each_blocks[i].i(1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].i(1);
						each_blocks[i].m(table1, null);
					}
				}

				group_outros();
				for (; i < each_blocks.length; i += 1) outro_block(i, 1, 1);
				check_outros();
			}

			var tip_changes = {};
			if (changed.$$scope) tip_changes.$$scope = { changed, ctx };
			tip.$set(tip_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var heading4_changes = {};
			if (changed.$$scope) heading4_changes.$$scope = { changed, ctx };
			heading4.$set(heading4_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			for (var i = 0; i < each_value.length; i += 1) each_blocks[i].i();

			samplecode1.$$.fragment.i(local);

			tip.$$.fragment.i(local);

			demo0.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			demo2.$$.fragment.i(local);

			heading4.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);

			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) outro_block(i, 0);

			samplecode1.$$.fragment.o(local);
			tip.$$.fragment.o(local);
			demo0.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			demo2.$$.fragment.o(local);
			heading4.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			if (detaching) {
				detach(t71);
				detach(section1);
			}

			heading1.$destroy();

			destroy_each(each_blocks, detaching);

			samplecode1.$destroy();

			tip.$destroy();

			demo0.$destroy();

			if (detaching) {
				detach(t98);
				detach(section2);
			}

			heading2.$destroy();

			demo1.$destroy();

			if (detaching) {
				detach(t100);
				detach(section3);
			}

			heading3.$destroy();

			demo2.$destroy();

			if (detaching) {
				detach(t108);
				detach(section4);
			}

			heading4.$destroy();

			samplecode2.$destroy();

			if (detaching) {
				detach(t112);
			}

			relatedvalidators.$destroy(detaching);

			if (detaching) {
				detach(t113);
				detach(section5);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • integer validator";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

function func(s) {
	return s.sample;
}

function instance($$self) {
	

const _samples = [
    {
        country: '', code: '', thousandsSeparator: '', thousandsSeparatorDesc: 'An empty string', decimalSeparator: '.', decimalSeparatorDesc: 'A dot (<code>.</code>)',
        examples: [
            // Valid
            '95', '095', '0095', '295', '7295', '67295', '967295.00', '4294967295.000',
            // Invalid
            '7,295', '67,295', '967,295', '4967,295', '67295.01', '4,294,967,295,00', '4294967295.001',
        ]
    },
    {
        country: 'United States', code: 'en_US', thousandsSeparator: ',', thousandsSeparatorDesc: 'A comma (<code>,</code>)', decimalSeparator: '.', decimalSeparatorDesc: 'A dot (<code>.</code>)',
        examples: [
            // Valid
            '95', '295', '7,295', '67,295', '967,295', '967,295.00', '4,294,967,295', '4,294,967,295.00', '4,294,967,295.000',
            // Invalid
            '7295', '67295.01', '4967,295', '4294,967,295.0001', '4294,967,295.00', '4,294,967,295,00', '42,94,967,295.00', '42,94,967295.00', 
        ]
    },
    {
        country: 'France', code: 'fr_FR', thousandsSeparator: ' ', thousandsSeparatorDesc: 'A blank space', decimalSeparator: ',', decimalSeparatorDesc: 'A comma (<code>,</code>)',
        examples: [
            // Valid
            '95', '295', '67 295', '967 295', '967 295,00', '4 294 967 295', '4 294 967 295,00', '4 294 967 295,000',
            // Invalid
            '7295', '67295,01', '4967 295', '4 294 967 295,0001', '4294 967 295,00', '4 294 967 295.00', '42 94 967 295,00', '42 94 967295,00',
        ]
    },
    {
        country: 'Italy', code: 'it_IT', thousandsSeparator: '.', thousandsSeparatorDesc: 'A dot (<code>.</code>)', decimalSeparator: ',', decimalSeparatorDesc: 'A comma (<code>,</code>)',
        examples: [
            // Valid
            '95', '295', '7.295', '67.295', '967.295', '967.295,00', '4.294.967.295', '4.294.967.295,00', '4.294.967.295,000',
            // Invalid
            '7295', '67295,01', '4967.295', '967.295.00', '4294.967.295,00', '4.294.967.295.00', '42.94.967.295,00', '42.94.967295,00',
        ]
    },
];

	return { _samples };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export default Index;

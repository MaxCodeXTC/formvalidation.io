import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as ChangelogLayout } from './chunk.4a563e90.js';

/* src/routes/updates/v0.5.0/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/updates/v0.5.0/index.svelte";

// (10:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("New features");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "New features");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (79:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (87:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Improvements");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Improvements");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (108:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Bug fixes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Bug fixes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (134:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Upgrading to v0.5.0");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Upgrading to v0.5.0");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <ChangelogLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, ul7, li3, strong0, t5, t6, ul0, li0, t7, t8, li1, t9, t10, li2, t11, t12, li7, i0, t13, strong1, t14, t15, ul1, li4, t16, t17, li5, t18, t19, li6, t20, t21, li10, i1, t22, strong2, t23, t24, ul2, li8, a0, t25, t26, a1, t27, t28, a2, t29, t30, t31, li9, a3, t32, t33, t34, li13, i2, t35, strong3, t36, t37, ul3, li11, t38, t39, li12, t40, code0, t41, t42, code1, t43, t44, t45, li20, strong4, t46, t47, ul4, li14, t48, code2, t49, t50, t51, li15, t52, t53, li16, t54, code3, t55, t56, t57, li17, t58, code4, t59, t60, t61, li18, t62, code5, t63, t64, t65, li19, t66, code6, t67, t68, t69, li29, strong5, t70, t71, ul5, li21, t72, code7, t73, t74, t75, li22, t76, code8, t77, t78, t79, li23, t80, code9, t81, t82, t83, li24, t84, code10, t85, t86, t87, li25, t88, code11, t89, t90, t91, li26, t92, code12, t93, t94, t95, li27, t96, code13, t97, t98, t99, li28, t100, code14, t101, t102, t103, li34, strong6, t104, t105, ul6, li30, t106, code15, t107, t108, a4, t109, t110, li31, t111, a5, t112, t113, li32, t114, code16, t115, t116, a6, t117, t118, li33, t119, a7, t120, t121, section1, t122, ul8, li35, code17, t123, t124, code18, t125, t126, code19, t127, t128, code20, t129, t130, code21, t131, t132, li36, t133, code22, t134, t135, t136, section2, t137, ul9, li37, t138, t139, li38, t140, code23, t141, t142, t143, li39, t144, code24, t145, t146, li40, t147, t148, li41, t149, a8, t150, t151, t152, li42, t153, t154, li43, t155, t156, li44, i3, t157, t158, li45, t159, t160, li46, t161, a9, t162, t163, code25, t164, t165, t166, li47, t167, t168, li48, t169, t170, li49, t171, code26, t172, t173, t174, li50, t175, t176, li51, t177, code27, t178, t179, t180, section3, t181, ul10, li52, t182, a10, t183, t184, t185, li53, t186, code28, t187, t188, t189, li54, t190, code29, t191, t192, a11, t193, t194, a12, t195, t196, a13, t197, t198, t199, li55, t200, a14, t201, t202, t203, li56, t204, t205, li57, t206, a15, t207, t208, t209, li58, t210, a16, t211, t212, t213, li59, t214, t215, li60, t216, code30, t217, t218, t219, li61, t220, a17, t221, t222, t223, li62, t224, t225, li63, t226, a18, t227, t228, t229, li64, t230, a19, t231, t232, a20, t233, t234, code31, t235, t236, t237, li65, t238, t239, li66, a21, t240, t241, t242, li67, t243, a22, t244, t245, t246, li68, t247, t248, li69, t249, t250, li70, t251, code32, t252, t253, t254, li71, t255, t256, section4, t257, p0, t258, code33, t259, t260, code34, t261, t262, t263, p1, t264, t265, t266, p2, t267, t268, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading4 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
$(form).bootstrapValidator({
    submitHandler: function(form, validator, submitButton) {
        ...
    }
});
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
$(form)
    .bootstrapValidator({
        // Removing submitHandler option
    })
    .on('success.form.bv', function(e) {
        // Prevent form submission
        e.preventDefault();

        var $form        = $(e.target),
            validator    = $form.data('bootstrapValidator'),
            submitButton = validator.getSubmitButton();

        // Do whatever you want here ...
    });
` },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Version 0.5.0");
			t1 = space();
			h2 = element("h2");
			t2 = text("Released 14 July 2014");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			ul7 = element("ul");
			li3 = element("li");
			strong0 = element("strong");
			t5 = text("Error message");
			t6 = text(":\n                ");
			ul0 = element("ul");
			li0 = element("li");
			t7 = text("Provide the default message");
			t8 = space();
			li1 = element("li");
			t9 = text("Support translating error messages");
			t10 = space();
			li2 = element("li");
			t11 = text("Support dynamic message");
			t12 = space();
			li7 = element("li");
			i0 = element("i");
			t13 = space();
			strong1 = element("strong");
			t14 = text("Events");
			t15 = text(":\n                ");
			ul1 = element("ul");
			li4 = element("li");
			t16 = text("Add events for form");
			t17 = space();
			li5 = element("li");
			t18 = text("Add events for field");
			t19 = space();
			li6 = element("li");
			t20 = text("Add events for validator");
			t21 = space();
			li10 = element("li");
			i1 = element("i");
			t22 = space();
			strong2 = element("strong");
			t23 = text("Support dynamic option");
			t24 = text(":\n                ");
			ul2 = element("ul");
			li8 = element("li");
			a0 = element("a");
			t25 = text("between");
			t26 = text(", ");
			a1 = element("a");
			t27 = text("greaterThan");
			t28 = text(", ");
			a2 = element("a");
			t29 = text("lessThan");
			t30 = text(" add support for comparing to other field, return value of a callback function");
			t31 = space();
			li9 = element("li");
			a3 = element("a");
			t32 = text("zipCode validator");
			t33 = text(" allow to set the country code via another field or callback");
			t34 = space();
			li13 = element("li");
			i2 = element("i");
			t35 = space();
			strong3 = element("strong");
			t36 = text("Support dynamic fields");
			t37 = text(":\n                ");
			ul3 = element("ul");
			li11 = element("li");
			t38 = text("Support dynamic fields");
			t39 = space();
			li12 = element("li");
			t40 = text("Add ");
			code0 = element("code");
			t41 = text("addField()");
			t42 = text(" and ");
			code1 = element("code");
			t43 = text("removeField()");
			t44 = text(" methods for managing dynamic fields");
			t45 = space();
			li20 = element("li");
			strong4 = element("strong");
			t46 = text("New options");
			t47 = text(":\n                ");
			ul4 = element("ul");
			li14 = element("li");
			t48 = text("Add ");
			code2 = element("code");
			t49 = text("container");
			t50 = text(" option for indicating the element showing all errors");
			t51 = space();
			li15 = element("li");
			t52 = text("Showing errors in tooltip or popover");
			t53 = space();
			li16 = element("li");
			t54 = text("Add ");
			code3 = element("code");
			t55 = text("feedbackIcons");
			t56 = text(" option to enabled/disable feedback icons for particular fields");
			t57 = space();
			li17 = element("li");
			t58 = text("Add ");
			code4 = element("code");
			t59 = text("group");
			t60 = text(" option");
			t61 = space();
			li18 = element("li");
			t62 = text("Add ");
			code5 = element("code");
			t63 = text("enabled");
			t64 = text(" option enable/disable particular validator");
			t65 = space();
			li19 = element("li");
			t66 = text("Add ");
			code6 = element("code");
			t67 = text("excluded");
			t68 = text(" option to exclude particular field");
			t69 = space();
			li29 = element("li");
			strong5 = element("strong");
			t70 = text("New APIs");
			t71 = text(":\n                ");
			ul5 = element("ul");
			li21 = element("li");
			t72 = text("Add ");
			code7 = element("code");
			t73 = text("getInvalidFields()");
			t74 = text(" method that returns all invalid fields");
			t75 = space();
			li22 = element("li");
			t76 = text("Add ");
			code8 = element("code");
			t77 = text("destroy()");
			t78 = text(" method");
			t79 = space();
			li23 = element("li");
			t80 = text("Add ");
			code9 = element("code");
			t81 = text("isValidContainer()");
			t82 = text(" method");
			t83 = space();
			li24 = element("li");
			t84 = text("Add ");
			code10 = element("code");
			t85 = text("isValidField()");
			t86 = text(" method");
			t87 = space();
			li25 = element("li");
			t88 = text("Add ");
			code11 = element("code");
			t89 = text("revalidateField()");
			t90 = text(" method");
			t91 = space();
			li26 = element("li");
			t92 = text("Add ");
			code12 = element("code");
			t93 = text("resetField()");
			t94 = text(" method");
			t95 = space();
			li27 = element("li");
			t96 = text("Add ");
			code13 = element("code");
			t97 = text("updateMessage()");
			t98 = text(" method");
			t99 = space();
			li28 = element("li");
			t100 = text("Add ");
			code14 = element("code");
			t101 = text("updateOption()");
			t102 = text(" method for updating the particular validator option");
			t103 = space();
			li34 = element("li");
			strong6 = element("strong");
			t104 = text("Misc");
			t105 = text(":\n                ");
			ul6 = element("ul");
			li30 = element("li");
			t106 = text("Add ");
			code15 = element("code");
			t107 = text("separator");
			t108 = text(" option for the ");
			a4 = element("a");
			t109 = text("date validator");
			t110 = space();
			li31 = element("li");
			t111 = text("Add UK phone number support for the ");
			a5 = element("a");
			t112 = text("phone validator");
			t113 = space();
			li32 = element("li");
			t114 = text("Add ");
			code16 = element("code");
			t115 = text("$field");
			t116 = text(" instance to the ");
			a6 = element("a");
			t117 = text("callback validator");
			t118 = space();
			li33 = element("li");
			t119 = text("Add Singapore postal code for the ");
			a7 = element("a");
			t120 = text("zipCode validator");
			t121 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t122 = space();
			ul8 = element("ul");
			li35 = element("li");
			code17 = element("code");
			t123 = text("$.fn.bootstrapValidator.helpers");
			t124 = text(" renames ");
			code18 = element("code");
			t125 = text("mod_11_10");
			t126 = text(" to ");
			code19 = element("code");
			t127 = text("mod11And10");
			t128 = text(", ");
			code20 = element("code");
			t129 = text("mod_37_36");
			t130 = text(" to ");
			code21 = element("code");
			t131 = text("mod37And36");
			t132 = space();
			li36 = element("li");
			t133 = text("Remove ");
			code22 = element("code");
			t134 = text("submitHandler");
			t135 = text(" option");
			t136 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t137 = space();
			ul9 = element("ul");
			li37 = element("li");
			t138 = text("Only enable the submit buttons if all fields are valid");
			t139 = space();
			li38 = element("li");
			t140 = text("Improve the ");
			code23 = element("code");
			t141 = text("updateStatus()");
			t142 = text(" method. The plugin now doesn't show the errors, feedback icons of given field if there are uncompleted validators");
			t143 = space();
			li39 = element("li");
			t144 = text("Fix feedback icons in ");
			code24 = element("code");
			t145 = text("input-group");
			t146 = space();
			li40 = element("li");
			t147 = text("Only send the submit button which is clicked");
			t148 = space();
			li41 = element("li");
			t149 = text("The ");
			a8 = element("a");
			t150 = text("uri validator");
			t151 = text(" now provides an option to support private/local network address");
			t152 = space();
			li42 = element("li");
			t153 = text("Clicking the feedback icon also effect to the checkbox, radio fields");
			t154 = space();
			li43 = element("li");
			t155 = text("Don't change the enable setting when the new one is the same");
			t156 = space();
			li44 = element("li");
			i3 = element("i");
			t157 = text(" Add JSHint to Grunt build");
			t158 = space();
			li45 = element("li");
			t159 = text("Allow to override the default options. Useful for using multiple forms in the same page");
			t160 = space();
			li46 = element("li");
			t161 = text("The ");
			a9 = element("a");
			t162 = text("remote validator");
			t163 = text(" adds support for dynamic ");
			code25 = element("code");
			t164 = text("url");
			t165 = text(" and method type (GET/POST)");
			t166 = space();
			li47 = element("li");
			t167 = text("Add test suite");
			t168 = space();
			li48 = element("li");
			t169 = text("Add built time to the build file");
			t170 = space();
			li49 = element("li");
			t171 = text("Define the callback via ");
			code26 = element("code");
			t172 = text("data-bv-callback-callback");
			t173 = text(" attribute");
			t174 = space();
			li50 = element("li");
			t175 = text("Validation of numeric fields with decimal steps");
			t176 = space();
			li51 = element("li");
			t177 = text("Adjust the feedback icon position for ");
			code27 = element("code");
			t178 = text(".input-group");
			t179 = text(" element");
			t180 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t181 = space();
			ul10 = element("ul");
			li52 = element("li");
			t182 = text("Fix ");
			a10 = element("a");
			t183 = text("date validator");
			t184 = text(" issue on IE8");
			t185 = space();
			li53 = element("li");
			t186 = text("Fix identical validator issue with not clearing ");
			code28 = element("code");
			t187 = text("has-error");
			t188 = text(" class");
			t189 = space();
			li54 = element("li");
			t190 = text("Fix ");
			code29 = element("code");
			t191 = text("inclusive");
			t192 = text(" option in the ");
			a11 = element("a");
			t193 = text("between");
			t194 = text(", ");
			a12 = element("a");
			t195 = text("greaterThan");
			t196 = text(" and ");
			a13 = element("a");
			t197 = text("lessThan");
			t198 = text(" validators");
			t199 = space();
			li55 = element("li");
			t200 = text("The ");
			a14 = element("a");
			t201 = text("date validator");
			t202 = text(" still return valid if the value doesn't contain digits");
			t203 = space();
			li56 = element("li");
			t204 = text("file validation extension is case sensitive");
			t205 = space();
			li57 = element("li");
			t206 = text("Fix the ");
			a15 = element("a");
			t207 = text("file validator");
			t208 = text(" issue on IE 8");
			t209 = space();
			li58 = element("li");
			t210 = text("The ");
			a16 = element("a");
			t211 = text("creditCard validator");
			t212 = text(" doesn't work on IE 8");
			t213 = space();
			li59 = element("li");
			t214 = text("The cvv validator doesn't work on IE 8");
			t215 = space();
			li60 = element("li");
			t216 = text("The ");
			code30 = element("code");
			t217 = text("threshold");
			t218 = text(" option doesn't work on IE 8");
			t219 = space();
			li61 = element("li");
			t220 = text("The ");
			a17 = element("a");
			t221 = text("zipCode validator");
			t222 = text(" doesn't work for Canadian zip code");
			t223 = space();
			li62 = element("li");
			t224 = text("Added the letters 'H', 'W' and 'Z' in letter list for Canada postal code");
			t225 = space();
			li63 = element("li");
			t226 = text("Don't submit form when the ");
			a18 = element("a");
			t227 = text("callback validator");
			t228 = text(" completes and the submit button isn't clicked");
			t229 = space();
			li64 = element("li");
			t230 = text("The ");
			a19 = element("a");
			t231 = text("id");
			t232 = text(", ");
			a20 = element("a");
			t233 = text("vat");
			t234 = text(" validators should return ");
			code31 = element("code");
			t235 = text("false");
			t236 = text(" if the country code is not supported");
			t237 = space();
			li65 = element("li");
			t238 = text("When using multiple forms with HTML attributes on the same page, the plugin options will be the same as the last one");
			t239 = space();
			li66 = element("li");
			a21 = element("a");
			t240 = text("stringLength validator");
			t241 = text(" allows spaces after max length");
			t242 = space();
			li67 = element("li");
			t243 = text("Fix the ");
			a22 = element("a");
			t244 = text("ean validator");
			t245 = text(" when the check digit is zero");
			t246 = space();
			li68 = element("li");
			t247 = text("IPv6 validator doesn't work");
			t248 = space();
			li69 = element("li");
			t249 = text("Custom trigger event is ignored by field validators");
			t250 = space();
			li70 = element("li");
			t251 = text("Skip the ");
			code32 = element("code");
			t252 = text("_isExcluded()");
			t253 = text(" when initializing the form");
			t254 = space();
			li71 = element("li");
			t255 = text("Fixed Chilean ID (RUT/RUN) finished in 'K' or 'k'");
			t256 = space();
			section4 = element("section");
			heading4.$$.fragment.c();
			t257 = space();
			p0 = element("p");
			t258 = text("From v0.5.0, we remove the ");
			code33 = element("code");
			t259 = text("submitHandler");
			t260 = text(" option. In v0.5.0, use the ");
			code34 = element("code");
			t261 = text("success.form.bv");
			t262 = text(" event instead.");
			t263 = space();
			p1 = element("p");
			t264 = text("In v0.4.5 and earlier versions:");
			t265 = space();
			samplecode0.$$.fragment.c();
			t266 = space();
			p2 = element("p");
			t267 = text("In v0.5.0:");
			t268 = space();
			samplecode1.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Version 0.5.0");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Released 14 July 2014");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			ul7 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul7_nodes = children(ul7);

			li3 = claim_element(ul7_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			strong0 = claim_element(li3_nodes, "STRONG", {}, false);
			var strong0_nodes = children(strong0);

			t5 = claim_text(strong0_nodes, "Error message");
			strong0_nodes.forEach(detach);
			t6 = claim_text(li3_nodes, ":\n                ");

			ul0 = claim_element(li3_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t7 = claim_text(li0_nodes, "Provide the default message");
			li0_nodes.forEach(detach);
			t8 = claim_text(ul0_nodes, "\n                    ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t9 = claim_text(li1_nodes, "Support translating error messages");
			li1_nodes.forEach(detach);
			t10 = claim_text(ul0_nodes, "\n                    ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t11 = claim_text(li2_nodes, "Support dynamic message");
			li2_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			li3_nodes.forEach(detach);
			t12 = claim_text(ul7_nodes, "\n            ");

			li7 = claim_element(ul7_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			i0 = claim_element(li7_nodes, "I", { class: true }, false);
			var i0_nodes = children(i0);

			i0_nodes.forEach(detach);
			t13 = claim_text(li7_nodes, " ");

			strong1 = claim_element(li7_nodes, "STRONG", {}, false);
			var strong1_nodes = children(strong1);

			t14 = claim_text(strong1_nodes, "Events");
			strong1_nodes.forEach(detach);
			t15 = claim_text(li7_nodes, ":\n                ");

			ul1 = claim_element(li7_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li4 = claim_element(ul1_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			t16 = claim_text(li4_nodes, "Add events for form");
			li4_nodes.forEach(detach);
			t17 = claim_text(ul1_nodes, "\n                    ");

			li5 = claim_element(ul1_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			t18 = claim_text(li5_nodes, "Add events for field");
			li5_nodes.forEach(detach);
			t19 = claim_text(ul1_nodes, "\n                    ");

			li6 = claim_element(ul1_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			t20 = claim_text(li6_nodes, "Add events for validator");
			li6_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			li7_nodes.forEach(detach);
			t21 = claim_text(ul7_nodes, "\n            ");

			li10 = claim_element(ul7_nodes, "LI", {}, false);
			var li10_nodes = children(li10);

			i1 = claim_element(li10_nodes, "I", { class: true }, false);
			var i1_nodes = children(i1);

			i1_nodes.forEach(detach);
			t22 = claim_text(li10_nodes, " ");

			strong2 = claim_element(li10_nodes, "STRONG", {}, false);
			var strong2_nodes = children(strong2);

			t23 = claim_text(strong2_nodes, "Support dynamic option");
			strong2_nodes.forEach(detach);
			t24 = claim_text(li10_nodes, ":\n                ");

			ul2 = claim_element(li10_nodes, "UL", { class: true }, false);
			var ul2_nodes = children(ul2);

			li8 = claim_element(ul2_nodes, "LI", {}, false);
			var li8_nodes = children(li8);

			a0 = claim_element(li8_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t25 = claim_text(a0_nodes, "between");
			a0_nodes.forEach(detach);
			t26 = claim_text(li8_nodes, ", ");

			a1 = claim_element(li8_nodes, "A", { href: true }, false);
			var a1_nodes = children(a1);

			t27 = claim_text(a1_nodes, "greaterThan");
			a1_nodes.forEach(detach);
			t28 = claim_text(li8_nodes, ", ");

			a2 = claim_element(li8_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t29 = claim_text(a2_nodes, "lessThan");
			a2_nodes.forEach(detach);
			t30 = claim_text(li8_nodes, " add support for comparing to other field, return value of a callback function");
			li8_nodes.forEach(detach);
			t31 = claim_text(ul2_nodes, "\n                    ");

			li9 = claim_element(ul2_nodes, "LI", {}, false);
			var li9_nodes = children(li9);

			a3 = claim_element(li9_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t32 = claim_text(a3_nodes, "zipCode validator");
			a3_nodes.forEach(detach);
			t33 = claim_text(li9_nodes, " allow to set the country code via another field or callback");
			li9_nodes.forEach(detach);
			ul2_nodes.forEach(detach);
			li10_nodes.forEach(detach);
			t34 = claim_text(ul7_nodes, "\n            ");

			li13 = claim_element(ul7_nodes, "LI", {}, false);
			var li13_nodes = children(li13);

			i2 = claim_element(li13_nodes, "I", { class: true }, false);
			var i2_nodes = children(i2);

			i2_nodes.forEach(detach);
			t35 = claim_text(li13_nodes, " ");

			strong3 = claim_element(li13_nodes, "STRONG", {}, false);
			var strong3_nodes = children(strong3);

			t36 = claim_text(strong3_nodes, "Support dynamic fields");
			strong3_nodes.forEach(detach);
			t37 = claim_text(li13_nodes, ":\n                ");

			ul3 = claim_element(li13_nodes, "UL", { class: true }, false);
			var ul3_nodes = children(ul3);

			li11 = claim_element(ul3_nodes, "LI", {}, false);
			var li11_nodes = children(li11);

			t38 = claim_text(li11_nodes, "Support dynamic fields");
			li11_nodes.forEach(detach);
			t39 = claim_text(ul3_nodes, "\n                    ");

			li12 = claim_element(ul3_nodes, "LI", {}, false);
			var li12_nodes = children(li12);

			t40 = claim_text(li12_nodes, "Add ");

			code0 = claim_element(li12_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t41 = claim_text(code0_nodes, "addField()");
			code0_nodes.forEach(detach);
			t42 = claim_text(li12_nodes, " and ");

			code1 = claim_element(li12_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t43 = claim_text(code1_nodes, "removeField()");
			code1_nodes.forEach(detach);
			t44 = claim_text(li12_nodes, " methods for managing dynamic fields");
			li12_nodes.forEach(detach);
			ul3_nodes.forEach(detach);
			li13_nodes.forEach(detach);
			t45 = claim_text(ul7_nodes, "\n            ");

			li20 = claim_element(ul7_nodes, "LI", {}, false);
			var li20_nodes = children(li20);

			strong4 = claim_element(li20_nodes, "STRONG", {}, false);
			var strong4_nodes = children(strong4);

			t46 = claim_text(strong4_nodes, "New options");
			strong4_nodes.forEach(detach);
			t47 = claim_text(li20_nodes, ":\n                ");

			ul4 = claim_element(li20_nodes, "UL", { class: true }, false);
			var ul4_nodes = children(ul4);

			li14 = claim_element(ul4_nodes, "LI", {}, false);
			var li14_nodes = children(li14);

			t48 = claim_text(li14_nodes, "Add ");

			code2 = claim_element(li14_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t49 = claim_text(code2_nodes, "container");
			code2_nodes.forEach(detach);
			t50 = claim_text(li14_nodes, " option for indicating the element showing all errors");
			li14_nodes.forEach(detach);
			t51 = claim_text(ul4_nodes, "\n                    ");

			li15 = claim_element(ul4_nodes, "LI", {}, false);
			var li15_nodes = children(li15);

			t52 = claim_text(li15_nodes, "Showing errors in tooltip or popover");
			li15_nodes.forEach(detach);
			t53 = claim_text(ul4_nodes, "\n                    ");

			li16 = claim_element(ul4_nodes, "LI", {}, false);
			var li16_nodes = children(li16);

			t54 = claim_text(li16_nodes, "Add ");

			code3 = claim_element(li16_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t55 = claim_text(code3_nodes, "feedbackIcons");
			code3_nodes.forEach(detach);
			t56 = claim_text(li16_nodes, " option to enabled/disable feedback icons for particular fields");
			li16_nodes.forEach(detach);
			t57 = claim_text(ul4_nodes, "\n                    ");

			li17 = claim_element(ul4_nodes, "LI", {}, false);
			var li17_nodes = children(li17);

			t58 = claim_text(li17_nodes, "Add ");

			code4 = claim_element(li17_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t59 = claim_text(code4_nodes, "group");
			code4_nodes.forEach(detach);
			t60 = claim_text(li17_nodes, " option");
			li17_nodes.forEach(detach);
			t61 = claim_text(ul4_nodes, "\n                    ");

			li18 = claim_element(ul4_nodes, "LI", {}, false);
			var li18_nodes = children(li18);

			t62 = claim_text(li18_nodes, "Add ");

			code5 = claim_element(li18_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t63 = claim_text(code5_nodes, "enabled");
			code5_nodes.forEach(detach);
			t64 = claim_text(li18_nodes, " option enable/disable particular validator");
			li18_nodes.forEach(detach);
			t65 = claim_text(ul4_nodes, "\n                    ");

			li19 = claim_element(ul4_nodes, "LI", {}, false);
			var li19_nodes = children(li19);

			t66 = claim_text(li19_nodes, "Add ");

			code6 = claim_element(li19_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t67 = claim_text(code6_nodes, "excluded");
			code6_nodes.forEach(detach);
			t68 = claim_text(li19_nodes, " option to exclude particular field");
			li19_nodes.forEach(detach);
			ul4_nodes.forEach(detach);
			li20_nodes.forEach(detach);
			t69 = claim_text(ul7_nodes, "\n            ");

			li29 = claim_element(ul7_nodes, "LI", {}, false);
			var li29_nodes = children(li29);

			strong5 = claim_element(li29_nodes, "STRONG", {}, false);
			var strong5_nodes = children(strong5);

			t70 = claim_text(strong5_nodes, "New APIs");
			strong5_nodes.forEach(detach);
			t71 = claim_text(li29_nodes, ":\n                ");

			ul5 = claim_element(li29_nodes, "UL", { class: true }, false);
			var ul5_nodes = children(ul5);

			li21 = claim_element(ul5_nodes, "LI", {}, false);
			var li21_nodes = children(li21);

			t72 = claim_text(li21_nodes, "Add ");

			code7 = claim_element(li21_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t73 = claim_text(code7_nodes, "getInvalidFields()");
			code7_nodes.forEach(detach);
			t74 = claim_text(li21_nodes, " method that returns all invalid fields");
			li21_nodes.forEach(detach);
			t75 = claim_text(ul5_nodes, "\n                    ");

			li22 = claim_element(ul5_nodes, "LI", {}, false);
			var li22_nodes = children(li22);

			t76 = claim_text(li22_nodes, "Add ");

			code8 = claim_element(li22_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t77 = claim_text(code8_nodes, "destroy()");
			code8_nodes.forEach(detach);
			t78 = claim_text(li22_nodes, " method");
			li22_nodes.forEach(detach);
			t79 = claim_text(ul5_nodes, "\n                    ");

			li23 = claim_element(ul5_nodes, "LI", {}, false);
			var li23_nodes = children(li23);

			t80 = claim_text(li23_nodes, "Add ");

			code9 = claim_element(li23_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t81 = claim_text(code9_nodes, "isValidContainer()");
			code9_nodes.forEach(detach);
			t82 = claim_text(li23_nodes, " method");
			li23_nodes.forEach(detach);
			t83 = claim_text(ul5_nodes, "\n                    ");

			li24 = claim_element(ul5_nodes, "LI", {}, false);
			var li24_nodes = children(li24);

			t84 = claim_text(li24_nodes, "Add ");

			code10 = claim_element(li24_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t85 = claim_text(code10_nodes, "isValidField()");
			code10_nodes.forEach(detach);
			t86 = claim_text(li24_nodes, " method");
			li24_nodes.forEach(detach);
			t87 = claim_text(ul5_nodes, "\n                    ");

			li25 = claim_element(ul5_nodes, "LI", {}, false);
			var li25_nodes = children(li25);

			t88 = claim_text(li25_nodes, "Add ");

			code11 = claim_element(li25_nodes, "CODE", {}, false);
			var code11_nodes = children(code11);

			t89 = claim_text(code11_nodes, "revalidateField()");
			code11_nodes.forEach(detach);
			t90 = claim_text(li25_nodes, " method");
			li25_nodes.forEach(detach);
			t91 = claim_text(ul5_nodes, "\n                    ");

			li26 = claim_element(ul5_nodes, "LI", {}, false);
			var li26_nodes = children(li26);

			t92 = claim_text(li26_nodes, "Add ");

			code12 = claim_element(li26_nodes, "CODE", {}, false);
			var code12_nodes = children(code12);

			t93 = claim_text(code12_nodes, "resetField()");
			code12_nodes.forEach(detach);
			t94 = claim_text(li26_nodes, " method");
			li26_nodes.forEach(detach);
			t95 = claim_text(ul5_nodes, "\n                    ");

			li27 = claim_element(ul5_nodes, "LI", {}, false);
			var li27_nodes = children(li27);

			t96 = claim_text(li27_nodes, "Add ");

			code13 = claim_element(li27_nodes, "CODE", {}, false);
			var code13_nodes = children(code13);

			t97 = claim_text(code13_nodes, "updateMessage()");
			code13_nodes.forEach(detach);
			t98 = claim_text(li27_nodes, " method");
			li27_nodes.forEach(detach);
			t99 = claim_text(ul5_nodes, "\n                    ");

			li28 = claim_element(ul5_nodes, "LI", {}, false);
			var li28_nodes = children(li28);

			t100 = claim_text(li28_nodes, "Add ");

			code14 = claim_element(li28_nodes, "CODE", {}, false);
			var code14_nodes = children(code14);

			t101 = claim_text(code14_nodes, "updateOption()");
			code14_nodes.forEach(detach);
			t102 = claim_text(li28_nodes, " method for updating the particular validator option");
			li28_nodes.forEach(detach);
			ul5_nodes.forEach(detach);
			li29_nodes.forEach(detach);
			t103 = claim_text(ul7_nodes, "\n            ");

			li34 = claim_element(ul7_nodes, "LI", {}, false);
			var li34_nodes = children(li34);

			strong6 = claim_element(li34_nodes, "STRONG", {}, false);
			var strong6_nodes = children(strong6);

			t104 = claim_text(strong6_nodes, "Misc");
			strong6_nodes.forEach(detach);
			t105 = claim_text(li34_nodes, ":\n                ");

			ul6 = claim_element(li34_nodes, "UL", { class: true }, false);
			var ul6_nodes = children(ul6);

			li30 = claim_element(ul6_nodes, "LI", {}, false);
			var li30_nodes = children(li30);

			t106 = claim_text(li30_nodes, "Add ");

			code15 = claim_element(li30_nodes, "CODE", {}, false);
			var code15_nodes = children(code15);

			t107 = claim_text(code15_nodes, "separator");
			code15_nodes.forEach(detach);
			t108 = claim_text(li30_nodes, " option for the ");

			a4 = claim_element(li30_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t109 = claim_text(a4_nodes, "date validator");
			a4_nodes.forEach(detach);
			li30_nodes.forEach(detach);
			t110 = claim_text(ul6_nodes, "\n                    ");

			li31 = claim_element(ul6_nodes, "LI", {}, false);
			var li31_nodes = children(li31);

			t111 = claim_text(li31_nodes, "Add UK phone number support for the ");

			a5 = claim_element(li31_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t112 = claim_text(a5_nodes, "phone validator");
			a5_nodes.forEach(detach);
			li31_nodes.forEach(detach);
			t113 = claim_text(ul6_nodes, "\n                    ");

			li32 = claim_element(ul6_nodes, "LI", {}, false);
			var li32_nodes = children(li32);

			t114 = claim_text(li32_nodes, "Add ");

			code16 = claim_element(li32_nodes, "CODE", {}, false);
			var code16_nodes = children(code16);

			t115 = claim_text(code16_nodes, "$field");
			code16_nodes.forEach(detach);
			t116 = claim_text(li32_nodes, " instance to the ");

			a6 = claim_element(li32_nodes, "A", { href: true, class: true }, false);
			var a6_nodes = children(a6);

			t117 = claim_text(a6_nodes, "callback validator");
			a6_nodes.forEach(detach);
			li32_nodes.forEach(detach);
			t118 = claim_text(ul6_nodes, "\n                    ");

			li33 = claim_element(ul6_nodes, "LI", {}, false);
			var li33_nodes = children(li33);

			t119 = claim_text(li33_nodes, "Add Singapore postal code for the ");

			a7 = claim_element(li33_nodes, "A", { href: true, class: true }, false);
			var a7_nodes = children(a7);

			t120 = claim_text(a7_nodes, "zipCode validator");
			a7_nodes.forEach(detach);
			li33_nodes.forEach(detach);
			ul6_nodes.forEach(detach);
			li34_nodes.forEach(detach);
			ul7_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t121 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t122 = claim_text(section1_nodes, "\n        ");

			ul8 = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul8_nodes = children(ul8);

			li35 = claim_element(ul8_nodes, "LI", {}, false);
			var li35_nodes = children(li35);

			code17 = claim_element(li35_nodes, "CODE", {}, false);
			var code17_nodes = children(code17);

			t123 = claim_text(code17_nodes, "$.fn.bootstrapValidator.helpers");
			code17_nodes.forEach(detach);
			t124 = claim_text(li35_nodes, " renames ");

			code18 = claim_element(li35_nodes, "CODE", {}, false);
			var code18_nodes = children(code18);

			t125 = claim_text(code18_nodes, "mod_11_10");
			code18_nodes.forEach(detach);
			t126 = claim_text(li35_nodes, " to ");

			code19 = claim_element(li35_nodes, "CODE", {}, false);
			var code19_nodes = children(code19);

			t127 = claim_text(code19_nodes, "mod11And10");
			code19_nodes.forEach(detach);
			t128 = claim_text(li35_nodes, ", ");

			code20 = claim_element(li35_nodes, "CODE", {}, false);
			var code20_nodes = children(code20);

			t129 = claim_text(code20_nodes, "mod_37_36");
			code20_nodes.forEach(detach);
			t130 = claim_text(li35_nodes, " to ");

			code21 = claim_element(li35_nodes, "CODE", {}, false);
			var code21_nodes = children(code21);

			t131 = claim_text(code21_nodes, "mod37And36");
			code21_nodes.forEach(detach);
			li35_nodes.forEach(detach);
			t132 = claim_text(ul8_nodes, "\n            ");

			li36 = claim_element(ul8_nodes, "LI", {}, false);
			var li36_nodes = children(li36);

			t133 = claim_text(li36_nodes, "Remove ");

			code22 = claim_element(li36_nodes, "CODE", {}, false);
			var code22_nodes = children(code22);

			t134 = claim_text(code22_nodes, "submitHandler");
			code22_nodes.forEach(detach);
			t135 = claim_text(li36_nodes, " option");
			li36_nodes.forEach(detach);
			ul8_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t136 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t137 = claim_text(section2_nodes, "\n        ");

			ul9 = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul9_nodes = children(ul9);

			li37 = claim_element(ul9_nodes, "LI", {}, false);
			var li37_nodes = children(li37);

			t138 = claim_text(li37_nodes, "Only enable the submit buttons if all fields are valid");
			li37_nodes.forEach(detach);
			t139 = claim_text(ul9_nodes, "\n            ");

			li38 = claim_element(ul9_nodes, "LI", {}, false);
			var li38_nodes = children(li38);

			t140 = claim_text(li38_nodes, "Improve the ");

			code23 = claim_element(li38_nodes, "CODE", {}, false);
			var code23_nodes = children(code23);

			t141 = claim_text(code23_nodes, "updateStatus()");
			code23_nodes.forEach(detach);
			t142 = claim_text(li38_nodes, " method. The plugin now doesn't show the errors, feedback icons of given field if there are uncompleted validators");
			li38_nodes.forEach(detach);
			t143 = claim_text(ul9_nodes, "\n            ");

			li39 = claim_element(ul9_nodes, "LI", {}, false);
			var li39_nodes = children(li39);

			t144 = claim_text(li39_nodes, "Fix feedback icons in ");

			code24 = claim_element(li39_nodes, "CODE", {}, false);
			var code24_nodes = children(code24);

			t145 = claim_text(code24_nodes, "input-group");
			code24_nodes.forEach(detach);
			li39_nodes.forEach(detach);
			t146 = claim_text(ul9_nodes, "\n            ");

			li40 = claim_element(ul9_nodes, "LI", {}, false);
			var li40_nodes = children(li40);

			t147 = claim_text(li40_nodes, "Only send the submit button which is clicked");
			li40_nodes.forEach(detach);
			t148 = claim_text(ul9_nodes, "\n            ");

			li41 = claim_element(ul9_nodes, "LI", {}, false);
			var li41_nodes = children(li41);

			t149 = claim_text(li41_nodes, "The ");

			a8 = claim_element(li41_nodes, "A", { href: true, class: true }, false);
			var a8_nodes = children(a8);

			t150 = claim_text(a8_nodes, "uri validator");
			a8_nodes.forEach(detach);
			t151 = claim_text(li41_nodes, " now provides an option to support private/local network address");
			li41_nodes.forEach(detach);
			t152 = claim_text(ul9_nodes, "\n            ");

			li42 = claim_element(ul9_nodes, "LI", {}, false);
			var li42_nodes = children(li42);

			t153 = claim_text(li42_nodes, "Clicking the feedback icon also effect to the checkbox, radio fields");
			li42_nodes.forEach(detach);
			t154 = claim_text(ul9_nodes, "\n            ");

			li43 = claim_element(ul9_nodes, "LI", {}, false);
			var li43_nodes = children(li43);

			t155 = claim_text(li43_nodes, "Don't change the enable setting when the new one is the same");
			li43_nodes.forEach(detach);
			t156 = claim_text(ul9_nodes, "\n            ");

			li44 = claim_element(ul9_nodes, "LI", {}, false);
			var li44_nodes = children(li44);

			i3 = claim_element(li44_nodes, "I", { class: true }, false);
			var i3_nodes = children(i3);

			i3_nodes.forEach(detach);
			t157 = claim_text(li44_nodes, " Add JSHint to Grunt build");
			li44_nodes.forEach(detach);
			t158 = claim_text(ul9_nodes, "\n            ");

			li45 = claim_element(ul9_nodes, "LI", {}, false);
			var li45_nodes = children(li45);

			t159 = claim_text(li45_nodes, "Allow to override the default options. Useful for using multiple forms in the same page");
			li45_nodes.forEach(detach);
			t160 = claim_text(ul9_nodes, "\n            ");

			li46 = claim_element(ul9_nodes, "LI", {}, false);
			var li46_nodes = children(li46);

			t161 = claim_text(li46_nodes, "The ");

			a9 = claim_element(li46_nodes, "A", { href: true, class: true }, false);
			var a9_nodes = children(a9);

			t162 = claim_text(a9_nodes, "remote validator");
			a9_nodes.forEach(detach);
			t163 = claim_text(li46_nodes, " adds support for dynamic ");

			code25 = claim_element(li46_nodes, "CODE", {}, false);
			var code25_nodes = children(code25);

			t164 = claim_text(code25_nodes, "url");
			code25_nodes.forEach(detach);
			t165 = claim_text(li46_nodes, " and method type (GET/POST)");
			li46_nodes.forEach(detach);
			t166 = claim_text(ul9_nodes, "\n            ");

			li47 = claim_element(ul9_nodes, "LI", {}, false);
			var li47_nodes = children(li47);

			t167 = claim_text(li47_nodes, "Add test suite");
			li47_nodes.forEach(detach);
			t168 = claim_text(ul9_nodes, "\n            ");

			li48 = claim_element(ul9_nodes, "LI", {}, false);
			var li48_nodes = children(li48);

			t169 = claim_text(li48_nodes, "Add built time to the build file");
			li48_nodes.forEach(detach);
			t170 = claim_text(ul9_nodes, "\n            ");

			li49 = claim_element(ul9_nodes, "LI", {}, false);
			var li49_nodes = children(li49);

			t171 = claim_text(li49_nodes, "Define the callback via ");

			code26 = claim_element(li49_nodes, "CODE", {}, false);
			var code26_nodes = children(code26);

			t172 = claim_text(code26_nodes, "data-bv-callback-callback");
			code26_nodes.forEach(detach);
			t173 = claim_text(li49_nodes, " attribute");
			li49_nodes.forEach(detach);
			t174 = claim_text(ul9_nodes, "\n            ");

			li50 = claim_element(ul9_nodes, "LI", {}, false);
			var li50_nodes = children(li50);

			t175 = claim_text(li50_nodes, "Validation of numeric fields with decimal steps");
			li50_nodes.forEach(detach);
			t176 = claim_text(ul9_nodes, "\n            ");

			li51 = claim_element(ul9_nodes, "LI", {}, false);
			var li51_nodes = children(li51);

			t177 = claim_text(li51_nodes, "Adjust the feedback icon position for ");

			code27 = claim_element(li51_nodes, "CODE", {}, false);
			var code27_nodes = children(code27);

			t178 = claim_text(code27_nodes, ".input-group");
			code27_nodes.forEach(detach);
			t179 = claim_text(li51_nodes, " element");
			li51_nodes.forEach(detach);
			ul9_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			t180 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t181 = claim_text(section3_nodes, "\n        ");

			ul10 = claim_element(section3_nodes, "UL", { class: true }, false);
			var ul10_nodes = children(ul10);

			li52 = claim_element(ul10_nodes, "LI", {}, false);
			var li52_nodes = children(li52);

			t182 = claim_text(li52_nodes, "Fix ");

			a10 = claim_element(li52_nodes, "A", { href: true, class: true }, false);
			var a10_nodes = children(a10);

			t183 = claim_text(a10_nodes, "date validator");
			a10_nodes.forEach(detach);
			t184 = claim_text(li52_nodes, " issue on IE8");
			li52_nodes.forEach(detach);
			t185 = claim_text(ul10_nodes, "\n            ");

			li53 = claim_element(ul10_nodes, "LI", {}, false);
			var li53_nodes = children(li53);

			t186 = claim_text(li53_nodes, "Fix identical validator issue with not clearing ");

			code28 = claim_element(li53_nodes, "CODE", {}, false);
			var code28_nodes = children(code28);

			t187 = claim_text(code28_nodes, "has-error");
			code28_nodes.forEach(detach);
			t188 = claim_text(li53_nodes, " class");
			li53_nodes.forEach(detach);
			t189 = claim_text(ul10_nodes, "\n            ");

			li54 = claim_element(ul10_nodes, "LI", {}, false);
			var li54_nodes = children(li54);

			t190 = claim_text(li54_nodes, "Fix ");

			code29 = claim_element(li54_nodes, "CODE", {}, false);
			var code29_nodes = children(code29);

			t191 = claim_text(code29_nodes, "inclusive");
			code29_nodes.forEach(detach);
			t192 = claim_text(li54_nodes, " option in the ");

			a11 = claim_element(li54_nodes, "A", { href: true, class: true }, false);
			var a11_nodes = children(a11);

			t193 = claim_text(a11_nodes, "between");
			a11_nodes.forEach(detach);
			t194 = claim_text(li54_nodes, ", ");

			a12 = claim_element(li54_nodes, "A", { href: true }, false);
			var a12_nodes = children(a12);

			t195 = claim_text(a12_nodes, "greaterThan");
			a12_nodes.forEach(detach);
			t196 = claim_text(li54_nodes, " and ");

			a13 = claim_element(li54_nodes, "A", { href: true, class: true }, false);
			var a13_nodes = children(a13);

			t197 = claim_text(a13_nodes, "lessThan");
			a13_nodes.forEach(detach);
			t198 = claim_text(li54_nodes, " validators");
			li54_nodes.forEach(detach);
			t199 = claim_text(ul10_nodes, "\n            ");

			li55 = claim_element(ul10_nodes, "LI", {}, false);
			var li55_nodes = children(li55);

			t200 = claim_text(li55_nodes, "The ");

			a14 = claim_element(li55_nodes, "A", { href: true, class: true }, false);
			var a14_nodes = children(a14);

			t201 = claim_text(a14_nodes, "date validator");
			a14_nodes.forEach(detach);
			t202 = claim_text(li55_nodes, " still return valid if the value doesn't contain digits");
			li55_nodes.forEach(detach);
			t203 = claim_text(ul10_nodes, "\n            ");

			li56 = claim_element(ul10_nodes, "LI", {}, false);
			var li56_nodes = children(li56);

			t204 = claim_text(li56_nodes, "file validation extension is case sensitive");
			li56_nodes.forEach(detach);
			t205 = claim_text(ul10_nodes, "\n            ");

			li57 = claim_element(ul10_nodes, "LI", {}, false);
			var li57_nodes = children(li57);

			t206 = claim_text(li57_nodes, "Fix the ");

			a15 = claim_element(li57_nodes, "A", { href: true, class: true }, false);
			var a15_nodes = children(a15);

			t207 = claim_text(a15_nodes, "file validator");
			a15_nodes.forEach(detach);
			t208 = claim_text(li57_nodes, " issue on IE 8");
			li57_nodes.forEach(detach);
			t209 = claim_text(ul10_nodes, "\n            ");

			li58 = claim_element(ul10_nodes, "LI", {}, false);
			var li58_nodes = children(li58);

			t210 = claim_text(li58_nodes, "The ");

			a16 = claim_element(li58_nodes, "A", { href: true, class: true }, false);
			var a16_nodes = children(a16);

			t211 = claim_text(a16_nodes, "creditCard validator");
			a16_nodes.forEach(detach);
			t212 = claim_text(li58_nodes, " doesn't work on IE 8");
			li58_nodes.forEach(detach);
			t213 = claim_text(ul10_nodes, "\n            ");

			li59 = claim_element(ul10_nodes, "LI", {}, false);
			var li59_nodes = children(li59);

			t214 = claim_text(li59_nodes, "The cvv validator doesn't work on IE 8");
			li59_nodes.forEach(detach);
			t215 = claim_text(ul10_nodes, "\n            ");

			li60 = claim_element(ul10_nodes, "LI", {}, false);
			var li60_nodes = children(li60);

			t216 = claim_text(li60_nodes, "The ");

			code30 = claim_element(li60_nodes, "CODE", {}, false);
			var code30_nodes = children(code30);

			t217 = claim_text(code30_nodes, "threshold");
			code30_nodes.forEach(detach);
			t218 = claim_text(li60_nodes, " option doesn't work on IE 8");
			li60_nodes.forEach(detach);
			t219 = claim_text(ul10_nodes, "\n            ");

			li61 = claim_element(ul10_nodes, "LI", {}, false);
			var li61_nodes = children(li61);

			t220 = claim_text(li61_nodes, "The ");

			a17 = claim_element(li61_nodes, "A", { href: true, class: true }, false);
			var a17_nodes = children(a17);

			t221 = claim_text(a17_nodes, "zipCode validator");
			a17_nodes.forEach(detach);
			t222 = claim_text(li61_nodes, " doesn't work for Canadian zip code");
			li61_nodes.forEach(detach);
			t223 = claim_text(ul10_nodes, "\n            ");

			li62 = claim_element(ul10_nodes, "LI", {}, false);
			var li62_nodes = children(li62);

			t224 = claim_text(li62_nodes, "Added the letters 'H', 'W' and 'Z' in letter list for Canada postal code");
			li62_nodes.forEach(detach);
			t225 = claim_text(ul10_nodes, "\n            ");

			li63 = claim_element(ul10_nodes, "LI", {}, false);
			var li63_nodes = children(li63);

			t226 = claim_text(li63_nodes, "Don't submit form when the ");

			a18 = claim_element(li63_nodes, "A", { href: true, class: true }, false);
			var a18_nodes = children(a18);

			t227 = claim_text(a18_nodes, "callback validator");
			a18_nodes.forEach(detach);
			t228 = claim_text(li63_nodes, " completes and the submit button isn't clicked");
			li63_nodes.forEach(detach);
			t229 = claim_text(ul10_nodes, "\n            ");

			li64 = claim_element(ul10_nodes, "LI", {}, false);
			var li64_nodes = children(li64);

			t230 = claim_text(li64_nodes, "The ");

			a19 = claim_element(li64_nodes, "A", { href: true, class: true }, false);
			var a19_nodes = children(a19);

			t231 = claim_text(a19_nodes, "id");
			a19_nodes.forEach(detach);
			t232 = claim_text(li64_nodes, ", ");

			a20 = claim_element(li64_nodes, "A", { href: true, class: true }, false);
			var a20_nodes = children(a20);

			t233 = claim_text(a20_nodes, "vat");
			a20_nodes.forEach(detach);
			t234 = claim_text(li64_nodes, " validators should return ");

			code31 = claim_element(li64_nodes, "CODE", {}, false);
			var code31_nodes = children(code31);

			t235 = claim_text(code31_nodes, "false");
			code31_nodes.forEach(detach);
			t236 = claim_text(li64_nodes, " if the country code is not supported");
			li64_nodes.forEach(detach);
			t237 = claim_text(ul10_nodes, "\n            ");

			li65 = claim_element(ul10_nodes, "LI", {}, false);
			var li65_nodes = children(li65);

			t238 = claim_text(li65_nodes, "When using multiple forms with HTML attributes on the same page, the plugin options will be the same as the last one");
			li65_nodes.forEach(detach);
			t239 = claim_text(ul10_nodes, "\n            ");

			li66 = claim_element(ul10_nodes, "LI", {}, false);
			var li66_nodes = children(li66);

			a21 = claim_element(li66_nodes, "A", { href: true, class: true }, false);
			var a21_nodes = children(a21);

			t240 = claim_text(a21_nodes, "stringLength validator");
			a21_nodes.forEach(detach);
			t241 = claim_text(li66_nodes, " allows spaces after max length");
			li66_nodes.forEach(detach);
			t242 = claim_text(ul10_nodes, "\n            ");

			li67 = claim_element(ul10_nodes, "LI", {}, false);
			var li67_nodes = children(li67);

			t243 = claim_text(li67_nodes, "Fix the ");

			a22 = claim_element(li67_nodes, "A", { href: true, class: true }, false);
			var a22_nodes = children(a22);

			t244 = claim_text(a22_nodes, "ean validator");
			a22_nodes.forEach(detach);
			t245 = claim_text(li67_nodes, " when the check digit is zero");
			li67_nodes.forEach(detach);
			t246 = claim_text(ul10_nodes, "\n            ");

			li68 = claim_element(ul10_nodes, "LI", {}, false);
			var li68_nodes = children(li68);

			t247 = claim_text(li68_nodes, "IPv6 validator doesn't work");
			li68_nodes.forEach(detach);
			t248 = claim_text(ul10_nodes, "\n            ");

			li69 = claim_element(ul10_nodes, "LI", {}, false);
			var li69_nodes = children(li69);

			t249 = claim_text(li69_nodes, "Custom trigger event is ignored by field validators");
			li69_nodes.forEach(detach);
			t250 = claim_text(ul10_nodes, "\n            ");

			li70 = claim_element(ul10_nodes, "LI", {}, false);
			var li70_nodes = children(li70);

			t251 = claim_text(li70_nodes, "Skip the ");

			code32 = claim_element(li70_nodes, "CODE", {}, false);
			var code32_nodes = children(code32);

			t252 = claim_text(code32_nodes, "_isExcluded()");
			code32_nodes.forEach(detach);
			t253 = claim_text(li70_nodes, " when initializing the form");
			li70_nodes.forEach(detach);
			t254 = claim_text(ul10_nodes, "\n            ");

			li71 = claim_element(ul10_nodes, "LI", {}, false);
			var li71_nodes = children(li71);

			t255 = claim_text(li71_nodes, "Fixed Chilean ID (RUT/RUN) finished in 'K' or 'k'");
			li71_nodes.forEach(detach);
			ul10_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			t256 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			heading4.$$.fragment.l(section4_nodes);
			t257 = claim_text(section4_nodes, "\n        ");

			p0 = claim_element(section4_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t258 = claim_text(p0_nodes, "From v0.5.0, we remove the ");

			code33 = claim_element(p0_nodes, "CODE", {}, false);
			var code33_nodes = children(code33);

			t259 = claim_text(code33_nodes, "submitHandler");
			code33_nodes.forEach(detach);
			t260 = claim_text(p0_nodes, " option. In v0.5.0, use the ");

			code34 = claim_element(p0_nodes, "CODE", {}, false);
			var code34_nodes = children(code34);

			t261 = claim_text(code34_nodes, "success.form.bv");
			code34_nodes.forEach(detach);
			t262 = claim_text(p0_nodes, " event instead.");
			p0_nodes.forEach(detach);
			t263 = claim_text(section4_nodes, "\n        ");

			p1 = claim_element(section4_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t264 = claim_text(p1_nodes, "In v0.4.5 and earlier versions:");
			p1_nodes.forEach(detach);
			t265 = claim_text(section4_nodes, "\n        ");
			samplecode0.$$.fragment.l(section4_nodes);
			t266 = claim_text(section4_nodes, "\n        ");

			p2 = claim_element(section4_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t267 = claim_text(p2_nodes, "In v0.5.0:");
			p2_nodes.forEach(detach);
			t268 = claim_text(section4_nodes, "\n        ");
			samplecode1.$$.fragment.l(section4_nodes);
			section4_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 92);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 143);
			add_location(strong0, file, 12, 16, 333);
			add_location(li0, file, 14, 20, 434);
			add_location(li1, file, 15, 20, 491);
			add_location(li2, file, 16, 20, 555);
			ul0.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul0, file, 13, 16, 381);
			add_location(li3, file, 11, 12, 312);
			i0.className = "fa fa-star";
			add_location(i0, file, 20, 16, 661);
			add_location(strong1, file, 20, 43, 688);
			add_location(li4, file, 22, 20, 782);
			add_location(li5, file, 23, 20, 831);
			add_location(li6, file, 24, 20, 881);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 21, 16, 729);
			add_location(li7, file, 19, 12, 640);
			i1.className = "fa fa-star";
			add_location(i1, file, 28, 16, 988);
			add_location(strong2, file, 28, 43, 1015);
			a0.href = "/guide/validators/between";
			a0.className = "blue dim link";
			add_location(a0, file, 30, 24, 1129);
			a1.href = "/guide/validators/greater-than/";
			add_location(a1, file, 30, 95, 1200);
			a2.href = "/guide/validators/less-than";
			a2.className = "blue dim link";
			add_location(a2, file, 30, 154, 1259);
			add_location(li8, file, 30, 20, 1125);
			a3.href = "/guide/validators/zip-code";
			a3.className = "blue dim link";
			add_location(a3, file, 31, 24, 1439);
			add_location(li9, file, 31, 20, 1435);
			ul2.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul2, file, 29, 16, 1072);
			add_location(li10, file, 27, 12, 967);
			i2.className = "fa fa-star";
			add_location(i2, file, 35, 16, 1658);
			add_location(strong3, file, 35, 43, 1685);
			add_location(li11, file, 37, 20, 1795);
			add_location(code0, file, 38, 28, 1855);
			add_location(code1, file, 38, 56, 1883);
			add_location(li12, file, 38, 20, 1847);
			ul3.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul3, file, 36, 16, 1742);
			add_location(li13, file, 34, 12, 1637);
			add_location(strong4, file, 42, 16, 2024);
			add_location(code2, file, 44, 28, 2131);
			add_location(li14, file, 44, 20, 2123);
			add_location(li15, file, 45, 20, 2232);
			add_location(code3, file, 46, 28, 2306);
			add_location(li16, file, 46, 20, 2298);
			add_location(code4, file, 47, 28, 2429);
			add_location(li17, file, 47, 20, 2421);
			add_location(code5, file, 48, 28, 2488);
			add_location(li18, file, 48, 20, 2480);
			add_location(code6, file, 49, 28, 2585);
			add_location(li19, file, 49, 20, 2577);
			ul4.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul4, file, 43, 16, 2070);
			add_location(li20, file, 41, 12, 2003);
			add_location(strong5, file, 53, 16, 2720);
			add_location(code7, file, 55, 28, 2824);
			add_location(li21, file, 55, 20, 2816);
			add_location(code8, file, 56, 28, 2928);
			add_location(li22, file, 56, 20, 2920);
			add_location(code9, file, 57, 28, 2991);
			add_location(li23, file, 57, 20, 2983);
			add_location(code10, file, 58, 28, 3063);
			add_location(li24, file, 58, 20, 3055);
			add_location(code11, file, 59, 28, 3131);
			add_location(li25, file, 59, 20, 3123);
			add_location(code12, file, 60, 28, 3202);
			add_location(li26, file, 60, 20, 3194);
			add_location(code13, file, 61, 28, 3268);
			add_location(li27, file, 61, 20, 3260);
			add_location(code14, file, 62, 28, 3337);
			add_location(li28, file, 62, 20, 3329);
			ul5.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul5, file, 54, 16, 2763);
			add_location(li29, file, 52, 12, 2699);
			add_location(strong6, file, 66, 16, 3495);
			add_location(code15, file, 68, 28, 3595);
			a4.href = "/guide/validators/date";
			a4.className = "blue dim link";
			add_location(a4, file, 68, 66, 3633);
			add_location(li30, file, 68, 20, 3587);
			a5.href = "/guide/validators/phone";
			a5.className = "blue dim link";
			add_location(a5, file, 69, 60, 3772);
			add_location(li31, file, 69, 20, 3732);
			add_location(code16, file, 70, 28, 3881);
			a6.href = "/guide/validators/callback";
			a6.className = "blue dim link";
			add_location(a6, file, 70, 64, 3917);
			add_location(li32, file, 70, 20, 3873);
			a7.href = "/guide/validators/zip-code";
			a7.className = "blue dim link";
			add_location(a7, file, 71, 58, 4062);
			add_location(li33, file, 71, 20, 4024);
			ul6.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul6, file, 67, 16, 3534);
			add_location(li34, file, 65, 12, 3474);
			ul7.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul7, file, 10, 8, 267);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 197);
			add_location(code17, file, 80, 16, 4336);
			add_location(code18, file, 80, 69, 4389);
			add_location(code19, file, 80, 95, 4415);
			add_location(code20, file, 80, 120, 4440);
			add_location(code21, file, 80, 146, 4466);
			add_location(li35, file, 80, 12, 4332);
			add_location(code22, file, 81, 23, 4518);
			add_location(li36, file, 81, 12, 4507);
			ul8.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul8, file, 79, 8, 4287);
			section1.className = "mv5";
			add_location(section1, file, 77, 4, 4222);
			add_location(li37, file, 88, 12, 4706);
			add_location(code23, file, 89, 28, 4798);
			add_location(li38, file, 89, 12, 4782);
			add_location(code24, file, 90, 38, 4983);
			add_location(li39, file, 90, 12, 4957);
			add_location(li40, file, 91, 12, 5025);
			a8.href = "/guide/validators/uri";
			a8.className = "blue dim link";
			add_location(a8, file, 92, 20, 5099);
			add_location(li41, file, 92, 12, 5091);
			add_location(li42, file, 93, 12, 5252);
			add_location(li43, file, 94, 12, 5342);
			i3.className = "fa fa-star";
			add_location(i3, file, 95, 16, 5428);
			add_location(li44, file, 95, 12, 5424);
			add_location(li45, file, 96, 12, 5498);
			a9.href = "/guide/validators/remote";
			a9.className = "blue dim link";
			add_location(a9, file, 97, 20, 5615);
			add_location(code25, file, 97, 123, 5718);
			add_location(li46, file, 97, 12, 5607);
			add_location(li47, file, 98, 12, 5779);
			add_location(li48, file, 99, 12, 5815);
			add_location(code26, file, 100, 40, 5897);
			add_location(li49, file, 100, 12, 5869);
			add_location(li50, file, 101, 12, 5963);
			add_location(code27, file, 102, 54, 6074);
			add_location(li51, file, 102, 12, 6032);
			ul9.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul9, file, 87, 8, 4661);
			section2.className = "mv5";
			add_location(section2, file, 85, 4, 4591);
			a10.href = "/guide/validators/date";
			a10.className = "blue dim link";
			add_location(a10, file, 109, 20, 6267);
			add_location(li52, file, 109, 12, 6259);
			add_location(code28, file, 110, 64, 6423);
			add_location(li53, file, 110, 12, 6371);
			add_location(code29, file, 111, 20, 6477);
			a11.href = "/guide/validators/between";
			a11.className = "blue dim link";
			add_location(a11, file, 111, 57, 6514);
			a12.href = "/guide/validators/greater-than/";
			add_location(a12, file, 111, 128, 6585);
			a13.href = "/guide/validators/less-than";
			a13.className = "blue dim link";
			add_location(a13, file, 111, 190, 6647);
			add_location(li54, file, 111, 12, 6469);
			a14.href = "/guide/validators/date";
			a14.className = "blue dim link";
			add_location(a14, file, 112, 20, 6756);
			add_location(li55, file, 112, 12, 6748);
			add_location(li56, file, 113, 12, 6902);
			a15.href = "/guide/validators/file";
			a15.className = "blue dim link";
			add_location(a15, file, 114, 24, 6979);
			add_location(li57, file, 114, 12, 6967);
			a16.href = "/guide/validators/credit-card";
			a16.className = "blue dim link";
			add_location(a16, file, 115, 20, 7092);
			add_location(li58, file, 115, 12, 7084);
			add_location(li59, file, 116, 12, 7217);
			add_location(code30, file, 117, 20, 7285);
			add_location(li60, file, 117, 12, 7277);
			a17.href = "/guide/validators/zip-code";
			a17.className = "blue dim link";
			add_location(a17, file, 118, 20, 7361);
			add_location(li61, file, 118, 12, 7353);
			add_location(li62, file, 119, 12, 7494);
			a18.href = "/guide/validators/callback";
			a18.className = "blue dim link";
			add_location(a18, file, 120, 43, 7619);
			add_location(li63, file, 120, 12, 7588);
			a19.href = "/guide/validators/id";
			a19.className = "blue dim link";
			add_location(a19, file, 121, 20, 7772);
			a20.href = "/guide/validators/vat";
			a20.className = "blue dim link";
			add_location(a20, file, 121, 81, 7833);
			add_location(code31, file, 121, 168, 7920);
			add_location(li64, file, 121, 12, 7764);
			add_location(li65, file, 122, 12, 7993);
			a21.href = "/guide/validators/string-length";
			a21.className = "blue dim link";
			add_location(a21, file, 123, 16, 8135);
			add_location(li66, file, 123, 12, 8131);
			a22.href = "/guide/validators/ean";
			a22.className = "blue dim link";
			add_location(a22, file, 124, 24, 8286);
			add_location(li67, file, 124, 12, 8274);
			add_location(li68, file, 125, 12, 8404);
			add_location(li69, file, 126, 12, 8453);
			add_location(code32, file, 127, 25, 8539);
			add_location(li70, file, 127, 12, 8526);
			add_location(li71, file, 128, 12, 8610);
			ul10.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul10, file, 108, 8, 6214);
			section3.className = "mv5";
			add_location(section3, file, 106, 4, 6147);
			add_location(code33, file, 134, 54, 8826);
			add_location(code34, file, 134, 108, 8880);
			p0.className = "lh-copy";
			add_location(p0, file, 134, 8, 8780);
			p1.className = "lh-copy";
			add_location(p1, file, 135, 8, 8936);
			p2.className = "lh-copy";
			add_location(p2, file, 143, 8, 9163);
			section4.className = "mv5";
			add_location(section4, file, 132, 4, 8703);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, ul7);
			append(ul7, li3);
			append(li3, strong0);
			append(strong0, t5);
			append(li3, t6);
			append(li3, ul0);
			append(ul0, li0);
			append(li0, t7);
			append(ul0, t8);
			append(ul0, li1);
			append(li1, t9);
			append(ul0, t10);
			append(ul0, li2);
			append(li2, t11);
			append(ul7, t12);
			append(ul7, li7);
			append(li7, i0);
			append(li7, t13);
			append(li7, strong1);
			append(strong1, t14);
			append(li7, t15);
			append(li7, ul1);
			append(ul1, li4);
			append(li4, t16);
			append(ul1, t17);
			append(ul1, li5);
			append(li5, t18);
			append(ul1, t19);
			append(ul1, li6);
			append(li6, t20);
			append(ul7, t21);
			append(ul7, li10);
			append(li10, i1);
			append(li10, t22);
			append(li10, strong2);
			append(strong2, t23);
			append(li10, t24);
			append(li10, ul2);
			append(ul2, li8);
			append(li8, a0);
			append(a0, t25);
			append(li8, t26);
			append(li8, a1);
			append(a1, t27);
			append(li8, t28);
			append(li8, a2);
			append(a2, t29);
			append(li8, t30);
			append(ul2, t31);
			append(ul2, li9);
			append(li9, a3);
			append(a3, t32);
			append(li9, t33);
			append(ul7, t34);
			append(ul7, li13);
			append(li13, i2);
			append(li13, t35);
			append(li13, strong3);
			append(strong3, t36);
			append(li13, t37);
			append(li13, ul3);
			append(ul3, li11);
			append(li11, t38);
			append(ul3, t39);
			append(ul3, li12);
			append(li12, t40);
			append(li12, code0);
			append(code0, t41);
			append(li12, t42);
			append(li12, code1);
			append(code1, t43);
			append(li12, t44);
			append(ul7, t45);
			append(ul7, li20);
			append(li20, strong4);
			append(strong4, t46);
			append(li20, t47);
			append(li20, ul4);
			append(ul4, li14);
			append(li14, t48);
			append(li14, code2);
			append(code2, t49);
			append(li14, t50);
			append(ul4, t51);
			append(ul4, li15);
			append(li15, t52);
			append(ul4, t53);
			append(ul4, li16);
			append(li16, t54);
			append(li16, code3);
			append(code3, t55);
			append(li16, t56);
			append(ul4, t57);
			append(ul4, li17);
			append(li17, t58);
			append(li17, code4);
			append(code4, t59);
			append(li17, t60);
			append(ul4, t61);
			append(ul4, li18);
			append(li18, t62);
			append(li18, code5);
			append(code5, t63);
			append(li18, t64);
			append(ul4, t65);
			append(ul4, li19);
			append(li19, t66);
			append(li19, code6);
			append(code6, t67);
			append(li19, t68);
			append(ul7, t69);
			append(ul7, li29);
			append(li29, strong5);
			append(strong5, t70);
			append(li29, t71);
			append(li29, ul5);
			append(ul5, li21);
			append(li21, t72);
			append(li21, code7);
			append(code7, t73);
			append(li21, t74);
			append(ul5, t75);
			append(ul5, li22);
			append(li22, t76);
			append(li22, code8);
			append(code8, t77);
			append(li22, t78);
			append(ul5, t79);
			append(ul5, li23);
			append(li23, t80);
			append(li23, code9);
			append(code9, t81);
			append(li23, t82);
			append(ul5, t83);
			append(ul5, li24);
			append(li24, t84);
			append(li24, code10);
			append(code10, t85);
			append(li24, t86);
			append(ul5, t87);
			append(ul5, li25);
			append(li25, t88);
			append(li25, code11);
			append(code11, t89);
			append(li25, t90);
			append(ul5, t91);
			append(ul5, li26);
			append(li26, t92);
			append(li26, code12);
			append(code12, t93);
			append(li26, t94);
			append(ul5, t95);
			append(ul5, li27);
			append(li27, t96);
			append(li27, code13);
			append(code13, t97);
			append(li27, t98);
			append(ul5, t99);
			append(ul5, li28);
			append(li28, t100);
			append(li28, code14);
			append(code14, t101);
			append(li28, t102);
			append(ul7, t103);
			append(ul7, li34);
			append(li34, strong6);
			append(strong6, t104);
			append(li34, t105);
			append(li34, ul6);
			append(ul6, li30);
			append(li30, t106);
			append(li30, code15);
			append(code15, t107);
			append(li30, t108);
			append(li30, a4);
			append(a4, t109);
			append(ul6, t110);
			append(ul6, li31);
			append(li31, t111);
			append(li31, a5);
			append(a5, t112);
			append(ul6, t113);
			append(ul6, li32);
			append(li32, t114);
			append(li32, code16);
			append(code16, t115);
			append(li32, t116);
			append(li32, a6);
			append(a6, t117);
			append(ul6, t118);
			append(ul6, li33);
			append(li33, t119);
			append(li33, a7);
			append(a7, t120);
			insert(target, t121, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t122);
			append(section1, ul8);
			append(ul8, li35);
			append(li35, code17);
			append(code17, t123);
			append(li35, t124);
			append(li35, code18);
			append(code18, t125);
			append(li35, t126);
			append(li35, code19);
			append(code19, t127);
			append(li35, t128);
			append(li35, code20);
			append(code20, t129);
			append(li35, t130);
			append(li35, code21);
			append(code21, t131);
			append(ul8, t132);
			append(ul8, li36);
			append(li36, t133);
			append(li36, code22);
			append(code22, t134);
			append(li36, t135);
			insert(target, t136, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t137);
			append(section2, ul9);
			append(ul9, li37);
			append(li37, t138);
			append(ul9, t139);
			append(ul9, li38);
			append(li38, t140);
			append(li38, code23);
			append(code23, t141);
			append(li38, t142);
			append(ul9, t143);
			append(ul9, li39);
			append(li39, t144);
			append(li39, code24);
			append(code24, t145);
			append(ul9, t146);
			append(ul9, li40);
			append(li40, t147);
			append(ul9, t148);
			append(ul9, li41);
			append(li41, t149);
			append(li41, a8);
			append(a8, t150);
			append(li41, t151);
			append(ul9, t152);
			append(ul9, li42);
			append(li42, t153);
			append(ul9, t154);
			append(ul9, li43);
			append(li43, t155);
			append(ul9, t156);
			append(ul9, li44);
			append(li44, i3);
			append(li44, t157);
			append(ul9, t158);
			append(ul9, li45);
			append(li45, t159);
			append(ul9, t160);
			append(ul9, li46);
			append(li46, t161);
			append(li46, a9);
			append(a9, t162);
			append(li46, t163);
			append(li46, code25);
			append(code25, t164);
			append(li46, t165);
			append(ul9, t166);
			append(ul9, li47);
			append(li47, t167);
			append(ul9, t168);
			append(ul9, li48);
			append(li48, t169);
			append(ul9, t170);
			append(ul9, li49);
			append(li49, t171);
			append(li49, code26);
			append(code26, t172);
			append(li49, t173);
			append(ul9, t174);
			append(ul9, li50);
			append(li50, t175);
			append(ul9, t176);
			append(ul9, li51);
			append(li51, t177);
			append(li51, code27);
			append(code27, t178);
			append(li51, t179);
			insert(target, t180, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t181);
			append(section3, ul10);
			append(ul10, li52);
			append(li52, t182);
			append(li52, a10);
			append(a10, t183);
			append(li52, t184);
			append(ul10, t185);
			append(ul10, li53);
			append(li53, t186);
			append(li53, code28);
			append(code28, t187);
			append(li53, t188);
			append(ul10, t189);
			append(ul10, li54);
			append(li54, t190);
			append(li54, code29);
			append(code29, t191);
			append(li54, t192);
			append(li54, a11);
			append(a11, t193);
			append(li54, t194);
			append(li54, a12);
			append(a12, t195);
			append(li54, t196);
			append(li54, a13);
			append(a13, t197);
			append(li54, t198);
			append(ul10, t199);
			append(ul10, li55);
			append(li55, t200);
			append(li55, a14);
			append(a14, t201);
			append(li55, t202);
			append(ul10, t203);
			append(ul10, li56);
			append(li56, t204);
			append(ul10, t205);
			append(ul10, li57);
			append(li57, t206);
			append(li57, a15);
			append(a15, t207);
			append(li57, t208);
			append(ul10, t209);
			append(ul10, li58);
			append(li58, t210);
			append(li58, a16);
			append(a16, t211);
			append(li58, t212);
			append(ul10, t213);
			append(ul10, li59);
			append(li59, t214);
			append(ul10, t215);
			append(ul10, li60);
			append(li60, t216);
			append(li60, code30);
			append(code30, t217);
			append(li60, t218);
			append(ul10, t219);
			append(ul10, li61);
			append(li61, t220);
			append(li61, a17);
			append(a17, t221);
			append(li61, t222);
			append(ul10, t223);
			append(ul10, li62);
			append(li62, t224);
			append(ul10, t225);
			append(ul10, li63);
			append(li63, t226);
			append(li63, a18);
			append(a18, t227);
			append(li63, t228);
			append(ul10, t229);
			append(ul10, li64);
			append(li64, t230);
			append(li64, a19);
			append(a19, t231);
			append(li64, t232);
			append(li64, a20);
			append(a20, t233);
			append(li64, t234);
			append(li64, code31);
			append(code31, t235);
			append(li64, t236);
			append(ul10, t237);
			append(ul10, li65);
			append(li65, t238);
			append(ul10, t239);
			append(ul10, li66);
			append(li66, a21);
			append(a21, t240);
			append(li66, t241);
			append(ul10, t242);
			append(ul10, li67);
			append(li67, t243);
			append(li67, a22);
			append(a22, t244);
			append(li67, t245);
			append(ul10, t246);
			append(ul10, li68);
			append(li68, t247);
			append(ul10, t248);
			append(ul10, li69);
			append(li69, t249);
			append(ul10, t250);
			append(ul10, li70);
			append(li70, t251);
			append(li70, code32);
			append(code32, t252);
			append(li70, t253);
			append(ul10, t254);
			append(ul10, li71);
			append(li71, t255);
			insert(target, t256, anchor);
			insert(target, section4, anchor);
			mount_component(heading4, section4, null);
			append(section4, t257);
			append(section4, p0);
			append(p0, t258);
			append(p0, code33);
			append(code33, t259);
			append(p0, t260);
			append(p0, code34);
			append(code34, t261);
			append(p0, t262);
			append(section4, t263);
			append(section4, p1);
			append(p1, t264);
			append(section4, t265);
			mount_component(samplecode0, section4, null);
			append(section4, t266);
			append(section4, p2);
			append(p2, t267);
			append(section4, t268);
			mount_component(samplecode1, section4, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var heading4_changes = {};
			if (changed.$$scope) heading4_changes.$$scope = { changed, ctx };
			heading4.$set(heading4_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			heading4.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			heading4.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			if (detaching) {
				detach(t121);
				detach(section1);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t136);
				detach(section2);
			}

			heading2.$destroy();

			if (detaching) {
				detach(t180);
				detach(section3);
			}

			heading3.$destroy();

			if (detaching) {
				detach(t256);
				detach(section4);
			}

			heading4.$destroy();

			samplecode0.$destroy();

			samplecode1.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var changeloglayout = new ChangelogLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			changeloglayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			changeloglayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • v0.5.0";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(changeloglayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var changeloglayout_changes = {};
			if (changed.$$scope) changeloglayout_changes.$$scope = { changed, ctx };
			changeloglayout.$set(changeloglayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			changeloglayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			changeloglayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			changeloglayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

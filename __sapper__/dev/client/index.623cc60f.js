import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, w as empty, y as on_outro, z as check_outros, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, I as destroy_each, x as group_outros, r as noop } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';
import { a as SampleData } from './chunk.41999a23.js';

/* src/routes/guide/validators/zip-code/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/validators/zip-code/index.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.example = list[i];
	child_ctx.i = i;
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.item = list[i];
	return child_ctx;
}

// (10:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (53:16) {:else}
function create_else_block(ctx) {
	var tr, td0, t0_value = ctx.item.country, t0, t1, td1, t2_value = ctx.item.code, t2, t3, td2, t4, td3;

	return {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			td1 = element("td");
			t2 = text(t2_value);
			t3 = space();
			td2 = element("td");
			t4 = space();
			td3 = element("td");
			this.h();
		},

		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", { class: true }, false);
			var tr_nodes = children(tr);

			td0 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			t0 = claim_text(td0_nodes, t0_value);
			td0_nodes.forEach(detach);
			t1 = claim_text(tr_nodes, "\n                    ");

			td1 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			t2 = claim_text(td1_nodes, t2_value);
			td1_nodes.forEach(detach);
			t3 = claim_text(tr_nodes, "\n                    ");

			td2 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			td2_nodes.forEach(detach);
			t4 = claim_text(tr_nodes, "\n                    ");

			td3 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			td3_nodes.forEach(detach);
			tr_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			td0.className = "pv2 ph3";
			add_location(td0, file, 54, 20, 2922);
			td1.className = "pv2 ph3";
			add_location(td1, file, 55, 20, 2982);
			td2.className = "pv2 ph3";
			add_location(td2, file, 56, 20, 3039);
			td3.className = "pv2 ph3";
			add_location(td3, file, 57, 20, 3085);
			tr.className = "striped--light-gray";
			add_location(tr, file, 53, 16, 2869);
		},

		m: function mount(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td0);
			append(td0, t0);
			append(tr, t1);
			append(tr, td1);
			append(td1, t2);
			append(tr, t3);
			append(tr, td2);
			append(tr, t4);
			append(tr, td3);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(tr);
			}
		}
	};
}

// (45:16) {#if item.examples.length > 0}
function create_if_block(ctx) {
	var each_1_anchor, current;

	var each_value_1 = ctx.item.examples;

	var each_blocks = [];

	for (var i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	function outro_block(i, detaching, local) {
		if (each_blocks[i]) {
			if (detaching) {
				on_outro(() => {
					each_blocks[i].d(detaching);
					each_blocks[i] = null;
				});
			}

			each_blocks[i].o(local);
		}
	}

	return {
		c: function create() {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},

		l: function claim(nodes) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},

		m: function mount(target, anchor) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			if (changed._samples) {
				each_value_1 = ctx.item.examples;

				for (var i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						each_blocks[i].i(1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].i(1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();
				for (; i < each_blocks.length; i += 1) outro_block(i, 1, 1);
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			for (var i = 0; i < each_value_1.length; i += 1) each_blocks[i].i();

			current = true;
		},

		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) outro_block(i, 0);

			current = false;
		},

		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach(each_1_anchor);
			}
		}
	};
}

// (48:40) {#if i === 0}
function create_if_block_2(ctx) {
	var t_value = ctx.item.country, t;

	return {
		c: function create() {
			t = text(t_value);
		},

		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (49:40) {#if i === 0}
function create_if_block_1(ctx) {
	var t_value = ctx.item.code, t;

	return {
		c: function create() {
			t = text(t_value);
		},

		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (46:16) {#each item.examples as example, i}
function create_each_block_1(ctx) {
	var tr, td0, t0, td1, t1, current;

	var if_block0 = (ctx.i === 0) && create_if_block_2(ctx);

	var if_block1 = (ctx.i === 0) && create_if_block_1(ctx);

	var sampledata = new SampleData({
		props: {
		sample: { country: ctx.item.code, sample: ctx.example },
		renderSample: func,
		sender: "/guide/validators/zip-code/basic"
	},
		$$inline: true
	});

	return {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			if (if_block0) if_block0.c();
			t0 = space();
			td1 = element("td");
			if (if_block1) if_block1.c();
			t1 = space();
			sampledata.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", { class: true }, false);
			var tr_nodes = children(tr);

			td0 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			if (if_block0) if_block0.l(td0_nodes);
			td0_nodes.forEach(detach);
			t0 = claim_text(tr_nodes, "\n                    ");

			td1 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			if (if_block1) if_block1.l(td1_nodes);
			td1_nodes.forEach(detach);
			t1 = claim_text(tr_nodes, "\n                    ");
			sampledata.$$.fragment.l(tr_nodes);
			tr_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			td0.className = "pv2 ph3";
			add_location(td0, file, 47, 20, 2493);
			td1.className = "pv2 ph3";
			add_location(td1, file, 48, 20, 2571);
			tr.className = "striped--light-gray";
			add_location(tr, file, 46, 16, 2440);
		},

		m: function mount(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td0);
			if (if_block0) if_block0.m(td0, null);
			append(tr, t0);
			append(tr, td1);
			if (if_block1) if_block1.m(td1, null);
			append(tr, t1);
			mount_component(sampledata, tr, null);
			current = true;
		},

		p: function update(changed, ctx) {
			if (ctx.i === 0) {
				if (if_block0) {
					if_block0.p(changed, ctx);
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					if_block0.m(td0, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (ctx.i === 0) {
				if (if_block1) {
					if_block1.p(changed, ctx);
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					if_block1.m(td1, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			var sampledata_changes = {};
			if (changed._samples) sampledata_changes.sample = { country: ctx.item.code, sample: ctx.example };
			sampledata.$set(sampledata_changes);
		},

		i: function intro(local) {
			if (current) return;
			sampledata.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			sampledata.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(tr);
			}

			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();

			sampledata.$destroy();
		}
	};
}

// (44:12) {#each _samples as item}
function create_each_block(ctx) {
	var current_block_type_index, if_block, if_block_anchor, current;

	var if_block_creators = [
		create_if_block,
		create_else_block
	];

	var if_blocks = [];

	function select_block_type(ctx) {
		if (ctx.item.examples.length > 0) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},

		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},

		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);
			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(changed, ctx);
			} else {
				group_outros();
				on_outro(() => {
					if_blocks[previous_block_index].d(1);
					if_blocks[previous_block_index] = null;
				});
				if_block.o(1);
				check_outros();

				if_block = if_blocks[current_block_type_index];
				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}
				if_block.i(1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},

		i: function intro(local) {
			if (current) return;
			if (if_block) if_block.i();
			current = true;
		},

		o: function outro(local) {
			if (if_block) if_block.o();
			current = false;
		},

		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);

			if (detaching) {
				detach(if_block_anchor);
			}
		}
	};
}

// (112:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (118:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Using country option with different value");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Using country option with different value");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (212:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("ES6 Module Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "ES6 Module Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (243:12) <PrevButton target="/guide/validators/vin">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("vin validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "vin validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (244:12) <NextButton target="/guide/plugins">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Plugins");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Plugins");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, h30, t5, t6, p0, sup0, t7, t8, a0, t9, t10, t11, table0, tr0, th0, t12, t13, th1, t14, t15, th2, t16, t17, th3, t18, t19, tr1, td0, code0, t20, sup1, t21, t22, td1, code1, t23, t24, td2, t25, t26, td3, t27, t28, tr2, td4, code2, t29, t30, td5, code3, t31, t32, td6, t33, t34, td7, t35, t36, p1, t37, a1, t38, t39, t40, p2, t41, t42, table1, tr3, th4, t43, t44, th5, t45, t46, th6, t47, t48, th7, t49, t50, t51, h31, t52, t53, p3, t54, a2, t55, t56, t57, t58, h32, t59, t60, t61, section1, t62, p4, t63, t64, t65, section2, t66, p5, t67, t68, t69, p6, t70, code4, t71, t72, code5, t73, t74, t75, t76, p7, t77, code6, t78, t79, t80, t81, p8, t82, t83, section3, t84, p9, t85, t86, t87, t88, section4, div, t89, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var each_value = ctx._samples;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	function outro_block(i, detaching, local) {
		if (each_blocks[i]) {
			if (detaching) {
				on_outro(() => {
					each_blocks[i].d(detaching);
					each_blocks[i] = null;
				});
			}

			each_blocks[i].o(local);
		}
	}

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                postcode: {
                    validators: {
                        regexp: {
                            regexp: /^\d{5}$/,
                            message: 'The US zip code must contain 5 digits'
                        }
                    }
                }
            },
        }
    );
});
</script-tag>
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import zipCode from 'formvalidation/dist/es6/validators/zipCode';

const result = zipCode().validate({
    value: ...,
    options: {
        // Can be a string or a function returns a string
        country: ...,
        message: ...,
    },
});
/*
result is an object of
{
    valid: true or false,
    message: The error message
}
*/
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/validators/zip-code/basic",
		frameworks: ['bootstrap', 'tachyons']
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "html", code: `
<select class="input-reset ba b--black-20 pa2 mb2 db w-100" name="country">
    <option value="US">United States</option>
    <option value="AT">Austria</option>
    <option value="BG">Bulgaria</option>
    <option value="BR">Brazil</option>
    <option value="CA">Canada</option>
    <option value="CZ">Czech Republic</option>
    ...
</select>
` },
		$$inline: true
	});

	var samplecode3 = new SampleCode({
		props: { lang: "html", code: `
<select class="input-reset ba b--black-20 pa2 mb2 db w-100" name="country">
    <option value="United States">United States</option>
    <option value="Austria">Austria</option>
    <option value="Bulgaria">Bulgaria</option>
    <option value="Brazil">Brazil</option>
    <option value="Canada">Canada</option>
    <option value="Czech Republic">Czech Republic</option>
    ...
</select>
` },
		$$inline: true
	});

	var samplecode4 = new SampleCode({
		props: { lang: "html", code: `
<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    const form = document.getElementById('demoForm');
    const fv = FormValidation.formValidation(
        form,
        {
            fields: {
                postalCode: {
                    validators: {
                        zipCode: {
                            country: function() {
                                // Map the country names to the code
                                const map = {
                                    'United States': 'US',
                                    'Austria': 'AT',
                                    'Bulgaria': 'BG',
                                    'Brazil': 'BR',
                                    'Canada': 'CA',
                                    'Czech Republic': 'CZ',
                                    'Denmark': 'DK',
                                    'French': 'FR',
                                    'Germany': 'DE',
                                    'India': 'IN',
                                    'Italy': 'IT',
                                    'Morocco': 'MA',
                                    'Netherlands': 'NL',
                                    'Poland': 'PL',
                                    'Portugal': 'PT',
                                    'Romania': 'RO',
                                    'Russia': 'RU',
                                    'Singapore': 'SG',
                                    'Slovakia': 'SK',
                                    'Spain': 'ES',
                                    'Sweden': 'SE',
                                    'Switzerland': 'CH',
                                    'United Kingdom': 'GB'
                                };

                                // Get the selected country
                                const country = form.querySelector('[name="country"]').value;

                                // Return the country code based on selected name
                                return (country == '') ? '' : (map[country] || '');
                            },
                            message: 'The value is not a valid postal code'
                        }
                    }
                },
            },
            plugins: {
                ...,
            },
        }
    );

    form.querySelector('[name="country"]').addEventListener('change', function() {
        // Revalidate the postal code field whenever user changes the country
        fv.revalidateField('postalCode');
    });
});
</script-tag>
` },
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode5 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import zipCode from 'formvalidation/dist/es6/validators/zipCode';

const res1 = zipCode().validate({
    value: '12345',
    options: {
        country: 'US',
        message: 'The value is not a valid zipcode',
    },
});
// res1.valid === true

const res2 = zipCode().validate({
    value: '12345',
    options: {
        country: 'AT',
        message: 'The value is not a valid zipcode',
    },
});
// res2.valid === false
` },
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['phone', 'regexp'] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/validators/vin",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/plugins",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("zipCode validator");
			t1 = space();
			h2 = element("h2");
			t2 = text("Validate a zip code");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			h30 = element("h3");
			t5 = text("Using with form field");
			t6 = space();
			p0 = element("p");
			sup0 = element("sup");
			t7 = text("*");
			t8 = text(" presents a required option. The HTML attributes are used to set the validator options via the ");
			a0 = element("a");
			t9 = text("Declarative");
			t10 = text(" plugin");
			t11 = space();
			table0 = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t12 = text("Name");
			t13 = space();
			th1 = element("th");
			t14 = text("HTML attribute");
			t15 = space();
			th2 = element("th");
			t16 = text("Type");
			t17 = space();
			th3 = element("th");
			t18 = text("Description");
			t19 = space();
			tr1 = element("tr");
			td0 = element("td");
			code0 = element("code");
			t20 = text("country");
			sup1 = element("sup");
			t21 = text("*");
			t22 = space();
			td1 = element("td");
			code1 = element("code");
			t23 = text("data-fv-zip-code___country");
			t24 = space();
			td2 = element("td");
			t25 = text("String or Function");
			t26 = space();
			td3 = element("td");
			t27 = text("An ISO-3166 country code");
			t28 = space();
			tr2 = element("tr");
			td4 = element("td");
			code2 = element("code");
			t29 = text("message");
			t30 = space();
			td5 = element("td");
			code3 = element("code");
			t31 = text("data-fv-zip-code___message");
			t32 = space();
			td6 = element("td");
			t33 = text("String");
			t34 = space();
			td7 = element("td");
			t35 = text("The error message");
			t36 = space();
			p1 = element("p");
			t37 = text("If you want to support custom formats of a zipCode number, you should use the ");
			a1 = element("a");
			t38 = text("Transformer");
			t39 = text(" plugin.");
			t40 = space();
			p2 = element("p");
			t41 = text("The validator supports the following countries (click the sample number to validate it):");
			t42 = space();
			table1 = element("table");
			tr3 = element("tr");
			th4 = element("th");
			t43 = text("Country");
			t44 = space();
			th5 = element("th");
			t45 = text("Country code");
			t46 = space();
			th6 = element("th");
			t47 = text("Sample");
			t48 = space();
			th7 = element("th");
			t49 = text("Is it valid?");
			t50 = space();

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t51 = space();
			h31 = element("h3");
			t52 = text("US zipcode");
			t53 = space();
			p3 = element("p");
			t54 = text("This validator supports 4 digits US zipcode. If you want a valid US zipcode to be 5 digits exactly, use the ");
			a2 = element("a");
			t55 = text("regexp");
			t56 = text(" validator");
			t57 = space();
			samplecode0.$$.fragment.c();
			t58 = space();
			h32 = element("h3");
			t59 = text("Using with ES6 module");
			t60 = space();
			samplecode1.$$.fragment.c();
			t61 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t62 = space();
			p4 = element("p");
			t63 = text("You can click on sample from the table above to see if it's a valid or invalid zipcode.");
			t64 = space();
			demo.$$.fragment.c();
			t65 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t66 = space();
			p5 = element("p");
			t67 = text("In the example above, the value of country select box must be the country code as following.");
			t68 = space();
			samplecode2.$$.fragment.c();
			t69 = space();
			p6 = element("p");
			t70 = text("In the case that the ");
			code4 = element("code");
			t71 = text("value");
			t72 = text(" attribute of ");
			code5 = element("code");
			t73 = text("option");
			t74 = text(" can't exactly be the country code, instead, be a country name for example:");
			t75 = space();
			samplecode3.$$.fragment.c();
			t76 = space();
			p7 = element("p");
			t77 = text("Then we need to set the ");
			code6 = element("code");
			t78 = text("country");
			t79 = text(" option as a callback function returning a country code based on the selected name:");
			t80 = space();
			samplecode4.$$.fragment.c();
			t81 = space();
			p8 = element("p");
			t82 = text("This case happens when you can't control the value of country select box which might be generated by a back-end side or third party.");
			t83 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t84 = space();
			p9 = element("p");
			t85 = text("The following snippet shows how to use the zipCode validator with ES6 module:");
			t86 = space();
			samplecode5.$$.fragment.c();
			t87 = space();
			relatedvalidators.$$.fragment.c();
			t88 = space();
			section4 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t89 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "zipCode validator");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Validate a zip code");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n\n        ");

			h30 = claim_element(section0_nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t5 = claim_text(h30_nodes, "Using with form field");
			h30_nodes.forEach(detach);
			t6 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			sup0 = claim_element(p0_nodes, "SUP", {}, false);
			var sup0_nodes = children(sup0);

			t7 = claim_text(sup0_nodes, "*");
			sup0_nodes.forEach(detach);
			t8 = claim_text(p0_nodes, " presents a required option. The HTML attributes are used to set the validator options via the ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t9 = claim_text(a0_nodes, "Declarative");
			a0_nodes.forEach(detach);
			t10 = claim_text(p0_nodes, " plugin");
			p0_nodes.forEach(detach);
			t11 = claim_text(section0_nodes, "\n        ");

			table0 = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table0_nodes = children(table0);

			tr0 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t12 = claim_text(th0_nodes, "Name");
			th0_nodes.forEach(detach);
			t13 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t14 = claim_text(th1_nodes, "HTML attribute");
			th1_nodes.forEach(detach);
			t15 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t16 = claim_text(th2_nodes, "Type");
			th2_nodes.forEach(detach);
			t17 = claim_text(tr0_nodes, "\n                ");

			th3 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th3_nodes = children(th3);

			t18 = claim_text(th3_nodes, "Description");
			th3_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t19 = claim_text(table0_nodes, "\n            ");

			tr1 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code0 = claim_element(td0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t20 = claim_text(code0_nodes, "country");
			code0_nodes.forEach(detach);

			sup1 = claim_element(td0_nodes, "SUP", {}, false);
			var sup1_nodes = children(sup1);

			t21 = claim_text(sup1_nodes, "*");
			sup1_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t22 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			code1 = claim_element(td1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t23 = claim_text(code1_nodes, "data-fv-zip-code___country");
			code1_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			t24 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t25 = claim_text(td2_nodes, "String or Function");
			td2_nodes.forEach(detach);
			t26 = claim_text(tr1_nodes, "\n                ");

			td3 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			t27 = claim_text(td3_nodes, "An ISO-3166 country code");
			td3_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t28 = claim_text(table0_nodes, "\n            ");

			tr2 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			code2 = claim_element(td4_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t29 = claim_text(code2_nodes, "message");
			code2_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t30 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			code3 = claim_element(td5_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t31 = claim_text(code3_nodes, "data-fv-zip-code___message");
			code3_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			t32 = claim_text(tr2_nodes, "\n                ");

			td6 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			t33 = claim_text(td6_nodes, "String");
			td6_nodes.forEach(detach);
			t34 = claim_text(tr2_nodes, "\n                ");

			td7 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			t35 = claim_text(td7_nodes, "The error message");
			td7_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			table0_nodes.forEach(detach);
			t36 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t37 = claim_text(p1_nodes, "If you want to support custom formats of a zipCode number, you should use the ");

			a1 = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t38 = claim_text(a1_nodes, "Transformer");
			a1_nodes.forEach(detach);
			t39 = claim_text(p1_nodes, " plugin.");
			p1_nodes.forEach(detach);
			t40 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t41 = claim_text(p2_nodes, "The validator supports the following countries (click the sample number to validate it):");
			p2_nodes.forEach(detach);
			t42 = claim_text(section0_nodes, "\n\n        ");

			table1 = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table1_nodes = children(table1);

			tr3 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			th4 = claim_element(tr3_nodes, "TH", { class: true }, false);
			var th4_nodes = children(th4);

			t43 = claim_text(th4_nodes, "Country");
			th4_nodes.forEach(detach);
			t44 = claim_text(tr3_nodes, "\n                ");

			th5 = claim_element(tr3_nodes, "TH", { class: true }, false);
			var th5_nodes = children(th5);

			t45 = claim_text(th5_nodes, "Country code");
			th5_nodes.forEach(detach);
			t46 = claim_text(tr3_nodes, "\n                ");

			th6 = claim_element(tr3_nodes, "TH", { class: true }, false);
			var th6_nodes = children(th6);

			t47 = claim_text(th6_nodes, "Sample");
			th6_nodes.forEach(detach);
			t48 = claim_text(tr3_nodes, "\n                ");

			th7 = claim_element(tr3_nodes, "TH", { class: true }, false);
			var th7_nodes = children(th7);

			t49 = claim_text(th7_nodes, "Is it valid?");
			th7_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			t50 = claim_text(table1_nodes, "\n            ");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(table1_nodes);
			}

			table1_nodes.forEach(detach);
			t51 = claim_text(section0_nodes, "\n\n        ");

			h31 = claim_element(section0_nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t52 = claim_text(h31_nodes, "US zipcode");
			h31_nodes.forEach(detach);
			t53 = claim_text(section0_nodes, "\n        ");

			p3 = claim_element(section0_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t54 = claim_text(p3_nodes, "This validator supports 4 digits US zipcode. If you want a valid US zipcode to be 5 digits exactly, use the ");

			a2 = claim_element(p3_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t55 = claim_text(a2_nodes, "regexp");
			a2_nodes.forEach(detach);
			t56 = claim_text(p3_nodes, " validator");
			p3_nodes.forEach(detach);
			t57 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t58 = claim_text(section0_nodes, "        \n\n        ");

			h32 = claim_element(section0_nodes, "H3", {}, false);
			var h32_nodes = children(h32);

			t59 = claim_text(h32_nodes, "Using with ES6 module");
			h32_nodes.forEach(detach);
			t60 = claim_text(section0_nodes, "\n");
			samplecode1.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t61 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t62 = claim_text(section1_nodes, "\n        ");

			p4 = claim_element(section1_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t63 = claim_text(p4_nodes, "You can click on sample from the table above to see if it's a valid or invalid zipcode.");
			p4_nodes.forEach(detach);
			t64 = claim_text(section1_nodes, "\n        ");
			demo.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t65 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t66 = claim_text(section2_nodes, "\n        ");

			p5 = claim_element(section2_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t67 = claim_text(p5_nodes, "In the example above, the value of country select box must be the country code as following.");
			p5_nodes.forEach(detach);
			t68 = claim_text(section2_nodes, "\n        ");
			samplecode2.$$.fragment.l(section2_nodes);
			t69 = claim_text(section2_nodes, "\n\n        ");

			p6 = claim_element(section2_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t70 = claim_text(p6_nodes, "In the case that the ");

			code4 = claim_element(p6_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t71 = claim_text(code4_nodes, "value");
			code4_nodes.forEach(detach);
			t72 = claim_text(p6_nodes, " attribute of ");

			code5 = claim_element(p6_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t73 = claim_text(code5_nodes, "option");
			code5_nodes.forEach(detach);
			t74 = claim_text(p6_nodes, " can't exactly be the country code, instead, be a country name for example:");
			p6_nodes.forEach(detach);
			t75 = claim_text(section2_nodes, "\n        ");
			samplecode3.$$.fragment.l(section2_nodes);
			t76 = claim_text(section2_nodes, "\n        ");

			p7 = claim_element(section2_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t77 = claim_text(p7_nodes, "Then we need to set the ");

			code6 = claim_element(p7_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t78 = claim_text(code6_nodes, "country");
			code6_nodes.forEach(detach);
			t79 = claim_text(p7_nodes, " option as a callback function returning a country code based on the selected name:");
			p7_nodes.forEach(detach);
			t80 = claim_text(section2_nodes, "\n        ");
			samplecode4.$$.fragment.l(section2_nodes);
			t81 = claim_text(section2_nodes, "   \n        ");

			p8 = claim_element(section2_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t82 = claim_text(p8_nodes, "This case happens when you can't control the value of country select box which might be generated by a back-end side or third party.");
			p8_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			t83 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t84 = claim_text(section3_nodes, "\n\n        ");

			p9 = claim_element(section3_nodes, "P", { class: true }, false);
			var p9_nodes = children(p9);

			t85 = claim_text(p9_nodes, "The following snippet shows how to use the zipCode validator with ES6 module:");
			p9_nodes.forEach(detach);
			t86 = claim_text(section3_nodes, "\n");
			samplecode5.$$.fragment.l(section3_nodes);
			section3_nodes.forEach(detach);
			t87 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			t88 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			div = claim_element(section4_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t89 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section4_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 99);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 154);
			add_location(h30, file, 11, 8, 272);
			add_location(sup0, file, 12, 29, 332);
			a0.href = "/guide/plugins/declarative";
			a0.className = "blue dim link";
			add_location(a0, file, 12, 136, 439);
			p0.className = "lh-copy i";
			add_location(p0, file, 12, 8, 311);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 15, 16, 652);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 16, 16, 712);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 17, 16, 782);
			th3.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th3, file, 18, 16, 842);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 14, 12, 603);
			add_location(code0, file, 21, 36, 992);
			add_location(sup1, file, 21, 56, 1012);
			td0.className = "pv2 ph3";
			add_location(td0, file, 21, 16, 972);
			add_location(code1, file, 22, 36, 1066);
			td1.className = "pv2 ph3";
			add_location(td1, file, 22, 16, 1046);
			td2.className = "pv2 ph3";
			add_location(td2, file, 23, 16, 1127);
			td3.className = "pv2 ph3";
			add_location(td3, file, 24, 16, 1187);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 20, 12, 923);
			add_location(code2, file, 27, 36, 1336);
			td4.className = "pv2 ph3";
			add_location(td4, file, 27, 16, 1316);
			add_location(code3, file, 28, 36, 1398);
			td5.className = "pv2 ph3";
			add_location(td5, file, 28, 16, 1378);
			td6.className = "pv2 ph3";
			add_location(td6, file, 29, 16, 1459);
			td7.className = "pv2 ph3";
			add_location(td7, file, 30, 16, 1507);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 26, 12, 1267);
			table0.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table0, file, 13, 8, 533);
			a1.href = "/guide/plugins/transformer";
			a1.className = "blue dim link";
			add_location(a1, file, 33, 105, 1690);
			p1.className = "lh-copy";
			add_location(p1, file, 33, 8, 1593);
			p2.className = "lh-copy";
			add_location(p2, file, 34, 8, 1785);
			th4.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th4, file, 38, 16, 2025);
			th5.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th5, file, 39, 16, 2088);
			th6.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th6, file, 40, 16, 2156);
			th7.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th7, file, 41, 16, 2218);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 37, 12, 1976);
			table1.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table1, file, 36, 8, 1906);
			add_location(h31, file, 63, 8, 3201);
			a2.href = "/guide/validators/regexp";
			a2.className = "blue dim link";
			add_location(a2, file, 64, 135, 3356);
			p3.className = "lh-copy";
			add_location(p3, file, 64, 8, 3229);
			add_location(h32, file, 87, 8, 4014);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 206);
			p4.className = "lh-copy";
			add_location(p4, file, 112, 8, 4564);
			section1.className = "mv5";
			add_location(section1, file, 110, 4, 4493);
			p5.className = "lh-copy";
			add_location(p5, file, 118, 8, 4892);
			add_location(code4, file, 131, 48, 5449);
			add_location(code5, file, 131, 80, 5481);
			p6.className = "lh-copy";
			add_location(p6, file, 131, 8, 5409);
			add_location(code6, file, 143, 51, 6065);
			p7.className = "lh-copy";
			add_location(p7, file, 143, 8, 6022);
			p8.className = "lh-copy";
			add_location(p8, file, 207, 8, 8804);
			section2.className = "mv5";
			add_location(section2, file, 116, 4, 4793);
			p9.className = "lh-copy";
			add_location(p9, file, 213, 8, 9057);
			section3.className = "mv5";
			add_location(section3, file, 210, 4, 8980);
			div.className = "flex";
			add_location(div, file, 241, 8, 9786);
			section4.className = "mv5";
			add_location(section4, file, 240, 4, 9756);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, h30);
			append(h30, t5);
			append(section0, t6);
			append(section0, p0);
			append(p0, sup0);
			append(sup0, t7);
			append(p0, t8);
			append(p0, a0);
			append(a0, t9);
			append(p0, t10);
			append(section0, t11);
			append(section0, table0);
			append(table0, tr0);
			append(tr0, th0);
			append(th0, t12);
			append(tr0, t13);
			append(tr0, th1);
			append(th1, t14);
			append(tr0, t15);
			append(tr0, th2);
			append(th2, t16);
			append(tr0, t17);
			append(tr0, th3);
			append(th3, t18);
			append(table0, t19);
			append(table0, tr1);
			append(tr1, td0);
			append(td0, code0);
			append(code0, t20);
			append(td0, sup1);
			append(sup1, t21);
			append(tr1, t22);
			append(tr1, td1);
			append(td1, code1);
			append(code1, t23);
			append(tr1, t24);
			append(tr1, td2);
			append(td2, t25);
			append(tr1, t26);
			append(tr1, td3);
			append(td3, t27);
			append(table0, t28);
			append(table0, tr2);
			append(tr2, td4);
			append(td4, code2);
			append(code2, t29);
			append(tr2, t30);
			append(tr2, td5);
			append(td5, code3);
			append(code3, t31);
			append(tr2, t32);
			append(tr2, td6);
			append(td6, t33);
			append(tr2, t34);
			append(tr2, td7);
			append(td7, t35);
			append(section0, t36);
			append(section0, p1);
			append(p1, t37);
			append(p1, a1);
			append(a1, t38);
			append(p1, t39);
			append(section0, t40);
			append(section0, p2);
			append(p2, t41);
			append(section0, t42);
			append(section0, table1);
			append(table1, tr3);
			append(tr3, th4);
			append(th4, t43);
			append(tr3, t44);
			append(tr3, th5);
			append(th5, t45);
			append(tr3, t46);
			append(tr3, th6);
			append(th6, t47);
			append(tr3, t48);
			append(tr3, th7);
			append(th7, t49);
			append(table1, t50);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(table1, null);
			}

			append(section0, t51);
			append(section0, h31);
			append(h31, t52);
			append(section0, t53);
			append(section0, p3);
			append(p3, t54);
			append(p3, a2);
			append(a2, t55);
			append(p3, t56);
			append(section0, t57);
			mount_component(samplecode0, section0, null);
			append(section0, t58);
			append(section0, h32);
			append(h32, t59);
			append(section0, t60);
			mount_component(samplecode1, section0, null);
			insert(target, t61, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t62);
			append(section1, p4);
			append(p4, t63);
			append(section1, t64);
			mount_component(demo, section1, null);
			insert(target, t65, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t66);
			append(section2, p5);
			append(p5, t67);
			append(section2, t68);
			mount_component(samplecode2, section2, null);
			append(section2, t69);
			append(section2, p6);
			append(p6, t70);
			append(p6, code4);
			append(code4, t71);
			append(p6, t72);
			append(p6, code5);
			append(code5, t73);
			append(p6, t74);
			append(section2, t75);
			mount_component(samplecode3, section2, null);
			append(section2, t76);
			append(section2, p7);
			append(p7, t77);
			append(p7, code6);
			append(code6, t78);
			append(p7, t79);
			append(section2, t80);
			mount_component(samplecode4, section2, null);
			append(section2, t81);
			append(section2, p8);
			append(p8, t82);
			insert(target, t83, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t84);
			append(section3, p9);
			append(p9, t85);
			append(section3, t86);
			mount_component(samplecode5, section3, null);
			insert(target, t87, anchor);
			mount_component(relatedvalidators, target, anchor);
			insert(target, t88, anchor);
			insert(target, section4, anchor);
			append(section4, div);
			mount_component(prevbutton, div, null);
			append(div, t89);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			if (changed._samples) {
				each_value = ctx._samples;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						each_blocks[i].i(1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].i(1);
						each_blocks[i].m(table1, null);
					}
				}

				group_outros();
				for (; i < each_blocks.length; i += 1) outro_block(i, 1, 1);
				check_outros();
			}

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			for (var i = 0; i < each_value.length; i += 1) each_blocks[i].i();

			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			samplecode3.$$.fragment.i(local);

			samplecode4.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			samplecode5.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);

			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) outro_block(i, 0);

			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			samplecode3.$$.fragment.o(local);
			samplecode4.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			samplecode5.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			destroy_each(each_blocks, detaching);

			samplecode0.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t61);
				detach(section1);
			}

			heading1.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t65);
				detach(section2);
			}

			heading2.$destroy();

			samplecode2.$destroy();

			samplecode3.$destroy();

			samplecode4.$destroy();

			if (detaching) {
				detach(t83);
				detach(section3);
			}

			heading3.$destroy();

			samplecode5.$destroy();

			if (detaching) {
				detach(t87);
			}

			relatedvalidators.$destroy(detaching);

			if (detaching) {
				detach(t88);
				detach(section4);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • zipCode validator";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

function func(s) {
	return s.sample;
}

function instance($$self) {
	

const _samples = [
    {
        country: 'United States',
        code: 'US',
        examples: [
            // Valid
            '12345',
            // Invalid
            '123',
        ],
    },
    {
        country: 'Austria',
        code: 'AT',
        examples: [
            // Valid
            '6020', '1010', '4853',
            // Invalid
            '0020', '12345', '102', '12AB', 'AT 6020 XY',
        ],
    },
    {
        country: 'Bulgaria',
        code: 'BG',
        examples: [],
    },
    {
        country: 'Brazil',
        code: 'BR',
        examples: [],
    },
    {
        country: 'Canada',
        code: 'CA',
        examples: [],
    },
    {
        country: 'Czech Republic',
        code: 'CZ',
        examples: [
            // Valid
            '12345', '123 45',
            // Invalid
            '12 345', '123456', '1 2345', '1234 5', '12 3 45',
        ],
    },
    {
        country: 'Denmark',
        code: 'DK',
        examples: [
            'DK-1234',  // Valid
            'DK 123',   // Invalid
        ],
    },
    {
        country: 'France',
        code: 'FR',
        examples: [
            // Valid
            '12340', '01230', '75116',
            // Invalid
            '123 45', '12 345', '123456', '1 2345', '1234 5', '12 3 45', '1234A',
        ],
    },
    {
        country: 'Germany',
        code: 'DE',
        examples: [
            // Valid
            '52238', '01001', '09107',
            // Invalid
            '01000', '99999', '102', 'ABCDE', 'DE 52240 XY',
        ],
    },
    {
        country: 'India',
        code: 'IN',
        examples: [
            // Valid
            '226024', '201014', '226 021',
            // Invalid
            '226-024', '11023', 'A226023',
        ],
    },
    {
        country: 'Italy',
        code: 'IT',
        examples: [
            // Valid
            'I-12345', 'IT-12345',
            // Invalid
            '1234',
        ],
    },
    {
        country: 'Ireland',
        code: 'IE',
        examples: [
            // Valid
            'A65 F4E2', 'D6W FNT4', 'T37 F8HK',
            // Invalid
            'a65 f4e2', 'D6W FNTO', 'T37F8HK',
        ],
    },
    {
        country: 'Morocco',
        code: 'MA',
        examples: [],
    },
    {
        country: 'Netherlands',
        code: 'NL',
        examples: [
            '1234 ab',  // Valid
            '0123',     // Invalid
        ],
    },
    {
        country: 'Poland',
        code: 'PL',
        examples: [
            // Valid
            '02-920', '00-002', '77-400',
            // Invalid
            '03456', '000-02', 'AB-002', '12 345',
        ],
    },
    {
        country: 'Portugal',
        code: 'PT',
        examples: [
            // Valid
            '2435-459', '1000-000', '1234-456',
            // Invalid
            '0123-456', '1234456', '1234-ABC', '1234 456',
        ],
    },
    {
        country: 'Romania',
        code: 'RO',
        examples: [],
    },
    {
        country: 'Russia',
        code: 'RU',
        examples: [],
    },
    {
        country: 'Singapore',
        code: 'SG',
        examples: [],
    },
    {
        country: 'Slovakia',
        code: 'SK',
        examples: [
            // Valid
            '12345', '123 45',
            // Invalid
            '12 345', '123456', '1 2345', '1234 5', '12 3 45',
        ],
    },
    {
        country: 'Spain',
        code: 'ES',
        examples: [
            // Valid
            '01234', '28080', '29004', '41023',
            // Invalid
            '0123', '99999', '102', 'ABCD', '00000',
        ],
    },
    {
        country: 'Sweden',
        code: 'SE',
        examples: [
            'S-12345',  // Valid
            'S-567 8',  // Invalid
        ],
    },
    {
        country: 'Switzerland',
        code: 'CH',
        examples: [
            // Valid
            '8280', '8090', '8238', '9490',
            // Invalid
            '0123', '99999', '102', 'ABCD', 'CH-5224 XY',
        ],
    },
    {
        country: 'United Kingdom',
        code: 'GB',
        examples: [
            // Valid
            'EC1A 1BB', 'W1A 1HQ', 'M1 1AA', 'B33 8TH', 'CR2 6XH', 'DN55 1PT', 'AI-2640', 'ASCN 1ZZ', 'GIR 0AA',
        ],
    },
];

	return { _samples };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export default Index;

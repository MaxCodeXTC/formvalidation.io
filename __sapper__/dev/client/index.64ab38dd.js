import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';

/* src/routes/guide/examples/integrating-with-bootstrap-datepicker/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/integrating-with-bootstrap-datepicker/index.svelte";

// (9:4) <Tip>
function create_default_slot_5(ctx) {
	var t0, a, t1, t2;

	return {
		c: function create() {
			t0 = text("You should look at the ");
			a = element("a");
			t1 = text("basic principle");
			t2 = text(" when integrating FormValidation with 3rd party libraries");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "You should look at the ");

			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t1 = claim_text(a_nodes, "basic principle");
			a_nodes.forEach(detach);
			t2 = claim_text(nodes, " when integrating FormValidation with 3rd party libraries");
			this.h();
		},

		h: function hydrate() {
			a.href = "/guide/examples/integrating-with-3rd-party-libraries";
			a.className = "blue dim link";
			add_location(a, file, 8, 32, 431);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a, anchor);
			append(a, t1);
			insert(target, t2, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(a);
				detach(t2);
			}
		}
	};
}

// (12:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (41:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Embedding a date picker");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Embedding a date picker");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (86:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Setting date in a range");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Setting date in a range");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (94:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Closing the date picker automatically");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Closing the date picker automatically");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, p0, t2, a0, t3, t4, t5, t6, section0, t7, p1, t8, t9, div0, t10, t11, section1, t12, p2, t13, t14, p3, t15, t16, t17, p4, t18, code0, t19, t20, t21, t22, p5, t23, t24, t25, p6, t26, t27, t28, section2, t29, p7, t30, a1, t31, t32, a2, t33, t34, a3, t35, t36, code1, t37, t38, code2, t39, t40, t41, p8, t42, t43, t44, section3, t45, p9, t46, a4, t47, t48, code3, t49, t50, t51, div1, t52, t53, t54, current;

	var tip = new Tip({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
const fv = FormValidation.formValidation(
    document.getElementById('demoForm'),
    {
        fields: {
            date: {
                ...
            },
        }
    }
);

$('[name="date"]')
    .datepicker({
        format: 'mm/dd/yyyy'
    })
    .on('changeDate', function(e) {
        // Revalidate the date field
        fv.revalidateField('date');
    });
` },
		$$inline: true
	});

	var demo0 = new Demo({
		props: {
		prefix: "/guide/examples/integrating-with-bootstrap-datepicker/basic",
		frameworks: ['bootstrap']
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<div id="embeddingDatePicker"></div>
<input type="hidden" id="selectedDate" name="selectedDate" />
` },
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "javascript", code: `
const form = document.getElementById('demoForm');
const fv = formValidation(form, {
    fields: {
        selectedDate: {
            validators: {
                notEmpty: {
                    message: 'The date is required'
                },
                date: {
                    format: 'MM/DD/YYYY',
                    message: 'The date is not a valid'
                }
            }
        },
    }
});
` },
		$$inline: true
	});

	var samplecode3 = new SampleCode({
		props: { lang: "javascript", code: `
$('#embeddingDatePicker')
    .datepicker({
        format: 'mm/dd/yyyy'
    })
    .on('changeDate', function(e) {
        // Set the value for the date input
        document.querySelector('[name="selectedDate"]').value = $('#embeddingDatePicker').datepicker('getFormattedDate');

        // Revalidate it
        fv.revalidateField('selectedDate');
    });
` },
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/examples/integrating-with-bootstrap-datepicker/embedding",
		frameworks: ['bootstrap']
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo2 = new Demo({
		props: {
		prefix: "/guide/examples/integrating-with-bootstrap-datepicker/range",
		frameworks: ['bootstrap']
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode4 = new SampleCode({
		props: { lang: "javascript", code: `
$('[name="date"]')
    .datepicker({
        autoclose: true, // It is false, by default
        format: 'mm/dd/yyyy'
    })
    .on('changeDate', function(e) {
        ...
    });
` },
		$$inline: true
	});

	var demo3 = new Demo({
		props: {
		prefix: "/guide/examples/integrating-with-bootstrap-datepicker/autoclose",
		frameworks: ['bootstrap']
	},
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Disabling date',
        'Integrating with Bootstrap Datepicker',
        'Integrating with flatpickr',
        'Supporting custom date format',
        'Using flatpickr for start and end dates',
        'Validating date range',
        'Validating multiple inputs as one',
    ] },
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['date'] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Integrating with Bootstrap Datepicker");
			t1 = space();
			p0 = element("p");
			t2 = text("The following example illustrates an usage of FormValidation with the ");
			a0 = element("a");
			t3 = text("Bootstrap Datepicker");
			t4 = text(" plugin.");
			t5 = space();
			tip.$$.fragment.c();
			t6 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t7 = space();
			p1 = element("p");
			t8 = text("We need to revalidate the date field after picking a date from the date picker:");
			t9 = space();
			div0 = element("div");
			samplecode0.$$.fragment.c();
			t10 = space();
			demo0.$$.fragment.c();
			t11 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t12 = space();
			p2 = element("p");
			t13 = text("It's possible for Bootstrap Datepicker to embed a picker right on the page without attaching it to particular input field.");
			t14 = space();
			p3 = element("p");
			t15 = text("In order to validate the selected date, firstly we need create a hidden input to keep the selected date:");
			t16 = space();
			samplecode1.$$.fragment.c();
			t17 = space();
			p4 = element("p");
			t18 = text("We then add validator rules for the ");
			code0 = element("code");
			t19 = text("selectedDate");
			t20 = text(" field:");
			t21 = space();
			samplecode2.$$.fragment.c();
			t22 = space();
			p5 = element("p");
			t23 = text("Finally, after choosing a date, you need to set the selected date to the hidden field, and revalidate it:");
			t24 = space();
			samplecode3.$$.fragment.c();
			t25 = space();
			p6 = element("p");
			t26 = text("You can try it with the following live form:");
			t27 = space();
			demo1.$$.fragment.c();
			t28 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t29 = space();
			p7 = element("p");
			t30 = text("Since Bootstrap Datepicker provides ");
			a1 = element("a");
			t31 = text("startDate");
			t32 = text(" and ");
			a2 = element("a");
			t33 = text("endDate");
			t34 = text(" options,\n            and the ");
			a3 = element("a");
			t35 = text("date");
			t36 = text(" validator supports ");
			code1 = element("code");
			t37 = text("min");
			t38 = text(" and ");
			code2 = element("code");
			t39 = text("max");
			t40 = text(" options, we can set a date range easily.");
			t41 = space();
			p8 = element("p");
			t42 = text("The following example asks to enter a date between 01/01/2010 and 12/30/2020.");
			t43 = space();
			demo2.$$.fragment.c();
			t44 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t45 = space();
			p9 = element("p");
			t46 = text("If you want to close the date picker immediately right after choosing a date, you need to set the ");
			a4 = element("a");
			t47 = text("autoclose");
			t48 = text(" option to ");
			code3 = element("code");
			t49 = text("true");
			t50 = text(":");
			t51 = space();
			div1 = element("div");
			samplecode4.$$.fragment.c();
			t52 = space();
			demo3.$$.fragment.c();
			t53 = space();
			examples.$$.fragment.c();
			t54 = space();
			relatedvalidators.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Integrating with Bootstrap Datepicker");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n\n    ");

			p0 = claim_element(nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "The following example illustrates an usage of FormValidation with the ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t3 = claim_text(a0_nodes, "Bootstrap Datepicker");
			a0_nodes.forEach(detach);
			t4 = claim_text(p0_nodes, " plugin.");
			p0_nodes.forEach(detach);
			t5 = claim_text(nodes, "\n    ");
			tip.$$.fragment.l(nodes);
			t6 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t7 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t8 = claim_text(p1_nodes, "We need to revalidate the date field after picking a date from the date picker:");
			p1_nodes.forEach(detach);
			t9 = claim_text(section0_nodes, "\n        ");

			div0 = claim_element(section0_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			samplecode0.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach);
			t10 = claim_text(section0_nodes, "\n        ");
			demo0.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t11 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t12 = claim_text(section1_nodes, "\n        ");

			p2 = claim_element(section1_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t13 = claim_text(p2_nodes, "It's possible for Bootstrap Datepicker to embed a picker right on the page without attaching it to particular input field.");
			p2_nodes.forEach(detach);
			t14 = claim_text(section1_nodes, "\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t15 = claim_text(p3_nodes, "In order to validate the selected date, firstly we need create a hidden input to keep the selected date:");
			p3_nodes.forEach(detach);
			t16 = claim_text(section1_nodes, "\n");
			samplecode1.$$.fragment.l(section1_nodes);
			t17 = claim_text(section1_nodes, "\n        ");

			p4 = claim_element(section1_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t18 = claim_text(p4_nodes, "We then add validator rules for the ");

			code0 = claim_element(p4_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t19 = claim_text(code0_nodes, "selectedDate");
			code0_nodes.forEach(detach);
			t20 = claim_text(p4_nodes, " field:");
			p4_nodes.forEach(detach);
			t21 = claim_text(section1_nodes, "\n");
			samplecode2.$$.fragment.l(section1_nodes);
			t22 = claim_text(section1_nodes, "\n        ");

			p5 = claim_element(section1_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t23 = claim_text(p5_nodes, "Finally, after choosing a date, you need to set the selected date to the hidden field, and revalidate it:");
			p5_nodes.forEach(detach);
			t24 = claim_text(section1_nodes, "\n");
			samplecode3.$$.fragment.l(section1_nodes);
			t25 = claim_text(section1_nodes, "\n        ");

			p6 = claim_element(section1_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t26 = claim_text(p6_nodes, "You can try it with the following live form:");
			p6_nodes.forEach(detach);
			t27 = claim_text(section1_nodes, "\n        ");
			demo1.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t28 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t29 = claim_text(section2_nodes, "\n        ");

			p7 = claim_element(section2_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t30 = claim_text(p7_nodes, "Since Bootstrap Datepicker provides ");

			a1 = claim_element(p7_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t31 = claim_text(a1_nodes, "startDate");
			a1_nodes.forEach(detach);
			t32 = claim_text(p7_nodes, " and ");

			a2 = claim_element(p7_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t33 = claim_text(a2_nodes, "endDate");
			a2_nodes.forEach(detach);
			t34 = claim_text(p7_nodes, " options,\n            and the ");

			a3 = claim_element(p7_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t35 = claim_text(a3_nodes, "date");
			a3_nodes.forEach(detach);
			t36 = claim_text(p7_nodes, " validator supports ");

			code1 = claim_element(p7_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t37 = claim_text(code1_nodes, "min");
			code1_nodes.forEach(detach);
			t38 = claim_text(p7_nodes, " and ");

			code2 = claim_element(p7_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t39 = claim_text(code2_nodes, "max");
			code2_nodes.forEach(detach);
			t40 = claim_text(p7_nodes, " options, we can set a date range easily.");
			p7_nodes.forEach(detach);
			t41 = claim_text(section2_nodes, "\n        ");

			p8 = claim_element(section2_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t42 = claim_text(p8_nodes, "The following example asks to enter a date between 01/01/2010 and 12/30/2020.");
			p8_nodes.forEach(detach);
			t43 = claim_text(section2_nodes, "\n        ");
			demo2.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t44 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t45 = claim_text(section3_nodes, "\n        ");

			p9 = claim_element(section3_nodes, "P", { class: true }, false);
			var p9_nodes = children(p9);

			t46 = claim_text(p9_nodes, "If you want to close the date picker immediately right after choosing a date, you need to set the ");

			a4 = claim_element(p9_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t47 = claim_text(a4_nodes, "autoclose");
			a4_nodes.forEach(detach);
			t48 = claim_text(p9_nodes, " option to ");

			code3 = claim_element(p9_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t49 = claim_text(code3_nodes, "true");
			code3_nodes.forEach(detach);
			t50 = claim_text(p9_nodes, ":");
			p9_nodes.forEach(detach);
			t51 = claim_text(section3_nodes, "\n        ");

			div1 = claim_element(section3_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			samplecode4.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach);
			t52 = claim_text(section3_nodes, "\n        ");
			demo3.$$.fragment.l(section3_nodes);
			section3_nodes.forEach(detach);
			t53 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			t54 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 119);
			a0.href = "https://github.com/eternicode/bootstrap-datepicker";
			a0.className = "blue dim link";
			add_location(a0, file, 7, 93, 279);
			p0.className = "lh-copy";
			add_location(p0, file, 7, 4, 190);
			p1.className = "lh-copy";
			add_location(p1, file, 12, 8, 675);
			div0.className = "mb4";
			add_location(div0, file, 13, 8, 786);
			section0.className = "mv5";
			add_location(section0, file, 10, 4, 604);
			p2.className = "lh-copy";
			add_location(p2, file, 41, 8, 1449);
			p3.className = "lh-copy";
			add_location(p3, file, 42, 8, 1603);
			add_location(code0, file, 47, 63, 1931);
			p4.className = "lh-copy";
			add_location(p4, file, 47, 8, 1876);
			p5.className = "lh-copy";
			add_location(p5, file, 66, 8, 2441);
			p6.className = "lh-copy";
			add_location(p6, file, 80, 8, 2982);
			section1.className = "mv5";
			add_location(section1, file, 39, 4, 1368);
			a1.href = "http://bootstrap-datepicker.readthedocs.org/en/stable/options.html#startdate";
			a1.className = "blue dim link";
			add_location(a1, file, 86, 63, 3323);
			a2.href = "http://bootstrap-datepicker.readthedocs.org/en/stable/options.html#enddate";
			a2.className = "blue dim link";
			add_location(a2, file, 86, 190, 3450);
			a3.href = "/guide/validators/date";
			a3.className = "blue dim link";
			add_location(a3, file, 87, 20, 3598);
			add_location(code1, file, 87, 103, 3681);
			add_location(code2, file, 87, 124, 3702);
			p7.className = "lh-copy";
			add_location(p7, file, 86, 8, 3268);
			p8.className = "lh-copy";
			add_location(p8, file, 88, 8, 3772);
			section2.className = "mv5";
			add_location(section2, file, 84, 4, 3187);
			a4.href = "https://bootstrap-datepicker.readthedocs.io/en/stable/options.html#autoclose";
			a4.className = "blue dim link";
			add_location(a4, file, 94, 125, 4218);
			add_location(code3, file, 94, 258, 4351);
			p9.className = "lh-copy";
			add_location(p9, file, 94, 8, 4101);
			div1.className = "mb4";
			add_location(div1, file, 95, 8, 4382);
			section3.className = "mv5";
			add_location(section3, file, 92, 4, 4006);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, p0, anchor);
			append(p0, t2);
			append(p0, a0);
			append(a0, t3);
			append(p0, t4);
			insert(target, t5, anchor);
			mount_component(tip, target, anchor);
			insert(target, t6, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t7);
			append(section0, p1);
			append(p1, t8);
			append(section0, t9);
			append(section0, div0);
			mount_component(samplecode0, div0, null);
			append(section0, t10);
			mount_component(demo0, section0, null);
			insert(target, t11, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t12);
			append(section1, p2);
			append(p2, t13);
			append(section1, t14);
			append(section1, p3);
			append(p3, t15);
			append(section1, t16);
			mount_component(samplecode1, section1, null);
			append(section1, t17);
			append(section1, p4);
			append(p4, t18);
			append(p4, code0);
			append(code0, t19);
			append(p4, t20);
			append(section1, t21);
			mount_component(samplecode2, section1, null);
			append(section1, t22);
			append(section1, p5);
			append(p5, t23);
			append(section1, t24);
			mount_component(samplecode3, section1, null);
			append(section1, t25);
			append(section1, p6);
			append(p6, t26);
			append(section1, t27);
			mount_component(demo1, section1, null);
			insert(target, t28, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t29);
			append(section2, p7);
			append(p7, t30);
			append(p7, a1);
			append(a1, t31);
			append(p7, t32);
			append(p7, a2);
			append(a2, t33);
			append(p7, t34);
			append(p7, a3);
			append(a3, t35);
			append(p7, t36);
			append(p7, code1);
			append(code1, t37);
			append(p7, t38);
			append(p7, code2);
			append(code2, t39);
			append(p7, t40);
			append(section2, t41);
			append(section2, p8);
			append(p8, t42);
			append(section2, t43);
			mount_component(demo2, section2, null);
			insert(target, t44, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t45);
			append(section3, p9);
			append(p9, t46);
			append(p9, a4);
			append(a4, t47);
			append(p9, t48);
			append(p9, code3);
			append(code3, t49);
			append(p9, t50);
			append(section3, t51);
			append(section3, div1);
			mount_component(samplecode4, div1, null);
			append(section3, t52);
			mount_component(demo3, section3, null);
			insert(target, t53, anchor);
			mount_component(examples, target, anchor);
			insert(target, t54, anchor);
			mount_component(relatedvalidators, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var tip_changes = {};
			if (changed.$$scope) tip_changes.$$scope = { changed, ctx };
			tip.$set(tip_changes);

			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);
		},

		i: function intro(local) {
			if (current) return;
			tip.$$.fragment.i(local);

			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			demo0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			samplecode3.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			demo2.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			samplecode4.$$.fragment.i(local);

			demo3.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			tip.$$.fragment.o(local);
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			demo0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			samplecode3.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			demo2.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			samplecode4.$$.fragment.o(local);
			demo3.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(p0);
				detach(t5);
			}

			tip.$destroy(detaching);

			if (detaching) {
				detach(t6);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			demo0.$destroy();

			if (detaching) {
				detach(t11);
				detach(section1);
			}

			heading1.$destroy();

			samplecode1.$destroy();

			samplecode2.$destroy();

			samplecode3.$destroy();

			demo1.$destroy();

			if (detaching) {
				detach(t28);
				detach(section2);
			}

			heading2.$destroy();

			demo2.$destroy();

			if (detaching) {
				detach(t44);
				detach(section3);
			}

			heading3.$destroy();

			samplecode4.$destroy();

			demo3.$destroy();

			if (detaching) {
				detach(t53);
			}

			examples.$destroy(detaching);

			if (detaching) {
				detach(t54);
			}

			relatedvalidators.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Integrating with Bootstrap Datepicker";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

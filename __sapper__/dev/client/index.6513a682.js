import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';

/* src/routes/guide/plugins/auto-focus/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/plugins/auto-focus/index.svelte";

// (10:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Usage");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Usage");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (50:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (57:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changelog");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changelog");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (67:12) <PrevButton target="/guide/plugins/aria">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Aria plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Aria plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (68:12) <NextButton target="/guide/plugins/bootstrap">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Bootstrap plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Bootstrap plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, p0, t5, a, t6, t7, t8, t9, p1, t10, code0, t11, t12, t13, section1, t14, p2, t15, span0, t16, t17, span1, t18, t19, span2, t20, t21, span3, t22, t23, t24, t25, section2, t26, ul, li0, t27, t28, li1, t29, code1, t30, t31, t32, li2, t33, t34, section3, div, t35, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="demoForm" method="POST">
        ...
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/plugins/AutoFocus.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                autoFocus: new FormValidation.plugins.AutoFocus(),
                submitButton: new FormValidation.plugins.SubmitButton(),
                ...
            },
        }
    );
});
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/plugins/auto-focus/basic",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/plugins/aria",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/plugins/bootstrap",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("AutoFocus plugin");
			t1 = space();
			h2 = element("h2");
			t2 = text("Focus on the first invalid element when submit form");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			p0 = element("p");
			t5 = text("You have to use this plugin with ");
			a = element("a");
			t6 = text("SubmitButton");
			t7 = text(" plugin which automatically validate the form when pressing the Submit button. The following piece of code is the starting point to use the AutoFocus plugin:");
			t8 = space();
			samplecode.$$.fragment.c();
			t9 = space();
			p1 = element("p");
			t10 = text("The sample code above assumes that the FormValidation files are placed inside the ");
			code0 = element("code");
			t11 = text("vendors");
			t12 = text(" directory. You might need to change the path depending on where you place them on the server.");
			t13 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t14 = space();
			p2 = element("p");
			t15 = text("Try to press the ");
			span0 = element("span");
			t16 = text("Add product");
			t17 = text(" button to see the first invalid field will be focused. Then fill in the ");
			span1 = element("span");
			t18 = text("Product name");
			t19 = text(", press the ");
			span2 = element("span");
			t20 = text("Add product");
			t21 = text(" button again. \n            The plugin will bring focus to the ");
			span3 = element("span");
			t22 = text("Description");
			t23 = text(" field which now becomes the first invalid field.");
			t24 = space();
			demo.$$.fragment.c();
			t25 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t26 = space();
			ul = element("ul");
			li0 = element("li");
			t27 = text("v1.5.0: Fixed an issue that the AutoFocus plugin doesn't work. From v1.5.0, it becomes an external plugin");
			t28 = space();
			li1 = element("li");
			t29 = text("v1.3.0: Added ");
			code1 = element("code");
			t30 = text("onPrefocus");
			t31 = text(" option that is useful when you want to activate the tab containing the first invalid field");
			t32 = space();
			li2 = element("li");
			t33 = text("v1.0.0: First release");
			t34 = space();
			section3 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t35 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "AutoFocus plugin");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Focus on the first invalid element when submit form");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t5 = claim_text(p0_nodes, "You have to use this plugin with ");

			a = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t6 = claim_text(a_nodes, "SubmitButton");
			a_nodes.forEach(detach);
			t7 = claim_text(p0_nodes, " plugin which automatically validate the form when pressing the Submit button. The following piece of code is the starting point to use the AutoFocus plugin:");
			p0_nodes.forEach(detach);
			t8 = claim_text(section0_nodes, "\n");
			samplecode.$$.fragment.l(section0_nodes);
			t9 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t10 = claim_text(p1_nodes, "The sample code above assumes that the FormValidation files are placed inside the ");

			code0 = claim_element(p1_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t11 = claim_text(code0_nodes, "vendors");
			code0_nodes.forEach(detach);
			t12 = claim_text(p1_nodes, " directory. You might need to change the path depending on where you place them on the server.");
			p1_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t13 = claim_text(nodes, "\n    \n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t14 = claim_text(section1_nodes, "\n        ");

			p2 = claim_element(section1_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t15 = claim_text(p2_nodes, "Try to press the ");

			span0 = claim_element(p2_nodes, "SPAN", { class: true }, false);
			var span0_nodes = children(span0);

			t16 = claim_text(span0_nodes, "Add product");
			span0_nodes.forEach(detach);
			t17 = claim_text(p2_nodes, " button to see the first invalid field will be focused. Then fill in the ");

			span1 = claim_element(p2_nodes, "SPAN", { class: true }, false);
			var span1_nodes = children(span1);

			t18 = claim_text(span1_nodes, "Product name");
			span1_nodes.forEach(detach);
			t19 = claim_text(p2_nodes, ", press the ");

			span2 = claim_element(p2_nodes, "SPAN", { class: true }, false);
			var span2_nodes = children(span2);

			t20 = claim_text(span2_nodes, "Add product");
			span2_nodes.forEach(detach);
			t21 = claim_text(p2_nodes, " button again. \n            The plugin will bring focus to the ");

			span3 = claim_element(p2_nodes, "SPAN", { class: true }, false);
			var span3_nodes = children(span3);

			t22 = claim_text(span3_nodes, "Description");
			span3_nodes.forEach(detach);
			t23 = claim_text(p2_nodes, " field which now becomes the first invalid field.");
			p2_nodes.forEach(detach);
			t24 = claim_text(section1_nodes, "\n        ");
			demo.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t25 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t26 = claim_text(section2_nodes, "\n        ");

			ul = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t27 = claim_text(li0_nodes, "v1.5.0: Fixed an issue that the AutoFocus plugin doesn't work. From v1.5.0, it becomes an external plugin");
			li0_nodes.forEach(detach);
			t28 = claim_text(ul_nodes, "\n            ");

			li1 = claim_element(ul_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t29 = claim_text(li1_nodes, "v1.3.0: Added ");

			code1 = claim_element(li1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t30 = claim_text(code1_nodes, "onPrefocus");
			code1_nodes.forEach(detach);
			t31 = claim_text(li1_nodes, " option that is useful when you want to activate the tab containing the first invalid field");
			li1_nodes.forEach(detach);
			t32 = claim_text(ul_nodes, "\n            ");

			li2 = claim_element(ul_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t33 = claim_text(li2_nodes, "v1.0.0: First release");
			li2_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			t34 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			div = claim_element(section3_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t35 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 98);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 152);
			a.href = "/guide/plugins/submit-button";
			a.className = "blue dim link";
			add_location(a, file, 10, 60, 351);
			p0.className = "lh-copy";
			add_location(p0, file, 10, 8, 299);
			add_location(code0, file, 45, 109, 1673);
			p1.className = "lh-copy";
			add_location(p1, file, 45, 8, 1572);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 236);
			span0.className = "i";
			add_location(span0, file, 50, 44, 1923);
			span1.className = "i";
			add_location(span1, file, 50, 151, 2030);
			span2.className = "i";
			add_location(span2, file, 50, 198, 2077);
			span3.className = "i";
			add_location(span3, file, 51, 47, 2174);
			p2.className = "lh-copy";
			add_location(p2, file, 50, 8, 1887);
			section1.className = "mv5";
			add_location(section1, file, 48, 4, 1816);
			add_location(li0, file, 58, 12, 2478);
			add_location(code1, file, 59, 30, 2623);
			add_location(li1, file, 59, 12, 2605);
			add_location(li2, file, 60, 12, 2755);
			ul.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul, file, 57, 8, 2433);
			section2.className = "mv5";
			add_location(section2, file, 55, 4, 2366);
			div.className = "flex";
			add_location(div, file, 65, 8, 2850);
			section3.className = "mv5";
			add_location(section3, file, 64, 4, 2820);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, p0);
			append(p0, t5);
			append(p0, a);
			append(a, t6);
			append(p0, t7);
			append(section0, t8);
			mount_component(samplecode, section0, null);
			append(section0, t9);
			append(section0, p1);
			append(p1, t10);
			append(p1, code0);
			append(code0, t11);
			append(p1, t12);
			insert(target, t13, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t14);
			append(section1, p2);
			append(p2, t15);
			append(p2, span0);
			append(span0, t16);
			append(p2, t17);
			append(p2, span1);
			append(span1, t18);
			append(p2, t19);
			append(p2, span2);
			append(span2, t20);
			append(p2, t21);
			append(p2, span3);
			append(span3, t22);
			append(p2, t23);
			append(section1, t24);
			mount_component(demo, section1, null);
			insert(target, t25, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t26);
			append(section2, ul);
			append(ul, li0);
			append(li0, t27);
			append(ul, t28);
			append(ul, li1);
			append(li1, t29);
			append(li1, code1);
			append(code1, t30);
			append(li1, t31);
			append(ul, t32);
			append(ul, li2);
			append(li2, t33);
			insert(target, t34, anchor);
			insert(target, section3, anchor);
			append(section3, div);
			mount_component(prevbutton, div, null);
			append(div, t35);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			samplecode.$destroy();

			if (detaching) {
				detach(t13);
				detach(section1);
			}

			heading1.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t25);
				detach(section2);
			}

			heading2.$destroy();

			if (detaching) {
				detach(t34);
				detach(section3);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • AutoFocus plugin";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';

/* src/routes/guide/validators/date/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/validators/date/index.svelte";

// (10:8) <Heading>
function create_default_slot_7(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (66:8) <Tip>
function create_default_slot_6(ctx) {
	var t0, a, t1, t2;

	return {
		c: function create() {
			t0 = text("Use the ");
			a = element("a");
			t1 = text("StartEndDate");
			t2 = text(" plugin if you want to validate start and end dates");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "Use the ");

			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t1 = claim_text(a_nodes, "StartEndDate");
			a_nodes.forEach(detach);
			t2 = claim_text(nodes, " plugin if you want to validate start and end dates");
			this.h();
		},

		h: function hydrate() {
			a.href = "/guide/plugins/start-end-date";
			a.className = "blue dim link";
			add_location(a, file, 65, 21, 3355);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a, anchor);
			append(a, t1);
			insert(target, t2, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(a);
				detach(t2);
			}
		}
	};
}

// (156:8) <Tip>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("The date validator also checks the number of days in February of leap year. For example, 2000/02/29 is a valid date, while 2001/02/29 is invalid one");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "The date validator also checks the number of days in February of leap year. For example, 2000/02/29 is a valid date, while 2001/02/29 is invalid one");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (189:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (195:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("ES6 Module Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "ES6 Module Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (237:12) <PrevButton target="/guide/validators/cusip">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("cusip validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "cusip validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (238:12) <NextButton target="/guide/validators/different">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("different validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "different validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, h30, t5, t6, p0, sup0, t7, t8, a0, t9, t10, t11, table0, tr0, th0, t12, t13, th1, t14, t15, th2, t16, t17, th3, t18, t19, tr1, td0, code0, t20, sup1, t21, t22, td1, code1, t23, t24, td2, t25, t26, td3, t27, code2, t28, t29, t30, tr2, td4, code3, t31, t32, td5, code4, t33, t34, td6, t35, t36, td7, t37, t38, tr3, td8, code5, t39, t40, td9, code6, t41, t42, td10, t43, t44, td11, t45, t46, tr4, td12, code7, t47, t48, td13, code8, t49, t50, td14, t51, t52, td15, t53, t54, tr5, td16, code9, t55, t56, td17, code10, t57, t58, td18, t59, t60, td19, p1, t61, t62, ul0, li0, t63, t64, li1, t65, t66, li2, t67, t68, p2, t69, code11, t70, t71, code12, t72, t73, t74, ul1, li3, t75, code13, t76, t77, li4, t78, t79, li5, t80, t81, t82, p3, t83, code14, t84, t85, t86, table1, tr6, th4, t87, t88, th5, t89, t90, th6, t91, t92, tr7, td20, t93, t94, td21, t95, t96, td22, t97, code15, t98, t99, br, t100, t101, tr8, td23, t102, t103, td24, t104, t105, td25, t106, t107, tr9, td26, t108, t109, td27, t110, t111, td28, t112, t113, p4, t114, a1, t115, t116, t117, table2, tr10, th7, t118, t119, th8, t120, t121, th9, t122, t123, tr11, td29, t124, t125, td30, t126, t127, td31, t128, t129, tr12, td32, t130, t131, td33, t132, t133, td34, t134, t135, tr13, td35, t136, t137, td36, t138, t139, td37, t140, t141, tr14, td38, t142, t143, td39, t144, t145, td40, t146, t147, tr15, td41, t148, t149, td42, t150, t151, td43, t152, t153, tr16, td44, t154, t155, td45, t156, t157, td46, t158, t159, tr17, td47, t160, t161, td48, t162, t163, td49, t164, t165, p5, t166, a2, t167, t168, t169, p6, t170, t171, ul2, li6, t172, t173, li7, t174, t175, li8, t176, t177, li9, t178, t179, li10, t180, t181, li11, t182, t183, li12, t184, t185, li13, t186, t187, li14, t188, t189, li15, t190, t191, li16, t192, t193, li17, t194, t195, li18, t196, t197, li19, t198, t199, li20, t200, t201, p7, t202, a3, t203, t204, span, t205, t206, t207, t208, h31, t209, t210, t211, section1, t212, p8, t213, t214, t215, section2, t216, p9, t217, t218, t219, t220, section3, div, t221, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var tip0 = new Tip({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var tip1 = new Tip({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import date from 'formvalidation/dist/es6/validators/date';

const result = date().validate({
    value: ...,
    options: {
        format: ...,
        max: ...,
        message: ...,
        min: ...,
        separator: ...,
    },
});
/*
result is an object of
{
    valid: true or false,
    message: The error message,
    meta: {
        // Can be null (if the value is not a valid date)
        // or a JavaScript Date object presenting the value
        date: ...,
    }
}
*/
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/validators/date/basic",
		frameworks: ['bootstrap', 'tachyons']
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import date from 'formvalidation/dist/es6/validators/date';

const res1 = date().validate({
    value: '2014/08/17',
    options: {
        format: 'YYYY/MM/DD',
        message: 'The value is not a valid date',
        min: '2010/01/01',
    },
});
// res1.valid === true
// res1.meta.date === new Date('2014/08/17')

const res2 = date().validate({
    value: '32.11.2014',
    options: {
        format: 'DD.MM.YYYY',
        message: 'The value is not a valid date',
    },
});
// res2.valid === false
// res2.meta.date === null
` },
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Disabling date',
        'Integrating with Bootstrap Datepicker',
        'Integrating with flatpickr',
        'Supporting custom date format',
        'Validating credit card expiration date',
        'Validating date range',
        'Validating multiple inputs as one',
    ] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/validators/cusip",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/validators/different",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("date validator");
			t1 = space();
			h2 = element("h2");
			t2 = text("Validate a date");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			h30 = element("h3");
			t5 = text("Using with form field");
			t6 = space();
			p0 = element("p");
			sup0 = element("sup");
			t7 = text("*");
			t8 = text(" presents a required option. The HTML attributes are used to set the validator options via the ");
			a0 = element("a");
			t9 = text("Declarative");
			t10 = text(" plugin");
			t11 = space();
			table0 = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t12 = text("Name");
			t13 = space();
			th1 = element("th");
			t14 = text("HTML attribute");
			t15 = space();
			th2 = element("th");
			t16 = text("Type");
			t17 = space();
			th3 = element("th");
			t18 = text("Description");
			t19 = space();
			tr1 = element("tr");
			td0 = element("td");
			code0 = element("code");
			t20 = text("format");
			sup1 = element("sup");
			t21 = text("*");
			t22 = space();
			td1 = element("td");
			code1 = element("code");
			t23 = text("data-fv-date___format");
			t24 = space();
			td2 = element("td");
			t25 = text("String");
			t26 = space();
			td3 = element("td");
			t27 = text("The date format. It is ");
			code2 = element("code");
			t28 = text("MM/DD/YYYY");
			t29 = text(", by default");
			t30 = space();
			tr2 = element("tr");
			td4 = element("td");
			code3 = element("code");
			t31 = text("max");
			t32 = space();
			td5 = element("td");
			code4 = element("code");
			t33 = text("data-fv-date___max");
			t34 = space();
			td6 = element("td");
			t35 = text("String or Date or Function");
			t36 = space();
			td7 = element("td");
			t37 = text("The value must be earlier than this option");
			t38 = space();
			tr3 = element("tr");
			td8 = element("td");
			code5 = element("code");
			t39 = text("message");
			t40 = space();
			td9 = element("td");
			code6 = element("code");
			t41 = text("data-fv-date___message");
			t42 = space();
			td10 = element("td");
			t43 = text("String");
			t44 = space();
			td11 = element("td");
			t45 = text("The error message");
			t46 = space();
			tr4 = element("tr");
			td12 = element("td");
			code7 = element("code");
			t47 = text("min");
			t48 = space();
			td13 = element("td");
			code8 = element("code");
			t49 = text("data-fv-date___min");
			t50 = space();
			td14 = element("td");
			t51 = text("String or Date or Function");
			t52 = space();
			td15 = element("td");
			t53 = text("The value must be later than this option");
			t54 = space();
			tr5 = element("tr");
			td16 = element("td");
			code9 = element("code");
			t55 = text("separator");
			t56 = space();
			td17 = element("td");
			code10 = element("code");
			t57 = text("data-fv-date___separator");
			t58 = space();
			td18 = element("td");
			t59 = text("String");
			t60 = space();
			td19 = element("td");
			p1 = element("p");
			t61 = text("Used to separate the day, month, and year. If it's not defined, the validator will look for the following separators automatically:");
			t62 = space();
			ul0 = element("ul");
			li0 = element("li");
			t63 = text("/");
			t64 = space();
			li1 = element("li");
			t65 = text("-");
			t66 = space();
			li2 = element("li");
			t67 = text(". (which is used in most European countries)");
			t68 = space();
			p2 = element("p");
			t69 = text("The ");
			code11 = element("code");
			t70 = text("min");
			t71 = text(" and ");
			code12 = element("code");
			t72 = text("max");
			t73 = text(" options can be");
			t74 = space();
			ul1 = element("ul");
			li3 = element("li");
			t75 = text("a date string in the format defined by the ");
			code13 = element("code");
			t76 = text("format option");
			t77 = space();
			li4 = element("li");
			t78 = text("a Date object");
			t79 = space();
			li5 = element("li");
			t80 = text("or a function that returns one of the two types above.");
			t81 = space();
			tip0.$$.fragment.c();
			t82 = space();
			p3 = element("p");
			t83 = text("The ");
			code14 = element("code");
			t84 = text("format");
			t85 = text(" can combine date, time, and AM/PM indicator sections:");
			t86 = space();
			table1 = element("table");
			tr6 = element("tr");
			th4 = element("th");
			t87 = text("Section");
			t88 = space();
			th5 = element("th");
			t89 = text("Token");
			t90 = space();
			th6 = element("th");
			t91 = text("Separator");
			t92 = space();
			tr7 = element("tr");
			td20 = element("td");
			t93 = text("Date");
			t94 = space();
			td21 = element("td");
			t95 = text("DD, MM, YYYY");
			t96 = space();
			td22 = element("td");
			t97 = text("Defined by the ");
			code15 = element("code");
			t98 = text("separator");
			t99 = text(" option.");
			br = element("br");
			t100 = text("Most popular examples are a slash (/), hyphen (-), or dot (.)");
			t101 = space();
			tr8 = element("tr");
			td23 = element("td");
			t102 = text("Time");
			t103 = space();
			td24 = element("td");
			t104 = text("h, m, s");
			t105 = space();
			td25 = element("td");
			t106 = text("a colon (:)");
			t107 = space();
			tr9 = element("tr");
			td26 = element("td");
			t108 = text("AM/PM");
			t109 = space();
			td27 = element("td");
			t110 = text("A");
			t111 = space();
			td28 = element("td");
			t112 = text("n/a");
			t113 = space();
			p4 = element("p");
			t114 = text("The following table describes the token meanings, defined by ");
			a1 = element("a");
			t115 = text("momentjs");
			t116 = text(", one of most popular JavaScript datetime library:");
			t117 = space();
			table2 = element("table");
			tr10 = element("tr");
			th7 = element("th");
			t118 = text("Token");
			t119 = space();
			th8 = element("th");
			t120 = text("Description");
			t121 = space();
			th9 = element("th");
			t122 = text("Required");
			t123 = space();
			tr11 = element("tr");
			td29 = element("td");
			t124 = text("MM");
			t125 = space();
			td30 = element("td");
			t126 = text("Month number");
			t127 = space();
			td31 = element("td");
			t128 = text("Yes");
			t129 = space();
			tr12 = element("tr");
			td32 = element("td");
			t130 = text("DD");
			t131 = space();
			td33 = element("td");
			t132 = text("Day of month");
			t133 = space();
			td34 = element("td");
			t134 = text("Yes");
			t135 = space();
			tr13 = element("tr");
			td35 = element("td");
			t136 = text("YYYY");
			t137 = space();
			td36 = element("td");
			t138 = text("4 digit year");
			t139 = space();
			td37 = element("td");
			t140 = text("Yes");
			t141 = space();
			tr14 = element("tr");
			td38 = element("td");
			t142 = text("h");
			t143 = space();
			td39 = element("td");
			t144 = text("12 hour time");
			t145 = space();
			td40 = element("td");
			t146 = text("No");
			t147 = space();
			tr15 = element("tr");
			td41 = element("td");
			t148 = text("m");
			t149 = space();
			td42 = element("td");
			t150 = text("Minutes");
			t151 = space();
			td43 = element("td");
			t152 = text("No");
			t153 = space();
			tr16 = element("tr");
			td44 = element("td");
			t154 = text("s");
			t155 = space();
			td45 = element("td");
			t156 = text("Seconds");
			t157 = space();
			td46 = element("td");
			t158 = text("No");
			t159 = space();
			tr17 = element("tr");
			td47 = element("td");
			t160 = text("A");
			t161 = space();
			td48 = element("td");
			t162 = text("AM/PM");
			t163 = space();
			td49 = element("td");
			t164 = text("No");
			t165 = space();
			p5 = element("p");
			t166 = text("The date validator requires day, month and year. If you are looking for hour and time validator, HH:mm, for example, you should use the ");
			a2 = element("a");
			t167 = text("regexp");
			t168 = text(" validator.");
			t169 = space();
			p6 = element("p");
			t170 = text("Below are some example of possible formats:");
			t171 = space();
			ul2 = element("ul");
			li6 = element("li");
			t172 = text("YYYY/DD/MM");
			t173 = space();
			li7 = element("li");
			t174 = text("YYYY/DD/MM h");
			t175 = space();
			li8 = element("li");
			t176 = text("YYYY/DD/MM h A");
			t177 = space();
			li9 = element("li");
			t178 = text("YYYY/DD/MM h:m");
			t179 = space();
			li10 = element("li");
			t180 = text("YYYY/DD/MM h:m A");
			t181 = space();
			li11 = element("li");
			t182 = text("YYYY/DD/MM h:m:s");
			t183 = space();
			li12 = element("li");
			t184 = text("YYYY/DD/MM h:m:s A");
			t185 = space();
			li13 = element("li");
			t186 = text("YYYY-MM-DD");
			t187 = space();
			li14 = element("li");
			t188 = text("YYYY-MM-DD h:m A");
			t189 = space();
			li15 = element("li");
			t190 = text("DD/MM/YYYY");
			t191 = space();
			li16 = element("li");
			t192 = text("DD/MM/YYYY h:m A");
			t193 = space();
			li17 = element("li");
			t194 = text("MM-DD-YYYY");
			t195 = space();
			li18 = element("li");
			t196 = text("MM-DD-YYYY h:m A");
			t197 = space();
			li19 = element("li");
			t198 = text("DD-MM-YYYY");
			t199 = space();
			li20 = element("li");
			t200 = text("DD-MM-YYYY h:m A");
			t201 = space();
			p7 = element("p");
			t202 = text("It's possible to support other date format by using ");
			a3 = element("a");
			t203 = text("callback");
			t204 = text(" validator as shown in the ");
			span = element("span");
			t205 = text("Custom format example");
			t206 = text(" below.");
			t207 = space();
			tip1.$$.fragment.c();
			t208 = space();
			h31 = element("h3");
			t209 = text("Using with ES6 module");
			t210 = space();
			samplecode0.$$.fragment.c();
			t211 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t212 = space();
			p8 = element("p");
			t213 = text("The following form might be used in a profile setting page:");
			t214 = space();
			demo.$$.fragment.c();
			t215 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t216 = space();
			p9 = element("p");
			t217 = text("The following snippet shows how to use the date validator with ES6 module:");
			t218 = space();
			samplecode1.$$.fragment.c();
			t219 = space();
			examples.$$.fragment.c();
			t220 = space();
			section3 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t221 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "date validator");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Validate a date");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n\n        ");

			h30 = claim_element(section0_nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t5 = claim_text(h30_nodes, "Using with form field");
			h30_nodes.forEach(detach);
			t6 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			sup0 = claim_element(p0_nodes, "SUP", {}, false);
			var sup0_nodes = children(sup0);

			t7 = claim_text(sup0_nodes, "*");
			sup0_nodes.forEach(detach);
			t8 = claim_text(p0_nodes, " presents a required option. The HTML attributes are used to set the validator options via the ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t9 = claim_text(a0_nodes, "Declarative");
			a0_nodes.forEach(detach);
			t10 = claim_text(p0_nodes, " plugin");
			p0_nodes.forEach(detach);
			t11 = claim_text(section0_nodes, "\n        ");

			table0 = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table0_nodes = children(table0);

			tr0 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t12 = claim_text(th0_nodes, "Name");
			th0_nodes.forEach(detach);
			t13 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t14 = claim_text(th1_nodes, "HTML attribute");
			th1_nodes.forEach(detach);
			t15 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t16 = claim_text(th2_nodes, "Type");
			th2_nodes.forEach(detach);
			t17 = claim_text(tr0_nodes, "\n                ");

			th3 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th3_nodes = children(th3);

			t18 = claim_text(th3_nodes, "Description");
			th3_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t19 = claim_text(table0_nodes, "\n            ");

			tr1 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code0 = claim_element(td0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t20 = claim_text(code0_nodes, "format");
			code0_nodes.forEach(detach);

			sup1 = claim_element(td0_nodes, "SUP", {}, false);
			var sup1_nodes = children(sup1);

			t21 = claim_text(sup1_nodes, "*");
			sup1_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t22 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			code1 = claim_element(td1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t23 = claim_text(code1_nodes, "data-fv-date___format");
			code1_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			t24 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t25 = claim_text(td2_nodes, "String");
			td2_nodes.forEach(detach);
			t26 = claim_text(tr1_nodes, "\n                ");

			td3 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			t27 = claim_text(td3_nodes, "The date format. It is ");

			code2 = claim_element(td3_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t28 = claim_text(code2_nodes, "MM/DD/YYYY");
			code2_nodes.forEach(detach);
			t29 = claim_text(td3_nodes, ", by default");
			td3_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t30 = claim_text(table0_nodes, "\n            ");

			tr2 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			code3 = claim_element(td4_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t31 = claim_text(code3_nodes, "max");
			code3_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t32 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			code4 = claim_element(td5_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t33 = claim_text(code4_nodes, "data-fv-date___max");
			code4_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			t34 = claim_text(tr2_nodes, "\n                ");

			td6 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			t35 = claim_text(td6_nodes, "String or Date or Function");
			td6_nodes.forEach(detach);
			t36 = claim_text(tr2_nodes, "\n                ");

			td7 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			t37 = claim_text(td7_nodes, "The value must be earlier than this option");
			td7_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t38 = claim_text(table0_nodes, "\n            ");

			tr3 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td8 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			code5 = claim_element(td8_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t39 = claim_text(code5_nodes, "message");
			code5_nodes.forEach(detach);
			td8_nodes.forEach(detach);
			t40 = claim_text(tr3_nodes, "\n                ");

			td9 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			code6 = claim_element(td9_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t41 = claim_text(code6_nodes, "data-fv-date___message");
			code6_nodes.forEach(detach);
			td9_nodes.forEach(detach);
			t42 = claim_text(tr3_nodes, "\n                ");

			td10 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td10_nodes = children(td10);

			t43 = claim_text(td10_nodes, "String");
			td10_nodes.forEach(detach);
			t44 = claim_text(tr3_nodes, "\n                ");

			td11 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td11_nodes = children(td11);

			t45 = claim_text(td11_nodes, "The error message");
			td11_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			t46 = claim_text(table0_nodes, "\n            ");

			tr4 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			td12 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td12_nodes = children(td12);

			code7 = claim_element(td12_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t47 = claim_text(code7_nodes, "min");
			code7_nodes.forEach(detach);
			td12_nodes.forEach(detach);
			t48 = claim_text(tr4_nodes, "\n                ");

			td13 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td13_nodes = children(td13);

			code8 = claim_element(td13_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t49 = claim_text(code8_nodes, "data-fv-date___min");
			code8_nodes.forEach(detach);
			td13_nodes.forEach(detach);
			t50 = claim_text(tr4_nodes, "\n                ");

			td14 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td14_nodes = children(td14);

			t51 = claim_text(td14_nodes, "String or Date or Function");
			td14_nodes.forEach(detach);
			t52 = claim_text(tr4_nodes, "\n                ");

			td15 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td15_nodes = children(td15);

			t53 = claim_text(td15_nodes, "The value must be later than this option");
			td15_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			t54 = claim_text(table0_nodes, "\n            ");

			tr5 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr5_nodes = children(tr5);

			td16 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td16_nodes = children(td16);

			code9 = claim_element(td16_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t55 = claim_text(code9_nodes, "separator");
			code9_nodes.forEach(detach);
			td16_nodes.forEach(detach);
			t56 = claim_text(tr5_nodes, "\n                ");

			td17 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td17_nodes = children(td17);

			code10 = claim_element(td17_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t57 = claim_text(code10_nodes, "data-fv-date___separator");
			code10_nodes.forEach(detach);
			td17_nodes.forEach(detach);
			t58 = claim_text(tr5_nodes, "\n                ");

			td18 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td18_nodes = children(td18);

			t59 = claim_text(td18_nodes, "String");
			td18_nodes.forEach(detach);
			t60 = claim_text(tr5_nodes, "\n                ");

			td19 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td19_nodes = children(td19);

			p1 = claim_element(td19_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t61 = claim_text(p1_nodes, "Used to separate the day, month, and year. If it's not defined, the validator will look for the following separators automatically:");
			p1_nodes.forEach(detach);
			t62 = claim_text(td19_nodes, "\n                    ");

			ul0 = claim_element(td19_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t63 = claim_text(li0_nodes, "/");
			li0_nodes.forEach(detach);
			t64 = claim_text(ul0_nodes, "\n                        ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t65 = claim_text(li1_nodes, "-");
			li1_nodes.forEach(detach);
			t66 = claim_text(ul0_nodes, "\n                        ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t67 = claim_text(li2_nodes, ". (which is used in most European countries)");
			li2_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			td19_nodes.forEach(detach);
			tr5_nodes.forEach(detach);
			table0_nodes.forEach(detach);
			t68 = claim_text(section0_nodes, "\n\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t69 = claim_text(p2_nodes, "The ");

			code11 = claim_element(p2_nodes, "CODE", {}, false);
			var code11_nodes = children(code11);

			t70 = claim_text(code11_nodes, "min");
			code11_nodes.forEach(detach);
			t71 = claim_text(p2_nodes, " and ");

			code12 = claim_element(p2_nodes, "CODE", {}, false);
			var code12_nodes = children(code12);

			t72 = claim_text(code12_nodes, "max");
			code12_nodes.forEach(detach);
			t73 = claim_text(p2_nodes, " options can be");
			p2_nodes.forEach(detach);
			t74 = claim_text(section0_nodes, "\n        ");

			ul1 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li3 = claim_element(ul1_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t75 = claim_text(li3_nodes, "a date string in the format defined by the ");

			code13 = claim_element(li3_nodes, "CODE", {}, false);
			var code13_nodes = children(code13);

			t76 = claim_text(code13_nodes, "format option");
			code13_nodes.forEach(detach);
			li3_nodes.forEach(detach);
			t77 = claim_text(ul1_nodes, "\n            ");

			li4 = claim_element(ul1_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			t78 = claim_text(li4_nodes, "a Date object");
			li4_nodes.forEach(detach);
			t79 = claim_text(ul1_nodes, "\n            ");

			li5 = claim_element(ul1_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			t80 = claim_text(li5_nodes, "or a function that returns one of the two types above.");
			li5_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			t81 = claim_text(section0_nodes, "\n        ");
			tip0.$$.fragment.l(section0_nodes);
			t82 = claim_text(section0_nodes, "\n        ");

			p3 = claim_element(section0_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t83 = claim_text(p3_nodes, "The ");

			code14 = claim_element(p3_nodes, "CODE", {}, false);
			var code14_nodes = children(code14);

			t84 = claim_text(code14_nodes, "format");
			code14_nodes.forEach(detach);
			t85 = claim_text(p3_nodes, " can combine date, time, and AM/PM indicator sections:");
			p3_nodes.forEach(detach);
			t86 = claim_text(section0_nodes, "\n\n        ");

			table1 = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table1_nodes = children(table1);

			tr6 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr6_nodes = children(tr6);

			th4 = claim_element(tr6_nodes, "TH", { class: true }, false);
			var th4_nodes = children(th4);

			t87 = claim_text(th4_nodes, "Section");
			th4_nodes.forEach(detach);
			t88 = claim_text(tr6_nodes, "\n                ");

			th5 = claim_element(tr6_nodes, "TH", { class: true }, false);
			var th5_nodes = children(th5);

			t89 = claim_text(th5_nodes, "Token");
			th5_nodes.forEach(detach);
			t90 = claim_text(tr6_nodes, "\n                ");

			th6 = claim_element(tr6_nodes, "TH", { class: true }, false);
			var th6_nodes = children(th6);

			t91 = claim_text(th6_nodes, "Separator");
			th6_nodes.forEach(detach);
			tr6_nodes.forEach(detach);
			t92 = claim_text(table1_nodes, "\n            ");

			tr7 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr7_nodes = children(tr7);

			td20 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td20_nodes = children(td20);

			t93 = claim_text(td20_nodes, "Date");
			td20_nodes.forEach(detach);
			t94 = claim_text(tr7_nodes, "\n                ");

			td21 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td21_nodes = children(td21);

			t95 = claim_text(td21_nodes, "DD, MM, YYYY");
			td21_nodes.forEach(detach);
			t96 = claim_text(tr7_nodes, "\n                ");

			td22 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td22_nodes = children(td22);

			t97 = claim_text(td22_nodes, "Defined by the ");

			code15 = claim_element(td22_nodes, "CODE", {}, false);
			var code15_nodes = children(code15);

			t98 = claim_text(code15_nodes, "separator");
			code15_nodes.forEach(detach);
			t99 = claim_text(td22_nodes, " option.");

			br = claim_element(td22_nodes, "BR", {}, false);
			var br_nodes = children(br);

			br_nodes.forEach(detach);
			t100 = claim_text(td22_nodes, "Most popular examples are a slash (/), hyphen (-), or dot (.)");
			td22_nodes.forEach(detach);
			tr7_nodes.forEach(detach);
			t101 = claim_text(table1_nodes, "\n            ");

			tr8 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr8_nodes = children(tr8);

			td23 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td23_nodes = children(td23);

			t102 = claim_text(td23_nodes, "Time");
			td23_nodes.forEach(detach);
			t103 = claim_text(tr8_nodes, "\n                ");

			td24 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td24_nodes = children(td24);

			t104 = claim_text(td24_nodes, "h, m, s");
			td24_nodes.forEach(detach);
			t105 = claim_text(tr8_nodes, "\n                ");

			td25 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td25_nodes = children(td25);

			t106 = claim_text(td25_nodes, "a colon (:)");
			td25_nodes.forEach(detach);
			tr8_nodes.forEach(detach);
			t107 = claim_text(table1_nodes, "\n            ");

			tr9 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr9_nodes = children(tr9);

			td26 = claim_element(tr9_nodes, "TD", { class: true }, false);
			var td26_nodes = children(td26);

			t108 = claim_text(td26_nodes, "AM/PM");
			td26_nodes.forEach(detach);
			t109 = claim_text(tr9_nodes, "\n                ");

			td27 = claim_element(tr9_nodes, "TD", { class: true }, false);
			var td27_nodes = children(td27);

			t110 = claim_text(td27_nodes, "A");
			td27_nodes.forEach(detach);
			t111 = claim_text(tr9_nodes, "\n                ");

			td28 = claim_element(tr9_nodes, "TD", { class: true }, false);
			var td28_nodes = children(td28);

			t112 = claim_text(td28_nodes, "n/a");
			td28_nodes.forEach(detach);
			tr9_nodes.forEach(detach);
			table1_nodes.forEach(detach);
			t113 = claim_text(section0_nodes, "\n\n        ");

			p4 = claim_element(section0_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t114 = claim_text(p4_nodes, "The following table describes the token meanings, defined by ");

			a1 = claim_element(p4_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t115 = claim_text(a1_nodes, "momentjs");
			a1_nodes.forEach(detach);
			t116 = claim_text(p4_nodes, ", one of most popular JavaScript datetime library:");
			p4_nodes.forEach(detach);
			t117 = claim_text(section0_nodes, "\n        ");

			table2 = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table2_nodes = children(table2);

			tr10 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr10_nodes = children(tr10);

			th7 = claim_element(tr10_nodes, "TH", { class: true }, false);
			var th7_nodes = children(th7);

			t118 = claim_text(th7_nodes, "Token");
			th7_nodes.forEach(detach);
			t119 = claim_text(tr10_nodes, "\n                ");

			th8 = claim_element(tr10_nodes, "TH", { class: true }, false);
			var th8_nodes = children(th8);

			t120 = claim_text(th8_nodes, "Description");
			th8_nodes.forEach(detach);
			t121 = claim_text(tr10_nodes, "\n                ");

			th9 = claim_element(tr10_nodes, "TH", { class: true }, false);
			var th9_nodes = children(th9);

			t122 = claim_text(th9_nodes, "Required");
			th9_nodes.forEach(detach);
			tr10_nodes.forEach(detach);
			t123 = claim_text(table2_nodes, "\n            ");

			tr11 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr11_nodes = children(tr11);

			td29 = claim_element(tr11_nodes, "TD", { class: true }, false);
			var td29_nodes = children(td29);

			t124 = claim_text(td29_nodes, "MM");
			td29_nodes.forEach(detach);
			t125 = claim_text(tr11_nodes, "\n                ");

			td30 = claim_element(tr11_nodes, "TD", { class: true }, false);
			var td30_nodes = children(td30);

			t126 = claim_text(td30_nodes, "Month number");
			td30_nodes.forEach(detach);
			t127 = claim_text(tr11_nodes, "\n                ");

			td31 = claim_element(tr11_nodes, "TD", { class: true }, false);
			var td31_nodes = children(td31);

			t128 = claim_text(td31_nodes, "Yes");
			td31_nodes.forEach(detach);
			tr11_nodes.forEach(detach);
			t129 = claim_text(table2_nodes, "\n            ");

			tr12 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr12_nodes = children(tr12);

			td32 = claim_element(tr12_nodes, "TD", { class: true }, false);
			var td32_nodes = children(td32);

			t130 = claim_text(td32_nodes, "DD");
			td32_nodes.forEach(detach);
			t131 = claim_text(tr12_nodes, "\n                ");

			td33 = claim_element(tr12_nodes, "TD", { class: true }, false);
			var td33_nodes = children(td33);

			t132 = claim_text(td33_nodes, "Day of month");
			td33_nodes.forEach(detach);
			t133 = claim_text(tr12_nodes, "\n                ");

			td34 = claim_element(tr12_nodes, "TD", { class: true }, false);
			var td34_nodes = children(td34);

			t134 = claim_text(td34_nodes, "Yes");
			td34_nodes.forEach(detach);
			tr12_nodes.forEach(detach);
			t135 = claim_text(table2_nodes, "\n            ");

			tr13 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr13_nodes = children(tr13);

			td35 = claim_element(tr13_nodes, "TD", { class: true }, false);
			var td35_nodes = children(td35);

			t136 = claim_text(td35_nodes, "YYYY");
			td35_nodes.forEach(detach);
			t137 = claim_text(tr13_nodes, "\n                ");

			td36 = claim_element(tr13_nodes, "TD", { class: true }, false);
			var td36_nodes = children(td36);

			t138 = claim_text(td36_nodes, "4 digit year");
			td36_nodes.forEach(detach);
			t139 = claim_text(tr13_nodes, "\n                ");

			td37 = claim_element(tr13_nodes, "TD", { class: true }, false);
			var td37_nodes = children(td37);

			t140 = claim_text(td37_nodes, "Yes");
			td37_nodes.forEach(detach);
			tr13_nodes.forEach(detach);
			t141 = claim_text(table2_nodes, "\n            ");

			tr14 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr14_nodes = children(tr14);

			td38 = claim_element(tr14_nodes, "TD", { class: true }, false);
			var td38_nodes = children(td38);

			t142 = claim_text(td38_nodes, "h");
			td38_nodes.forEach(detach);
			t143 = claim_text(tr14_nodes, "\n                ");

			td39 = claim_element(tr14_nodes, "TD", { class: true }, false);
			var td39_nodes = children(td39);

			t144 = claim_text(td39_nodes, "12 hour time");
			td39_nodes.forEach(detach);
			t145 = claim_text(tr14_nodes, "\n                ");

			td40 = claim_element(tr14_nodes, "TD", { class: true }, false);
			var td40_nodes = children(td40);

			t146 = claim_text(td40_nodes, "No");
			td40_nodes.forEach(detach);
			tr14_nodes.forEach(detach);
			t147 = claim_text(table2_nodes, "\n            ");

			tr15 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr15_nodes = children(tr15);

			td41 = claim_element(tr15_nodes, "TD", { class: true }, false);
			var td41_nodes = children(td41);

			t148 = claim_text(td41_nodes, "m");
			td41_nodes.forEach(detach);
			t149 = claim_text(tr15_nodes, "\n                ");

			td42 = claim_element(tr15_nodes, "TD", { class: true }, false);
			var td42_nodes = children(td42);

			t150 = claim_text(td42_nodes, "Minutes");
			td42_nodes.forEach(detach);
			t151 = claim_text(tr15_nodes, "\n                ");

			td43 = claim_element(tr15_nodes, "TD", { class: true }, false);
			var td43_nodes = children(td43);

			t152 = claim_text(td43_nodes, "No");
			td43_nodes.forEach(detach);
			tr15_nodes.forEach(detach);
			t153 = claim_text(table2_nodes, "\n            ");

			tr16 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr16_nodes = children(tr16);

			td44 = claim_element(tr16_nodes, "TD", { class: true }, false);
			var td44_nodes = children(td44);

			t154 = claim_text(td44_nodes, "s");
			td44_nodes.forEach(detach);
			t155 = claim_text(tr16_nodes, "\n                ");

			td45 = claim_element(tr16_nodes, "TD", { class: true }, false);
			var td45_nodes = children(td45);

			t156 = claim_text(td45_nodes, "Seconds");
			td45_nodes.forEach(detach);
			t157 = claim_text(tr16_nodes, "\n                ");

			td46 = claim_element(tr16_nodes, "TD", { class: true }, false);
			var td46_nodes = children(td46);

			t158 = claim_text(td46_nodes, "No");
			td46_nodes.forEach(detach);
			tr16_nodes.forEach(detach);
			t159 = claim_text(table2_nodes, "\n            ");

			tr17 = claim_element(table2_nodes, "TR", { class: true }, false);
			var tr17_nodes = children(tr17);

			td47 = claim_element(tr17_nodes, "TD", { class: true }, false);
			var td47_nodes = children(td47);

			t160 = claim_text(td47_nodes, "A");
			td47_nodes.forEach(detach);
			t161 = claim_text(tr17_nodes, "\n                ");

			td48 = claim_element(tr17_nodes, "TD", { class: true }, false);
			var td48_nodes = children(td48);

			t162 = claim_text(td48_nodes, "AM/PM");
			td48_nodes.forEach(detach);
			t163 = claim_text(tr17_nodes, "\n                ");

			td49 = claim_element(tr17_nodes, "TD", { class: true }, false);
			var td49_nodes = children(td49);

			t164 = claim_text(td49_nodes, "No");
			td49_nodes.forEach(detach);
			tr17_nodes.forEach(detach);
			table2_nodes.forEach(detach);
			t165 = claim_text(section0_nodes, "\n\n        ");

			p5 = claim_element(section0_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t166 = claim_text(p5_nodes, "The date validator requires day, month and year. If you are looking for hour and time validator, HH:mm, for example, you should use the ");

			a2 = claim_element(p5_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t167 = claim_text(a2_nodes, "regexp");
			a2_nodes.forEach(detach);
			t168 = claim_text(p5_nodes, " validator.");
			p5_nodes.forEach(detach);
			t169 = claim_text(section0_nodes, "\n        ");

			p6 = claim_element(section0_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t170 = claim_text(p6_nodes, "Below are some example of possible formats:");
			p6_nodes.forEach(detach);
			t171 = claim_text(section0_nodes, "\n        ");

			ul2 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul2_nodes = children(ul2);

			li6 = claim_element(ul2_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			t172 = claim_text(li6_nodes, "YYYY/DD/MM");
			li6_nodes.forEach(detach);
			t173 = claim_text(ul2_nodes, "\n            ");

			li7 = claim_element(ul2_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			t174 = claim_text(li7_nodes, "YYYY/DD/MM h");
			li7_nodes.forEach(detach);
			t175 = claim_text(ul2_nodes, "\n            ");

			li8 = claim_element(ul2_nodes, "LI", {}, false);
			var li8_nodes = children(li8);

			t176 = claim_text(li8_nodes, "YYYY/DD/MM h A");
			li8_nodes.forEach(detach);
			t177 = claim_text(ul2_nodes, "\n            ");

			li9 = claim_element(ul2_nodes, "LI", {}, false);
			var li9_nodes = children(li9);

			t178 = claim_text(li9_nodes, "YYYY/DD/MM h:m");
			li9_nodes.forEach(detach);
			t179 = claim_text(ul2_nodes, "\n            ");

			li10 = claim_element(ul2_nodes, "LI", {}, false);
			var li10_nodes = children(li10);

			t180 = claim_text(li10_nodes, "YYYY/DD/MM h:m A");
			li10_nodes.forEach(detach);
			t181 = claim_text(ul2_nodes, "\n            ");

			li11 = claim_element(ul2_nodes, "LI", {}, false);
			var li11_nodes = children(li11);

			t182 = claim_text(li11_nodes, "YYYY/DD/MM h:m:s");
			li11_nodes.forEach(detach);
			t183 = claim_text(ul2_nodes, "\n            ");

			li12 = claim_element(ul2_nodes, "LI", {}, false);
			var li12_nodes = children(li12);

			t184 = claim_text(li12_nodes, "YYYY/DD/MM h:m:s A");
			li12_nodes.forEach(detach);
			t185 = claim_text(ul2_nodes, "\n            ");

			li13 = claim_element(ul2_nodes, "LI", {}, false);
			var li13_nodes = children(li13);

			t186 = claim_text(li13_nodes, "YYYY-MM-DD");
			li13_nodes.forEach(detach);
			t187 = claim_text(ul2_nodes, "\n            ");

			li14 = claim_element(ul2_nodes, "LI", {}, false);
			var li14_nodes = children(li14);

			t188 = claim_text(li14_nodes, "YYYY-MM-DD h:m A");
			li14_nodes.forEach(detach);
			t189 = claim_text(ul2_nodes, "\n            ");

			li15 = claim_element(ul2_nodes, "LI", {}, false);
			var li15_nodes = children(li15);

			t190 = claim_text(li15_nodes, "DD/MM/YYYY");
			li15_nodes.forEach(detach);
			t191 = claim_text(ul2_nodes, "\n            ");

			li16 = claim_element(ul2_nodes, "LI", {}, false);
			var li16_nodes = children(li16);

			t192 = claim_text(li16_nodes, "DD/MM/YYYY h:m A");
			li16_nodes.forEach(detach);
			t193 = claim_text(ul2_nodes, "\n            ");

			li17 = claim_element(ul2_nodes, "LI", {}, false);
			var li17_nodes = children(li17);

			t194 = claim_text(li17_nodes, "MM-DD-YYYY");
			li17_nodes.forEach(detach);
			t195 = claim_text(ul2_nodes, "\n            ");

			li18 = claim_element(ul2_nodes, "LI", {}, false);
			var li18_nodes = children(li18);

			t196 = claim_text(li18_nodes, "MM-DD-YYYY h:m A");
			li18_nodes.forEach(detach);
			t197 = claim_text(ul2_nodes, "\n            ");

			li19 = claim_element(ul2_nodes, "LI", {}, false);
			var li19_nodes = children(li19);

			t198 = claim_text(li19_nodes, "DD-MM-YYYY");
			li19_nodes.forEach(detach);
			t199 = claim_text(ul2_nodes, "\n            ");

			li20 = claim_element(ul2_nodes, "LI", {}, false);
			var li20_nodes = children(li20);

			t200 = claim_text(li20_nodes, "DD-MM-YYYY h:m A");
			li20_nodes.forEach(detach);
			ul2_nodes.forEach(detach);
			t201 = claim_text(section0_nodes, "\n        ");

			p7 = claim_element(section0_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t202 = claim_text(p7_nodes, "It's possible to support other date format by using ");

			a3 = claim_element(p7_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t203 = claim_text(a3_nodes, "callback");
			a3_nodes.forEach(detach);
			t204 = claim_text(p7_nodes, " validator as shown in the ");

			span = claim_element(p7_nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t205 = claim_text(span_nodes, "Custom format example");
			span_nodes.forEach(detach);
			t206 = claim_text(p7_nodes, " below.");
			p7_nodes.forEach(detach);
			t207 = claim_text(section0_nodes, "\n        ");
			tip1.$$.fragment.l(section0_nodes);
			t208 = claim_text(section0_nodes, "\n\n        ");

			h31 = claim_element(section0_nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t209 = claim_text(h31_nodes, "Using with ES6 module");
			h31_nodes.forEach(detach);
			t210 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t211 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t212 = claim_text(section1_nodes, "\n        ");

			p8 = claim_element(section1_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t213 = claim_text(p8_nodes, "The following form might be used in a profile setting page:");
			p8_nodes.forEach(detach);
			t214 = claim_text(section1_nodes, "\n        ");
			demo.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t215 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t216 = claim_text(section2_nodes, "\n\n        ");

			p9 = claim_element(section2_nodes, "P", { class: true }, false);
			var p9_nodes = children(p9);

			t217 = claim_text(p9_nodes, "The following snippet shows how to use the date validator with ES6 module:");
			p9_nodes.forEach(detach);
			t218 = claim_text(section2_nodes, "\n");
			samplecode1.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t219 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			t220 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			div = claim_element(section3_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t221 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 96);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 148);
			add_location(h30, file, 11, 8, 262);
			add_location(sup0, file, 12, 29, 322);
			a0.href = "/guide/plugins/declarative";
			a0.className = "blue dim link";
			add_location(a0, file, 12, 136, 429);
			p0.className = "lh-copy i";
			add_location(p0, file, 12, 8, 301);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 15, 16, 646);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 16, 16, 706);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 17, 16, 776);
			th3.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th3, file, 18, 16, 836);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 14, 12, 597);
			add_location(code0, file, 21, 36, 986);
			add_location(sup1, file, 21, 55, 1005);
			td0.className = "pv2 ph3";
			add_location(td0, file, 21, 16, 966);
			add_location(code1, file, 22, 36, 1059);
			td1.className = "pv2 ph3";
			add_location(td1, file, 22, 16, 1039);
			td2.className = "pv2 ph3";
			add_location(td2, file, 23, 16, 1115);
			add_location(code2, file, 24, 59, 1206);
			td3.className = "pv2 ph3";
			add_location(td3, file, 24, 16, 1163);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 20, 12, 917);
			add_location(code3, file, 27, 36, 1346);
			td4.className = "pv2 ph3";
			add_location(td4, file, 27, 16, 1326);
			add_location(code4, file, 28, 36, 1404);
			td5.className = "pv2 ph3";
			add_location(td5, file, 28, 16, 1384);
			td6.className = "pv2 ph3";
			add_location(td6, file, 29, 16, 1457);
			td7.className = "pv2 ph3";
			add_location(td7, file, 30, 16, 1525);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 26, 12, 1277);
			add_location(code5, file, 33, 36, 1692);
			td8.className = "pv2 ph3";
			add_location(td8, file, 33, 16, 1672);
			add_location(code6, file, 34, 36, 1754);
			td9.className = "pv2 ph3";
			add_location(td9, file, 34, 16, 1734);
			td10.className = "pv2 ph3";
			add_location(td10, file, 35, 16, 1811);
			td11.className = "pv2 ph3";
			add_location(td11, file, 36, 16, 1859);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 32, 12, 1623);
			add_location(code7, file, 39, 36, 2001);
			td12.className = "pv2 ph3";
			add_location(td12, file, 39, 16, 1981);
			add_location(code8, file, 40, 36, 2059);
			td13.className = "pv2 ph3";
			add_location(td13, file, 40, 16, 2039);
			td14.className = "pv2 ph3";
			add_location(td14, file, 41, 16, 2112);
			td15.className = "pv2 ph3";
			add_location(td15, file, 42, 16, 2180);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 38, 12, 1932);
			add_location(code9, file, 45, 36, 2345);
			td16.className = "pv2 ph3";
			add_location(td16, file, 45, 16, 2325);
			add_location(code10, file, 46, 36, 2409);
			td17.className = "pv2 ph3";
			add_location(td17, file, 46, 16, 2389);
			td18.className = "pv2 ph3";
			add_location(td18, file, 47, 16, 2468);
			p1.className = "lh-copy";
			add_location(p1, file, 49, 20, 2557);
			add_location(li0, file, 51, 24, 2785);
			add_location(li1, file, 52, 24, 2820);
			add_location(li2, file, 53, 24, 2855);
			ul0.className = "ma0 pl3 lh-copy";
			add_location(ul0, file, 50, 20, 2732);
			td19.className = "pv2 ph3";
			add_location(td19, file, 48, 16, 2516);
			tr5.className = "striped--light-gray";
			add_location(tr5, file, 44, 12, 2276);
			table0.className = "collapse ba br2 b--black-10 pv2 ph3 w-100 mb4";
			add_location(table0, file, 13, 8, 523);
			add_location(code11, file, 59, 31, 3024);
			add_location(code12, file, 59, 52, 3045);
			p2.className = "lh-copy";
			add_location(p2, file, 59, 8, 3001);
			add_location(code13, file, 61, 59, 3177);
			add_location(li3, file, 61, 12, 3130);
			add_location(li4, file, 62, 12, 3221);
			add_location(li5, file, 63, 12, 3256);
			ul1.className = "ma0 pl3 lh-copy";
			add_location(ul1, file, 60, 8, 3089);
			add_location(code14, file, 66, 31, 3522);
			p3.className = "lh-copy";
			add_location(p3, file, 66, 8, 3499);
			th4.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th4, file, 70, 16, 3732);
			th5.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th5, file, 71, 16, 3795);
			th6.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th6, file, 72, 16, 3856);
			tr6.className = "striped--light-gray";
			add_location(tr6, file, 69, 12, 3683);
			td20.className = "pv2 ph3";
			add_location(td20, file, 75, 16, 3984);
			td21.className = "pv2 ph3";
			add_location(td21, file, 76, 16, 4030);
			add_location(code15, file, 77, 59, 4127);
			add_location(br, file, 77, 89, 4157);
			td22.className = "pv2 ph3 lh-copy";
			add_location(td22, file, 77, 16, 4084);
			tr7.className = "striped--light-gray";
			add_location(tr7, file, 74, 12, 3935);
			td23.className = "pv2 ph3";
			add_location(td23, file, 80, 16, 4308);
			td24.className = "pv2 ph3";
			add_location(td24, file, 81, 16, 4354);
			td25.className = "pv2 ph3";
			add_location(td25, file, 82, 16, 4403);
			tr8.className = "striped--light-gray";
			add_location(tr8, file, 79, 12, 4259);
			td26.className = "pv2 ph3";
			add_location(td26, file, 85, 16, 4519);
			td27.className = "pv2 ph3";
			add_location(td27, file, 86, 16, 4566);
			td28.className = "pv2 ph3";
			add_location(td28, file, 87, 16, 4609);
			tr9.className = "striped--light-gray";
			add_location(tr9, file, 84, 12, 4470);
			table1.className = "collapse ba br2 b--black-10 pv2 ph3 w-100 mb4";
			add_location(table1, file, 68, 8, 3609);
			a1.href = "http://momentjs.com/docs/#/displaying/format";
			a1.className = "blue dim link";
			add_location(a1, file, 91, 88, 4762);
			p4.className = "lh-copy";
			add_location(p4, file, 91, 8, 4682);
			th7.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th7, file, 94, 16, 5037);
			th8.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th8, file, 95, 16, 5098);
			th9.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th9, file, 96, 16, 5165);
			tr10.className = "striped--light-gray";
			add_location(tr10, file, 93, 12, 4988);
			td29.className = "pv2 ph3";
			add_location(td29, file, 99, 16, 5292);
			td30.className = "pv2 ph3";
			add_location(td30, file, 100, 16, 5336);
			td31.className = "pv2 ph3";
			add_location(td31, file, 101, 16, 5390);
			tr11.className = "striped--light-gray";
			add_location(tr11, file, 98, 12, 5243);
			td32.className = "pv2 ph3";
			add_location(td32, file, 104, 16, 5498);
			td33.className = "pv2 ph3";
			add_location(td33, file, 105, 16, 5542);
			td34.className = "pv2 ph3";
			add_location(td34, file, 106, 16, 5596);
			tr12.className = "striped--light-gray";
			add_location(tr12, file, 103, 12, 5449);
			td35.className = "pv2 ph3";
			add_location(td35, file, 109, 16, 5704);
			td36.className = "pv2 ph3";
			add_location(td36, file, 110, 16, 5750);
			td37.className = "pv2 ph3";
			add_location(td37, file, 111, 16, 5804);
			tr13.className = "striped--light-gray";
			add_location(tr13, file, 108, 12, 5655);
			td38.className = "pv2 ph3";
			add_location(td38, file, 114, 16, 5912);
			td39.className = "pv2 ph3";
			add_location(td39, file, 115, 16, 5955);
			td40.className = "pv2 ph3";
			add_location(td40, file, 116, 16, 6009);
			tr14.className = "striped--light-gray";
			add_location(tr14, file, 113, 12, 5863);
			td41.className = "pv2 ph3";
			add_location(td41, file, 119, 16, 6116);
			td42.className = "pv2 ph3";
			add_location(td42, file, 120, 16, 6159);
			td43.className = "pv2 ph3";
			add_location(td43, file, 121, 16, 6208);
			tr15.className = "striped--light-gray";
			add_location(tr15, file, 118, 12, 6067);
			td44.className = "pv2 ph3";
			add_location(td44, file, 124, 16, 6315);
			td45.className = "pv2 ph3";
			add_location(td45, file, 125, 16, 6358);
			td46.className = "pv2 ph3";
			add_location(td46, file, 126, 16, 6407);
			tr16.className = "striped--light-gray";
			add_location(tr16, file, 123, 12, 6266);
			td47.className = "pv2 ph3";
			add_location(td47, file, 129, 16, 6514);
			td48.className = "pv2 ph3";
			add_location(td48, file, 130, 16, 6557);
			td49.className = "pv2 ph3";
			add_location(td49, file, 131, 16, 6604);
			tr17.className = "striped--light-gray";
			add_location(tr17, file, 128, 12, 6465);
			table2.className = "collapse ba br2 b--black-10 pv2 ph3 w-100 mb4";
			add_location(table2, file, 92, 8, 4914);
			a2.href = "/guide/validators/regexp";
			a2.className = "blue dim link";
			add_location(a2, file, 135, 163, 6831);
			p5.className = "lh-copy";
			add_location(p5, file, 135, 8, 6676);
			p6.className = "lh-copy";
			add_location(p6, file, 136, 8, 6922);
			add_location(li6, file, 138, 12, 7038);
			add_location(li7, file, 139, 12, 7070);
			add_location(li8, file, 140, 12, 7104);
			add_location(li9, file, 141, 12, 7140);
			add_location(li10, file, 142, 12, 7176);
			add_location(li11, file, 143, 12, 7214);
			add_location(li12, file, 144, 12, 7252);
			add_location(li13, file, 145, 12, 7292);
			add_location(li14, file, 146, 12, 7324);
			add_location(li15, file, 147, 12, 7362);
			add_location(li16, file, 148, 12, 7394);
			add_location(li17, file, 149, 12, 7432);
			add_location(li18, file, 150, 12, 7464);
			add_location(li19, file, 151, 12, 7502);
			add_location(li20, file, 152, 12, 7534);
			ul2.className = "ma0 pl3 lh-copy";
			add_location(ul2, file, 137, 8, 6997);
			a3.href = "/guide/validators/callback";
			a3.className = "blue dim link";
			add_location(a3, file, 154, 79, 7653);
			span.className = "i";
			add_location(span, file, 154, 177, 7751);
			p7.className = "lh-copy";
			add_location(p7, file, 154, 8, 7582);
			add_location(h31, file, 157, 8, 7984);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 196);
			p8.className = "lh-copy";
			add_location(p8, file, 189, 8, 8682);
			section1.className = "mv5";
			add_location(section1, file, 187, 4, 8611);
			p9.className = "lh-copy";
			add_location(p9, file, 196, 8, 8956);
			section2.className = "mv5";
			add_location(section2, file, 193, 4, 8879);
			div.className = "flex";
			add_location(div, file, 235, 8, 10046);
			section3.className = "mv5";
			add_location(section3, file, 234, 4, 10016);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, h30);
			append(h30, t5);
			append(section0, t6);
			append(section0, p0);
			append(p0, sup0);
			append(sup0, t7);
			append(p0, t8);
			append(p0, a0);
			append(a0, t9);
			append(p0, t10);
			append(section0, t11);
			append(section0, table0);
			append(table0, tr0);
			append(tr0, th0);
			append(th0, t12);
			append(tr0, t13);
			append(tr0, th1);
			append(th1, t14);
			append(tr0, t15);
			append(tr0, th2);
			append(th2, t16);
			append(tr0, t17);
			append(tr0, th3);
			append(th3, t18);
			append(table0, t19);
			append(table0, tr1);
			append(tr1, td0);
			append(td0, code0);
			append(code0, t20);
			append(td0, sup1);
			append(sup1, t21);
			append(tr1, t22);
			append(tr1, td1);
			append(td1, code1);
			append(code1, t23);
			append(tr1, t24);
			append(tr1, td2);
			append(td2, t25);
			append(tr1, t26);
			append(tr1, td3);
			append(td3, t27);
			append(td3, code2);
			append(code2, t28);
			append(td3, t29);
			append(table0, t30);
			append(table0, tr2);
			append(tr2, td4);
			append(td4, code3);
			append(code3, t31);
			append(tr2, t32);
			append(tr2, td5);
			append(td5, code4);
			append(code4, t33);
			append(tr2, t34);
			append(tr2, td6);
			append(td6, t35);
			append(tr2, t36);
			append(tr2, td7);
			append(td7, t37);
			append(table0, t38);
			append(table0, tr3);
			append(tr3, td8);
			append(td8, code5);
			append(code5, t39);
			append(tr3, t40);
			append(tr3, td9);
			append(td9, code6);
			append(code6, t41);
			append(tr3, t42);
			append(tr3, td10);
			append(td10, t43);
			append(tr3, t44);
			append(tr3, td11);
			append(td11, t45);
			append(table0, t46);
			append(table0, tr4);
			append(tr4, td12);
			append(td12, code7);
			append(code7, t47);
			append(tr4, t48);
			append(tr4, td13);
			append(td13, code8);
			append(code8, t49);
			append(tr4, t50);
			append(tr4, td14);
			append(td14, t51);
			append(tr4, t52);
			append(tr4, td15);
			append(td15, t53);
			append(table0, t54);
			append(table0, tr5);
			append(tr5, td16);
			append(td16, code9);
			append(code9, t55);
			append(tr5, t56);
			append(tr5, td17);
			append(td17, code10);
			append(code10, t57);
			append(tr5, t58);
			append(tr5, td18);
			append(td18, t59);
			append(tr5, t60);
			append(tr5, td19);
			append(td19, p1);
			append(p1, t61);
			append(td19, t62);
			append(td19, ul0);
			append(ul0, li0);
			append(li0, t63);
			append(ul0, t64);
			append(ul0, li1);
			append(li1, t65);
			append(ul0, t66);
			append(ul0, li2);
			append(li2, t67);
			append(section0, t68);
			append(section0, p2);
			append(p2, t69);
			append(p2, code11);
			append(code11, t70);
			append(p2, t71);
			append(p2, code12);
			append(code12, t72);
			append(p2, t73);
			append(section0, t74);
			append(section0, ul1);
			append(ul1, li3);
			append(li3, t75);
			append(li3, code13);
			append(code13, t76);
			append(ul1, t77);
			append(ul1, li4);
			append(li4, t78);
			append(ul1, t79);
			append(ul1, li5);
			append(li5, t80);
			append(section0, t81);
			mount_component(tip0, section0, null);
			append(section0, t82);
			append(section0, p3);
			append(p3, t83);
			append(p3, code14);
			append(code14, t84);
			append(p3, t85);
			append(section0, t86);
			append(section0, table1);
			append(table1, tr6);
			append(tr6, th4);
			append(th4, t87);
			append(tr6, t88);
			append(tr6, th5);
			append(th5, t89);
			append(tr6, t90);
			append(tr6, th6);
			append(th6, t91);
			append(table1, t92);
			append(table1, tr7);
			append(tr7, td20);
			append(td20, t93);
			append(tr7, t94);
			append(tr7, td21);
			append(td21, t95);
			append(tr7, t96);
			append(tr7, td22);
			append(td22, t97);
			append(td22, code15);
			append(code15, t98);
			append(td22, t99);
			append(td22, br);
			append(td22, t100);
			append(table1, t101);
			append(table1, tr8);
			append(tr8, td23);
			append(td23, t102);
			append(tr8, t103);
			append(tr8, td24);
			append(td24, t104);
			append(tr8, t105);
			append(tr8, td25);
			append(td25, t106);
			append(table1, t107);
			append(table1, tr9);
			append(tr9, td26);
			append(td26, t108);
			append(tr9, t109);
			append(tr9, td27);
			append(td27, t110);
			append(tr9, t111);
			append(tr9, td28);
			append(td28, t112);
			append(section0, t113);
			append(section0, p4);
			append(p4, t114);
			append(p4, a1);
			append(a1, t115);
			append(p4, t116);
			append(section0, t117);
			append(section0, table2);
			append(table2, tr10);
			append(tr10, th7);
			append(th7, t118);
			append(tr10, t119);
			append(tr10, th8);
			append(th8, t120);
			append(tr10, t121);
			append(tr10, th9);
			append(th9, t122);
			append(table2, t123);
			append(table2, tr11);
			append(tr11, td29);
			append(td29, t124);
			append(tr11, t125);
			append(tr11, td30);
			append(td30, t126);
			append(tr11, t127);
			append(tr11, td31);
			append(td31, t128);
			append(table2, t129);
			append(table2, tr12);
			append(tr12, td32);
			append(td32, t130);
			append(tr12, t131);
			append(tr12, td33);
			append(td33, t132);
			append(tr12, t133);
			append(tr12, td34);
			append(td34, t134);
			append(table2, t135);
			append(table2, tr13);
			append(tr13, td35);
			append(td35, t136);
			append(tr13, t137);
			append(tr13, td36);
			append(td36, t138);
			append(tr13, t139);
			append(tr13, td37);
			append(td37, t140);
			append(table2, t141);
			append(table2, tr14);
			append(tr14, td38);
			append(td38, t142);
			append(tr14, t143);
			append(tr14, td39);
			append(td39, t144);
			append(tr14, t145);
			append(tr14, td40);
			append(td40, t146);
			append(table2, t147);
			append(table2, tr15);
			append(tr15, td41);
			append(td41, t148);
			append(tr15, t149);
			append(tr15, td42);
			append(td42, t150);
			append(tr15, t151);
			append(tr15, td43);
			append(td43, t152);
			append(table2, t153);
			append(table2, tr16);
			append(tr16, td44);
			append(td44, t154);
			append(tr16, t155);
			append(tr16, td45);
			append(td45, t156);
			append(tr16, t157);
			append(tr16, td46);
			append(td46, t158);
			append(table2, t159);
			append(table2, tr17);
			append(tr17, td47);
			append(td47, t160);
			append(tr17, t161);
			append(tr17, td48);
			append(td48, t162);
			append(tr17, t163);
			append(tr17, td49);
			append(td49, t164);
			append(section0, t165);
			append(section0, p5);
			append(p5, t166);
			append(p5, a2);
			append(a2, t167);
			append(p5, t168);
			append(section0, t169);
			append(section0, p6);
			append(p6, t170);
			append(section0, t171);
			append(section0, ul2);
			append(ul2, li6);
			append(li6, t172);
			append(ul2, t173);
			append(ul2, li7);
			append(li7, t174);
			append(ul2, t175);
			append(ul2, li8);
			append(li8, t176);
			append(ul2, t177);
			append(ul2, li9);
			append(li9, t178);
			append(ul2, t179);
			append(ul2, li10);
			append(li10, t180);
			append(ul2, t181);
			append(ul2, li11);
			append(li11, t182);
			append(ul2, t183);
			append(ul2, li12);
			append(li12, t184);
			append(ul2, t185);
			append(ul2, li13);
			append(li13, t186);
			append(ul2, t187);
			append(ul2, li14);
			append(li14, t188);
			append(ul2, t189);
			append(ul2, li15);
			append(li15, t190);
			append(ul2, t191);
			append(ul2, li16);
			append(li16, t192);
			append(ul2, t193);
			append(ul2, li17);
			append(li17, t194);
			append(ul2, t195);
			append(ul2, li18);
			append(li18, t196);
			append(ul2, t197);
			append(ul2, li19);
			append(li19, t198);
			append(ul2, t199);
			append(ul2, li20);
			append(li20, t200);
			append(section0, t201);
			append(section0, p7);
			append(p7, t202);
			append(p7, a3);
			append(a3, t203);
			append(p7, t204);
			append(p7, span);
			append(span, t205);
			append(p7, t206);
			append(section0, t207);
			mount_component(tip1, section0, null);
			append(section0, t208);
			append(section0, h31);
			append(h31, t209);
			append(section0, t210);
			mount_component(samplecode0, section0, null);
			insert(target, t211, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t212);
			append(section1, p8);
			append(p8, t213);
			append(section1, t214);
			mount_component(demo, section1, null);
			insert(target, t215, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t216);
			append(section2, p9);
			append(p9, t217);
			append(section2, t218);
			mount_component(samplecode1, section2, null);
			insert(target, t219, anchor);
			mount_component(examples, target, anchor);
			insert(target, t220, anchor);
			insert(target, section3, anchor);
			append(section3, div);
			mount_component(prevbutton, div, null);
			append(div, t221);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var tip0_changes = {};
			if (changed.$$scope) tip0_changes.$$scope = { changed, ctx };
			tip0.$set(tip0_changes);

			var tip1_changes = {};
			if (changed.$$scope) tip1_changes.$$scope = { changed, ctx };
			tip1.$set(tip1_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			tip0.$$.fragment.i(local);

			tip1.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			tip0.$$.fragment.o(local);
			tip1.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			tip0.$destroy();

			tip1.$destroy();

			samplecode0.$destroy();

			if (detaching) {
				detach(t211);
				detach(section1);
			}

			heading1.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t215);
				detach(section2);
			}

			heading2.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t219);
			}

			examples.$destroy(detaching);

			if (detaching) {
				detach(t220);
				detach(section3);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • date validator";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

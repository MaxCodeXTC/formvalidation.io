import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as ChangelogLayout } from './chunk.4a563e90.js';

/* src/routes/updates/v0.3.0/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/updates/v0.3.0/index.svelte";

// (10:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("New features");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "New features");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (21:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Improvements");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Improvements");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (38:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Bug fixes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Bug fixes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <ChangelogLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, ul0, li0, t5, a0, code0, t6, t7, t8, li1, t9, t10, li2, i, t11, t12, li3, t13, t14, li4, t15, code1, t16, t17, t18, section1, t19, ul1, li5, t20, a1, t21, t22, t23, li6, t24, t25, li7, t26, code2, t27, t28, t29, li8, t30, t31, li9, t32, t33, li10, t34, t35, li11, t36, a2, t37, t38, li12, t39, a3, t40, t41, li13, t42, t43, li14, t44, t45, li15, t46, t47, section2, t48, ul2, li16, t49, t50, li17, t51, a4, t52, t53, t54, li18, t55, a5, t56, t57, code3, t58, t59, li19, t60, a6, t61, t62, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Version 0.3.0");
			t1 = space();
			h2 = element("h2");
			t2 = text("Released 10 March 2014");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			ul0 = element("ul");
			li0 = element("li");
			t5 = text("Add ");
			a0 = element("a");
			code0 = element("code");
			t6 = text("choice");
			t7 = text(" validator");
			t8 = space();
			li1 = element("li");
			t9 = text("Add method to validate form manually");
			t10 = space();
			li2 = element("li");
			i = element("i");
			t11 = text(" Rewrite entirely using Deferred");
			t12 = space();
			li3 = element("li");
			t13 = text("Add optional feedback icons");
			t14 = space();
			li4 = element("li");
			t15 = text("Add ");
			code1 = element("code");
			t16 = text("resetForm()");
			t17 = text(" method");
			t18 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t19 = space();
			ul1 = element("ul");
			li5 = element("li");
			t20 = text("The ");
			a1 = element("a");
			t21 = text("remote validator");
			t22 = text(" supports dynamic data");
			t23 = space();
			li6 = element("li");
			t24 = text("Disable submit button on successful form submit");
			t25 = space();
			li7 = element("li");
			t26 = text("Add submit button to ");
			code2 = element("code");
			t27 = text("submitHandler()");
			t28 = text(" parameter");
			t29 = space();
			li8 = element("li");
			t30 = text("Don't validate disabled element");
			t31 = space();
			li9 = element("li");
			t32 = text("Add example for Rail field convention");
			t33 = space();
			li10 = element("li");
			t34 = text("Update the installation guide");
			t35 = space();
			li11 = element("li");
			t36 = text("Support ");
			a2 = element("a");
			t37 = text("Danish zip code");
			t38 = space();
			li12 = element("li");
			t39 = text("Support ");
			a3 = element("a");
			t40 = text("Sweden zip code");
			t41 = space();
			li13 = element("li");
			t42 = text("Support custom grid columns");
			t43 = space();
			li14 = element("li");
			t44 = text("Show all errors");
			t45 = space();
			li15 = element("li");
			t46 = text("Describe which version should be included in the Usage section");
			t47 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t48 = space();
			ul2 = element("ul");
			li16 = element("li");
			t49 = text("Submit after submit doesn't work");
			t50 = space();
			li17 = element("li");
			t51 = text("Fix ");
			a4 = element("a");
			t52 = text("notEmpty validator");
			t53 = text(" for radios and checkboxes");
			t54 = space();
			li18 = element("li");
			t55 = text("The plugin doesn't validate other fields if the ");
			a5 = element("a");
			t56 = text("remote validator");
			t57 = text(" returns ");
			code3 = element("code");
			t58 = text("true");
			t59 = space();
			li19 = element("li");
			t60 = text("The ");
			a6 = element("a");
			t61 = text("callback validator");
			t62 = text(" passes wrong parameter");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Version 0.3.0");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Released 10 March 2014");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			ul0 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t5 = claim_text(li0_nodes, "Add ");

			a0 = claim_element(li0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			code0 = claim_element(a0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t6 = claim_text(code0_nodes, "choice");
			code0_nodes.forEach(detach);
			t7 = claim_text(a0_nodes, " validator");
			a0_nodes.forEach(detach);
			li0_nodes.forEach(detach);
			t8 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t9 = claim_text(li1_nodes, "Add method to validate form manually");
			li1_nodes.forEach(detach);
			t10 = claim_text(ul0_nodes, "\n            ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			i = claim_element(li2_nodes, "I", { class: true }, false);
			var i_nodes = children(i);

			i_nodes.forEach(detach);
			t11 = claim_text(li2_nodes, " Rewrite entirely using Deferred");
			li2_nodes.forEach(detach);
			t12 = claim_text(ul0_nodes, "\n            ");

			li3 = claim_element(ul0_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t13 = claim_text(li3_nodes, "Add optional feedback icons");
			li3_nodes.forEach(detach);
			t14 = claim_text(ul0_nodes, "\n            ");

			li4 = claim_element(ul0_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			t15 = claim_text(li4_nodes, "Add ");

			code1 = claim_element(li4_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t16 = claim_text(code1_nodes, "resetForm()");
			code1_nodes.forEach(detach);
			t17 = claim_text(li4_nodes, " method");
			li4_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t18 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t19 = claim_text(section1_nodes, "\n        ");

			ul1 = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li5 = claim_element(ul1_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			t20 = claim_text(li5_nodes, "The ");

			a1 = claim_element(li5_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t21 = claim_text(a1_nodes, "remote validator");
			a1_nodes.forEach(detach);
			t22 = claim_text(li5_nodes, " supports dynamic data");
			li5_nodes.forEach(detach);
			t23 = claim_text(ul1_nodes, "\n            ");

			li6 = claim_element(ul1_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			t24 = claim_text(li6_nodes, "Disable submit button on successful form submit");
			li6_nodes.forEach(detach);
			t25 = claim_text(ul1_nodes, "\n            ");

			li7 = claim_element(ul1_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			t26 = claim_text(li7_nodes, "Add submit button to ");

			code2 = claim_element(li7_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t27 = claim_text(code2_nodes, "submitHandler()");
			code2_nodes.forEach(detach);
			t28 = claim_text(li7_nodes, " parameter");
			li7_nodes.forEach(detach);
			t29 = claim_text(ul1_nodes, "\n            ");

			li8 = claim_element(ul1_nodes, "LI", {}, false);
			var li8_nodes = children(li8);

			t30 = claim_text(li8_nodes, "Don't validate disabled element");
			li8_nodes.forEach(detach);
			t31 = claim_text(ul1_nodes, "\n            ");

			li9 = claim_element(ul1_nodes, "LI", {}, false);
			var li9_nodes = children(li9);

			t32 = claim_text(li9_nodes, "Add example for Rail field convention");
			li9_nodes.forEach(detach);
			t33 = claim_text(ul1_nodes, "\n            ");

			li10 = claim_element(ul1_nodes, "LI", {}, false);
			var li10_nodes = children(li10);

			t34 = claim_text(li10_nodes, "Update the installation guide");
			li10_nodes.forEach(detach);
			t35 = claim_text(ul1_nodes, "\n            ");

			li11 = claim_element(ul1_nodes, "LI", {}, false);
			var li11_nodes = children(li11);

			t36 = claim_text(li11_nodes, "Support ");

			a2 = claim_element(li11_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t37 = claim_text(a2_nodes, "Danish zip code");
			a2_nodes.forEach(detach);
			li11_nodes.forEach(detach);
			t38 = claim_text(ul1_nodes, "\n            ");

			li12 = claim_element(ul1_nodes, "LI", {}, false);
			var li12_nodes = children(li12);

			t39 = claim_text(li12_nodes, "Support ");

			a3 = claim_element(li12_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t40 = claim_text(a3_nodes, "Sweden zip code");
			a3_nodes.forEach(detach);
			li12_nodes.forEach(detach);
			t41 = claim_text(ul1_nodes, "\n            ");

			li13 = claim_element(ul1_nodes, "LI", {}, false);
			var li13_nodes = children(li13);

			t42 = claim_text(li13_nodes, "Support custom grid columns");
			li13_nodes.forEach(detach);
			t43 = claim_text(ul1_nodes, "\n            ");

			li14 = claim_element(ul1_nodes, "LI", {}, false);
			var li14_nodes = children(li14);

			t44 = claim_text(li14_nodes, "Show all errors");
			li14_nodes.forEach(detach);
			t45 = claim_text(ul1_nodes, "\n            ");

			li15 = claim_element(ul1_nodes, "LI", {}, false);
			var li15_nodes = children(li15);

			t46 = claim_text(li15_nodes, "Describe which version should be included in the Usage section");
			li15_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t47 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t48 = claim_text(section2_nodes, "\n        ");

			ul2 = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul2_nodes = children(ul2);

			li16 = claim_element(ul2_nodes, "LI", {}, false);
			var li16_nodes = children(li16);

			t49 = claim_text(li16_nodes, "Submit after submit doesn't work");
			li16_nodes.forEach(detach);
			t50 = claim_text(ul2_nodes, "\n            ");

			li17 = claim_element(ul2_nodes, "LI", {}, false);
			var li17_nodes = children(li17);

			t51 = claim_text(li17_nodes, "Fix ");

			a4 = claim_element(li17_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t52 = claim_text(a4_nodes, "notEmpty validator");
			a4_nodes.forEach(detach);
			t53 = claim_text(li17_nodes, " for radios and checkboxes");
			li17_nodes.forEach(detach);
			t54 = claim_text(ul2_nodes, "\n            ");

			li18 = claim_element(ul2_nodes, "LI", {}, false);
			var li18_nodes = children(li18);

			t55 = claim_text(li18_nodes, "The plugin doesn't validate other fields if the ");

			a5 = claim_element(li18_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t56 = claim_text(a5_nodes, "remote validator");
			a5_nodes.forEach(detach);
			t57 = claim_text(li18_nodes, " returns ");

			code3 = claim_element(li18_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t58 = claim_text(code3_nodes, "true");
			code3_nodes.forEach(detach);
			li18_nodes.forEach(detach);
			t59 = claim_text(ul2_nodes, "\n            ");

			li19 = claim_element(ul2_nodes, "LI", {}, false);
			var li19_nodes = children(li19);

			t60 = claim_text(li19_nodes, "The ");

			a6 = claim_element(li19_nodes, "A", { href: true, class: true }, false);
			var a6_nodes = children(a6);

			t61 = claim_text(a6_nodes, "callback validator");
			a6_nodes.forEach(detach);
			t62 = claim_text(li19_nodes, " passes wrong parameter");
			li19_nodes.forEach(detach);
			ul2_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 92);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 143);
			add_location(code0, file, 11, 77, 378);
			a0.href = "/guide/validators/choice";
			a0.className = "blue dim link";
			add_location(a0, file, 11, 20, 321);
			add_location(li0, file, 11, 12, 313);
			add_location(li1, file, 12, 12, 429);
			i.className = "fa fa-star";
			add_location(i, file, 13, 16, 491);
			add_location(li2, file, 13, 12, 487);
			add_location(li3, file, 14, 12, 567);
			add_location(code1, file, 15, 20, 624);
			add_location(li4, file, 15, 12, 616);
			ul0.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul0, file, 10, 8, 268);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 198);
			a1.href = "/guide/validators/remote";
			a1.className = "blue dim link";
			add_location(a1, file, 22, 20, 818);
			add_location(li5, file, 22, 12, 810);
			add_location(li6, file, 23, 12, 935);
			add_location(code2, file, 24, 37, 1029);
			add_location(li7, file, 24, 12, 1004);
			add_location(li8, file, 25, 12, 1085);
			add_location(li9, file, 26, 12, 1138);
			add_location(li10, file, 27, 12, 1197);
			a2.href = "/guide/validators/zip-code";
			a2.className = "blue dim link";
			add_location(a2, file, 28, 24, 1260);
			add_location(li11, file, 28, 12, 1248);
			a3.href = "/guide/validators/zip-code";
			a3.className = "blue dim link";
			add_location(a3, file, 29, 24, 1368);
			add_location(li12, file, 29, 12, 1356);
			add_location(li13, file, 30, 12, 1464);
			add_location(li14, file, 31, 12, 1513);
			add_location(li15, file, 32, 12, 1550);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 21, 8, 765);
			section1.className = "mv5";
			add_location(section1, file, 19, 4, 695);
			add_location(li16, file, 39, 12, 1768);
			a4.href = "/guide/validators/not-empty";
			a4.className = "blue dim link";
			add_location(a4, file, 40, 20, 1830);
			add_location(li17, file, 40, 12, 1822);
			a5.href = "/guide/validators/remote";
			a5.className = "blue dim link";
			add_location(a5, file, 41, 64, 2008);
			add_location(code3, file, 41, 150, 2094);
			add_location(li18, file, 41, 12, 1956);
			a6.href = "/guide/validators/callback";
			a6.className = "blue dim link";
			add_location(a6, file, 42, 20, 2137);
			add_location(li19, file, 42, 12, 2129);
			ul2.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul2, file, 38, 8, 1723);
			section2.className = "mv5";
			add_location(section2, file, 36, 4, 1656);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, ul0);
			append(ul0, li0);
			append(li0, t5);
			append(li0, a0);
			append(a0, code0);
			append(code0, t6);
			append(a0, t7);
			append(ul0, t8);
			append(ul0, li1);
			append(li1, t9);
			append(ul0, t10);
			append(ul0, li2);
			append(li2, i);
			append(li2, t11);
			append(ul0, t12);
			append(ul0, li3);
			append(li3, t13);
			append(ul0, t14);
			append(ul0, li4);
			append(li4, t15);
			append(li4, code1);
			append(code1, t16);
			append(li4, t17);
			insert(target, t18, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t19);
			append(section1, ul1);
			append(ul1, li5);
			append(li5, t20);
			append(li5, a1);
			append(a1, t21);
			append(li5, t22);
			append(ul1, t23);
			append(ul1, li6);
			append(li6, t24);
			append(ul1, t25);
			append(ul1, li7);
			append(li7, t26);
			append(li7, code2);
			append(code2, t27);
			append(li7, t28);
			append(ul1, t29);
			append(ul1, li8);
			append(li8, t30);
			append(ul1, t31);
			append(ul1, li9);
			append(li9, t32);
			append(ul1, t33);
			append(ul1, li10);
			append(li10, t34);
			append(ul1, t35);
			append(ul1, li11);
			append(li11, t36);
			append(li11, a2);
			append(a2, t37);
			append(ul1, t38);
			append(ul1, li12);
			append(li12, t39);
			append(li12, a3);
			append(a3, t40);
			append(ul1, t41);
			append(ul1, li13);
			append(li13, t42);
			append(ul1, t43);
			append(ul1, li14);
			append(li14, t44);
			append(ul1, t45);
			append(ul1, li15);
			append(li15, t46);
			insert(target, t47, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t48);
			append(section2, ul2);
			append(ul2, li16);
			append(li16, t49);
			append(ul2, t50);
			append(ul2, li17);
			append(li17, t51);
			append(li17, a4);
			append(a4, t52);
			append(li17, t53);
			append(ul2, t54);
			append(ul2, li18);
			append(li18, t55);
			append(li18, a5);
			append(a5, t56);
			append(li18, t57);
			append(li18, code3);
			append(code3, t58);
			append(ul2, t59);
			append(ul2, li19);
			append(li19, t60);
			append(li19, a6);
			append(a6, t61);
			append(li19, t62);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			if (detaching) {
				detach(t18);
				detach(section1);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t47);
				detach(section2);
			}

			heading2.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var changeloglayout = new ChangelogLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			changeloglayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			changeloglayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • v0.3.0";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(changeloglayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var changeloglayout_changes = {};
			if (changed.$$scope) changeloglayout_changes.$$scope = { changed, ctx };
			changeloglayout.$set(changeloglayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			changeloglayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			changeloglayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			changeloglayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

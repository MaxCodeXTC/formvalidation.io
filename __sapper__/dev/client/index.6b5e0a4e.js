import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';

/* src/routes/guide/examples/adjusting-icon-position/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/adjusting-icon-position/index.svelte";

// (47:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Hiding icon for particular field");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Hiding icon for particular field");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section0, p0, t2, t3, t4, p1, t5, code0, t6, t7, code1, t8, t9, t10, p2, t11, a0, t12, t13, a1, t14, t15, t16, div, t17, t18, section1, t19, p3, t20, code2, t21, t22, t23, t24, current;

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
// FIELD_NAME is the name of field
// CSS_CLASSES is the list of CSS classes defined in the valid, invalid, validating options    
<i data-field="FIELD_NAME" class="fv-plugins-icon CSS_CLASSES"></i>
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<style>
// fv-plugins-bootstrap is CSS class that will be added to the form automatically
// when the Bootstrap plugin is used.
// You might need to change that if your form is made in other CSS frameworks

.fv-plugins-bootstrap .form-group.inputGroupContainer .fv-plugins-icon,
.fv-plugins-bootstrap .form-group.selectContainer .fv-plugins-icon {
    // Customize the icon's position
    right: -20px;
}
</style>

<div class="form-group row inputGroupContainer">
    <!-- Input group element -->
    ...
</div>

<div class="form-group row selectContainer">
    <!-- Select element -->
    ...
</div>
` },
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/examples/adjusting-icon-position",
		frameworks: ['bootstrap']
	},
		$$inline: true
	});

	var heading = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "html", code: `
<style>
// Hide the icon for phoneNumber field
.fv-plugins-icon[data-field="phoneNumber"] {
    display: none;
}    
</style>

<input name="phoneNumber" />
` },
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Adjusting icon position',
        'Showing icons in custom area',
        'Using FontAwesome icons',
        'Using Glyphicons icons',
        'Using Material Design icons',
        'Using Semantic UI framework icons',
        'Using Spectre framework icons',
        'Using SVG icons',
    ] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Adjusting icon position");
			t1 = space();
			section0 = element("section");
			p0 = element("p");
			t2 = text("The Icon plugin generates the following markup for icon:");
			t3 = space();
			samplecode0.$$.fragment.c();
			t4 = space();
			p1 = element("p");
			t5 = text("In some cases, the icons aren't shown properly. Understanding the markup of icon and customizing the value of ");
			code0 = element("code");
			t6 = text("top");
			t7 = text(" and ");
			code1 = element("code");
			t8 = text("right");
			t9 = text(" properties for icon's class, you can adjust the feedback icon to deserved position.");
			t10 = space();
			p2 = element("p");
			t11 = text("The following example demonstrates this technique when using the Bootstrap's ");
			a0 = element("a");
			t12 = text("Input Group");
			t13 = text(" with the ");
			a1 = element("a");
			t14 = text("Bootstrap");
			t15 = text(" plugin:");
			t16 = space();
			div = element("div");
			samplecode1.$$.fragment.c();
			t17 = space();
			demo.$$.fragment.c();
			t18 = space();
			section1 = element("section");
			heading.$$.fragment.c();
			t19 = space();
			p3 = element("p");
			t20 = text("Since each icon element for given field has ");
			code2 = element("code");
			t21 = text("data-field=\"FIELD_NAME\"");
			t22 = text(" attribute, we can easily hide the icon by adding one more CSS property as:");
			t23 = space();
			samplecode2.$$.fragment.c();
			t24 = space();
			examples.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Adjusting icon position");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    \n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "The Icon plugin generates the following markup for icon:");
			p0_nodes.forEach(detach);
			t3 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t5 = claim_text(p1_nodes, "In some cases, the icons aren't shown properly. Understanding the markup of icon and customizing the value of ");

			code0 = claim_element(p1_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t6 = claim_text(code0_nodes, "top");
			code0_nodes.forEach(detach);
			t7 = claim_text(p1_nodes, " and ");

			code1 = claim_element(p1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t8 = claim_text(code1_nodes, "right");
			code1_nodes.forEach(detach);
			t9 = claim_text(p1_nodes, " properties for icon's class, you can adjust the feedback icon to deserved position.");
			p1_nodes.forEach(detach);
			t10 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t11 = claim_text(p2_nodes, "The following example demonstrates this technique when using the Bootstrap's ");

			a0 = claim_element(p2_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t12 = claim_text(a0_nodes, "Input Group");
			a0_nodes.forEach(detach);
			t13 = claim_text(p2_nodes, " with the ");

			a1 = claim_element(p2_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t14 = claim_text(a1_nodes, "Bootstrap");
			a1_nodes.forEach(detach);
			t15 = claim_text(p2_nodes, " plugin:");
			p2_nodes.forEach(detach);
			t16 = claim_text(section0_nodes, "\n\n        ");

			div = claim_element(section0_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			samplecode1.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			t17 = claim_text(section0_nodes, "\n        ");
			demo.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t18 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading.$$.fragment.l(section1_nodes);
			t19 = claim_text(section1_nodes, "\n\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t20 = claim_text(p3_nodes, "Since each icon element for given field has ");

			code2 = claim_element(p3_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t21 = claim_text(code2_nodes, "data-field=\"FIELD_NAME\"");
			code2_nodes.forEach(detach);
			t22 = claim_text(p3_nodes, " attribute, we can easily hide the icon by adding one more CSS property as:");
			p3_nodes.forEach(detach);
			t23 = claim_text(section1_nodes, "\n");
			samplecode2.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t24 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 105);
			p0.className = "lh-copy";
			add_location(p0, file, 8, 8, 196);
			add_location(code0, file, 14, 137, 650);
			add_location(code1, file, 14, 158, 671);
			p1.className = "lh-copy";
			add_location(p1, file, 14, 8, 521);
			a0.href = "http://getbootstrap.com/docs/4.1/components/input-group";
			a0.className = "blue dim link";
			add_location(a0, file, 15, 104, 882);
			a1.href = "/guide/plugins/bootstrap";
			a1.className = "blue dim link";
			add_location(a1, file, 15, 217, 995);
			p2.className = "lh-copy";
			add_location(p2, file, 15, 8, 786);
			div.className = "mb4";
			add_location(div, file, 17, 8, 1087);
			section0.className = "mv5";
			add_location(section0, file, 7, 4, 166);
			add_location(code2, file, 48, 71, 2026);
			p3.className = "lh-copy";
			add_location(p3, file, 48, 8, 1963);
			section1.className = "mv5";
			add_location(section1, file, 45, 4, 1872);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section0, anchor);
			append(section0, p0);
			append(p0, t2);
			append(section0, t3);
			mount_component(samplecode0, section0, null);
			append(section0, t4);
			append(section0, p1);
			append(p1, t5);
			append(p1, code0);
			append(code0, t6);
			append(p1, t7);
			append(p1, code1);
			append(code1, t8);
			append(p1, t9);
			append(section0, t10);
			append(section0, p2);
			append(p2, t11);
			append(p2, a0);
			append(a0, t12);
			append(p2, t13);
			append(p2, a1);
			append(a1, t14);
			append(p2, t15);
			append(section0, t16);
			append(section0, div);
			mount_component(samplecode1, div, null);
			append(section0, t17);
			mount_component(demo, section0, null);
			insert(target, t18, anchor);
			insert(target, section1, anchor);
			mount_component(heading, section1, null);
			append(section1, t19);
			append(section1, p3);
			append(p3, t20);
			append(p3, code2);
			append(code2, t21);
			append(p3, t22);
			append(section1, t23);
			mount_component(samplecode2, section1, null);
			insert(target, t24, anchor);
			mount_component(examples, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading_changes = {};
			if (changed.$$scope) heading_changes.$$scope = { changed, ctx };
			heading.$set(heading_changes);
		},

		i: function intro(local) {
			if (current) return;
			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			heading.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			heading.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section0);
			}

			samplecode0.$destroy();

			samplecode1.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t18);
				detach(section1);
			}

			heading.$destroy();

			samplecode2.$destroy();

			if (detaching) {
				detach(t24);
			}

			examples.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Adjusting icon position";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';

/* src/routes/guide/getting-started/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/getting-started/index.svelte";

// (70:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Production vs development mode");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Production vs development mode");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (77:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Default vs full version");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Default vs full version");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (89:12) <PrevButton target="/guide">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Guide");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Guide");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (90:12) <NextButton target="/guide/getting-started/usage">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Usage");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Usage");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, p0, t4, a0, t5, t6, t7, t8, p1, t9, t10, ul0, li0, t11, code0, t12, t13, code1, t14, t15, t16, li1, t17, code2, t18, t19, t20, li2, t21, code3, t22, t23, t24, section1, t25, p2, t26, code4, t27, t28, code5, t29, t30, code6, t31, t32, code7, t33, t34, t35, p3, t36, code8, t37, t38, t39, p4, t40, code9, t41, t42, t43, section2, t44, p5, t45, code10, t46, t47, t48, ul1, li3, code11, t49, t50, t51, li4, code12, t52, t53, t54, p6, t55, code13, t56, t57, t58, p7, t59, a1, t60, t61, t62, section3, div, t63, current;

	var samplecode = new SampleCode({
		props: { lang: "html", code: `
formvalidation/
|
├── dist            // Consists of generated files from src
|   |
│   ├── css         // Can be used in browser
│   │   └── formValidation(.min).css
|   |
|   ├── es6         // Generated from src/js and can be used with ES6 module
│   │   ├── ...
│   │   ├── core
│   │   ├── locales
│   │   ├── plugins
│   │   ├── validators
│   │   └── index.js
|   |
│   └── js          // Can be used in browser
|       |
│       ├── locales     // The translation packages
│       │   ├── de_DE(.min).js
│       │   ├── en_US(.min).js
│       │   └── ...
|       |
│       ├── plugins
│       │   ├── Bootstrap(.min).js
│       │   ├── Bootstrap3(.min).js
│       │   └── ...
|       |
│       ├── FormValidation.full(.min).js
│       └── FormValidation(.min).js
│
└── src             // Source files
    |
    ├── css         // CSS source files made in SCSS
    │   ├── plugins
    │   │   ├── _bootstrap.scss
    │   │   ├── _bootstrap3.scss
    │   │   └── ...
    │   │
    │   ├── _core.scss
    │   └── index.scss
    │
    └── js          // JavaScript source files made in Typescript
        ├── ...
        ├── core
        ├── locales
        ├── plugins
        ├── validators
        └── index.ts
` },
		$$inline: true
	});

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/getting-started/usage",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Overview");
			t1 = space();
			h2 = element("h2");
			t2 = text("Getting used with FormValidation");
			t3 = space();
			section0 = element("section");
			p0 = element("p");
			t4 = text("The ");
			a0 = element("a");
			t5 = text("FormValidation package");
			t6 = text(" consists of the following files:");
			t7 = space();
			samplecode.$$.fragment.c();
			t8 = space();
			p1 = element("p");
			t9 = text("If you don't know which files should be used in your application, then here is the guideline:");
			t10 = space();
			ul0 = element("ul");
			li0 = element("li");
			t11 = text("If you want to use the library in browsers, then upload the ");
			code0 = element("code");
			t12 = text("dist/css");
			t13 = text(" and ");
			code1 = element("code");
			t14 = text("dist/js");
			t15 = text(" folders to the server.");
			t16 = space();
			li1 = element("li");
			t17 = text("If you want to use the library with ES6 module, then pick the ");
			code2 = element("code");
			t18 = text("dist/es6");
			t19 = text(" folders.");
			t20 = space();
			li2 = element("li");
			t21 = text("Lastly, if you are curious about how the library is developed, then the source folder ");
			code3 = element("code");
			t22 = text("src");
			t23 = text(" is place you will look at.");
			t24 = space();
			section1 = element("section");
			heading0.$$.fragment.c();
			t25 = space();
			p2 = element("p");
			t26 = text("Each file in the ");
			code4 = element("code");
			t27 = text("dist/css");
			t28 = text(" and ");
			code5 = element("code");
			t29 = text("dist/js");
			t30 = text(" folders has two versions: the normal code in the ");
			code6 = element("code");
			t31 = text(".css, .js");
			t32 = text(" files, and the minified code in the ");
			code7 = element("code");
			t33 = text(".min.css, .min.js");
			t34 = text(" files.");
			t35 = space();
			p3 = element("p");
			t36 = text("In order to reduce the page loading time and enhance the user experience when visiting your site, you should use the ");
			code8 = element("code");
			t37 = text(".min.css, .min.js");
			t38 = text(" files in the production website.");
			t39 = space();
			p4 = element("p");
			t40 = text("Meanwhile, in the development mode, you should use the normal files without ");
			code9 = element("code");
			t41 = text(".min");
			t42 = text(" part to debug the code more easy.");
			t43 = space();
			section2 = element("section");
			heading1.$$.fragment.c();
			t44 = space();
			p5 = element("p");
			t45 = text("The ");
			code10 = element("code");
			t46 = text("dist/js");
			t47 = text(" folder contains two verions of the core library:");
			t48 = space();
			ul1 = element("ul");
			li3 = element("li");
			code11 = element("code");
			t49 = text("FormValidation(.min).js");
			t50 = text(": Contains most popular validators");
			t51 = space();
			li4 = element("li");
			code12 = element("code");
			t52 = text("FormValidation.full(.min).js");
			t53 = text(": Contains all validators");
			t54 = space();
			p6 = element("p");
			t55 = text("In most of the times, you only need to include the ");
			code13 = element("code");
			t56 = text("FormValidation(.min).js");
			t57 = text(" file to your page. Since it is smaller than the full version in term of the file size, it will reduce the page loading time.");
			t58 = space();
			p7 = element("p");
			t59 = text("Take a look at the ");
			a1 = element("a");
			t60 = text("Validators");
			t61 = text(" page to see which validator belongs to the default and full versions.");
			t62 = space();
			section3 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t63 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Overview");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Getting used with FormValidation");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t4 = claim_text(p0_nodes, "The ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t5 = claim_text(a0_nodes, "FormValidation package");
			a0_nodes.forEach(detach);
			t6 = claim_text(p0_nodes, " consists of the following files:");
			p0_nodes.forEach(detach);
			t7 = claim_text(section0_nodes, "\n");
			samplecode.$$.fragment.l(section0_nodes);
			t8 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t9 = claim_text(p1_nodes, "If you don't know which files should be used in your application, then here is the guideline:");
			p1_nodes.forEach(detach);
			t10 = claim_text(section0_nodes, "\n        ");

			ul0 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t11 = claim_text(li0_nodes, "If you want to use the library in browsers, then upload the ");

			code0 = claim_element(li0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t12 = claim_text(code0_nodes, "dist/css");
			code0_nodes.forEach(detach);
			t13 = claim_text(li0_nodes, " and ");

			code1 = claim_element(li0_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t14 = claim_text(code1_nodes, "dist/js");
			code1_nodes.forEach(detach);
			t15 = claim_text(li0_nodes, " folders to the server.");
			li0_nodes.forEach(detach);
			t16 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t17 = claim_text(li1_nodes, "If you want to use the library with ES6 module, then pick the ");

			code2 = claim_element(li1_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t18 = claim_text(code2_nodes, "dist/es6");
			code2_nodes.forEach(detach);
			t19 = claim_text(li1_nodes, " folders.");
			li1_nodes.forEach(detach);
			t20 = claim_text(ul0_nodes, "\n            ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t21 = claim_text(li2_nodes, "Lastly, if you are curious about how the library is developed, then the source folder ");

			code3 = claim_element(li2_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t22 = claim_text(code3_nodes, "src");
			code3_nodes.forEach(detach);
			t23 = claim_text(li2_nodes, " is place you will look at.");
			li2_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t24 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading0.$$.fragment.l(section1_nodes);
			t25 = claim_text(section1_nodes, "\n        ");

			p2 = claim_element(section1_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t26 = claim_text(p2_nodes, "Each file in the ");

			code4 = claim_element(p2_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t27 = claim_text(code4_nodes, "dist/css");
			code4_nodes.forEach(detach);
			t28 = claim_text(p2_nodes, " and ");

			code5 = claim_element(p2_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t29 = claim_text(code5_nodes, "dist/js");
			code5_nodes.forEach(detach);
			t30 = claim_text(p2_nodes, " folders has two versions: the normal code in the ");

			code6 = claim_element(p2_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t31 = claim_text(code6_nodes, ".css, .js");
			code6_nodes.forEach(detach);
			t32 = claim_text(p2_nodes, " files, and the minified code in the ");

			code7 = claim_element(p2_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t33 = claim_text(code7_nodes, ".min.css, .min.js");
			code7_nodes.forEach(detach);
			t34 = claim_text(p2_nodes, " files.");
			p2_nodes.forEach(detach);
			t35 = claim_text(section1_nodes, "\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t36 = claim_text(p3_nodes, "In order to reduce the page loading time and enhance the user experience when visiting your site, you should use the ");

			code8 = claim_element(p3_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t37 = claim_text(code8_nodes, ".min.css, .min.js");
			code8_nodes.forEach(detach);
			t38 = claim_text(p3_nodes, " files in the production website.");
			p3_nodes.forEach(detach);
			t39 = claim_text(section1_nodes, "\n        ");

			p4 = claim_element(section1_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t40 = claim_text(p4_nodes, "Meanwhile, in the development mode, you should use the normal files without ");

			code9 = claim_element(p4_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t41 = claim_text(code9_nodes, ".min");
			code9_nodes.forEach(detach);
			t42 = claim_text(p4_nodes, " part to debug the code more easy.");
			p4_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t43 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading1.$$.fragment.l(section2_nodes);
			t44 = claim_text(section2_nodes, "\n        ");

			p5 = claim_element(section2_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t45 = claim_text(p5_nodes, "The ");

			code10 = claim_element(p5_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t46 = claim_text(code10_nodes, "dist/js");
			code10_nodes.forEach(detach);
			t47 = claim_text(p5_nodes, " folder contains two verions of the core library:");
			p5_nodes.forEach(detach);
			t48 = claim_text(section2_nodes, "\n        ");

			ul1 = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li3 = claim_element(ul1_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			code11 = claim_element(li3_nodes, "CODE", {}, false);
			var code11_nodes = children(code11);

			t49 = claim_text(code11_nodes, "FormValidation(.min).js");
			code11_nodes.forEach(detach);
			t50 = claim_text(li3_nodes, ": Contains most popular validators");
			li3_nodes.forEach(detach);
			t51 = claim_text(ul1_nodes, "\n            ");

			li4 = claim_element(ul1_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			code12 = claim_element(li4_nodes, "CODE", {}, false);
			var code12_nodes = children(code12);

			t52 = claim_text(code12_nodes, "FormValidation.full(.min).js");
			code12_nodes.forEach(detach);
			t53 = claim_text(li4_nodes, ": Contains all validators");
			li4_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			t54 = claim_text(section2_nodes, "\n        ");

			p6 = claim_element(section2_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t55 = claim_text(p6_nodes, "In most of the times, you only need to include the ");

			code13 = claim_element(p6_nodes, "CODE", {}, false);
			var code13_nodes = children(code13);

			t56 = claim_text(code13_nodes, "FormValidation(.min).js");
			code13_nodes.forEach(detach);
			t57 = claim_text(p6_nodes, " file to your page. Since it is smaller than the full version in term of the file size, it will reduce the page loading time.");
			p6_nodes.forEach(detach);
			t58 = claim_text(section2_nodes, "\n        ");

			p7 = claim_element(section2_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t59 = claim_text(p7_nodes, "Take a look at the ");

			a1 = claim_element(p7_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t60 = claim_text(a1_nodes, "Validators");
			a1_nodes.forEach(detach);
			t61 = claim_text(p7_nodes, " page to see which validator belongs to the default and full versions.");
			p7_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			t62 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			div = claim_element(section3_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t63 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 97);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 143);
			a0.href = "/download";
			a0.className = "blue dim link";
			add_location(a0, file, 9, 31, 261);
			p0.className = "lh-copy";
			add_location(p0, file, 9, 8, 238);
			p1.className = "lh-copy";
			add_location(p1, file, 60, 8, 1631);
			add_location(code0, file, 62, 76, 1861);
			add_location(code1, file, 62, 102, 1887);
			add_location(li0, file, 62, 12, 1797);
			add_location(code2, file, 63, 78, 2014);
			add_location(li1, file, 63, 12, 1948);
			add_location(code3, file, 64, 102, 2152);
			add_location(li2, file, 64, 12, 2062);
			ul0.className = "ma0 pl3 lh-copy";
			add_location(ul0, file, 61, 8, 1756);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 208);
			add_location(code4, file, 70, 44, 2359);
			add_location(code5, file, 70, 70, 2385);
			add_location(code6, file, 70, 140, 2455);
			add_location(code7, file, 70, 199, 2514);
			p2.className = "lh-copy";
			add_location(p2, file, 70, 8, 2323);
			add_location(code8, file, 71, 144, 2700);
			p3.className = "lh-copy";
			add_location(p3, file, 71, 8, 2564);
			add_location(code9, file, 72, 103, 2871);
			p4.className = "lh-copy";
			add_location(p4, file, 72, 8, 2776);
			section1.className = "mv5";
			add_location(section1, file, 68, 4, 2235);
			add_location(code10, file, 77, 31, 3051);
			p5.className = "lh-copy";
			add_location(p5, file, 77, 8, 3028);
			add_location(code11, file, 79, 16, 3178);
			add_location(li3, file, 79, 12, 3174);
			add_location(code12, file, 80, 16, 3270);
			add_location(li4, file, 80, 12, 3266);
			ul1.className = "ma0 pl3 lh-copy";
			add_location(ul1, file, 78, 8, 3133);
			add_location(code13, file, 82, 78, 3434);
			p6.className = "lh-copy";
			add_location(p6, file, 82, 8, 3364);
			a1.href = "/guide/validators";
			a1.className = "blue dim link";
			add_location(a1, file, 83, 46, 3646);
			p7.className = "lh-copy";
			add_location(p7, file, 83, 8, 3608);
			section2.className = "mv5";
			add_location(section2, file, 75, 4, 2947);
			div.className = "flex";
			add_location(div, file, 87, 8, 3835);
			section3.className = "mv5";
			add_location(section3, file, 86, 4, 3805);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			append(section0, p0);
			append(p0, t4);
			append(p0, a0);
			append(a0, t5);
			append(p0, t6);
			append(section0, t7);
			mount_component(samplecode, section0, null);
			append(section0, t8);
			append(section0, p1);
			append(p1, t9);
			append(section0, t10);
			append(section0, ul0);
			append(ul0, li0);
			append(li0, t11);
			append(li0, code0);
			append(code0, t12);
			append(li0, t13);
			append(li0, code1);
			append(code1, t14);
			append(li0, t15);
			append(ul0, t16);
			append(ul0, li1);
			append(li1, t17);
			append(li1, code2);
			append(code2, t18);
			append(li1, t19);
			append(ul0, t20);
			append(ul0, li2);
			append(li2, t21);
			append(li2, code3);
			append(code3, t22);
			append(li2, t23);
			insert(target, t24, anchor);
			insert(target, section1, anchor);
			mount_component(heading0, section1, null);
			append(section1, t25);
			append(section1, p2);
			append(p2, t26);
			append(p2, code4);
			append(code4, t27);
			append(p2, t28);
			append(p2, code5);
			append(code5, t29);
			append(p2, t30);
			append(p2, code6);
			append(code6, t31);
			append(p2, t32);
			append(p2, code7);
			append(code7, t33);
			append(p2, t34);
			append(section1, t35);
			append(section1, p3);
			append(p3, t36);
			append(p3, code8);
			append(code8, t37);
			append(p3, t38);
			append(section1, t39);
			append(section1, p4);
			append(p4, t40);
			append(p4, code9);
			append(code9, t41);
			append(p4, t42);
			insert(target, t43, anchor);
			insert(target, section2, anchor);
			mount_component(heading1, section2, null);
			append(section2, t44);
			append(section2, p5);
			append(p5, t45);
			append(p5, code10);
			append(code10, t46);
			append(p5, t47);
			append(section2, t48);
			append(section2, ul1);
			append(ul1, li3);
			append(li3, code11);
			append(code11, t49);
			append(li3, t50);
			append(ul1, t51);
			append(ul1, li4);
			append(li4, code12);
			append(code12, t52);
			append(li4, t53);
			append(section2, t54);
			append(section2, p6);
			append(p6, t55);
			append(p6, code13);
			append(code13, t56);
			append(p6, t57);
			append(section2, t58);
			append(section2, p7);
			append(p7, t59);
			append(p7, a1);
			append(a1, t60);
			append(p7, t61);
			insert(target, t62, anchor);
			insert(target, section3, anchor);
			append(section3, div);
			mount_component(prevbutton, div, null);
			append(div, t63);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			samplecode.$$.fragment.i(local);

			heading0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode.$$.fragment.o(local);
			heading0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			samplecode.$destroy();

			if (detaching) {
				detach(t24);
				detach(section1);
			}

			heading0.$destroy();

			if (detaching) {
				detach(t43);
				detach(section2);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t62);
				detach(section3);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Getting started";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

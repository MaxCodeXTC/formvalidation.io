import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';

/* src/routes/guide/plugins/semantic/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/plugins/semantic/index.svelte";

// (10:8) <Heading>
function create_default_slot_7(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Usage");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Usage");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (55:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Horizontal form");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Horizontal form");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (60:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Stacked form");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Stacked form");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (82:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Multiple fields on the same row");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Multiple fields on the same row");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (112:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changelog");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changelog");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (121:12) <PrevButton target="/guide/plugins/recaptcha3">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Recaptcha3 plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Recaptcha3 plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (122:12) <NextButton target="/guide/plugins/sequence">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Sequence plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Sequence plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, a, t3, t4, t5, section0, t6, p0, t7, t8, t9, p1, t10, t11, ul0, li0, t12, code0, t13, t14, t15, li1, code1, t16, t17, code2, t18, t19, t20, p2, t21, t22, section1, t23, t24, section2, t25, p3, t26, t27, p4, t28, code3, t29, t30, code4, t31, t32, t33, p5, t34, code5, t35, t36, t37, div0, t38, t39, section3, t40, p6, t41, span, t42, t43, code6, t44, t45, t46, p7, t47, code7, t48, t49, code8, t50, t51, code9, t52, t53, code10, t54, t55, code11, t56, t57, code12, t58, t59, code13, t60, t61, t62, div1, t63, t64, section4, t65, ul1, li2, t66, t67, li3, t68, t69, section5, div2, t70, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css">
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="demoForm" method="POST">
        ...
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>    
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/plugins/Semantic.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                semantic: new FormValidation.plugins.Semantic(),
                ...
            },
        }
    );
});
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo0 = new Demo({
		props: {
		prefix: "/guide/plugins/semantic/horizontal-form",
		frameworks: ['semantic']
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
semantic: new FormValidation.plugins.Semantic({
    rowSelector: function(field, ele) {
        // field is the field name
        // ele is the field element
        return '.field';
    }

    // Or you can just simply pass it as a string:
    // rowSelector: '.field',
}),
` },
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/plugins/semantic/stacked-form",
		frameworks: ['semantic']
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "javascript", code: `
semantic: new FormValidation.plugins.Semantic({
    rowSelector: function(field, ele) {
        // field is the field name
        // ele is the field element
        switch (field) {
            case 'firstName':
            case 'lastName':
                return '.five.field';
            
            case 'city':
            case 'state':
            case 'zipcode':
                return '.four.field';
            
            default:
                return '.fields';
        }
    }
}),
` },
		$$inline: true
	});

	var demo2 = new Demo({
		props: {
		prefix: "/guide/plugins/semantic/multiple-fields",
		frameworks: ['semantic']
	},
		$$inline: true
	});

	var heading4 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/plugins/recaptcha3",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/plugins/sequence",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Semantic plugin");
			t1 = space();
			h2 = element("h2");
			t2 = text("Integrate with ");
			a = element("a");
			t3 = text("Semantic UI");
			t4 = text(" framework. Support Semantic UI v2.4.1");
			t5 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t6 = space();
			p0 = element("p");
			t7 = text("The following piece of code is the starting point to validate the form made in Semantic UI:");
			t8 = space();
			samplecode0.$$.fragment.c();
			t9 = space();
			p1 = element("p");
			t10 = text("There are some important things here:");
			t11 = space();
			ul0 = element("ul");
			li0 = element("li");
			t12 = text("The sample code above assumes that the FormValidation files are placed inside the ");
			code0 = element("code");
			t13 = text("vendors");
			t14 = text(" directory. You might need to change the path depending on where you place them on the server.");
			t15 = space();
			li1 = element("li");
			code1 = element("code");
			t16 = text("Semantic.min.js");
			t17 = text(" is the plugin provided by FormValidation. It is NOT the same as ");
			code2 = element("code");
			t18 = text("Semantic(.min).js");
			t19 = text(" file provided by the Semantic UI framework.");
			t20 = space();
			p2 = element("p");
			t21 = text("The next sections list out some examples of various forms made with Semantic UI.");
			t22 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t23 = space();
			demo0.$$.fragment.c();
			t24 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t25 = space();
			p3 = element("p");
			t26 = text("In order to add the correct class for error message and the field element when it is a valid or invalid, we need to specify the CSS selector of the field container.");
			t27 = space();
			p4 = element("p");
			t28 = text("By default, the Semantic plugin will look for the ");
			code3 = element("code");
			t29 = text(".fields");
			t30 = text(" element. But in the stacked form, evey field will be placed inside a ");
			code4 = element("code");
			t31 = text(".field");
			t32 = text(" container.");
			t33 = space();
			p5 = element("p");
			t34 = text("We need to use the ");
			code5 = element("code");
			t35 = text("rowSelector");
			t36 = text(" option to help the plugin determine the field containers as following:");
			t37 = space();
			div0 = element("div");
			samplecode1.$$.fragment.c();
			t38 = space();
			demo1.$$.fragment.c();
			t39 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t40 = space();
			p6 = element("p");
			t41 = text("Due to the same reason mentioned in the ");
			span = element("span");
			t42 = text("Stacked form");
			t43 = text(" section above, the ");
			code6 = element("code");
			t44 = text("rowSelector");
			t45 = text(" option will be used to determine the field containers.");
			t46 = space();
			p7 = element("p");
			t47 = text("In the following example, the ");
			code7 = element("code");
			t48 = text("firstName");
			t49 = text(" and ");
			code8 = element("code");
			t50 = text("lastName");
			t51 = text(" fields are placed inside ");
			code9 = element("code");
			t52 = text(".five.field");
			t53 = text(" containers. Meanwhile, the ");
			code10 = element("code");
			t54 = text("city");
			t55 = text(", ");
			code11 = element("code");
			t56 = text("state");
			t57 = text(" and ");
			code12 = element("code");
			t58 = text("zipcode");
			t59 = text(" fields can be found inside the ");
			code13 = element("code");
			t60 = text(".four.field");
			t61 = text(" containers.");
			t62 = space();
			div1 = element("div");
			samplecode2.$$.fragment.c();
			t63 = space();
			demo2.$$.fragment.c();
			t64 = space();
			section4 = element("section");
			heading4.$$.fragment.c();
			t65 = space();
			ul1 = element("ul");
			li2 = element("li");
			t66 = text("v1.2.0: Supported Semantic UI v2.3.3");
			t67 = space();
			li3 = element("li");
			t68 = text("v1.0.0: First release");
			t69 = space();
			section5 = element("section");
			div2 = element("div");
			prevbutton.$$.fragment.c();
			t70 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Semantic plugin");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Integrate with ");

			a = claim_element(h2_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t3 = claim_text(a_nodes, "Semantic UI");
			a_nodes.forEach(detach);
			t4 = claim_text(h2_nodes, " framework. Support Semantic UI v2.4.1");
			h2_nodes.forEach(detach);
			t5 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t6 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t7 = claim_text(p0_nodes, "The following piece of code is the starting point to validate the form made in Semantic UI:");
			p0_nodes.forEach(detach);
			t8 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t9 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t10 = claim_text(p1_nodes, "There are some important things here:");
			p1_nodes.forEach(detach);
			t11 = claim_text(section0_nodes, "\n        ");

			ul0 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t12 = claim_text(li0_nodes, "The sample code above assumes that the FormValidation files are placed inside the ");

			code0 = claim_element(li0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t13 = claim_text(code0_nodes, "vendors");
			code0_nodes.forEach(detach);
			t14 = claim_text(li0_nodes, " directory. You might need to change the path depending on where you place them on the server.");
			li0_nodes.forEach(detach);
			t15 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			code1 = claim_element(li1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t16 = claim_text(code1_nodes, "Semantic.min.js");
			code1_nodes.forEach(detach);
			t17 = claim_text(li1_nodes, " is the plugin provided by FormValidation. It is NOT the same as ");

			code2 = claim_element(li1_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t18 = claim_text(code2_nodes, "Semantic(.min).js");
			code2_nodes.forEach(detach);
			t19 = claim_text(li1_nodes, " file provided by the Semantic UI framework.");
			li1_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			t20 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t21 = claim_text(p2_nodes, "The next sections list out some examples of various forms made with Semantic UI.");
			p2_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t22 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t23 = claim_text(section1_nodes, "\n        ");
			demo0.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t24 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t25 = claim_text(section2_nodes, "\n        ");

			p3 = claim_element(section2_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t26 = claim_text(p3_nodes, "In order to add the correct class for error message and the field element when it is a valid or invalid, we need to specify the CSS selector of the field container.");
			p3_nodes.forEach(detach);
			t27 = claim_text(section2_nodes, "\n        ");

			p4 = claim_element(section2_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t28 = claim_text(p4_nodes, "By default, the Semantic plugin will look for the ");

			code3 = claim_element(p4_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t29 = claim_text(code3_nodes, ".fields");
			code3_nodes.forEach(detach);
			t30 = claim_text(p4_nodes, " element. But in the stacked form, evey field will be placed inside a ");

			code4 = claim_element(p4_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t31 = claim_text(code4_nodes, ".field");
			code4_nodes.forEach(detach);
			t32 = claim_text(p4_nodes, " container.");
			p4_nodes.forEach(detach);
			t33 = claim_text(section2_nodes, "\n        ");

			p5 = claim_element(section2_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t34 = claim_text(p5_nodes, "We need to use the ");

			code5 = claim_element(p5_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t35 = claim_text(code5_nodes, "rowSelector");
			code5_nodes.forEach(detach);
			t36 = claim_text(p5_nodes, " option to help the plugin determine the field containers as following:");
			p5_nodes.forEach(detach);
			t37 = claim_text(section2_nodes, "\n        ");

			div0 = claim_element(section2_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			samplecode1.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach);
			t38 = claim_text(section2_nodes, "      \n        ");
			demo1.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t39 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t40 = claim_text(section3_nodes, "\n        ");

			p6 = claim_element(section3_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t41 = claim_text(p6_nodes, "Due to the same reason mentioned in the ");

			span = claim_element(p6_nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t42 = claim_text(span_nodes, "Stacked form");
			span_nodes.forEach(detach);
			t43 = claim_text(p6_nodes, " section above, the ");

			code6 = claim_element(p6_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t44 = claim_text(code6_nodes, "rowSelector");
			code6_nodes.forEach(detach);
			t45 = claim_text(p6_nodes, " option will be used to determine the field containers.");
			p6_nodes.forEach(detach);
			t46 = claim_text(section3_nodes, "\n        ");

			p7 = claim_element(section3_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t47 = claim_text(p7_nodes, "In the following example, the ");

			code7 = claim_element(p7_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t48 = claim_text(code7_nodes, "firstName");
			code7_nodes.forEach(detach);
			t49 = claim_text(p7_nodes, " and ");

			code8 = claim_element(p7_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t50 = claim_text(code8_nodes, "lastName");
			code8_nodes.forEach(detach);
			t51 = claim_text(p7_nodes, " fields are placed inside ");

			code9 = claim_element(p7_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t52 = claim_text(code9_nodes, ".five.field");
			code9_nodes.forEach(detach);
			t53 = claim_text(p7_nodes, " containers. Meanwhile, the ");

			code10 = claim_element(p7_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t54 = claim_text(code10_nodes, "city");
			code10_nodes.forEach(detach);
			t55 = claim_text(p7_nodes, ", ");

			code11 = claim_element(p7_nodes, "CODE", {}, false);
			var code11_nodes = children(code11);

			t56 = claim_text(code11_nodes, "state");
			code11_nodes.forEach(detach);
			t57 = claim_text(p7_nodes, " and ");

			code12 = claim_element(p7_nodes, "CODE", {}, false);
			var code12_nodes = children(code12);

			t58 = claim_text(code12_nodes, "zipcode");
			code12_nodes.forEach(detach);
			t59 = claim_text(p7_nodes, " fields can be found inside the ");

			code13 = claim_element(p7_nodes, "CODE", {}, false);
			var code13_nodes = children(code13);

			t60 = claim_text(code13_nodes, ".four.field");
			code13_nodes.forEach(detach);
			t61 = claim_text(p7_nodes, " containers.");
			p7_nodes.forEach(detach);
			t62 = claim_text(section3_nodes, "\n        ");

			div1 = claim_element(section3_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			samplecode2.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach);
			t63 = claim_text(section3_nodes, "\n        ");
			demo2.$$.fragment.l(section3_nodes);
			section3_nodes.forEach(detach);
			t64 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			heading4.$$.fragment.l(section4_nodes);
			t65 = claim_text(section4_nodes, "\n        ");

			ul1 = claim_element(section4_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li2 = claim_element(ul1_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t66 = claim_text(li2_nodes, "v1.2.0: Supported Semantic UI v2.3.3");
			li2_nodes.forEach(detach);
			t67 = claim_text(ul1_nodes, "\n            ");

			li3 = claim_element(ul1_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t68 = claim_text(li3_nodes, "v1.0.0: First release");
			li3_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section4_nodes.forEach(detach);
			t69 = claim_text(nodes, "\n\n    ");

			section5 = claim_element(nodes, "SECTION", { class: true }, false);
			var section5_nodes = children(section5);

			div2 = claim_element(section5_nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			prevbutton.$$.fragment.l(div2_nodes);
			t70 = claim_text(div2_nodes, "\n            ");
			nextbutton.$$.fragment.l(div2_nodes);
			div2_nodes.forEach(detach);
			section5_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 97);
			a.href = "https://semantic-ui.com";
			a.className = "blue dim link";
			add_location(a, file, 6, 49, 195);
			h2.className = "f4 fw4 tc lh-copy";
			add_location(h2, file, 6, 4, 150);
			p0.className = "lh-copy";
			add_location(p0, file, 10, 8, 378);
			p1.className = "lh-copy";
			add_location(p1, file, 45, 8, 1516);
			add_location(code0, file, 47, 98, 1712);
			add_location(li0, file, 47, 12, 1626);
			add_location(code1, file, 48, 16, 1848);
			add_location(code2, file, 48, 109, 1941);
			add_location(li1, file, 48, 12, 1844);
			ul0.className = "ma0 pl3 lh-copy";
			add_location(ul0, file, 46, 8, 1585);
			p2.className = "lh-copy";
			add_location(p2, file, 50, 8, 2043);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 315);
			section1.className = "mv5";
			add_location(section1, file, 53, 4, 2167);
			p3.className = "lh-copy";
			add_location(p3, file, 60, 8, 2414);
			add_location(code3, file, 61, 77, 2679);
			add_location(code4, file, 61, 167, 2769);
			p4.className = "lh-copy";
			add_location(p4, file, 61, 8, 2610);
			add_location(code5, file, 62, 46, 2850);
			p5.className = "lh-copy";
			add_location(p5, file, 62, 8, 2812);
			div0.className = "mb4";
			add_location(div0, file, 63, 8, 2958);
			section2.className = "mv5";
			add_location(section2, file, 58, 4, 2344);
			span.className = "i";
			add_location(span, file, 82, 67, 3590);
			add_location(code6, file, 82, 122, 3645);
			p6.className = "lh-copy";
			add_location(p6, file, 82, 8, 3531);
			add_location(code7, file, 83, 57, 3786);
			add_location(code8, file, 83, 84, 3813);
			add_location(code9, file, 83, 131, 3860);
			add_location(code10, file, 83, 183, 3912);
			add_location(code11, file, 83, 202, 3931);
			add_location(code12, file, 83, 225, 3954);
			add_location(code13, file, 83, 277, 4006);
			p7.className = "lh-copy";
			add_location(p7, file, 83, 8, 3737);
			div1.className = "mb4";
			add_location(div1, file, 84, 8, 4055);
			section3.className = "mv5";
			add_location(section3, file, 80, 4, 3442);
			add_location(li2, file, 113, 12, 4875);
			add_location(li3, file, 114, 12, 4933);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 112, 8, 4830);
			section4.className = "mv5";
			add_location(section4, file, 110, 4, 4763);
			div2.className = "flex";
			add_location(div2, file, 119, 8, 5028);
			section5.className = "mv5";
			add_location(section5, file, 118, 4, 4998);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			append(h2, a);
			append(a, t3);
			append(h2, t4);
			insert(target, t5, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t6);
			append(section0, p0);
			append(p0, t7);
			append(section0, t8);
			mount_component(samplecode0, section0, null);
			append(section0, t9);
			append(section0, p1);
			append(p1, t10);
			append(section0, t11);
			append(section0, ul0);
			append(ul0, li0);
			append(li0, t12);
			append(li0, code0);
			append(code0, t13);
			append(li0, t14);
			append(ul0, t15);
			append(ul0, li1);
			append(li1, code1);
			append(code1, t16);
			append(li1, t17);
			append(li1, code2);
			append(code2, t18);
			append(li1, t19);
			append(section0, t20);
			append(section0, p2);
			append(p2, t21);
			insert(target, t22, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t23);
			mount_component(demo0, section1, null);
			insert(target, t24, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t25);
			append(section2, p3);
			append(p3, t26);
			append(section2, t27);
			append(section2, p4);
			append(p4, t28);
			append(p4, code3);
			append(code3, t29);
			append(p4, t30);
			append(p4, code4);
			append(code4, t31);
			append(p4, t32);
			append(section2, t33);
			append(section2, p5);
			append(p5, t34);
			append(p5, code5);
			append(code5, t35);
			append(p5, t36);
			append(section2, t37);
			append(section2, div0);
			mount_component(samplecode1, div0, null);
			append(section2, t38);
			mount_component(demo1, section2, null);
			insert(target, t39, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t40);
			append(section3, p6);
			append(p6, t41);
			append(p6, span);
			append(span, t42);
			append(p6, t43);
			append(p6, code6);
			append(code6, t44);
			append(p6, t45);
			append(section3, t46);
			append(section3, p7);
			append(p7, t47);
			append(p7, code7);
			append(code7, t48);
			append(p7, t49);
			append(p7, code8);
			append(code8, t50);
			append(p7, t51);
			append(p7, code9);
			append(code9, t52);
			append(p7, t53);
			append(p7, code10);
			append(code10, t54);
			append(p7, t55);
			append(p7, code11);
			append(code11, t56);
			append(p7, t57);
			append(p7, code12);
			append(code12, t58);
			append(p7, t59);
			append(p7, code13);
			append(code13, t60);
			append(p7, t61);
			append(section3, t62);
			append(section3, div1);
			mount_component(samplecode2, div1, null);
			append(section3, t63);
			mount_component(demo2, section3, null);
			insert(target, t64, anchor);
			insert(target, section4, anchor);
			mount_component(heading4, section4, null);
			append(section4, t65);
			append(section4, ul1);
			append(ul1, li2);
			append(li2, t66);
			append(ul1, t67);
			append(ul1, li3);
			append(li3, t68);
			insert(target, t69, anchor);
			insert(target, section5, anchor);
			append(section5, div2);
			mount_component(prevbutton, div2, null);
			append(div2, t70);
			mount_component(nextbutton, div2, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var heading4_changes = {};
			if (changed.$$scope) heading4_changes.$$scope = { changed, ctx };
			heading4.$set(heading4_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			demo0.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			demo2.$$.fragment.i(local);

			heading4.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			demo0.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			demo2.$$.fragment.o(local);
			heading4.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t5);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			if (detaching) {
				detach(t22);
				detach(section1);
			}

			heading1.$destroy();

			demo0.$destroy();

			if (detaching) {
				detach(t24);
				detach(section2);
			}

			heading2.$destroy();

			samplecode1.$destroy();

			demo1.$destroy();

			if (detaching) {
				detach(t39);
				detach(section3);
			}

			heading3.$destroy();

			samplecode2.$destroy();

			demo2.$destroy();

			if (detaching) {
				detach(t64);
				detach(section4);
			}

			heading4.$destroy();

			if (detaching) {
				detach(t69);
				detach(section5);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Semantic plugin";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

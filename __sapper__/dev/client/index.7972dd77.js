import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';

/* src/routes/guide/validators/callback/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/validators/callback/index.svelte";

// (10:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (71:8) <Tip>
function create_default_slot_5(ctx) {
	var t0, a, t1, t2;

	return {
		c: function create() {
			t0 = text("Look at the ");
			a = element("a");
			t1 = text("Alias");
			t2 = text(" plugin if you want to have multiple callbacks on the same field");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "Look at the ");

			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t1 = claim_text(a_nodes, "Alias");
			a_nodes.forEach(detach);
			t2 = claim_text(nodes, " plugin if you want to have multiple callbacks on the same field");
			this.h();
		},

		h: function hydrate() {
			a.href = "/guide/plugins/alias";
			a.className = "blue dim link";
			add_location(a, file, 70, 25, 2622);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a, anchor);
			append(a, t1);
			insert(target, t2, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(a);
				detach(t2);
			}
		}
	};
}

// (96:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (104:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("ES6 Module Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "ES6 Module Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (198:12) <PrevButton target="/guide/validators/bic">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("bic validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "bic validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (199:12) <NextButton target="/guide/validators/choice">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("choice validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "choice validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, h30, t5, t6, p0, sup0, t7, t8, a, t9, t10, t11, table, tr0, th0, t12, t13, th1, t14, t15, th2, t16, t17, th3, t18, t19, tr1, td0, code0, t20, sup1, t21, t22, td1, code1, t23, t24, td2, t25, t26, td3, t27, t28, tr2, td4, code2, t29, t30, td5, code3, t31, t32, td6, t33, t34, td7, t35, t36, p1, t37, t38, t39, p2, t40, code4, t41, t42, code5, t43, t44, t45, t46, t47, h31, t48, t49, t50, section1, t51, p3, t52, t53, t54, section2, t55, p4, t56, t57, t58, t59, t60, section3, div, t61, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
function(input) {
    // input is an object of
    // {
    //      value: The field value,
    //      options: The callback validator options
    // }

    // Check the field validity
    return true;    // or false
}
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
function(input) {
    // input is an object of
    // {
    //      value: The field value,
    //      options: The callback validator options
    // }

    // ... Do your logic checking
    if (...) {
        return {
            valid: true,    // or false
            message: 'The error message'
        };
    }

    return {
        valid: false,       // or true
        message: 'Other error message'
    };
}
` },
		$$inline: true
	});

	var tip = new Tip({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import callback from 'formvalidation/dist/es6/validators/callback';

const result = callback().validate({
    value: ...,
    options: {
        callback: ...,
    },
},
});
/*
result is an object of
{
    valid: true or false,
    message: The error message
}
*/
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/validators/callback/basic",
		frameworks: ['bootstrap', 'tachyons']
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode3 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import callback from 'formvalidation/dist/es6/validators/callback';

// A very simple method to check the strength of a password
const validatePassword = function(input) {
    const value = input.value;
    if (value === '') {
        return { valid: true };
    }

    if (value.length < 8) {
        return {
            valid: false,
            message: 'Password must have at least 8 characters',
        };
    }

    if (value === value.toLowerCase()) {
        return {
            valid: false,
            message: 'Password must have at least one uppercase character',
        };
    }

    if (value === value.toUpperCase()) {
        return {
            valid: false,
            message: 'Password must have at least one lowercase character',
        };
    }

    if (value.search(/[0-9]/) < 0) {
        return {
            valid: false,
            message: 'Password must have at least one digit',
        };
    }

    return { valid: true };
}

const res1 = callback().validate({
    value: '123456',
    options: {
        callback: validatePassword,
    },
});
// res1.valid === false

const res2 = callback().validate({
    value: 'not.contains.upper',
    options: {
        callback: validatePassword,
    },
});
// res2.valid === false

const res3 = callback().validate({
    value: 'not@CONTAIN@digit',
    options: {
        callback: validatePassword,
    },
});
// res3.valid === false

const res4 = callback().validate({
    value: 'v@l1dP@@',
    options: {
        callback: validatePassword,
    },
});
// res4.valid === true
` },
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Asking fields to be unique',
        'Integrating with TinyMCE',
        'Preventing user to have same value as the placeholder',
        'Regenerating captcha when the form is invalid',
        'Showing all messages',
        'Showing dynamic message',
        'Terms and conditions agreement validation',
        'Validating credit card expiration date',
    ] },
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['promise', 'remote'] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/validators/bic",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/validators/choice",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("callback validator");
			t1 = space();
			h2 = element("h2");
			t2 = text("Check if the input value passes a callback method");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			h30 = element("h3");
			t5 = text("Using with form field");
			t6 = space();
			p0 = element("p");
			sup0 = element("sup");
			t7 = text("*");
			t8 = text(" presents a required option. The HTML attributes are used to set the validator options via the ");
			a = element("a");
			t9 = text("Declarative");
			t10 = text(" plugin");
			t11 = space();
			table = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t12 = text("Name");
			t13 = space();
			th1 = element("th");
			t14 = text("HTML attribute");
			t15 = space();
			th2 = element("th");
			t16 = text("Type");
			t17 = space();
			th3 = element("th");
			t18 = text("Description");
			t19 = space();
			tr1 = element("tr");
			td0 = element("td");
			code0 = element("code");
			t20 = text("callback");
			sup1 = element("sup");
			t21 = text("*");
			t22 = space();
			td1 = element("td");
			code1 = element("code");
			t23 = text("data-fv-callback___callback");
			t24 = space();
			td2 = element("td");
			t25 = text("Function");
			t26 = space();
			td3 = element("td");
			t27 = text("The callback method");
			t28 = space();
			tr2 = element("tr");
			td4 = element("td");
			code2 = element("code");
			t29 = text("message");
			t30 = space();
			td5 = element("td");
			code3 = element("code");
			t31 = text("data-fv-callback___message");
			t32 = space();
			td6 = element("td");
			t33 = text("String");
			t34 = space();
			td7 = element("td");
			t35 = text("The error message");
			t36 = space();
			p1 = element("p");
			t37 = text("The callback method must follow the format below:");
			t38 = space();
			samplecode0.$$.fragment.c();
			t39 = space();
			p2 = element("p");
			t40 = text("If you want to return a dynamic message, the callback function must return an object containing the ");
			code4 = element("code");
			t41 = text("valid");
			t42 = text(" and ");
			code5 = element("code");
			t43 = text("message");
			t44 = text(" members:");
			t45 = space();
			samplecode1.$$.fragment.c();
			t46 = space();
			tip.$$.fragment.c();
			t47 = space();
			h31 = element("h3");
			t48 = text("Using with ES6 module");
			t49 = space();
			samplecode2.$$.fragment.c();
			t50 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t51 = space();
			p3 = element("p");
			t52 = text("In the following form, user is asked to enter a correct answer of simple operation which is generated randomly.");
			t53 = space();
			demo.$$.fragment.c();
			t54 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t55 = space();
			p4 = element("p");
			t56 = text("The following snippet shows how to use the callback validator with ES6 module to check if a password is strong or weak:");
			t57 = space();
			samplecode3.$$.fragment.c();
			t58 = space();
			examples.$$.fragment.c();
			t59 = space();
			relatedvalidators.$$.fragment.c();
			t60 = space();
			section3 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t61 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "callback validator");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Check if the input value passes a callback method");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n\n        ");

			h30 = claim_element(section0_nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t5 = claim_text(h30_nodes, "Using with form field");
			h30_nodes.forEach(detach);
			t6 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			sup0 = claim_element(p0_nodes, "SUP", {}, false);
			var sup0_nodes = children(sup0);

			t7 = claim_text(sup0_nodes, "*");
			sup0_nodes.forEach(detach);
			t8 = claim_text(p0_nodes, " presents a required option. The HTML attributes are used to set the validator options via the ");

			a = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t9 = claim_text(a_nodes, "Declarative");
			a_nodes.forEach(detach);
			t10 = claim_text(p0_nodes, " plugin");
			p0_nodes.forEach(detach);
			t11 = claim_text(section0_nodes, "\n        ");

			table = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table_nodes = children(table);

			tr0 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t12 = claim_text(th0_nodes, "Name");
			th0_nodes.forEach(detach);
			t13 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t14 = claim_text(th1_nodes, "HTML attribute");
			th1_nodes.forEach(detach);
			t15 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t16 = claim_text(th2_nodes, "Type");
			th2_nodes.forEach(detach);
			t17 = claim_text(tr0_nodes, "\n                ");

			th3 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th3_nodes = children(th3);

			t18 = claim_text(th3_nodes, "Description");
			th3_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t19 = claim_text(table_nodes, "\n            ");

			tr1 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code0 = claim_element(td0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t20 = claim_text(code0_nodes, "callback");
			code0_nodes.forEach(detach);

			sup1 = claim_element(td0_nodes, "SUP", {}, false);
			var sup1_nodes = children(sup1);

			t21 = claim_text(sup1_nodes, "*");
			sup1_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t22 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			code1 = claim_element(td1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t23 = claim_text(code1_nodes, "data-fv-callback___callback");
			code1_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			t24 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t25 = claim_text(td2_nodes, "Function");
			td2_nodes.forEach(detach);
			t26 = claim_text(tr1_nodes, "\n                ");

			td3 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			t27 = claim_text(td3_nodes, "The callback method");
			td3_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t28 = claim_text(table_nodes, "\n            ");

			tr2 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			code2 = claim_element(td4_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t29 = claim_text(code2_nodes, "message");
			code2_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t30 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			code3 = claim_element(td5_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t31 = claim_text(code3_nodes, "data-fv-callback___message");
			code3_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			t32 = claim_text(tr2_nodes, "\n                ");

			td6 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			t33 = claim_text(td6_nodes, "String");
			td6_nodes.forEach(detach);
			t34 = claim_text(tr2_nodes, "\n                ");

			td7 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			t35 = claim_text(td7_nodes, "The error message");
			td7_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			table_nodes.forEach(detach);
			t36 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t37 = claim_text(p1_nodes, "The callback method must follow the format below:");
			p1_nodes.forEach(detach);
			t38 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t39 = claim_text(section0_nodes, "\n\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t40 = claim_text(p2_nodes, "If you want to return a dynamic message, the callback function must return an object containing the ");

			code4 = claim_element(p2_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t41 = claim_text(code4_nodes, "valid");
			code4_nodes.forEach(detach);
			t42 = claim_text(p2_nodes, " and ");

			code5 = claim_element(p2_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t43 = claim_text(code5_nodes, "message");
			code5_nodes.forEach(detach);
			t44 = claim_text(p2_nodes, " members:");
			p2_nodes.forEach(detach);
			t45 = claim_text(section0_nodes, "\n");
			samplecode1.$$.fragment.l(section0_nodes);
			t46 = claim_text(section0_nodes, "\n        ");
			tip.$$.fragment.l(section0_nodes);
			t47 = claim_text(section0_nodes, "\n\n        ");

			h31 = claim_element(section0_nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t48 = claim_text(h31_nodes, "Using with ES6 module");
			h31_nodes.forEach(detach);
			t49 = claim_text(section0_nodes, "\n");
			samplecode2.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t50 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t51 = claim_text(section1_nodes, "\n\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t52 = claim_text(p3_nodes, "In the following form, user is asked to enter a correct answer of simple operation which is generated randomly.");
			p3_nodes.forEach(detach);
			t53 = claim_text(section1_nodes, "\n\n        ");
			demo.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t54 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t55 = claim_text(section2_nodes, "\n\n        ");

			p4 = claim_element(section2_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t56 = claim_text(p4_nodes, "The following snippet shows how to use the callback validator with ES6 module to check if a password is strong or weak:");
			p4_nodes.forEach(detach);
			t57 = claim_text(section2_nodes, "\n");
			samplecode3.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t58 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			t59 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			t60 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			div = claim_element(section3_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t61 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 100);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 156);
			add_location(h30, file, 11, 8, 304);
			add_location(sup0, file, 12, 29, 364);
			a.href = "/guide/plugins/declarative";
			a.className = "blue dim link";
			add_location(a, file, 12, 136, 471);
			p0.className = "lh-copy i";
			add_location(p0, file, 12, 8, 343);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 15, 16, 684);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 16, 16, 744);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 17, 16, 814);
			th3.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th3, file, 18, 16, 874);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 14, 12, 635);
			add_location(code0, file, 21, 36, 1024);
			add_location(sup1, file, 21, 57, 1045);
			td0.className = "pv2 ph3";
			add_location(td0, file, 21, 16, 1004);
			add_location(code1, file, 22, 36, 1099);
			td1.className = "pv2 ph3";
			add_location(td1, file, 22, 16, 1079);
			td2.className = "pv2 ph3";
			add_location(td2, file, 23, 16, 1161);
			td3.className = "pv2 ph3";
			add_location(td3, file, 24, 16, 1211);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 20, 12, 955);
			add_location(code2, file, 27, 36, 1355);
			td4.className = "pv2 ph3";
			add_location(td4, file, 27, 16, 1335);
			add_location(code3, file, 28, 36, 1417);
			td5.className = "pv2 ph3";
			add_location(td5, file, 28, 16, 1397);
			td6.className = "pv2 ph3";
			add_location(td6, file, 29, 16, 1478);
			td7.className = "pv2 ph3";
			add_location(td7, file, 30, 16, 1526);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 26, 12, 1286);
			table.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table, file, 13, 8, 565);
			p1.className = "lh-copy";
			add_location(p1, file, 33, 8, 1612);
			add_location(code4, file, 47, 127, 2077);
			add_location(code5, file, 47, 150, 2100);
			p2.className = "lh-copy";
			add_location(p2, file, 47, 8, 1958);
			add_location(h31, file, 72, 8, 2764);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 238);
			p3.className = "lh-copy";
			add_location(p3, file, 97, 8, 3242);
			section1.className = "mv5";
			add_location(section1, file, 94, 4, 3170);
			p4.className = "lh-copy";
			add_location(p4, file, 105, 8, 3573);
			section2.className = "mv5";
			add_location(section2, file, 102, 4, 3496);
			div.className = "flex";
			add_location(div, file, 196, 8, 5884);
			section3.className = "mv5";
			add_location(section3, file, 195, 4, 5854);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, h30);
			append(h30, t5);
			append(section0, t6);
			append(section0, p0);
			append(p0, sup0);
			append(sup0, t7);
			append(p0, t8);
			append(p0, a);
			append(a, t9);
			append(p0, t10);
			append(section0, t11);
			append(section0, table);
			append(table, tr0);
			append(tr0, th0);
			append(th0, t12);
			append(tr0, t13);
			append(tr0, th1);
			append(th1, t14);
			append(tr0, t15);
			append(tr0, th2);
			append(th2, t16);
			append(tr0, t17);
			append(tr0, th3);
			append(th3, t18);
			append(table, t19);
			append(table, tr1);
			append(tr1, td0);
			append(td0, code0);
			append(code0, t20);
			append(td0, sup1);
			append(sup1, t21);
			append(tr1, t22);
			append(tr1, td1);
			append(td1, code1);
			append(code1, t23);
			append(tr1, t24);
			append(tr1, td2);
			append(td2, t25);
			append(tr1, t26);
			append(tr1, td3);
			append(td3, t27);
			append(table, t28);
			append(table, tr2);
			append(tr2, td4);
			append(td4, code2);
			append(code2, t29);
			append(tr2, t30);
			append(tr2, td5);
			append(td5, code3);
			append(code3, t31);
			append(tr2, t32);
			append(tr2, td6);
			append(td6, t33);
			append(tr2, t34);
			append(tr2, td7);
			append(td7, t35);
			append(section0, t36);
			append(section0, p1);
			append(p1, t37);
			append(section0, t38);
			mount_component(samplecode0, section0, null);
			append(section0, t39);
			append(section0, p2);
			append(p2, t40);
			append(p2, code4);
			append(code4, t41);
			append(p2, t42);
			append(p2, code5);
			append(code5, t43);
			append(p2, t44);
			append(section0, t45);
			mount_component(samplecode1, section0, null);
			append(section0, t46);
			mount_component(tip, section0, null);
			append(section0, t47);
			append(section0, h31);
			append(h31, t48);
			append(section0, t49);
			mount_component(samplecode2, section0, null);
			insert(target, t50, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t51);
			append(section1, p3);
			append(p3, t52);
			append(section1, t53);
			mount_component(demo, section1, null);
			insert(target, t54, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t55);
			append(section2, p4);
			append(p4, t56);
			append(section2, t57);
			mount_component(samplecode3, section2, null);
			insert(target, t58, anchor);
			mount_component(examples, target, anchor);
			insert(target, t59, anchor);
			mount_component(relatedvalidators, target, anchor);
			insert(target, t60, anchor);
			insert(target, section3, anchor);
			append(section3, div);
			mount_component(prevbutton, div, null);
			append(div, t61);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var tip_changes = {};
			if (changed.$$scope) tip_changes.$$scope = { changed, ctx };
			tip.$set(tip_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			tip.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			samplecode3.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			tip.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			samplecode3.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			samplecode1.$destroy();

			tip.$destroy();

			samplecode2.$destroy();

			if (detaching) {
				detach(t50);
				detach(section1);
			}

			heading1.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t54);
				detach(section2);
			}

			heading2.$destroy();

			samplecode3.$destroy();

			if (detaching) {
				detach(t58);
			}

			examples.$destroy(detaching);

			if (detaching) {
				detach(t59);
			}

			relatedvalidators.$destroy(detaching);

			if (detaching) {
				detach(t60);
				detach(section3);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • callback validator";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

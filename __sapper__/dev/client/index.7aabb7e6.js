import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, I as destroy_each, r as noop } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';

/* src/routes/guide/getting-started/localization/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/getting-started/localization/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.locale = list[i];
	return child_ctx;
}

// (112:20) {:else}
function create_else_block(ctx) {
	var t_value = ctx.locale.author.join(', '), t;

	return {
		c: function create() {
			t = text(t_value);
		},

		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (110:20) {#if typeof locale.author === 'string'}
function create_if_block(ctx) {
	var t_value = ctx.locale.author, t;

	return {
		c: function create() {
			t = text(t_value);
		},

		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (105:12) {#each _locales as locale}
function create_each_block(ctx) {
	var tr, td0, t0_value = ctx.locale.name, t0, t1, td1, code, t2_value = ctx.locale.file, t2, t3, td2;

	function select_block_type(ctx) {
		if (typeof ctx.locale.author === 'string') return create_if_block;
		return create_else_block;
	}

	var current_block_type = select_block_type(ctx);
	var if_block = current_block_type(ctx);

	return {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			td1 = element("td");
			code = element("code");
			t2 = text(t2_value);
			t3 = space();
			td2 = element("td");
			if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", { class: true }, false);
			var tr_nodes = children(tr);

			td0 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			t0 = claim_text(td0_nodes, t0_value);
			td0_nodes.forEach(detach);
			t1 = claim_text(tr_nodes, "\n                ");

			td1 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			code = claim_element(td1_nodes, "CODE", {}, false);
			var code_nodes = children(code);

			t2 = claim_text(code_nodes, t2_value);
			code_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			t3 = claim_text(tr_nodes, "\n                ");

			td2 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			if_block.l(td2_nodes);
			td2_nodes.forEach(detach);
			tr_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			td0.className = "pv2 ph3";
			add_location(td0, file, 106, 16, 3881);
			add_location(code, file, 107, 36, 3956);
			td1.className = "pv2 ph3";
			add_location(td1, file, 107, 16, 3936);
			td2.className = "pv2 ph3";
			add_location(td2, file, 108, 16, 4004);
			tr.className = "striped--light-gray";
			add_location(tr, file, 105, 12, 3832);
		},

		m: function mount(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td0);
			append(td0, t0);
			append(tr, t1);
			append(tr, td1);
			append(td1, code);
			append(code, t2);
			append(tr, t3);
			append(tr, td2);
			if_block.m(td2, null);
		},

		p: function update(changed, ctx) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(changed, ctx);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);
				if (if_block) {
					if_block.c();
					if_block.m(td2, null);
				}
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(tr);
			}

			if_block.d();
		}
	};
}

// (123:8) <Tip>
function create_default_slot_3(ctx) {
	var t0, a, t1, t2;

	return {
		c: function create() {
			t0 = text("Look at the ");
			a = element("a");
			t1 = text("L10n");
			t2 = text(" plugin if you want to use multiple language packages and be able to switch between them");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "Look at the ");

			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t1 = claim_text(a_nodes, "L10n");
			a_nodes.forEach(detach);
			t2 = claim_text(nodes, " plugin if you want to use multiple language packages and be able to switch between them");
			this.h();
		},

		h: function hydrate() {
			a.href = "/guide/plugins/l10n";
			a.className = "blue dim link";
			add_location(a, file, 122, 25, 4731);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a, anchor);
			append(a, t1);
			insert(target, t2, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(a);
				detach(t2);
			}
		}
	};
}

// (128:12) <PrevButton target="/guide/getting-started/usage">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Usage");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Usage");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (129:12) <NextButton target="/guide/getting-started/special-field-name">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Special field name");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Special field name");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, p0, t4, code0, t5, t6, t7, t8, p1, t9, t10, t11, p2, t12, code1, t13, t14, code2, t15, t16, t17, table, tr, th0, t18, t19, th1, t20, t21, th2, t22, t23, t24, p3, t25, code3, t26, t27, t28, p4, t29, t30, t31, t32, section1, div, t33, current;

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
FormValidation.formValidation(
    document.getElementById('loginForm'),
    {
        fields: {
            username: {
                validators: {
                    notEmpty: {
                        message: 'The username is required'
                    },
                    stringLength: {
                        message: 'The username must be more than 6 and less than 30 characters long',
                        ...
                    },
                    regexp: {
                        message: 'The username can only consist of alphabetical, number and underscore',
                        ...
                    },
                }
            },
            password: {
                validators: {
                    notEmpty: {
                        message: 'The password is required'
                    },
                    stringLength: {
                        message: 'The password must have at least 8 characters',
                        ...
                    },
                }
            },
        },
        plugins: {
            ...
        }
    }
);
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<!-- The language package has to be loaded after FormValidation(.min).js -->
<script-tag src="/vendors/formvalidation/dist/js/locales/en_US.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    const fv = FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            // Set the default locale
            locale: 'en_US',
            localization: FormValidation.locales.en_US,
            
            // Ignore the message option
            // It will be taken from the language package
            fields: {
                username: {
                    validators: {
                        notEmpty: {
                        },
                        stringLength: {
                            min: 6,
                            max: 30,
                        },
                        regexp: {
                            regexp: /^[a-zA-Z0-9]+$/
                        },
                    }
                },
                password: {
                    validators: {
                        notEmpty: {
                        },
                        stringLength: {
                            min: 8
                        },
                    }
                },
            },
            plugins: {
                ...
            },
        }
    );
});
</script-tag>
` },
		$$inline: true
	});

	var each_value = ctx._locales;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	var demo = new Demo({
		props: {
		prefix: "/guide/getting-started/localization/basic",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var tip = new Tip({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/getting-started/usage",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/getting-started/special-field-name",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Localization");
			t1 = space();
			h2 = element("h2");
			t2 = text("Using a language package");
			t3 = space();
			section0 = element("section");
			p0 = element("p");
			t4 = text("In the previous section, the error message for each validator is configured by the ");
			code0 = element("code");
			t5 = text("message");
			t6 = text(" option:");
			t7 = space();
			samplecode0.$$.fragment.c();
			t8 = space();
			p1 = element("p");
			t9 = text("It is posible to use the default message from a language package. The following piece of code show how to use messages from English package:");
			t10 = space();
			samplecode1.$$.fragment.c();
			t11 = space();
			p2 = element("p");
			t12 = text("FormValidation has been translated into the following languages which are available in the ");
			code1 = element("code");
			t13 = text("dist/js/locales");
			t14 = text(" folder (and the ");
			code2 = element("code");
			t15 = text("dist/es6/locales");
			t16 = text(" folder if you want to use with ES6 module).");
			t17 = space();
			table = element("table");
			tr = element("tr");
			th0 = element("th");
			t18 = text("Language");
			t19 = space();
			th1 = element("th");
			t20 = text("File name");
			t21 = space();
			th2 = element("th");
			t22 = text("Translated by");
			t23 = space();

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t24 = space();
			p3 = element("p");
			t25 = text("From v1.0.0, ");
			code3 = element("code");
			t26 = text("FormValidation(.min).js");
			t27 = text(" will not contain any language package including the English one. You have to load them manually as seen in the sample code above.");
			t28 = space();
			p4 = element("p");
			t29 = text("The working example below shows an usage of English language package:");
			t30 = space();
			demo.$$.fragment.c();
			t31 = space();
			tip.$$.fragment.c();
			t32 = space();
			section1 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t33 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Localization");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Using a language package");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t4 = claim_text(p0_nodes, "In the previous section, the error message for each validator is configured by the ");

			code0 = claim_element(p0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t5 = claim_text(code0_nodes, "message");
			code0_nodes.forEach(detach);
			t6 = claim_text(p0_nodes, " option:");
			p0_nodes.forEach(detach);
			t7 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t8 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t9 = claim_text(p1_nodes, "It is posible to use the default message from a language package. The following piece of code show how to use messages from English package:");
			p1_nodes.forEach(detach);
			t10 = claim_text(section0_nodes, "\n");
			samplecode1.$$.fragment.l(section0_nodes);
			t11 = claim_text(section0_nodes, "        \n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t12 = claim_text(p2_nodes, "FormValidation has been translated into the following languages which are available in the ");

			code1 = claim_element(p2_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t13 = claim_text(code1_nodes, "dist/js/locales");
			code1_nodes.forEach(detach);
			t14 = claim_text(p2_nodes, " folder (and the ");

			code2 = claim_element(p2_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t15 = claim_text(code2_nodes, "dist/es6/locales");
			code2_nodes.forEach(detach);
			t16 = claim_text(p2_nodes, " folder if you want to use with ES6 module).");
			p2_nodes.forEach(detach);
			t17 = claim_text(section0_nodes, "\n        ");

			table = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table_nodes = children(table);

			tr = claim_element(table_nodes, "TR", { class: true }, false);
			var tr_nodes = children(tr);

			th0 = claim_element(tr_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t18 = claim_text(th0_nodes, "Language");
			th0_nodes.forEach(detach);
			t19 = claim_text(tr_nodes, "\n                ");

			th1 = claim_element(tr_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t20 = claim_text(th1_nodes, "File name");
			th1_nodes.forEach(detach);
			t21 = claim_text(tr_nodes, "\n                ");

			th2 = claim_element(tr_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t22 = claim_text(th2_nodes, "Translated by");
			th2_nodes.forEach(detach);
			tr_nodes.forEach(detach);
			t23 = claim_text(table_nodes, "\n            ");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(table_nodes);
			}

			table_nodes.forEach(detach);
			t24 = claim_text(section0_nodes, "\n        ");

			p3 = claim_element(section0_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t25 = claim_text(p3_nodes, "From v1.0.0, ");

			code3 = claim_element(p3_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t26 = claim_text(code3_nodes, "FormValidation(.min).js");
			code3_nodes.forEach(detach);
			t27 = claim_text(p3_nodes, " will not contain any language package including the English one. You have to load them manually as seen in the sample code above.");
			p3_nodes.forEach(detach);
			t28 = claim_text(section0_nodes, "\n        ");

			p4 = claim_element(section0_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t29 = claim_text(p4_nodes, "The working example below shows an usage of English language package:");
			p4_nodes.forEach(detach);
			t30 = claim_text(section0_nodes, "\n        ");
			demo.$$.fragment.l(section0_nodes);
			t31 = claim_text(section0_nodes, "\n\n        ");
			tip.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t32 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			div = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t33 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 94);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 144);
			add_location(code0, file, 9, 110, 333);
			p0.className = "lh-copy";
			add_location(p0, file, 9, 8, 231);
			p1.className = "lh-copy";
			add_location(p1, file, 48, 8, 1527);
			add_location(code1, file, 97, 118, 3331);
			add_location(code2, file, 97, 163, 3376);
			p2.className = "lh-copy";
			add_location(p2, file, 97, 8, 3221);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 100, 16, 3581);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 101, 16, 3645);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 102, 16, 3710);
			tr.className = "striped--light-gray";
			add_location(tr, file, 99, 12, 3532);
			table.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table, file, 98, 8, 3462);
			add_location(code3, file, 118, 40, 4339);
			p3.className = "lh-copy";
			add_location(p3, file, 118, 8, 4307);
			p4.className = "lh-copy";
			add_location(p4, file, 119, 8, 4518);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 201);
			div.className = "flex";
			add_location(div, file, 126, 8, 4936);
			section1.className = "mv5";
			add_location(section1, file, 125, 4, 4906);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			append(section0, p0);
			append(p0, t4);
			append(p0, code0);
			append(code0, t5);
			append(p0, t6);
			append(section0, t7);
			mount_component(samplecode0, section0, null);
			append(section0, t8);
			append(section0, p1);
			append(p1, t9);
			append(section0, t10);
			mount_component(samplecode1, section0, null);
			append(section0, t11);
			append(section0, p2);
			append(p2, t12);
			append(p2, code1);
			append(code1, t13);
			append(p2, t14);
			append(p2, code2);
			append(code2, t15);
			append(p2, t16);
			append(section0, t17);
			append(section0, table);
			append(table, tr);
			append(tr, th0);
			append(th0, t18);
			append(tr, t19);
			append(tr, th1);
			append(th1, t20);
			append(tr, t21);
			append(tr, th2);
			append(th2, t22);
			append(table, t23);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(table, null);
			}

			append(section0, t24);
			append(section0, p3);
			append(p3, t25);
			append(p3, code3);
			append(code3, t26);
			append(p3, t27);
			append(section0, t28);
			append(section0, p4);
			append(p4, t29);
			append(section0, t30);
			mount_component(demo, section0, null);
			append(section0, t31);
			mount_component(tip, section0, null);
			insert(target, t32, anchor);
			insert(target, section1, anchor);
			append(section1, div);
			mount_component(prevbutton, div, null);
			append(div, t33);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			if (changed._locales) {
				each_value = ctx._locales;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(table, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}

			var tip_changes = {};
			if (changed.$$scope) tip_changes.$$scope = { changed, ctx };
			tip.$set(tip_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			tip.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			tip.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			samplecode0.$destroy();

			samplecode1.$destroy();

			destroy_each(each_blocks, detaching);

			demo.$destroy();

			tip.$destroy();

			if (detaching) {
				detach(t32);
				detach(section1);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Localization";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

function instance($$self) {
	

const _locales = [
    { name: 'English', file: 'en_US.js', author: 'nghuuphuoc' },
    { name: 'Albanian', file: 'sq_AL.js', author: 'desaretiuss' },
    { name: 'Arabic', file: 'ar_MA.js', author: 'Arkni' },
    { name: 'Basque', file: 'eu_ES.js', author: 'xabikip' },
    { name: 'Belgium (French)', file: 'fr_BE.js', author: 'neilime' },
    { name: 'Belgium (Netherland)', file: 'nl_BE.js', author: 'dokterpasta' },
    { name: 'Bulgarian', file: 'bg_BG.js', author: 'mraiur' },
    { name: 'Catalan', file: 'ca_ES.js', author: 'ArnauAregall' },
    { name: 'Chilean Spanish', file: 'es_CL.js', author: 'marceloampuerop6' },
    { name: 'Chinese', file: 'zh_CN.js', author: 'shamiao' },
    { name: 'Czech', file: 'cs_CZ.js', author: ['AdwinTrave', 'budik21', 'cuchac'] },
    { name: 'Danish', file: 'da_DK.js', author: 'Djarnis' },
    { name: 'Dutch (Netherland)', file: 'nl_NL.js', author: 'JvanderHeide' },
    { name: 'Finnish', file: 'fi_FI.js', author: 'traone' },
    { name: 'French', file: 'fr_FR.js', author: ['dlucazeau', 'jazzzz', 'neilime'] },
    { name: 'German', file: 'de_DE.js', author: 'logemann' },
    { name: 'Greek', file: 'el_GR.js', author: 'pRieStaKos' },
    { name: 'Hebrew', file: 'he_IL.js', author: 'yakidahan' },
    { name: 'Hindi', file: 'hi_IN.js', author: 'gladiatorAsh' },
    { name: 'Hungarian', file: 'hu_HU.js', author: 'blackfyre' },
    { name: 'Indonesian', file: 'id_ID.js', author: 'egig' },
    { name: 'Italian', file: 'it_IT.js', author: 'maramazza' },
    { name: 'Japanese', file: 'ja_JP.js', author: 'tsuyoshifujii' },
    { name: 'Norwegian', file: 'no_NO.js', author: 'trondulseth' },
    { name: 'Persian (Farsi)', file: 'fa_IR.js', author: 'i0' },
    { name: 'Polish', file: 'pl_PL.js', author: ['grzesiek', 'lukaszbanasiak'] },
    { name: 'Portuguese (Brazil)', file: 'pt_BR.js', author: ['marcuscarvalho6', 'dgmike'] },
    { name: 'Portuguese (Portugal)', file: 'pt_PT.js', author: 'rtbfreitas' },
    { name: 'Romanian', file: 'ro_RO.js', author: 'filipac' },
    { name: 'Russian', file: 'ru_RU.js', author: ['cylon-v', 'stepin'] },
    { name: 'Serbian', file: 'sr_RS.js', author: 'markocrni' },
    { name: 'Slovak', file: 'sk_SK.js', author: 'filipac' },
    { name: 'Spanish', file: 'es_ES.js', author: 'vadail' },
    { name: 'Swedish', file: 'sv_SE.js', author: 'ulsa' },
    { name: 'Taiwanese', file: 'zh_TW.js', author: 'tureki' },
    { name: 'Thai', file: 'th_TH.js', author: 'figgaro' },
    { name: 'Turkish', file: 'sr_RS.js', author: 'CeRBeR666' },
    { name: 'Ukrainian', file: 'ua_UA.js', author: 'oleg-voloshyn' },
    { name: 'Vietnamese', file: 'vi_VN.js', author: 'nghuuphuoc' },
];

	return { _locales };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export default Index;

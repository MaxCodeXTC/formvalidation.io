import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as ChangelogLayout } from './chunk.4a563e90.js';

/* src/routes/updates/v0.4.4/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/updates/v0.4.4/index.svelte";

// (10:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("New features");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "New features");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (23:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Improvements");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Improvements");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (33:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Bug fixes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Bug fixes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <ChangelogLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, ul0, li0, t5, code0, t6, t7, a0, t8, t9, t10, li1, t11, code1, t12, t13, a1, t14, t15, t16, li2, t17, a2, t18, t19, t20, li3, t21, a3, t22, t23, t24, li4, t25, a4, t26, t27, t28, li5, t29, a5, t30, t31, t32, li6, t33, a6, t34, t35, t36, section1, t37, ul1, li7, t38, code2, t39, t40, code3, t41, t42, t43, li8, t44, t45, li9, t46, a7, t47, t48, li10, t49, a8, t50, t51, t52, section2, t53, ul2, li11, t54, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Version 0.4.4");
			t1 = space();
			h2 = element("h2");
			t2 = text("Released 05 May 2014");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			ul0 = element("ul");
			li0 = element("li");
			t5 = text("Add ");
			code0 = element("code");
			t6 = text("$.fn.bootstrapValidator.helpers.mod_11_10");
			t7 = text(" method that implements modulus 11, 10 (ISO 7064) algorithm. The helper is then reused in validating ");
			a0 = element("a");
			t8 = text("German and Croatian VAT");
			t9 = text(" numbers");
			t10 = space();
			li1 = element("li");
			t11 = text("Add ");
			code1 = element("code");
			t12 = text("$.fn.bootstrapValidator.helpers.mod_37_36");
			t13 = text(" method that implements modulus 37, 36 (ISO 7064) algorithm, used in ");
			a1 = element("a");
			t14 = text("GRid");
			t15 = text(" validator");
			t16 = space();
			li2 = element("li");
			t17 = text("Add ");
			a2 = element("a");
			t18 = text("ean (International Article Number)");
			t19 = text(" validator");
			t20 = space();
			li3 = element("li");
			t21 = text("Add ");
			a3 = element("a");
			t22 = text("grid (Global Release Identifier)");
			t23 = text(" validator");
			t24 = space();
			li4 = element("li");
			t25 = text("Add ");
			a4 = element("a");
			t26 = text("imei (International Mobile Station Equipment Identity)");
			t27 = text(" validator");
			t28 = space();
			li5 = element("li");
			t29 = text("Add ");
			a5 = element("a");
			t30 = text("ismn (International Standard Music Number)");
			t31 = text(" validator");
			t32 = space();
			li6 = element("li");
			t33 = text("Add ");
			a6 = element("a");
			t34 = text("issn (International Standard Serial Number)");
			t35 = text(" validator");
			t36 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t37 = space();
			ul1 = element("ul");
			li7 = element("li");
			t38 = text("Support using both the ");
			code2 = element("code");
			t39 = text("name");
			t40 = text(" attribute and ");
			code3 = element("code");
			t41 = text("selector");
			t42 = text(" option for field");
			t43 = space();
			li8 = element("li");
			t44 = text("Indicate success/error tab");
			t45 = space();
			li9 = element("li");
			t46 = text("Add UK postcode support for the ");
			a7 = element("a");
			t47 = text("zipCode validator");
			t48 = space();
			li10 = element("li");
			t49 = text("The ");
			a8 = element("a");
			t50 = text("date validator");
			t51 = text(" supports seconds");
			t52 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t53 = space();
			ul2 = element("ul");
			li11 = element("li");
			t54 = text("Wrong prefix of Laser credit card number");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Version 0.4.4");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Released 05 May 2014");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			ul0 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t5 = claim_text(li0_nodes, "Add ");

			code0 = claim_element(li0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t6 = claim_text(code0_nodes, "$.fn.bootstrapValidator.helpers.mod_11_10");
			code0_nodes.forEach(detach);
			t7 = claim_text(li0_nodes, " method that implements modulus 11, 10 (ISO 7064) algorithm. The helper is then reused in validating ");

			a0 = claim_element(li0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t8 = claim_text(a0_nodes, "German and Croatian VAT");
			a0_nodes.forEach(detach);
			t9 = claim_text(li0_nodes, " numbers");
			li0_nodes.forEach(detach);
			t10 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t11 = claim_text(li1_nodes, "Add ");

			code1 = claim_element(li1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t12 = claim_text(code1_nodes, "$.fn.bootstrapValidator.helpers.mod_37_36");
			code1_nodes.forEach(detach);
			t13 = claim_text(li1_nodes, " method that implements modulus 37, 36 (ISO 7064) algorithm, used in ");

			a1 = claim_element(li1_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t14 = claim_text(a1_nodes, "GRid");
			a1_nodes.forEach(detach);
			t15 = claim_text(li1_nodes, " validator");
			li1_nodes.forEach(detach);
			t16 = claim_text(ul0_nodes, "\n            ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t17 = claim_text(li2_nodes, "Add ");

			a2 = claim_element(li2_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t18 = claim_text(a2_nodes, "ean (International Article Number)");
			a2_nodes.forEach(detach);
			t19 = claim_text(li2_nodes, " validator");
			li2_nodes.forEach(detach);
			t20 = claim_text(ul0_nodes, "\n            ");

			li3 = claim_element(ul0_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t21 = claim_text(li3_nodes, "Add ");

			a3 = claim_element(li3_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t22 = claim_text(a3_nodes, "grid (Global Release Identifier)");
			a3_nodes.forEach(detach);
			t23 = claim_text(li3_nodes, " validator");
			li3_nodes.forEach(detach);
			t24 = claim_text(ul0_nodes, "\n            ");

			li4 = claim_element(ul0_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			t25 = claim_text(li4_nodes, "Add ");

			a4 = claim_element(li4_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t26 = claim_text(a4_nodes, "imei (International Mobile Station Equipment Identity)");
			a4_nodes.forEach(detach);
			t27 = claim_text(li4_nodes, " validator");
			li4_nodes.forEach(detach);
			t28 = claim_text(ul0_nodes, "\n            ");

			li5 = claim_element(ul0_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			t29 = claim_text(li5_nodes, "Add ");

			a5 = claim_element(li5_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t30 = claim_text(a5_nodes, "ismn (International Standard Music Number)");
			a5_nodes.forEach(detach);
			t31 = claim_text(li5_nodes, " validator");
			li5_nodes.forEach(detach);
			t32 = claim_text(ul0_nodes, "\n            ");

			li6 = claim_element(ul0_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			t33 = claim_text(li6_nodes, "Add ");

			a6 = claim_element(li6_nodes, "A", { href: true, class: true }, false);
			var a6_nodes = children(a6);

			t34 = claim_text(a6_nodes, "issn (International Standard Serial Number)");
			a6_nodes.forEach(detach);
			t35 = claim_text(li6_nodes, " validator");
			li6_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t36 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t37 = claim_text(section1_nodes, "\n        ");

			ul1 = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li7 = claim_element(ul1_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			t38 = claim_text(li7_nodes, "Support using both the ");

			code2 = claim_element(li7_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t39 = claim_text(code2_nodes, "name");
			code2_nodes.forEach(detach);
			t40 = claim_text(li7_nodes, " attribute and ");

			code3 = claim_element(li7_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t41 = claim_text(code3_nodes, "selector");
			code3_nodes.forEach(detach);
			t42 = claim_text(li7_nodes, " option for field");
			li7_nodes.forEach(detach);
			t43 = claim_text(ul1_nodes, "\n            ");

			li8 = claim_element(ul1_nodes, "LI", {}, false);
			var li8_nodes = children(li8);

			t44 = claim_text(li8_nodes, "Indicate success/error tab");
			li8_nodes.forEach(detach);
			t45 = claim_text(ul1_nodes, "\n            ");

			li9 = claim_element(ul1_nodes, "LI", {}, false);
			var li9_nodes = children(li9);

			t46 = claim_text(li9_nodes, "Add UK postcode support for the ");

			a7 = claim_element(li9_nodes, "A", { href: true, class: true }, false);
			var a7_nodes = children(a7);

			t47 = claim_text(a7_nodes, "zipCode validator");
			a7_nodes.forEach(detach);
			li9_nodes.forEach(detach);
			t48 = claim_text(ul1_nodes, "\n            ");

			li10 = claim_element(ul1_nodes, "LI", {}, false);
			var li10_nodes = children(li10);

			t49 = claim_text(li10_nodes, "The ");

			a8 = claim_element(li10_nodes, "A", { href: true, class: true }, false);
			var a8_nodes = children(a8);

			t50 = claim_text(a8_nodes, "date validator");
			a8_nodes.forEach(detach);
			t51 = claim_text(li10_nodes, " supports seconds");
			li10_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t52 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t53 = claim_text(section2_nodes, "\n        ");

			ul2 = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul2_nodes = children(ul2);

			li11 = claim_element(ul2_nodes, "LI", {}, false);
			var li11_nodes = children(li11);

			t54 = claim_text(li11_nodes, "Wrong prefix of Laser credit card number");
			li11_nodes.forEach(detach);
			ul2_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 92);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 143);
			add_location(code0, file, 11, 20, 319);
			a0.href = "/guide/validators/vat";
			a0.className = "blue dim link";
			add_location(a0, file, 11, 175, 474);
			add_location(li0, file, 11, 12, 311);
			add_location(code1, file, 12, 20, 589);
			a1.href = "/guide/validators/grid";
			a1.className = "blue dim link";
			add_location(a1, file, 12, 143, 712);
			add_location(li1, file, 12, 12, 581);
			a2.href = "/guide/validators/ean";
			a2.className = "blue dim link";
			add_location(a2, file, 13, 20, 811);
			add_location(li2, file, 13, 12, 803);
			a3.href = "/guide/validators/grid";
			a3.className = "blue dim link";
			add_location(a3, file, 14, 20, 939);
			add_location(li3, file, 14, 12, 931);
			a4.href = "/guide/validators/imei";
			a4.className = "blue dim link";
			add_location(a4, file, 15, 20, 1066);
			add_location(li4, file, 15, 12, 1058);
			a5.href = "/guide/validators/ismn";
			a5.className = "blue dim link";
			add_location(a5, file, 16, 20, 1215);
			add_location(li5, file, 16, 12, 1207);
			a6.href = "/guide/validators/issn";
			a6.className = "blue dim link";
			add_location(a6, file, 17, 20, 1352);
			add_location(li6, file, 17, 12, 1344);
			ul0.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul0, file, 10, 8, 266);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 196);
			add_location(code2, file, 24, 39, 1646);
			add_location(code3, file, 24, 71, 1678);
			add_location(li7, file, 24, 12, 1619);
			add_location(li8, file, 25, 12, 1734);
			a7.href = "/guide/validators/zip-code";
			a7.className = "blue dim link";
			add_location(a7, file, 26, 48, 1818);
			add_location(li9, file, 26, 12, 1782);
			a8.href = "/guide/validators/date";
			a8.className = "blue dim link";
			add_location(a8, file, 27, 20, 1924);
			add_location(li10, file, 27, 12, 1916);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 23, 8, 1574);
			section1.className = "mv5";
			add_location(section1, file, 21, 4, 1504);
			add_location(li11, file, 34, 12, 2166);
			ul2.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul2, file, 33, 8, 2121);
			section2.className = "mv5";
			add_location(section2, file, 31, 4, 2054);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, ul0);
			append(ul0, li0);
			append(li0, t5);
			append(li0, code0);
			append(code0, t6);
			append(li0, t7);
			append(li0, a0);
			append(a0, t8);
			append(li0, t9);
			append(ul0, t10);
			append(ul0, li1);
			append(li1, t11);
			append(li1, code1);
			append(code1, t12);
			append(li1, t13);
			append(li1, a1);
			append(a1, t14);
			append(li1, t15);
			append(ul0, t16);
			append(ul0, li2);
			append(li2, t17);
			append(li2, a2);
			append(a2, t18);
			append(li2, t19);
			append(ul0, t20);
			append(ul0, li3);
			append(li3, t21);
			append(li3, a3);
			append(a3, t22);
			append(li3, t23);
			append(ul0, t24);
			append(ul0, li4);
			append(li4, t25);
			append(li4, a4);
			append(a4, t26);
			append(li4, t27);
			append(ul0, t28);
			append(ul0, li5);
			append(li5, t29);
			append(li5, a5);
			append(a5, t30);
			append(li5, t31);
			append(ul0, t32);
			append(ul0, li6);
			append(li6, t33);
			append(li6, a6);
			append(a6, t34);
			append(li6, t35);
			insert(target, t36, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t37);
			append(section1, ul1);
			append(ul1, li7);
			append(li7, t38);
			append(li7, code2);
			append(code2, t39);
			append(li7, t40);
			append(li7, code3);
			append(code3, t41);
			append(li7, t42);
			append(ul1, t43);
			append(ul1, li8);
			append(li8, t44);
			append(ul1, t45);
			append(ul1, li9);
			append(li9, t46);
			append(li9, a7);
			append(a7, t47);
			append(ul1, t48);
			append(ul1, li10);
			append(li10, t49);
			append(li10, a8);
			append(a8, t50);
			append(li10, t51);
			insert(target, t52, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t53);
			append(section2, ul2);
			append(ul2, li11);
			append(li11, t54);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			if (detaching) {
				detach(t36);
				detach(section1);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t52);
				detach(section2);
			}

			heading2.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var changeloglayout = new ChangelogLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			changeloglayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			changeloglayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • v0.4.4";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(changeloglayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var changeloglayout_changes = {};
			if (changed.$$scope) changeloglayout_changes.$$scope = { changed, ctx };
			changeloglayout.$set(changeloglayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			changeloglayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			changeloglayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			changeloglayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

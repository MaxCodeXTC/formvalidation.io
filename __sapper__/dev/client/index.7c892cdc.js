import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';

/* src/routes/guide/plugins/aria/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/plugins/aria/index.svelte";

// (10:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Usage");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Usage");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (53:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (59:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changelog");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changelog");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (67:12) <PrevButton target="/guide/plugins/alias">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Alias plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Alias plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (68:12) <NextButton target="/guide/plugins/auto-focus">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("AutoFocus plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "AutoFocus plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, p0, t5, t6, ul0, li0, code0, t7, t8, code1, t9, t10, t11, li1, code2, t12, t13, code3, t14, t15, t16, p1, t17, t18, t19, p2, t20, code4, t21, t22, t23, section1, t24, p3, t25, span0, t26, t27, span1, t28, t29, t30, t31, section2, t32, ul1, li2, t33, t34, section3, div, t35, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="demoForm" method="POST">
        ...
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                aria: new FormValidation.plugins.Aria(),
                ...
            },
        }
    );
});
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/plugins/aria/basic",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/plugins/alias",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/plugins/auto-focus",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Aria plugin");
			t1 = space();
			h2 = element("h2");
			t2 = text("Add ARIA attributes based on the field validity");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			p0 = element("p");
			t5 = text("The list of ARIA attributes are:");
			t6 = space();
			ul0 = element("ul");
			li0 = element("li");
			code0 = element("code");
			t7 = text("aria-invalid");
			t8 = text(", ");
			code1 = element("code");
			t9 = text("aria-describedby");
			t10 = text(" for field element");
			t11 = space();
			li1 = element("li");
			code2 = element("code");
			t12 = text("aria-hidden");
			t13 = text(", ");
			code3 = element("code");
			t14 = text("role");
			t15 = text(" for associated error message element");
			t16 = space();
			p1 = element("p");
			t17 = text("The following piece of code is the starting point to use the Aria plugin:");
			t18 = space();
			samplecode.$$.fragment.c();
			t19 = space();
			p2 = element("p");
			t20 = text("The sample code above assumes that the FormValidation files are placed inside the ");
			code4 = element("code");
			t21 = text("vendors");
			t22 = text(" directory. You might need to change the path depending on where you place them on the server.");
			t23 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t24 = space();
			p3 = element("p");
			t25 = text("Try to press the ");
			span0 = element("span");
			t26 = text("Add product");
			t27 = text(" button and inspect the field and error message elements using your browser ");
			span1 = element("span");
			t28 = text("Developer Tools");
			t29 = text(" to see how the ARIA attributes above are added to them.");
			t30 = space();
			demo.$$.fragment.c();
			t31 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t32 = space();
			ul1 = element("ul");
			li2 = element("li");
			t33 = text("v1.0.0: First release");
			t34 = space();
			section3 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t35 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Aria plugin");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Add ARIA attributes based on the field validity");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t5 = claim_text(p0_nodes, "The list of ARIA attributes are:");
			p0_nodes.forEach(detach);
			t6 = claim_text(section0_nodes, "\n        ");

			ul0 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			code0 = claim_element(li0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t7 = claim_text(code0_nodes, "aria-invalid");
			code0_nodes.forEach(detach);
			t8 = claim_text(li0_nodes, ", ");

			code1 = claim_element(li0_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t9 = claim_text(code1_nodes, "aria-describedby");
			code1_nodes.forEach(detach);
			t10 = claim_text(li0_nodes, " for field element");
			li0_nodes.forEach(detach);
			t11 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			code2 = claim_element(li1_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t12 = claim_text(code2_nodes, "aria-hidden");
			code2_nodes.forEach(detach);
			t13 = claim_text(li1_nodes, ", ");

			code3 = claim_element(li1_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t14 = claim_text(code3_nodes, "role");
			code3_nodes.forEach(detach);
			t15 = claim_text(li1_nodes, " for associated error message element");
			li1_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			t16 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t17 = claim_text(p1_nodes, "The following piece of code is the starting point to use the Aria plugin:");
			p1_nodes.forEach(detach);
			t18 = claim_text(section0_nodes, "\n");
			samplecode.$$.fragment.l(section0_nodes);
			t19 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t20 = claim_text(p2_nodes, "The sample code above assumes that the FormValidation files are placed inside the ");

			code4 = claim_element(p2_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t21 = claim_text(code4_nodes, "vendors");
			code4_nodes.forEach(detach);
			t22 = claim_text(p2_nodes, " directory. You might need to change the path depending on where you place them on the server.");
			p2_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t23 = claim_text(nodes, "\n    \n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t24 = claim_text(section1_nodes, "\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t25 = claim_text(p3_nodes, "Try to press the ");

			span0 = claim_element(p3_nodes, "SPAN", { class: true }, false);
			var span0_nodes = children(span0);

			t26 = claim_text(span0_nodes, "Add product");
			span0_nodes.forEach(detach);
			t27 = claim_text(p3_nodes, " button and inspect the field and error message elements using your browser ");

			span1 = claim_element(p3_nodes, "SPAN", { class: true }, false);
			var span1_nodes = children(span1);

			t28 = claim_text(span1_nodes, "Developer Tools");
			span1_nodes.forEach(detach);
			t29 = claim_text(p3_nodes, " to see how the ARIA attributes above are added to them.");
			p3_nodes.forEach(detach);
			t30 = claim_text(section1_nodes, "\n        ");
			demo.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t31 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t32 = claim_text(section2_nodes, "\n        ");

			ul1 = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li2 = claim_element(ul1_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t33 = claim_text(li2_nodes, "v1.0.0: First release");
			li2_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			t34 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			div = claim_element(section3_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t35 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 93);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 142);
			p0.className = "lh-copy";
			add_location(p0, file, 10, 8, 285);
			add_location(code0, file, 12, 16, 394);
			add_location(code1, file, 12, 43, 421);
			add_location(li0, file, 12, 12, 390);
			add_location(code2, file, 13, 16, 490);
			add_location(code3, file, 13, 42, 516);
			add_location(li1, file, 13, 12, 486);
			ul0.className = "ma0 pl3 lh-copy";
			add_location(ul0, file, 11, 8, 349);
			p1.className = "lh-copy";
			add_location(p1, file, 15, 8, 598);
			add_location(code4, file, 48, 109, 1606);
			p2.className = "lh-copy";
			add_location(p2, file, 48, 8, 1505);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 222);
			span0.className = "i";
			add_location(span0, file, 53, 44, 1856);
			span1.className = "i";
			add_location(span1, file, 53, 154, 1966);
			p3.className = "lh-copy";
			add_location(p3, file, 53, 8, 1820);
			section1.className = "mv5";
			add_location(section1, file, 51, 4, 1749);
			add_location(li2, file, 60, 12, 2275);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 59, 8, 2230);
			section2.className = "mv5";
			add_location(section2, file, 57, 4, 2163);
			div.className = "flex";
			add_location(div, file, 65, 8, 2370);
			section3.className = "mv5";
			add_location(section3, file, 64, 4, 2340);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, p0);
			append(p0, t5);
			append(section0, t6);
			append(section0, ul0);
			append(ul0, li0);
			append(li0, code0);
			append(code0, t7);
			append(li0, t8);
			append(li0, code1);
			append(code1, t9);
			append(li0, t10);
			append(ul0, t11);
			append(ul0, li1);
			append(li1, code2);
			append(code2, t12);
			append(li1, t13);
			append(li1, code3);
			append(code3, t14);
			append(li1, t15);
			append(section0, t16);
			append(section0, p1);
			append(p1, t17);
			append(section0, t18);
			mount_component(samplecode, section0, null);
			append(section0, t19);
			append(section0, p2);
			append(p2, t20);
			append(p2, code4);
			append(code4, t21);
			append(p2, t22);
			insert(target, t23, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t24);
			append(section1, p3);
			append(p3, t25);
			append(p3, span0);
			append(span0, t26);
			append(p3, t27);
			append(p3, span1);
			append(span1, t28);
			append(p3, t29);
			append(section1, t30);
			mount_component(demo, section1, null);
			insert(target, t31, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t32);
			append(section2, ul1);
			append(ul1, li2);
			append(li2, t33);
			insert(target, t34, anchor);
			insert(target, section3, anchor);
			append(section3, div);
			mount_component(prevbutton, div, null);
			append(div, t35);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			samplecode.$destroy();

			if (detaching) {
				detach(t23);
				detach(section1);
			}

			heading1.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t31);
				detach(section2);
			}

			heading2.$destroy();

			if (detaching) {
				detach(t34);
				detach(section3);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Aria plugin";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

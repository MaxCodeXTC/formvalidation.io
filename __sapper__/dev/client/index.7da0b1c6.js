import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';

/* src/routes/guide/plugins/alias/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/plugins/alias/index.svelte";

// (10:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Usage");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Usage");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (79:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (140:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changelog");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changelog");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (150:12) <PrevButton target="/guide/plugins">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Plugins");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Plugins");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (151:12) <NextButton target="/guide/plugins/aria">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Aria plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Aria plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, p0, t5, a0, t6, t7, t8, t9, p1, t10, t11, p2, t12, t13, t14, p3, t15, code, t16, t17, t18, section1, t19, p4, t20, a1, t21, t22, t23, div0, t24, p5, t25, t26, t27, section2, t28, ul, li, t29, t30, t31, section3, div1, t32, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
FormValidation.formValidation(
    document.getElementById('demoForm'),
    {
        fields: {
            password: {
                validators: {
                    callback: {
                        // Check if the password has at least one digit
                    },
                    callback: {
                        // Check if the password has at least one special character
                    },
                    callback: {
                        // Check if the password has at least one uppercase character
                    },
                    callback: {
                        // Check if the password has at least one lowercase character
                    },
                }
            },
            ...
        },
    }
);
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="demoForm" method="POST">
        ...
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>    
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                alias: new FormValidation.plugins.Alias({
                    // Map the alias with defined validator name
                    ALIAS_NAME: BUILT_IN_VALIDATOR,
                }),
                ...
            },
        }
    );
});
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "javascript", code: `
FormValidation.formValidation(
    document.getElementById('demoForm'),
    {
        fields: {
            password: {
                validators: {
                    required: {
                        message: 'The password is required'
                    },
                    checkStrength: {
                        message: 'It must be more than 8 characters long',
                        callback: function(input) {
                            return input.value.length >= 8;
                        },
                    },
                    checkUppercase: {
                        message: 'It must contain at least one uppercase character',
                        callback: function(input) {
                            return input.value != input.value.toLowerCase();
                        },
                    },
                    checkLowercase: {
                        message: 'It must contain at least one lowercase character',
                        callback: function(input) {
                            return input.value != input.value.toUpperCase();
                        },
                    },
                    checkDigit: {
                        message: 'It must contain at least one digit',
                        callback: function(input) {
                            return input.value.search(/[0-9]/) >= 0;
                        },
                    },
                }
            },
        },
        plugins: {
            ...
            alias: new FormValidation.plugins.Alias({
                // The required validator is infact treated as notEmpty validator
                required: 'notEmpty',
                // These checkers are treated as callback validator
                checkStrength: 'callback',
                checkUppercase: 'callback',
                checkLowercase: 'callback',
                checkDigit: 'callback',
            }),
        },
    }
);
` },
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/plugins/alias/basic",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['callback'] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/plugins",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/plugins/aria",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Alias plugin");
			t1 = space();
			h2 = element("h2");
			t2 = text("Allow to use multiple instances of the same validator");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			p0 = element("p");
			t5 = text("If you want to have multiple instances of particular validator, such as different ");
			a0 = element("a");
			t6 = text("callback");
			t7 = text(" validators, the following approach doesn't work:");
			t8 = space();
			samplecode0.$$.fragment.c();
			t9 = space();
			p1 = element("p");
			t10 = text("It is a common case especially when you use an external service to validate field. The Alias plugin is handy for these scenarios.");
			t11 = space();
			p2 = element("p");
			t12 = text("The following piece of code is the starting point to use the Alias plugin:");
			t13 = space();
			samplecode1.$$.fragment.c();
			t14 = space();
			p3 = element("p");
			t15 = text("The sample code above assumes that the FormValidation files are placed inside the ");
			code = element("code");
			t16 = text("vendors");
			t17 = text(" directory. You might need to change the path depending on where you place them on the server.");
			t18 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t19 = space();
			p4 = element("p");
			t20 = text("The following example registers various methods to validate a password by different requirements, but all of them are alias of the ");
			a1 = element("a");
			t21 = text("callback");
			t22 = text(" validator:");
			t23 = space();
			div0 = element("div");
			samplecode2.$$.fragment.c();
			t24 = space();
			p5 = element("p");
			t25 = text("The Alias plugin gives you the beauty of code because you can split complicate logic into different, smaller, more maintainable parts as seen above.");
			t26 = space();
			demo.$$.fragment.c();
			t27 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t28 = space();
			ul = element("ul");
			li = element("li");
			t29 = text("v1.0.0: First release");
			t30 = space();
			relatedvalidators.$$.fragment.c();
			t31 = space();
			section3 = element("section");
			div1 = element("div");
			prevbutton.$$.fragment.c();
			t32 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Alias plugin");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Allow to use multiple instances of the same validator");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t5 = claim_text(p0_nodes, "If you want to have multiple instances of particular validator, such as different ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t6 = claim_text(a0_nodes, "callback");
			a0_nodes.forEach(detach);
			t7 = claim_text(p0_nodes, " validators, the following approach doesn't work:");
			p0_nodes.forEach(detach);
			t8 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t9 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t10 = claim_text(p1_nodes, "It is a common case especially when you use an external service to validate field. The Alias plugin is handy for these scenarios.");
			p1_nodes.forEach(detach);
			t11 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t12 = claim_text(p2_nodes, "The following piece of code is the starting point to use the Alias plugin:");
			p2_nodes.forEach(detach);
			t13 = claim_text(section0_nodes, "\n");
			samplecode1.$$.fragment.l(section0_nodes);
			t14 = claim_text(section0_nodes, "\n        ");

			p3 = claim_element(section0_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t15 = claim_text(p3_nodes, "The sample code above assumes that the FormValidation files are placed inside the ");

			code = claim_element(p3_nodes, "CODE", {}, false);
			var code_nodes = children(code);

			t16 = claim_text(code_nodes, "vendors");
			code_nodes.forEach(detach);
			t17 = claim_text(p3_nodes, " directory. You might need to change the path depending on where you place them on the server.");
			p3_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t18 = claim_text(nodes, "\n    \n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t19 = claim_text(section1_nodes, "\n        ");

			p4 = claim_element(section1_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t20 = claim_text(p4_nodes, "The following example registers various methods to validate a password by different requirements, but all of them are alias of the ");

			a1 = claim_element(p4_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t21 = claim_text(a1_nodes, "callback");
			a1_nodes.forEach(detach);
			t22 = claim_text(p4_nodes, " validator:");
			p4_nodes.forEach(detach);
			t23 = claim_text(section1_nodes, "\n        ");

			div0 = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			samplecode2.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach);
			t24 = claim_text(section1_nodes, "\n        ");

			p5 = claim_element(section1_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t25 = claim_text(p5_nodes, "The Alias plugin gives you the beauty of code because you can split complicate logic into different, smaller, more maintainable parts as seen above.");
			p5_nodes.forEach(detach);
			t26 = claim_text(section1_nodes, "\n        ");
			demo.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t27 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t28 = claim_text(section2_nodes, "\n        ");

			ul = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li = claim_element(ul_nodes, "LI", {}, false);
			var li_nodes = children(li);

			t29 = claim_text(li_nodes, "v1.0.0: First release");
			li_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			t30 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			t31 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			div1 = claim_element(section3_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			prevbutton.$$.fragment.l(div1_nodes);
			t32 = claim_text(div1_nodes, "\n            ");
			nextbutton.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 94);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 144);
			a0.href = "/guide/validators/callback";
			a0.className = "blue dim link";
			add_location(a0, file, 10, 109, 394);
			p0.className = "lh-copy";
			add_location(p0, file, 10, 8, 293);
			p1.className = "lh-copy";
			add_location(p1, file, 37, 8, 1338);
			p2.className = "lh-copy";
			add_location(p2, file, 38, 8, 1499);
			add_location(code, file, 74, 109, 2650);
			p3.className = "lh-copy";
			add_location(p3, file, 74, 8, 2549);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 230);
			a1.href = "/guide/validators/callback";
			a1.className = "blue dim link";
			add_location(a1, file, 79, 158, 3014);
			p4.className = "lh-copy";
			add_location(p4, file, 79, 8, 2864);
			div0.className = "mb4";
			add_location(div0, file, 80, 8, 3109);
			p5.className = "lh-copy";
			add_location(p5, file, 134, 8, 5141);
			section1.className = "mv5";
			add_location(section1, file, 77, 4, 2793);
			add_location(li, file, 141, 12, 5524);
			ul.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul, file, 140, 8, 5479);
			section2.className = "mv5";
			add_location(section2, file, 138, 4, 5412);
			div1.className = "flex";
			add_location(div1, file, 148, 8, 5672);
			section3.className = "mv5";
			add_location(section3, file, 147, 4, 5642);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, p0);
			append(p0, t5);
			append(p0, a0);
			append(a0, t6);
			append(p0, t7);
			append(section0, t8);
			mount_component(samplecode0, section0, null);
			append(section0, t9);
			append(section0, p1);
			append(p1, t10);
			append(section0, t11);
			append(section0, p2);
			append(p2, t12);
			append(section0, t13);
			mount_component(samplecode1, section0, null);
			append(section0, t14);
			append(section0, p3);
			append(p3, t15);
			append(p3, code);
			append(code, t16);
			append(p3, t17);
			insert(target, t18, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t19);
			append(section1, p4);
			append(p4, t20);
			append(p4, a1);
			append(a1, t21);
			append(p4, t22);
			append(section1, t23);
			append(section1, div0);
			mount_component(samplecode2, div0, null);
			append(section1, t24);
			append(section1, p5);
			append(p5, t25);
			append(section1, t26);
			mount_component(demo, section1, null);
			insert(target, t27, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t28);
			append(section2, ul);
			append(ul, li);
			append(li, t29);
			insert(target, t30, anchor);
			mount_component(relatedvalidators, target, anchor);
			insert(target, t31, anchor);
			insert(target, section3, anchor);
			append(section3, div1);
			mount_component(prevbutton, div1, null);
			append(div1, t32);
			mount_component(nextbutton, div1, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t18);
				detach(section1);
			}

			heading1.$destroy();

			samplecode2.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t27);
				detach(section2);
			}

			heading2.$destroy();

			if (detaching) {
				detach(t30);
			}

			relatedvalidators.$destroy(detaching);

			if (detaching) {
				detach(t31);
				detach(section3);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Alias plugin";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

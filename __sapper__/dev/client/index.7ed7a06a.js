import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, r as noop } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';

/* src/routes/guide/examples/validating-multiple-inputs-as-one/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/validating-multiple-inputs-as-one/index.svelte";

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section, p0, t2, t3, p1, t4, t5, p2, t6, t7, t8, p3, t9, t10, t11, p4, t12, code, t13, t14, t15, t16, p5, t17, t18, t19, t20, current;

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<form id="demoForm" method="POST">
    <input type="text" name="date" placeholder="Date" />
    <input type="text" name="month" placeholder="Month" />
    <input type="text" name="year" placeholder="Year" />

    <!-- Create a hidden field which is combined by 3 fields above -->
    <input type="hidden" name="dob" />
</form>
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
const form = document.getElementById('demoForm');

const fv = FormValidation.formValidation(
    form,
    {
        fields: {
            dob: {
                validators: {
                    notEmpty: {
                        message: 'Please fill out each field'
                    },
                    date: {
                        format: 'YYYY/MM/DD',
                        message: 'Please enter a valid date',
                    },
                }
            }
        },
        plugins: {
            ...
        },
    }
);
` },
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "javascript", code: `
const keyupHandler = function() {
    const y = form.querySelector('[name="year"]').value;
    const m = form.querySelector('[name="month"]').value;
    const d = form.querySelector('[name="date"]').value;

    // Set the dob field value
    const dob = y === '' || m === '' || d === '' ? '' : [y, m, d].join('/');
    form.querySelector('[name="dob"]').value = dob;

    // Revalidate it
    fv.revalidateField('dob');
};

form.querySelector('[name="year"]').addEventListener('keyup', keyupHandler);
form.querySelector('[name="month"]').addEventListener('keyup', keyupHandler);
form.querySelector('[name="date"]').addEventListener('keyup', keyupHandler);
` },
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/examples/validating-multiple-inputs-as-one",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Disabling date',
        'Integrating with Bootstrap Datepicker',
        'Integrating with flatpickr',
        'Supporting custom date format',
        'Validating date range',
        'Validating multiple inputs as one',
    ] },
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['date'] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Validating multiple inputs as one");
			t1 = space();
			section = element("section");
			p0 = element("p");
			t2 = text("In some cases, you need to validate a value which is combined by various fields. For instance, a Birthday field might be a combination of Date, Month and Year one.");
			t3 = space();
			p1 = element("p");
			t4 = text("This example show a way to deal with these cases. The following form requires all of Date, Month and Year fields. Also, the combination of them must be a valid date.");
			t5 = space();
			p2 = element("p");
			t6 = text("First, we need to create a hidden field that its value is generated from Date, Month and Year fields:");
			t7 = space();
			samplecode0.$$.fragment.c();
			t8 = space();
			p3 = element("p");
			t9 = text("We set the validator rules for that hidden field as usual:");
			t10 = space();
			samplecode1.$$.fragment.c();
			t11 = space();
			p4 = element("p");
			t12 = text("Finally, when any of Date, Month and Year fields changes its value, we need to update the hidden field value and revalidate it using the ");
			code = element("code");
			t13 = text("revalidateField()");
			t14 = text(" method:");
			t15 = space();
			samplecode2.$$.fragment.c();
			t16 = space();
			p5 = element("p");
			t17 = text("Here is the working example:");
			t18 = space();
			demo.$$.fragment.c();
			t19 = space();
			examples.$$.fragment.c();
			t20 = space();
			relatedvalidators.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Validating multiple inputs as one");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    \n    ");

			section = claim_element(nodes, "SECTION", { class: true }, false);
			var section_nodes = children(section);

			p0 = claim_element(section_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "In some cases, you need to validate a value which is combined by various fields. For instance, a Birthday field might be a combination of Date, Month and Year one.");
			p0_nodes.forEach(detach);
			t3 = claim_text(section_nodes, "\n        ");

			p1 = claim_element(section_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t4 = claim_text(p1_nodes, "This example show a way to deal with these cases. The following form requires all of Date, Month and Year fields. Also, the combination of them must be a valid date.");
			p1_nodes.forEach(detach);
			t5 = claim_text(section_nodes, "\n        ");

			p2 = claim_element(section_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t6 = claim_text(p2_nodes, "First, we need to create a hidden field that its value is generated from Date, Month and Year fields:");
			p2_nodes.forEach(detach);
			t7 = claim_text(section_nodes, "\n");
			samplecode0.$$.fragment.l(section_nodes);
			t8 = claim_text(section_nodes, "\n        ");

			p3 = claim_element(section_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t9 = claim_text(p3_nodes, "We set the validator rules for that hidden field as usual:");
			p3_nodes.forEach(detach);
			t10 = claim_text(section_nodes, "        \n");
			samplecode1.$$.fragment.l(section_nodes);
			t11 = claim_text(section_nodes, "       \n        ");

			p4 = claim_element(section_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t12 = claim_text(p4_nodes, "Finally, when any of Date, Month and Year fields changes its value, we need to update the hidden field value and revalidate it using the ");

			code = claim_element(p4_nodes, "CODE", {}, false);
			var code_nodes = children(code);

			t13 = claim_text(code_nodes, "revalidateField()");
			code_nodes.forEach(detach);
			t14 = claim_text(p4_nodes, " method:");
			p4_nodes.forEach(detach);
			t15 = claim_text(section_nodes, "\n");
			samplecode2.$$.fragment.l(section_nodes);
			t16 = claim_text(section_nodes, "\n        ");

			p5 = claim_element(section_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t17 = claim_text(p5_nodes, "Here is the working example:");
			p5_nodes.forEach(detach);
			t18 = claim_text(section_nodes, "\n        ");
			demo.$$.fragment.l(section_nodes);
			section_nodes.forEach(detach);
			t19 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			t20 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 115);
			p0.className = "lh-copy";
			add_location(p0, file, 8, 8, 216);
			p1.className = "lh-copy";
			add_location(p1, file, 9, 8, 411);
			p2.className = "lh-copy";
			add_location(p2, file, 10, 8, 608);
			p3.className = "lh-copy";
			add_location(p3, file, 21, 8, 1106);
			add_location(code, file, 47, 164, 1961);
			p4.className = "lh-copy";
			add_location(p4, file, 47, 8, 1805);
			p5.className = "lh-copy";
			add_location(p5, file, 66, 8, 2712);
			section.className = "mv5";
			add_location(section, file, 7, 4, 186);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section, anchor);
			append(section, p0);
			append(p0, t2);
			append(section, t3);
			append(section, p1);
			append(p1, t4);
			append(section, t5);
			append(section, p2);
			append(p2, t6);
			append(section, t7);
			mount_component(samplecode0, section, null);
			append(section, t8);
			append(section, p3);
			append(p3, t9);
			append(section, t10);
			mount_component(samplecode1, section, null);
			append(section, t11);
			append(section, p4);
			append(p4, t12);
			append(p4, code);
			append(code, t13);
			append(p4, t14);
			append(section, t15);
			mount_component(samplecode2, section, null);
			append(section, t16);
			append(section, p5);
			append(p5, t17);
			append(section, t18);
			mount_component(demo, section, null);
			insert(target, t19, anchor);
			mount_component(examples, target, anchor);
			insert(target, t20, anchor);
			mount_component(relatedvalidators, target, anchor);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section);
			}

			samplecode0.$destroy();

			samplecode1.$destroy();

			samplecode2.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t19);
			}

			examples.$destroy(detaching);

			if (detaching) {
				detach(t20);
			}

			relatedvalidators.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Validating multiple inputs as one";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

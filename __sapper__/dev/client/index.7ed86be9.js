import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, z as check_outros, I as destroy_each, y as on_outro, x as group_outros } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';
import { a as SampleData } from './chunk.41999a23.js';

/* src/routes/guide/validators/iban/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/validators/iban/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.sample = list[i];
	return child_ctx;
}

// (10:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (51:53) {#if sample.sepa}
function create_if_block(ctx) {
	var t;

	return {
		c: function create() {
			t = text("(SEPA)");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "(SEPA)");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (49:12) {#each _samples as sample}
function create_each_block(ctx) {
	var tr, td0, t0_value = ctx.sample.country, t0, t1, t2, td1, t3_value = ctx.sample.code, t3, t4, current;

	var if_block = (ctx.sample.sepa) && create_if_block(ctx);

	var sampledata = new SampleData({
		props: {
		sample: ctx.sample.example,
		sender: "/guide/validators/iban/basic"
	},
		$$inline: true
	});

	return {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			t2 = space();
			td1 = element("td");
			t3 = text(t3_value);
			t4 = space();
			sampledata.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", { class: true }, false);
			var tr_nodes = children(tr);

			td0 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			t0 = claim_text(td0_nodes, t0_value);
			t1 = claim_text(td0_nodes, " ");
			if (if_block) if_block.l(td0_nodes);
			td0_nodes.forEach(detach);
			t2 = claim_text(tr_nodes, "\n                ");

			td1 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			t3 = claim_text(td1_nodes, t3_value);
			td1_nodes.forEach(detach);
			t4 = claim_text(tr_nodes, "\n                ");
			sampledata.$$.fragment.l(tr_nodes);
			tr_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			td0.className = "pv2 ph3";
			add_location(td0, file, 50, 16, 2829);
			td1.className = "pv2 ph3";
			add_location(td1, file, 51, 16, 2916);
			tr.className = "striped--light-gray";
			add_location(tr, file, 49, 12, 2780);
		},

		m: function mount(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td0);
			append(td0, t0);
			append(td0, t1);
			if (if_block) if_block.m(td0, null);
			append(tr, t2);
			append(tr, td1);
			append(td1, t3);
			append(tr, t4);
			mount_component(sampledata, tr, null);
			current = true;
		},

		p: function update(changed, ctx) {
			if (ctx.sample.sepa) {
				if (!if_block) {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(td0, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			var sampledata_changes = {};
			if (changed._samples) sampledata_changes.sample = ctx.sample.example;
			sampledata.$set(sampledata_changes);
		},

		i: function intro(local) {
			if (current) return;
			sampledata.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			sampledata.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(tr);
			}

			if (if_block) if_block.d();

			sampledata.$destroy();
		}
	};
}

// (82:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (88:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("ES6 Module Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "ES6 Module Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (117:12) <PrevButton target="/guide/validators/hex">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("hex validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "hex validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (118:12) <NextButton target="/guide/validators/id">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("id validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "id validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, a0, t3, t4, section0, t5, h30, t6, t7, p0, t8, a1, t9, t10, t11, table0, tr0, th0, t12, t13, th1, t14, t15, th2, t16, t17, th3, t18, t19, tr1, td0, code0, t20, t21, td1, code1, t22, t23, td2, t24, t25, td3, t26, t27, tr2, td4, code2, t28, t29, td5, code3, t30, t31, td6, t32, t33, td7, t34, t35, tr3, td8, code4, t36, t37, td9, code5, t38, t39, td10, t40, t41, td11, t42, t43, p1, t44, code6, t45, t46, t47, table1, tr4, th4, t48, t49, th5, t50, t51, th6, t52, t53, th7, t54, t55, t56, h31, t57, t58, t59, section1, t60, p2, t61, t62, t63, section2, t64, p3, t65, t66, t67, t68, section3, div, t69, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var each_value = ctx._samples;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	function outro_block(i, detaching, local) {
		if (each_blocks[i]) {
			if (detaching) {
				on_outro(() => {
					each_blocks[i].d(detaching);
					each_blocks[i] = null;
				});
			}

			each_blocks[i].o(local);
		}
	}

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import iban from 'formvalidation/dist/es6/validators/iban';

const result = iban().validate({
    value: ...,
    options: {
        country: ...,
        message: ...,
        sepa: ...,
    },
});
/*
result is an object of
{
    valid: true or false,
    message: The error message
}
*/
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/validators/iban/basic",
		frameworks: ['bootstrap', 'tachyons']
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import iban from 'formvalidation/dist/es6/validators/iban';

const res1 = iban().validate({
    value: 'AT611904300234573201',
    options: {
        message: 'The value is not a valid IBAN',
    },
});
// res1.valid === true

const res2 = iban().validate({
    value: 'GB29NWBK6016133192681',
    options: {
        message: 'The value is not a valid IBAN',
    },
});
// res2.valid === false
` },
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['bic', 'creditCard', 'rtn'] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/validators/hex",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/validators/id",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("iban validator");
			t1 = space();
			h2 = element("h2");
			t2 = text("Validate an ");
			a0 = element("a");
			t3 = text("International Bank Account Number (IBAN)");
			t4 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t5 = space();
			h30 = element("h3");
			t6 = text("Using with form field");
			t7 = space();
			p0 = element("p");
			t8 = text("The HTML attributes are used to set the validator options via the ");
			a1 = element("a");
			t9 = text("Declarative");
			t10 = text(" plugin");
			t11 = space();
			table0 = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t12 = text("Name");
			t13 = space();
			th1 = element("th");
			t14 = text("HTML attribute");
			t15 = space();
			th2 = element("th");
			t16 = text("Type");
			t17 = space();
			th3 = element("th");
			t18 = text("Description");
			t19 = space();
			tr1 = element("tr");
			td0 = element("td");
			code0 = element("code");
			t20 = text("country");
			t21 = space();
			td1 = element("td");
			code1 = element("code");
			t22 = text("data-fv-iban___country");
			t23 = space();
			td2 = element("td");
			t24 = text("String");
			t25 = space();
			td3 = element("td");
			t26 = text("An ISO-3166 country code");
			t27 = space();
			tr2 = element("tr");
			td4 = element("td");
			code2 = element("code");
			t28 = text("message");
			t29 = space();
			td5 = element("td");
			code3 = element("code");
			t30 = text("data-fv-iban___message");
			t31 = space();
			td6 = element("td");
			t32 = text("String");
			t33 = space();
			td7 = element("td");
			t34 = text("The error message");
			t35 = space();
			tr3 = element("tr");
			td8 = element("td");
			code4 = element("code");
			t36 = text("sepa");
			t37 = space();
			td9 = element("td");
			code5 = element("code");
			t38 = text("data-fv-iban___sepa");
			t39 = space();
			td10 = element("td");
			t40 = text("Boolean");
			t41 = space();
			td11 = element("td");
			t42 = text("Set it to true (false) to indicate that the IBAN number must be (not be) from SEPA countries. The list of SEPA countries are indicated in the table below. By default, this option is not defined");
			t43 = space();
			p1 = element("p");
			t44 = text("If the ");
			code6 = element("code");
			t45 = text("country");
			t46 = text(" is not defined, it will be parsed from the IBAN number. The validator supports the following countries (sorted by the country code in alphabetical order):");
			t47 = space();
			table1 = element("table");
			tr4 = element("tr");
			th4 = element("th");
			t48 = text("Country");
			t49 = space();
			th5 = element("th");
			t50 = text("Code");
			t51 = space();
			th6 = element("th");
			t52 = text("Sample IBAN");
			t53 = space();
			th7 = element("th");
			t54 = text("Is it valid?");
			t55 = space();

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t56 = space();
			h31 = element("h3");
			t57 = text("Using with ES6 module");
			t58 = space();
			samplecode0.$$.fragment.c();
			t59 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t60 = space();
			p2 = element("p");
			t61 = text("You can click on sample from the table above to see if it's a valid or invalid IBAN.");
			t62 = space();
			demo.$$.fragment.c();
			t63 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t64 = space();
			p3 = element("p");
			t65 = text("The following snippet shows how to use the iban validator with ES6 module:");
			t66 = space();
			samplecode1.$$.fragment.c();
			t67 = space();
			relatedvalidators.$$.fragment.c();
			t68 = space();
			section3 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t69 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "iban validator");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Validate an ");

			a0 = claim_element(h2_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t3 = claim_text(a0_nodes, "International Bank Account Number (IBAN)");
			a0_nodes.forEach(detach);
			h2_nodes.forEach(detach);
			t4 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t5 = claim_text(section0_nodes, "\n\n        ");

			h30 = claim_element(section0_nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t6 = claim_text(h30_nodes, "Using with form field");
			h30_nodes.forEach(detach);
			t7 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t8 = claim_text(p0_nodes, "The HTML attributes are used to set the validator options via the ");

			a1 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t9 = claim_text(a1_nodes, "Declarative");
			a1_nodes.forEach(detach);
			t10 = claim_text(p0_nodes, " plugin");
			p0_nodes.forEach(detach);
			t11 = claim_text(section0_nodes, "\n        ");

			table0 = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table0_nodes = children(table0);

			tr0 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t12 = claim_text(th0_nodes, "Name");
			th0_nodes.forEach(detach);
			t13 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t14 = claim_text(th1_nodes, "HTML attribute");
			th1_nodes.forEach(detach);
			t15 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t16 = claim_text(th2_nodes, "Type");
			th2_nodes.forEach(detach);
			t17 = claim_text(tr0_nodes, "\n                ");

			th3 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th3_nodes = children(th3);

			t18 = claim_text(th3_nodes, "Description");
			th3_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t19 = claim_text(table0_nodes, "\n            ");

			tr1 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code0 = claim_element(td0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t20 = claim_text(code0_nodes, "country");
			code0_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t21 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			code1 = claim_element(td1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t22 = claim_text(code1_nodes, "data-fv-iban___country");
			code1_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			t23 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t24 = claim_text(td2_nodes, "String");
			td2_nodes.forEach(detach);
			t25 = claim_text(tr1_nodes, "\n                ");

			td3 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			t26 = claim_text(td3_nodes, "An ISO-3166 country code");
			td3_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t27 = claim_text(table0_nodes, "\n            ");

			tr2 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			code2 = claim_element(td4_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t28 = claim_text(code2_nodes, "message");
			code2_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t29 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			code3 = claim_element(td5_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t30 = claim_text(code3_nodes, "data-fv-iban___message");
			code3_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			t31 = claim_text(tr2_nodes, "\n                ");

			td6 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			t32 = claim_text(td6_nodes, "String");
			td6_nodes.forEach(detach);
			t33 = claim_text(tr2_nodes, "\n                ");

			td7 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			t34 = claim_text(td7_nodes, "The error message");
			td7_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t35 = claim_text(table0_nodes, "\n            ");

			tr3 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td8 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			code4 = claim_element(td8_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t36 = claim_text(code4_nodes, "sepa");
			code4_nodes.forEach(detach);
			td8_nodes.forEach(detach);
			t37 = claim_text(tr3_nodes, "\n                ");

			td9 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			code5 = claim_element(td9_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t38 = claim_text(code5_nodes, "data-fv-iban___sepa");
			code5_nodes.forEach(detach);
			td9_nodes.forEach(detach);
			t39 = claim_text(tr3_nodes, "\n                ");

			td10 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td10_nodes = children(td10);

			t40 = claim_text(td10_nodes, "Boolean");
			td10_nodes.forEach(detach);
			t41 = claim_text(tr3_nodes, "\n                ");

			td11 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td11_nodes = children(td11);

			t42 = claim_text(td11_nodes, "Set it to true (false) to indicate that the IBAN number must be (not be) from SEPA countries. The list of SEPA countries are indicated in the table below. By default, this option is not defined");
			td11_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			table0_nodes.forEach(detach);
			t43 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t44 = claim_text(p1_nodes, "If the ");

			code6 = claim_element(p1_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t45 = claim_text(code6_nodes, "country");
			code6_nodes.forEach(detach);
			t46 = claim_text(p1_nodes, " is not defined, it will be parsed from the IBAN number. The validator supports the following countries (sorted by the country code in alphabetical order):");
			p1_nodes.forEach(detach);
			t47 = claim_text(section0_nodes, "\n\n        ");

			table1 = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table1_nodes = children(table1);

			tr4 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			th4 = claim_element(tr4_nodes, "TH", { class: true }, false);
			var th4_nodes = children(th4);

			t48 = claim_text(th4_nodes, "Country");
			th4_nodes.forEach(detach);
			t49 = claim_text(tr4_nodes, "\n                ");

			th5 = claim_element(tr4_nodes, "TH", { class: true }, false);
			var th5_nodes = children(th5);

			t50 = claim_text(th5_nodes, "Code");
			th5_nodes.forEach(detach);
			t51 = claim_text(tr4_nodes, "\n                ");

			th6 = claim_element(tr4_nodes, "TH", { class: true }, false);
			var th6_nodes = children(th6);

			t52 = claim_text(th6_nodes, "Sample IBAN");
			th6_nodes.forEach(detach);
			t53 = claim_text(tr4_nodes, "\n                ");

			th7 = claim_element(tr4_nodes, "TH", { class: true }, false);
			var th7_nodes = children(th7);

			t54 = claim_text(th7_nodes, "Is it valid?");
			th7_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			t55 = claim_text(table1_nodes, "\n            ");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(table1_nodes);
			}

			table1_nodes.forEach(detach);
			t56 = claim_text(section0_nodes, "\n\n        ");

			h31 = claim_element(section0_nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t57 = claim_text(h31_nodes, "Using with ES6 module");
			h31_nodes.forEach(detach);
			t58 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t59 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t60 = claim_text(section1_nodes, "\n        ");

			p2 = claim_element(section1_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t61 = claim_text(p2_nodes, "You can click on sample from the table above to see if it's a valid or invalid IBAN.");
			p2_nodes.forEach(detach);
			t62 = claim_text(section1_nodes, "\n        ");
			demo.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t63 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t64 = claim_text(section2_nodes, "\n\n        ");

			p3 = claim_element(section2_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t65 = claim_text(p3_nodes, "The following snippet shows how to use the iban validator with ES6 module:");
			p3_nodes.forEach(detach);
			t66 = claim_text(section2_nodes, "\n");
			samplecode1.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t67 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			t68 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			div = claim_element(section3_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t69 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 96);
			a0.href = "https://en.wikipedia.org/wiki/International_Bank_Account_Number";
			a0.className = "blue dim link";
			add_location(a0, file, 6, 38, 182);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 148);
			add_location(h30, file, 11, 8, 399);
			a1.href = "/guide/plugins/declarative";
			a1.className = "blue dim link";
			add_location(a1, file, 12, 95, 525);
			p0.className = "lh-copy i";
			add_location(p0, file, 12, 8, 438);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 15, 16, 738);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 16, 16, 798);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 17, 16, 868);
			th3.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th3, file, 18, 16, 928);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 14, 12, 689);
			add_location(code0, file, 21, 36, 1078);
			td0.className = "pv2 ph3";
			add_location(td0, file, 21, 16, 1058);
			add_location(code1, file, 22, 36, 1140);
			td1.className = "pv2 ph3";
			add_location(td1, file, 22, 16, 1120);
			td2.className = "pv2 ph3";
			add_location(td2, file, 23, 16, 1197);
			td3.className = "pv2 ph3";
			add_location(td3, file, 24, 16, 1245);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 20, 12, 1009);
			add_location(code2, file, 27, 36, 1394);
			td4.className = "pv2 ph3";
			add_location(td4, file, 27, 16, 1374);
			add_location(code3, file, 28, 36, 1456);
			td5.className = "pv2 ph3";
			add_location(td5, file, 28, 16, 1436);
			td6.className = "pv2 ph3";
			add_location(td6, file, 29, 16, 1513);
			td7.className = "pv2 ph3";
			add_location(td7, file, 30, 16, 1561);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 26, 12, 1325);
			add_location(code4, file, 33, 36, 1703);
			td8.className = "pv2 ph3";
			add_location(td8, file, 33, 16, 1683);
			add_location(code5, file, 34, 36, 1762);
			td9.className = "pv2 ph3";
			add_location(td9, file, 34, 16, 1742);
			td10.className = "pv2 ph3";
			add_location(td10, file, 35, 16, 1816);
			td11.className = "pv2 ph3 lh-copy";
			add_location(td11, file, 36, 16, 1865);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 32, 12, 1634);
			table0.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table0, file, 13, 8, 619);
			add_location(code6, file, 39, 34, 2161);
			p1.className = "lh-copy";
			add_location(p1, file, 39, 8, 2135);
			th4.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th4, file, 43, 16, 2469);
			th5.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th5, file, 44, 16, 2532);
			th6.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th6, file, 45, 16, 2592);
			th7.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th7, file, 46, 16, 2659);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 42, 12, 2420);
			table1.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table1, file, 41, 8, 2350);
			add_location(h31, file, 57, 8, 3112);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 333);
			p2.className = "lh-copy";
			add_location(p2, file, 82, 8, 3614);
			section1.className = "mv5";
			add_location(section1, file, 80, 4, 3543);
			p3.className = "lh-copy";
			add_location(p3, file, 89, 8, 3913);
			section2.className = "mv5";
			add_location(section2, file, 86, 4, 3836);
			div.className = "flex";
			add_location(div, file, 115, 8, 4615);
			section3.className = "mv5";
			add_location(section3, file, 114, 4, 4585);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			append(h2, a0);
			append(a0, t3);
			insert(target, t4, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t5);
			append(section0, h30);
			append(h30, t6);
			append(section0, t7);
			append(section0, p0);
			append(p0, t8);
			append(p0, a1);
			append(a1, t9);
			append(p0, t10);
			append(section0, t11);
			append(section0, table0);
			append(table0, tr0);
			append(tr0, th0);
			append(th0, t12);
			append(tr0, t13);
			append(tr0, th1);
			append(th1, t14);
			append(tr0, t15);
			append(tr0, th2);
			append(th2, t16);
			append(tr0, t17);
			append(tr0, th3);
			append(th3, t18);
			append(table0, t19);
			append(table0, tr1);
			append(tr1, td0);
			append(td0, code0);
			append(code0, t20);
			append(tr1, t21);
			append(tr1, td1);
			append(td1, code1);
			append(code1, t22);
			append(tr1, t23);
			append(tr1, td2);
			append(td2, t24);
			append(tr1, t25);
			append(tr1, td3);
			append(td3, t26);
			append(table0, t27);
			append(table0, tr2);
			append(tr2, td4);
			append(td4, code2);
			append(code2, t28);
			append(tr2, t29);
			append(tr2, td5);
			append(td5, code3);
			append(code3, t30);
			append(tr2, t31);
			append(tr2, td6);
			append(td6, t32);
			append(tr2, t33);
			append(tr2, td7);
			append(td7, t34);
			append(table0, t35);
			append(table0, tr3);
			append(tr3, td8);
			append(td8, code4);
			append(code4, t36);
			append(tr3, t37);
			append(tr3, td9);
			append(td9, code5);
			append(code5, t38);
			append(tr3, t39);
			append(tr3, td10);
			append(td10, t40);
			append(tr3, t41);
			append(tr3, td11);
			append(td11, t42);
			append(section0, t43);
			append(section0, p1);
			append(p1, t44);
			append(p1, code6);
			append(code6, t45);
			append(p1, t46);
			append(section0, t47);
			append(section0, table1);
			append(table1, tr4);
			append(tr4, th4);
			append(th4, t48);
			append(tr4, t49);
			append(tr4, th5);
			append(th5, t50);
			append(tr4, t51);
			append(tr4, th6);
			append(th6, t52);
			append(tr4, t53);
			append(tr4, th7);
			append(th7, t54);
			append(table1, t55);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(table1, null);
			}

			append(section0, t56);
			append(section0, h31);
			append(h31, t57);
			append(section0, t58);
			mount_component(samplecode0, section0, null);
			insert(target, t59, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t60);
			append(section1, p2);
			append(p2, t61);
			append(section1, t62);
			mount_component(demo, section1, null);
			insert(target, t63, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t64);
			append(section2, p3);
			append(p3, t65);
			append(section2, t66);
			mount_component(samplecode1, section2, null);
			insert(target, t67, anchor);
			mount_component(relatedvalidators, target, anchor);
			insert(target, t68, anchor);
			insert(target, section3, anchor);
			append(section3, div);
			mount_component(prevbutton, div, null);
			append(div, t69);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			if (changed._samples) {
				each_value = ctx._samples;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						each_blocks[i].i(1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].i(1);
						each_blocks[i].m(table1, null);
					}
				}

				group_outros();
				for (; i < each_blocks.length; i += 1) outro_block(i, 1, 1);
				check_outros();
			}

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			for (var i = 0; i < each_value.length; i += 1) each_blocks[i].i();

			samplecode0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);

			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) outro_block(i, 0);

			samplecode0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t4);
				detach(section0);
			}

			heading0.$destroy();

			destroy_each(each_blocks, detaching);

			samplecode0.$destroy();

			if (detaching) {
				detach(t59);
				detach(section1);
			}

			heading1.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t63);
				detach(section2);
			}

			heading2.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t67);
			}

			relatedvalidators.$destroy(detaching);

			if (detaching) {
				detach(t68);
				detach(section3);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • iban validator";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

function instance($$self) {
	

const _samples = [
    { country: 'Albania', code: 'AL', example: 'AL47212110090000000235698741' },
    { country: 'Algeria', code: 'DZ', example: 'DZ4000400174401001050486' },
    { country: 'Andorra', code: 'AD', example: 'AD1200012030200359100100' },
    { country: 'Angola', code: 'AO', example: 'AO06000600000100037131174' },
    { country: 'Austria', code: 'AT', sepa: true, example: 'AT611904300234573201' },
    { country: 'Azerbaijan', code: 'AZ', example: 'AZ21NABZ00000000137010001944' },
    { country: 'Bahrain', code: 'BH', example: 'BH29BMAG1299123456BH00' },
    { country: 'Bosnia and Herzegovina', code: 'BA', example: 'BA391290079401028494' },
    { country: 'Belgium', code: 'BE', sepa: true, example: 'BE68539007547034' },
    { country: 'Benin', code: 'BJ', example: 'BJ11B00610100400271101192591' },
    { country: 'Brazil', code: 'BR', example: 'BR9700360305000010009795493P1' },
    { country: 'Bulgaria', code: 'BG', sepa: true, example: 'BG80BNBG96611020345678' },
    { country: 'Burkina Faso', code: 'BF', example: 'BF1030134020015400945000643' },
    { country: 'Burundi', code: 'BI', example: 'BI43201011067444' },
    { country: 'Cameroon', code: 'CM', example: 'CM2110003001000500000605306' },
    { country: 'Cape Verde', code: 'CV', example: 'CV64000300004547069110176' },
    { country: 'Costa Rica', code: 'CR', example: 'CR0515202001026284066' },
    { country: 'Croatia', code: 'HR', sepa: true, example: 'HR1210010051863000160' },
    { country: 'Cyprus', code: 'CY', sepa: true, example: 'CY17002001280000001200527600' },
    { country: 'Czech Republic', code: 'CZ', sepa: true, example: 'CZ6508000000192000145399' },
    { country: 'Denmark', code: 'DK', sepa: true, example: 'DK5000400440116243' },
    { country: 'Dominican Republic', code: 'DO', example: 'DO28BAGR00000001212453611324' },
    { country: 'East Timor', code: 'TL', example: 'TL380080012345678910157' },
    { country: 'Estonia', code: 'EE', sepa: true, example: 'EE382200221020145685' },
    { country: 'Faroe Islands', code: 'FO', example: 'FO1464600009692713' },
    { country: 'Finland', code: 'FI', sepa: true, example: 'FI2112345600000785' },
    { country: 'France', code: 'FR', sepa: true, example: 'FR1420041010050500013M02606' },
    { country: 'Guatemala', code: 'GT', example: 'GT82TRAJ01020000001210029690' },
    { country: 'Georgia', code: 'GE', example: 'GE29NB0000000101904917' },
    { country: 'Germany', code: 'DE', sepa: true, example: 'DE89370400440532013000' },
    { country: 'Gibraltar', code: 'GI', sepa: true, example: 'GI75NWBK000000007099453' },
    { country: 'Greece', code: 'GR', sepa: true, example: 'GR1601101250000000012300695' },
    { country: 'Greenland', code: 'GL', example: 'GL8964710001000206' },
    { country: 'Hungary', code: 'HU', sepa: true, example: 'HU42117730161111101800000000' },
    { country: 'Iceland', code: 'IS', sepa: true, example: 'IS140159260076545510730339' },
    { country: 'Iran', code: 'IR', example: 'IR580540105180021273113007' },
    { country: 'Ireland', code: 'IE', sepa: true, example: 'IE29AIBK93115212345678' },
    { country: 'Israel', code: 'IL', example: 'IL620108000000099999999' },
    { country: 'Italy', code: 'IT', sepa: true, example: 'IT60X0542811101000000123456' },
    { country: 'Ivory Coast', code: 'CI', example: 'CI05A00060174100178530011852' },
    { country: 'Jordan', code: 'JO', example: 'JO94CBJO0010000000000131000302' },
    { country: 'Kazakhstan', code: 'KZ', example: 'KZ176010251000042993' },
    { country: 'Kuwait', code: 'KW', example: 'KW74NBOK0000000000001000372151' },
    { country: 'Latvia', code: 'LV', sepa: true, example: 'LV80BANK0000435195001' },
    { country: 'Lebanon', code: 'LB', example: 'LB30099900000001001925579115' },
    { country: 'Liechtenstein', code: 'LI', sepa: true, example: 'LI21088100002324013AA' },
    { country: 'Lithuania', code: 'LT', sepa: true, example: 'LT121000011101001000' },
    { country: 'Luxembourg', code: 'LU', sepa: true, example: 'LU280019400644750000' },
    { country: 'Macedonia', code: 'MK', example: 'MK07300000000042425' },
    { country: 'Madagascar', code: 'MG', example: 'MG4600005030010101914016056' },
    { country: 'Malta', code: 'MT', sepa: true, example: 'MT84MALT011000012345MTLCAST001S' },
    { country: 'Mauritania', code: 'MR', example: 'MR1300012000010000002037372' },
    { country: 'Mauritius', code: 'MU', example: 'MU17BOMM0101101030300200000MUR' },
    { country: 'Mali', code: 'ML', example: 'ML03D00890170001002120000447' },
    { country: 'Moldova', code: 'MD', example: 'MD24AG000225100013104168' },
    { country: 'Monaco', code: 'MC', sepa: true, example: 'MC5813488000010051108001292' },
    { country: 'Montenegro', code: 'ME', example: 'ME25505000012345678951' },
    { country: 'Mozambique', code: 'MZ', example: 'MZ59000100000011834194157' },
    { country: 'Netherlands', code: 'NL', sepa: true, example: 'NL91ABNA0417164300' },
    { country: 'Norway', code: 'NO', sepa: true, example: 'NO9386011117947' },
    { country: 'Pakistan', code: 'PK', example: 'PK24SCBL0000001171495101' },
    { country: 'Palestine', code: 'PS', example: 'PS92PALS000000000400123456702' },
    { country: 'Poland', code: 'PL', sepa: true, example: 'PL27114020040000300201355387' },
    { country: 'Portugal', code: 'PT', sepa: true, example: 'PT50000201231234567890154' },
    { country: 'Qatar', code: 'QA', example: 'QA58DOHB00001234567890ABCDEFG' },
    { country: 'Republic of Kosovo', code: 'XK', example: 'XK051212012345678906' },
    { country: 'Romania', code: 'RO', sepa: true, example: 'RO49AAAA1B31007593840000' },
    { country: 'San Marino', code: 'SM', sepa: true, example: 'SM86U0322509800000000270100' },
    { country: 'Saudi Arabia', code: 'SA', example: 'SA0380000000608010167519' },
    { country: 'Senegal', code: 'SN', example: 'SN12K00100152000025690007542' },
    { country: 'Serbia', code: 'RS', example: 'RS35260005601001611379' },
    { country: 'Slovakia', code: 'SK', sepa: true, example: 'SK3112000000198742637541' },
    { country: 'Slovenia', code: 'SI', sepa: true, example: 'SI56191000000123438' },
    { country: 'Spain', code: 'ES', sepa: true, example: 'ES9121000418450200051332' },
    { country: 'Sweden', code: 'SE', sepa: true, example: 'SE3550000000054910000003' },
    { country: 'Switzerland', code: 'CH', sepa: true, example: 'CH9300762011623852957' },
    { country: 'Tunisia', code: 'TN', example: 'TN5914207207100707129648' },
    { country: 'Turkey', code: 'TR', example: 'TR330006100519786457841326' },
    { country: 'United Arab Emirates', code: 'AE', example: 'AE260211000000230064016' },
    { country: 'United Kingdom', code: 'GB', sepa: true, example: 'GB29NWBK60161331926819' },
    { country: 'Virgin Islands, British', code: 'VG', example: 'VG96VPVG0000012345678901' },
];

	return { _samples };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export default Index;

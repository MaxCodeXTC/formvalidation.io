import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';

/* src/routes/guide/examples/validating-date-range/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/validating-date-range/index.svelte";

// (14:8) <Tip>
function create_default_slot_1(ctx) {
	var t0, a, t1, t2;

	return {
		c: function create() {
			t0 = text("Use the ");
			a = element("a");
			t1 = text("StartEndDate");
			t2 = text(" plugin if you want to validate start and end dates");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "Use the ");

			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t1 = claim_text(a_nodes, "StartEndDate");
			a_nodes.forEach(detach);
			t2 = claim_text(nodes, " plugin if you want to validate start and end dates");
			this.h();
		},

		h: function hydrate() {
			a.href = "/guide/plugins/start-end-date";
			a.className = "blue dim link";
			add_location(a, file, 13, 21, 1079);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a, anchor);
			append(a, t1);
			insert(target, t2, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(a);
				detach(t2);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section, p0, t2, code0, t3, t4, code1, t5, t6, t7, t8, p1, t9, a0, t10, t11, a1, code2, t12, t13, a2, code3, t14, t15, a3, t16, t17, t18, t19, t20, t21, current;

	var demo0 = new Demo({
		props: {
		prefix: "/guide/examples/validating-date-range/range",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/examples/validating-date-range/range-moment",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var tip = new Tip({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Disabling date',
        'Integrating with Bootstrap Datepicker',
        'Integrating with flatpickr',
        'Supporting custom date format',
        'Validating date range',
        'Validating multiple inputs as one',
    ] },
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['callback', 'date'] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Validating date range");
			t1 = space();
			section = element("section");
			p0 = element("p");
			t2 = text("The following form asks you to enter a date in the range of 2000/01/01 and 2020/12/30. It can be implemented by using the ");
			code0 = element("code");
			t3 = text("min");
			t4 = text(" and ");
			code1 = element("code");
			t5 = text("max");
			t6 = text(" options.");
			t7 = space();
			demo0.$$.fragment.c();
			t8 = space();
			p1 = element("p");
			t9 = text("You also can use the ");
			a0 = element("a");
			t10 = text("callback");
			t11 = text(" validator and ");
			a1 = element("a");
			code2 = element("code");
			t12 = text("isBefore()");
			t13 = text(", ");
			a2 = element("a");
			code3 = element("code");
			t14 = text("isAfter()");
			t15 = text(" methods provided ");
			a3 = element("a");
			t16 = text("momentjs");
			t17 = text("\n            to check if the date is in the range.");
			t18 = space();
			demo1.$$.fragment.c();
			t19 = space();
			tip.$$.fragment.c();
			t20 = space();
			examples.$$.fragment.c();
			t21 = space();
			relatedvalidators.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Validating date range");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    \n    ");

			section = claim_element(nodes, "SECTION", { class: true }, false);
			var section_nodes = children(section);

			p0 = claim_element(section_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "The following form asks you to enter a date in the range of 2000/01/01 and 2020/12/30. It can be implemented by using the ");

			code0 = claim_element(p0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t3 = claim_text(code0_nodes, "min");
			code0_nodes.forEach(detach);
			t4 = claim_text(p0_nodes, " and ");

			code1 = claim_element(p0_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t5 = claim_text(code1_nodes, "max");
			code1_nodes.forEach(detach);
			t6 = claim_text(p0_nodes, " options.");
			p0_nodes.forEach(detach);
			t7 = claim_text(section_nodes, "\n        ");
			demo0.$$.fragment.l(section_nodes);
			t8 = claim_text(section_nodes, "\n        ");

			p1 = claim_element(section_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t9 = claim_text(p1_nodes, "You also can use the ");

			a0 = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t10 = claim_text(a0_nodes, "callback");
			a0_nodes.forEach(detach);
			t11 = claim_text(p1_nodes, " validator and ");

			a1 = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			code2 = claim_element(a1_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t12 = claim_text(code2_nodes, "isBefore()");
			code2_nodes.forEach(detach);
			a1_nodes.forEach(detach);
			t13 = claim_text(p1_nodes, ", ");

			a2 = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			code3 = claim_element(a2_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t14 = claim_text(code3_nodes, "isAfter()");
			code3_nodes.forEach(detach);
			a2_nodes.forEach(detach);
			t15 = claim_text(p1_nodes, " methods provided ");

			a3 = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t16 = claim_text(a3_nodes, "momentjs");
			a3_nodes.forEach(detach);
			t17 = claim_text(p1_nodes, "\n            to check if the date is in the range.");
			p1_nodes.forEach(detach);
			t18 = claim_text(section_nodes, "\n        ");
			demo1.$$.fragment.l(section_nodes);
			t19 = claim_text(section_nodes, "\n        ");
			tip.$$.fragment.l(section_nodes);
			section_nodes.forEach(detach);
			t20 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			t21 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 103);
			add_location(code0, file, 8, 149, 333);
			add_location(code1, file, 8, 170, 354);
			p0.className = "lh-copy";
			add_location(p0, file, 8, 8, 192);
			a0.href = "/guide/validators/callback";
			a0.className = "blue dim link";
			add_location(a0, file, 10, 48, 528);
			add_location(code2, file, 10, 209, 689);
			a1.href = "http://momentjs.com/docs/#/query/is-before";
			a1.className = "blue dim link";
			add_location(a1, file, 10, 134, 614);
			add_location(code3, file, 10, 312, 792);
			a2.href = "http://momentjs.com/docs/#/query/is-after";
			a2.className = "blue dim link";
			add_location(a2, file, 10, 238, 718);
			a3.href = "http://momentjs.com";
			a3.className = "blue dim link";
			add_location(a3, file, 10, 356, 836);
			p1.className = "lh-copy";
			add_location(p1, file, 10, 8, 488);
			section.className = "mv5";
			add_location(section, file, 7, 4, 162);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section, anchor);
			append(section, p0);
			append(p0, t2);
			append(p0, code0);
			append(code0, t3);
			append(p0, t4);
			append(p0, code1);
			append(code1, t5);
			append(p0, t6);
			append(section, t7);
			mount_component(demo0, section, null);
			append(section, t8);
			append(section, p1);
			append(p1, t9);
			append(p1, a0);
			append(a0, t10);
			append(p1, t11);
			append(p1, a1);
			append(a1, code2);
			append(code2, t12);
			append(p1, t13);
			append(p1, a2);
			append(a2, code3);
			append(code3, t14);
			append(p1, t15);
			append(p1, a3);
			append(a3, t16);
			append(p1, t17);
			append(section, t18);
			mount_component(demo1, section, null);
			append(section, t19);
			mount_component(tip, section, null);
			insert(target, t20, anchor);
			mount_component(examples, target, anchor);
			insert(target, t21, anchor);
			mount_component(relatedvalidators, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var tip_changes = {};
			if (changed.$$scope) tip_changes.$$scope = { changed, ctx };
			tip.$set(tip_changes);
		},

		i: function intro(local) {
			if (current) return;
			demo0.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			tip.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			demo0.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			tip.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section);
			}

			demo0.$destroy();

			demo1.$destroy();

			tip.$destroy();

			if (detaching) {
				detach(t20);
			}

			examples.$destroy(detaching);

			if (detaching) {
				detach(t21);
			}

			relatedvalidators.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Validating date range";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';

/* src/routes/guide/plugins/recaptcha3/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/plugins/recaptcha3/index.svelte";

// (9:4) <Tip>
function create_default_slot_8(ctx) {
	var t0, a, t1, t2;

	return {
		c: function create() {
			t0 = text("Use the ");
			a = element("a");
			t1 = text("Recaptcha");
			t2 = text(" plugin if you are still using Google reCAPTCHA v2");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "Use the ");

			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t1 = claim_text(a_nodes, "Recaptcha");
			a_nodes.forEach(detach);
			t2 = claim_text(nodes, " plugin if you are still using Google reCAPTCHA v2");
			this.h();
		},

		h: function hydrate() {
			a.href = "/guide/plugins/recaptcha";
			a.className = "blue dim link";
			add_location(a, file, 8, 17, 241);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a, anchor);
			append(a, t1);
			insert(target, t2, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(a);
				detach(t2);
			}
		}
	};
}

// (12:8) <Heading>
function create_default_slot_7(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Usage");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Usage");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (62:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (104:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (110:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Back-end verification");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Back-end verification");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (176:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changelog");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changelog");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (184:12) <PrevButton target="/guide/plugins/recaptcha">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Recaptcha plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Recaptcha plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (185:12) <NextButton target="/guide/plugins/semantic">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Semantic plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Semantic plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, t4, section0, t5, p0, t6, a0, t7, t8, t9, p1, t10, t11, t12, p2, t13, code0, t14, t15, t16, section1, t17, p3, sup0, t18, t19, t20, table, tr0, th0, t21, t22, th1, t23, t24, th2, t25, t26, tr1, td0, code1, t27, t28, sup1, t29, t30, td1, t31, t32, td2, t33, t34, tr2, td3, code2, t35, t36, sup2, t37, t38, td4, t39, t40, td5, t41, t42, tr3, td6, code3, t43, t44, sup3, t45, t46, td7, t47, t48, td8, t49, t50, tr4, td9, code4, t51, t52, td10, t53, t54, td11, t55, a1, t56, t57, t58, tr5, td12, code5, t59, t60, sup4, t61, t62, td13, t63, t64, td14, t65, t66, tr6, td15, code6, t67, t68, sup5, t69, t70, td16, t71, t72, td17, t73, t74, section2, t75, p4, t76, t77, t78, section3, t79, p5, t80, code7, t81, t82, t83, t84, p6, t85, code8, t86, t87, a2, t88, t89, t90, p7, t91, t92, t93, p8, t94, t95, t96, section4, t97, ul, li, t98, t99, section5, div, t100, current;

	var tip = new Tip({
		props: {
		$$slots: { default: [create_default_slot_8] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="demoForm" method="POST">
        ...

        <!-- Prepare a container to show the captcha -->
        <div id="captchaContainer"></div>
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>    
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/plugins/Recaptcha3.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                ...,
                recaptcha3: new FormValidation.plugins.Recaptcha3({
                    action: ...,
                    backendVerificationUrl: ...,
                    element: 'captchaContainer',
                    language: ...,
                    message: ...,
                    siteKey: ...,
                }),
            },
        }
    );
});
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/plugins/recaptcha3/invisible",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
FormValidation.formValidation(
    document.getElementById('demoForm'),
    {
        fields: {
            ...
        },
        plugins: {
            ...
            recaptcha3: new FormValidation.plugins.Recaptcha3({
                backendVerificationUrl: '/path/to/your/back-end/',
            }),
        },
    }
);
` },
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "javascript", code: `
{
    "success": "true"
}
// or
{
    "success": "false"
}
` },
		$$inline: true
	});

	var samplecode3 = new SampleCode({
		props: { lang: "php", code: `
&lt;?php
// Replace it with your reCAPTCHA secret key
$secretKey = '...';

// See https://developers.google.com/recaptcha/docs/verify#api-request
$fields = array(
    'secret'   => $secretKey,
    'response' => $_POST['___g-recaptcha-token___']
);

$postVars = '';
$sep = '';
foreach ($fields as $key => $value) {
    $postVars .= $sep . urlencode($key) . '=' . urlencode($value);
    $sep = '&';
}

$ch = curl_init();

curl_setopt($ch,CURLOPT_URL, 'https://www.google.com/recaptcha/api/siteverify');
curl_setopt($ch,CURLOPT_POST, count($fields));
curl_setopt($ch,CURLOPT_POSTFIELDS, $postVars);
curl_setopt($ch,CURLOPT_RETURNTRANSFER, true);

$result = curl_exec($ch);

curl_close($ch);

header('Content-Type: application/json');
echo $result;
` },
		$$inline: true
	});

	var heading4 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/plugins/recaptcha",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/plugins/semantic",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Recaptcha3 plugin");
			t1 = space();
			h2 = element("h2");
			t2 = text("Shows and validates a Google reCAPTCHA v3");
			t3 = space();
			tip.$$.fragment.c();
			t4 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t5 = space();
			p0 = element("p");
			t6 = text("To use it, you need to register a site and secret keys at ");
			a0 = element("a");
			t7 = text("https://www.google.com/recaptcha/admin");
			t8 = text(".");
			t9 = space();
			p1 = element("p");
			t10 = text("The following piece of code is the starting point to use the Recaptcha3 plugin:");
			t11 = space();
			samplecode0.$$.fragment.c();
			t12 = space();
			p2 = element("p");
			t13 = text("The sample code above assumes that the FormValidation files are placed inside the ");
			code0 = element("code");
			t14 = text("vendors");
			t15 = text(" directory. You might need to change the path depending on where you place them on the server.");
			t16 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t17 = space();
			p3 = element("p");
			sup0 = element("sup");
			t18 = text("*");
			t19 = text(" presents a required parameter");
			t20 = space();
			table = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t21 = text("Option");
			t22 = space();
			th1 = element("th");
			t23 = text("Type");
			t24 = space();
			th2 = element("th");
			t25 = text("Description");
			t26 = space();
			tr1 = element("tr");
			td0 = element("td");
			code1 = element("code");
			t27 = text("action");
			t28 = space();
			sup1 = element("sup");
			t29 = text("*");
			t30 = space();
			td1 = element("td");
			t31 = text("String");
			t32 = space();
			td2 = element("td");
			t33 = text("The page action");
			t34 = space();
			tr2 = element("tr");
			td3 = element("td");
			code2 = element("code");
			t35 = text("backendVerificationUrl");
			t36 = space();
			sup2 = element("sup");
			t37 = text("*");
			t38 = space();
			td4 = element("td");
			t39 = text("String");
			t40 = space();
			td5 = element("td");
			t41 = text("The URL of your back-end that verifies the captcha via reCAPTCHA API");
			t42 = space();
			tr3 = element("tr");
			td6 = element("td");
			code3 = element("code");
			t43 = text("element");
			t44 = space();
			sup3 = element("sup");
			t45 = text("*");
			t46 = space();
			td7 = element("td");
			t47 = text("String");
			t48 = space();
			td8 = element("td");
			t49 = text("The ID of element showing the captcha");
			t50 = space();
			tr4 = element("tr");
			td9 = element("td");
			code4 = element("code");
			t51 = text("language");
			t52 = space();
			td10 = element("td");
			t53 = text("String");
			t54 = space();
			td11 = element("td");
			t55 = text("The ");
			a1 = element("a");
			t56 = text("language code");
			t57 = text(" defined by reCAPTCHA");
			t58 = space();
			tr5 = element("tr");
			td12 = element("td");
			code5 = element("code");
			t59 = text("message");
			t60 = space();
			sup4 = element("sup");
			t61 = text("*");
			t62 = space();
			td13 = element("td");
			t63 = text("String");
			t64 = space();
			td14 = element("td");
			t65 = text("The invalid message that will be shown in case the captcha is not valid");
			t66 = space();
			tr6 = element("tr");
			td15 = element("td");
			code6 = element("code");
			t67 = text("siteKey");
			t68 = space();
			sup5 = element("sup");
			t69 = text("*");
			t70 = space();
			td16 = element("td");
			t71 = text("String");
			t72 = space();
			td17 = element("td");
			t73 = text("The site key provided by Google");
			t74 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t75 = space();
			p4 = element("p");
			t76 = text("For testing purpose, the back-end verification always indicates that the captcha is valid.");
			t77 = space();
			demo.$$.fragment.c();
			t78 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t79 = space();
			p5 = element("p");
			t80 = text("The plugin also requires verification on the server side. You need to point the ");
			code7 = element("code");
			t81 = text("backendVerificationUrl");
			t82 = text(" option to your back-end URL:");
			t83 = space();
			samplecode1.$$.fragment.c();
			t84 = space();
			p6 = element("p");
			t85 = text("When click the Submit button, the plugin will send an Ajax request with the value for ");
			code8 = element("code");
			t86 = text("___g-recaptcha-token___");
			t87 = text(" parameter which is generated by reCAPTCHA. With the value of captcha token and the reCAPTCHA secret key, you can connect to\n            ");
			a2 = element("a");
			t88 = text("reCAPTCGA verification URL");
			t89 = text(" to verify the captcha.");
			t90 = space();
			p7 = element("p");
			t91 = text("In order to inform user in case the captcha is valid or invalid, the back-end has to return a JSON encoded version of");
			t92 = space();
			samplecode2.$$.fragment.c();
			t93 = space();
			p8 = element("p");
			t94 = text("The following code demonstrates how to do it in PHP, but you can do it with your favorite language.");
			t95 = space();
			samplecode3.$$.fragment.c();
			t96 = space();
			section4 = element("section");
			heading4.$$.fragment.c();
			t97 = space();
			ul = element("ul");
			li = element("li");
			t98 = text("v1.5.0: First release. It means that the Recaptcha3 plugin requires FormValidation v1.5.0 or newer.");
			t99 = space();
			section5 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t100 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Recaptcha3 plugin");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Shows and validates a Google reCAPTCHA v3");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");
			tip.$$.fragment.l(nodes);
			t4 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t5 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t6 = claim_text(p0_nodes, "To use it, you need to register a site and secret keys at ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t7 = claim_text(a0_nodes, "https://www.google.com/recaptcha/admin");
			a0_nodes.forEach(detach);
			t8 = claim_text(p0_nodes, ".");
			p0_nodes.forEach(detach);
			t9 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t10 = claim_text(p1_nodes, "The following piece of code is the starting point to use the Recaptcha3 plugin:");
			p1_nodes.forEach(detach);
			t11 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t12 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t13 = claim_text(p2_nodes, "The sample code above assumes that the FormValidation files are placed inside the ");

			code0 = claim_element(p2_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t14 = claim_text(code0_nodes, "vendors");
			code0_nodes.forEach(detach);
			t15 = claim_text(p2_nodes, " directory. You might need to change the path depending on where you place them on the server.");
			p2_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t16 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t17 = claim_text(section1_nodes, "\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			sup0 = claim_element(p3_nodes, "SUP", {}, false);
			var sup0_nodes = children(sup0);

			t18 = claim_text(sup0_nodes, "*");
			sup0_nodes.forEach(detach);
			t19 = claim_text(p3_nodes, " presents a required parameter");
			p3_nodes.forEach(detach);
			t20 = claim_text(section1_nodes, "\n        ");

			table = claim_element(section1_nodes, "TABLE", { class: true }, false);
			var table_nodes = children(table);

			tr0 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t21 = claim_text(th0_nodes, "Option");
			th0_nodes.forEach(detach);
			t22 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t23 = claim_text(th1_nodes, "Type");
			th1_nodes.forEach(detach);
			t24 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t25 = claim_text(th2_nodes, "Description");
			th2_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t26 = claim_text(table_nodes, "\n            ");

			tr1 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code1 = claim_element(td0_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t27 = claim_text(code1_nodes, "action");
			code1_nodes.forEach(detach);
			t28 = claim_text(td0_nodes, " ");

			sup1 = claim_element(td0_nodes, "SUP", {}, false);
			var sup1_nodes = children(sup1);

			t29 = claim_text(sup1_nodes, "*");
			sup1_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t30 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			t31 = claim_text(td1_nodes, "String");
			td1_nodes.forEach(detach);
			t32 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t33 = claim_text(td2_nodes, "The page action");
			td2_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t34 = claim_text(table_nodes, "\n            ");

			tr2 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td3 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			code2 = claim_element(td3_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t35 = claim_text(code2_nodes, "backendVerificationUrl");
			code2_nodes.forEach(detach);
			t36 = claim_text(td3_nodes, " ");

			sup2 = claim_element(td3_nodes, "SUP", {}, false);
			var sup2_nodes = children(sup2);

			t37 = claim_text(sup2_nodes, "*");
			sup2_nodes.forEach(detach);
			td3_nodes.forEach(detach);
			t38 = claim_text(tr2_nodes, "\n                ");

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			t39 = claim_text(td4_nodes, "String");
			td4_nodes.forEach(detach);
			t40 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			t41 = claim_text(td5_nodes, "The URL of your back-end that verifies the captcha via reCAPTCHA API");
			td5_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t42 = claim_text(table_nodes, "\n            ");

			tr3 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td6 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			code3 = claim_element(td6_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t43 = claim_text(code3_nodes, "element");
			code3_nodes.forEach(detach);
			t44 = claim_text(td6_nodes, " ");

			sup3 = claim_element(td6_nodes, "SUP", {}, false);
			var sup3_nodes = children(sup3);

			t45 = claim_text(sup3_nodes, "*");
			sup3_nodes.forEach(detach);
			td6_nodes.forEach(detach);
			t46 = claim_text(tr3_nodes, "\n                ");

			td7 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			t47 = claim_text(td7_nodes, "String");
			td7_nodes.forEach(detach);
			t48 = claim_text(tr3_nodes, "\n                ");

			td8 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			t49 = claim_text(td8_nodes, "The ID of element showing the captcha");
			td8_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			t50 = claim_text(table_nodes, "\n            ");

			tr4 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			td9 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			code4 = claim_element(td9_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t51 = claim_text(code4_nodes, "language");
			code4_nodes.forEach(detach);
			td9_nodes.forEach(detach);
			t52 = claim_text(tr4_nodes, "\n                ");

			td10 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td10_nodes = children(td10);

			t53 = claim_text(td10_nodes, "String");
			td10_nodes.forEach(detach);
			t54 = claim_text(tr4_nodes, "\n                ");

			td11 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td11_nodes = children(td11);

			t55 = claim_text(td11_nodes, "The ");

			a1 = claim_element(td11_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t56 = claim_text(a1_nodes, "language code");
			a1_nodes.forEach(detach);
			t57 = claim_text(td11_nodes, " defined by reCAPTCHA");
			td11_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			t58 = claim_text(table_nodes, "\n            ");

			tr5 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr5_nodes = children(tr5);

			td12 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td12_nodes = children(td12);

			code5 = claim_element(td12_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t59 = claim_text(code5_nodes, "message");
			code5_nodes.forEach(detach);
			t60 = claim_text(td12_nodes, " ");

			sup4 = claim_element(td12_nodes, "SUP", {}, false);
			var sup4_nodes = children(sup4);

			t61 = claim_text(sup4_nodes, "*");
			sup4_nodes.forEach(detach);
			td12_nodes.forEach(detach);
			t62 = claim_text(tr5_nodes, "\n                ");

			td13 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td13_nodes = children(td13);

			t63 = claim_text(td13_nodes, "String");
			td13_nodes.forEach(detach);
			t64 = claim_text(tr5_nodes, "\n                ");

			td14 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td14_nodes = children(td14);

			t65 = claim_text(td14_nodes, "The invalid message that will be shown in case the captcha is not valid");
			td14_nodes.forEach(detach);
			tr5_nodes.forEach(detach);
			t66 = claim_text(table_nodes, "\n            ");

			tr6 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr6_nodes = children(tr6);

			td15 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td15_nodes = children(td15);

			code6 = claim_element(td15_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t67 = claim_text(code6_nodes, "siteKey");
			code6_nodes.forEach(detach);
			t68 = claim_text(td15_nodes, " ");

			sup5 = claim_element(td15_nodes, "SUP", {}, false);
			var sup5_nodes = children(sup5);

			t69 = claim_text(sup5_nodes, "*");
			sup5_nodes.forEach(detach);
			td15_nodes.forEach(detach);
			t70 = claim_text(tr6_nodes, "\n                ");

			td16 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td16_nodes = children(td16);

			t71 = claim_text(td16_nodes, "String");
			td16_nodes.forEach(detach);
			t72 = claim_text(tr6_nodes, "\n                ");

			td17 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td17_nodes = children(td17);

			t73 = claim_text(td17_nodes, "The site key provided by Google");
			td17_nodes.forEach(detach);
			tr6_nodes.forEach(detach);
			table_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t74 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t75 = claim_text(section2_nodes, "\n        ");

			p4 = claim_element(section2_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t76 = claim_text(p4_nodes, "For testing purpose, the back-end verification always indicates that the captcha is valid.");
			p4_nodes.forEach(detach);
			t77 = claim_text(section2_nodes, "\n        ");
			demo.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t78 = claim_text(nodes, "\n    \n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t79 = claim_text(section3_nodes, "\n        ");

			p5 = claim_element(section3_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t80 = claim_text(p5_nodes, "The plugin also requires verification on the server side. You need to point the ");

			code7 = claim_element(p5_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t81 = claim_text(code7_nodes, "backendVerificationUrl");
			code7_nodes.forEach(detach);
			t82 = claim_text(p5_nodes, " option to your back-end URL:");
			p5_nodes.forEach(detach);
			t83 = claim_text(section3_nodes, "\n");
			samplecode1.$$.fragment.l(section3_nodes);
			t84 = claim_text(section3_nodes, "\n        ");

			p6 = claim_element(section3_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t85 = claim_text(p6_nodes, "When click the Submit button, the plugin will send an Ajax request with the value for ");

			code8 = claim_element(p6_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t86 = claim_text(code8_nodes, "___g-recaptcha-token___");
			code8_nodes.forEach(detach);
			t87 = claim_text(p6_nodes, " parameter which is generated by reCAPTCHA. With the value of captcha token and the reCAPTCHA secret key, you can connect to\n            ");

			a2 = claim_element(p6_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t88 = claim_text(a2_nodes, "reCAPTCGA verification URL");
			a2_nodes.forEach(detach);
			t89 = claim_text(p6_nodes, " to verify the captcha.");
			p6_nodes.forEach(detach);
			t90 = claim_text(section3_nodes, "\n        ");

			p7 = claim_element(section3_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t91 = claim_text(p7_nodes, "In order to inform user in case the captcha is valid or invalid, the back-end has to return a JSON encoded version of");
			p7_nodes.forEach(detach);
			t92 = claim_text(section3_nodes, "\n");
			samplecode2.$$.fragment.l(section3_nodes);
			t93 = claim_text(section3_nodes, "\n        ");

			p8 = claim_element(section3_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t94 = claim_text(p8_nodes, "The following code demonstrates how to do it in PHP, but you can do it with your favorite language.");
			p8_nodes.forEach(detach);
			t95 = claim_text(section3_nodes, "\n");
			samplecode3.$$.fragment.l(section3_nodes);
			section3_nodes.forEach(detach);
			t96 = claim_text(nodes, "\n    \n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			heading4.$$.fragment.l(section4_nodes);
			t97 = claim_text(section4_nodes, "\n        ");

			ul = claim_element(section4_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li = claim_element(ul_nodes, "LI", {}, false);
			var li_nodes = children(li);

			t98 = claim_text(li_nodes, "v1.5.0: First release. It means that the Recaptcha3 plugin requires FormValidation v1.5.0 or newer.");
			li_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			section4_nodes.forEach(detach);
			t99 = claim_text(nodes, "\n\n    ");

			section5 = claim_element(nodes, "SECTION", { class: true }, false);
			var section5_nodes = children(section5);

			div = claim_element(section5_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t100 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section5_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 99);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 154);
			a0.href = "https://www.google.com/recaptcha/admin";
			a0.className = "blue dim link";
			add_location(a0, file, 12, 85, 513);
			p0.className = "lh-copy";
			add_location(p0, file, 12, 8, 436);
			p1.className = "lh-copy";
			add_location(p1, file, 13, 8, 640);
			add_location(code0, file, 57, 109, 2114);
			p2.className = "lh-copy";
			add_location(p2, file, 57, 8, 2013);
			section0.className = "mv5";
			add_location(section0, file, 10, 4, 373);
			add_location(sup0, file, 62, 29, 2339);
			p3.className = "lh-copy i";
			add_location(p3, file, 62, 8, 2318);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 65, 16, 2513);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 66, 16, 2575);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 67, 16, 2635);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 64, 12, 2464);
			add_location(code1, file, 70, 36, 2785);
			add_location(sup1, file, 70, 56, 2805);
			td0.className = "pv2 ph3";
			add_location(td0, file, 70, 16, 2765);
			td1.className = "pv2 ph3";
			add_location(td1, file, 71, 16, 2839);
			td2.className = "pv2 ph3";
			add_location(td2, file, 72, 16, 2887);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 69, 12, 2716);
			add_location(code2, file, 75, 36, 3027);
			add_location(sup2, file, 75, 72, 3063);
			td3.className = "pv2 ph3";
			add_location(td3, file, 75, 16, 3007);
			td4.className = "pv2 ph3";
			add_location(td4, file, 76, 16, 3097);
			td5.className = "pv2 ph3 lh-copy";
			add_location(td5, file, 77, 16, 3145);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 74, 12, 2958);
			add_location(code3, file, 80, 36, 3346);
			add_location(sup3, file, 80, 57, 3367);
			td6.className = "pv2 ph3";
			add_location(td6, file, 80, 16, 3326);
			td7.className = "pv2 ph3";
			add_location(td7, file, 81, 16, 3401);
			td8.className = "pv2 ph3";
			add_location(td8, file, 82, 16, 3449);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 79, 12, 3277);
			add_location(code4, file, 85, 36, 3611);
			td9.className = "pv2 ph3";
			add_location(td9, file, 85, 16, 3591);
			td10.className = "pv2 ph3";
			add_location(td10, file, 86, 16, 3654);
			a1.href = "https://developers.google.com/recaptcha/docs/language";
			a1.className = "blue dim link";
			add_location(a1, file, 87, 48, 3734);
			td11.className = "pv2 ph3 lh-copy";
			add_location(td11, file, 87, 16, 3702);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 84, 12, 3542);
			add_location(code5, file, 90, 36, 3963);
			add_location(sup4, file, 90, 57, 3984);
			td12.className = "pv2 ph3";
			add_location(td12, file, 90, 16, 3943);
			td13.className = "pv2 ph3";
			add_location(td13, file, 91, 16, 4018);
			td14.className = "pv2 ph3 lh-copy";
			add_location(td14, file, 92, 16, 4066);
			tr5.className = "striped--light-gray";
			add_location(tr5, file, 89, 12, 3894);
			add_location(code6, file, 95, 36, 4270);
			add_location(sup5, file, 95, 57, 4291);
			td15.className = "pv2 ph3";
			add_location(td15, file, 95, 16, 4250);
			td16.className = "pv2 ph3";
			add_location(td16, file, 96, 16, 4325);
			td17.className = "pv2 ph3";
			add_location(td17, file, 97, 16, 4373);
			tr6.className = "striped--light-gray";
			add_location(tr6, file, 94, 12, 4201);
			table.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table, file, 63, 8, 2394);
			section1.className = "mv5";
			add_location(section1, file, 60, 4, 2253);
			p4.className = "lh-copy";
			add_location(p4, file, 104, 8, 4556);
			section2.className = "mv5";
			add_location(section2, file, 102, 4, 4485);
			add_location(code7, file, 110, 107, 4960);
			p5.className = "lh-copy";
			add_location(p5, file, 110, 8, 4861);
			add_location(code8, file, 127, 113, 5511);
			a2.href = "https://developers.google.com/recaptcha/docs/verify#api-request";
			a2.className = "blue dim link";
			add_location(a2, file, 128, 12, 5684);
			p6.className = "lh-copy";
			add_location(p6, file, 127, 8, 5406);
			p7.className = "lh-copy";
			add_location(p7, file, 129, 8, 5846);
			p8.className = "lh-copy";
			add_location(p8, file, 139, 8, 6098);
			section3.className = "mv5";
			add_location(section3, file, 108, 4, 4782);
			add_location(li, file, 177, 12, 7139);
			ul.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul, file, 176, 8, 7094);
			section4.className = "mv5";
			add_location(section4, file, 174, 4, 7027);
			div.className = "flex";
			add_location(div, file, 182, 8, 7312);
			section5.className = "mv5";
			add_location(section5, file, 181, 4, 7282);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			mount_component(tip, target, anchor);
			insert(target, t4, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t5);
			append(section0, p0);
			append(p0, t6);
			append(p0, a0);
			append(a0, t7);
			append(p0, t8);
			append(section0, t9);
			append(section0, p1);
			append(p1, t10);
			append(section0, t11);
			mount_component(samplecode0, section0, null);
			append(section0, t12);
			append(section0, p2);
			append(p2, t13);
			append(p2, code0);
			append(code0, t14);
			append(p2, t15);
			insert(target, t16, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t17);
			append(section1, p3);
			append(p3, sup0);
			append(sup0, t18);
			append(p3, t19);
			append(section1, t20);
			append(section1, table);
			append(table, tr0);
			append(tr0, th0);
			append(th0, t21);
			append(tr0, t22);
			append(tr0, th1);
			append(th1, t23);
			append(tr0, t24);
			append(tr0, th2);
			append(th2, t25);
			append(table, t26);
			append(table, tr1);
			append(tr1, td0);
			append(td0, code1);
			append(code1, t27);
			append(td0, t28);
			append(td0, sup1);
			append(sup1, t29);
			append(tr1, t30);
			append(tr1, td1);
			append(td1, t31);
			append(tr1, t32);
			append(tr1, td2);
			append(td2, t33);
			append(table, t34);
			append(table, tr2);
			append(tr2, td3);
			append(td3, code2);
			append(code2, t35);
			append(td3, t36);
			append(td3, sup2);
			append(sup2, t37);
			append(tr2, t38);
			append(tr2, td4);
			append(td4, t39);
			append(tr2, t40);
			append(tr2, td5);
			append(td5, t41);
			append(table, t42);
			append(table, tr3);
			append(tr3, td6);
			append(td6, code3);
			append(code3, t43);
			append(td6, t44);
			append(td6, sup3);
			append(sup3, t45);
			append(tr3, t46);
			append(tr3, td7);
			append(td7, t47);
			append(tr3, t48);
			append(tr3, td8);
			append(td8, t49);
			append(table, t50);
			append(table, tr4);
			append(tr4, td9);
			append(td9, code4);
			append(code4, t51);
			append(tr4, t52);
			append(tr4, td10);
			append(td10, t53);
			append(tr4, t54);
			append(tr4, td11);
			append(td11, t55);
			append(td11, a1);
			append(a1, t56);
			append(td11, t57);
			append(table, t58);
			append(table, tr5);
			append(tr5, td12);
			append(td12, code5);
			append(code5, t59);
			append(td12, t60);
			append(td12, sup4);
			append(sup4, t61);
			append(tr5, t62);
			append(tr5, td13);
			append(td13, t63);
			append(tr5, t64);
			append(tr5, td14);
			append(td14, t65);
			append(table, t66);
			append(table, tr6);
			append(tr6, td15);
			append(td15, code6);
			append(code6, t67);
			append(td15, t68);
			append(td15, sup5);
			append(sup5, t69);
			append(tr6, t70);
			append(tr6, td16);
			append(td16, t71);
			append(tr6, t72);
			append(tr6, td17);
			append(td17, t73);
			insert(target, t74, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t75);
			append(section2, p4);
			append(p4, t76);
			append(section2, t77);
			mount_component(demo, section2, null);
			insert(target, t78, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t79);
			append(section3, p5);
			append(p5, t80);
			append(p5, code7);
			append(code7, t81);
			append(p5, t82);
			append(section3, t83);
			mount_component(samplecode1, section3, null);
			append(section3, t84);
			append(section3, p6);
			append(p6, t85);
			append(p6, code8);
			append(code8, t86);
			append(p6, t87);
			append(p6, a2);
			append(a2, t88);
			append(p6, t89);
			append(section3, t90);
			append(section3, p7);
			append(p7, t91);
			append(section3, t92);
			mount_component(samplecode2, section3, null);
			append(section3, t93);
			append(section3, p8);
			append(p8, t94);
			append(section3, t95);
			mount_component(samplecode3, section3, null);
			insert(target, t96, anchor);
			insert(target, section4, anchor);
			mount_component(heading4, section4, null);
			append(section4, t97);
			append(section4, ul);
			append(ul, li);
			append(li, t98);
			insert(target, t99, anchor);
			insert(target, section5, anchor);
			append(section5, div);
			mount_component(prevbutton, div, null);
			append(div, t100);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var tip_changes = {};
			if (changed.$$scope) tip_changes.$$scope = { changed, ctx };
			tip.$set(tip_changes);

			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var heading4_changes = {};
			if (changed.$$scope) heading4_changes.$$scope = { changed, ctx };
			heading4.$set(heading4_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			tip.$$.fragment.i(local);

			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			samplecode3.$$.fragment.i(local);

			heading4.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			tip.$$.fragment.o(local);
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			samplecode3.$$.fragment.o(local);
			heading4.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
			}

			tip.$destroy(detaching);

			if (detaching) {
				detach(t4);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			if (detaching) {
				detach(t16);
				detach(section1);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t74);
				detach(section2);
			}

			heading2.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t78);
				detach(section3);
			}

			heading3.$destroy();

			samplecode1.$destroy();

			samplecode2.$destroy();

			samplecode3.$destroy();

			if (detaching) {
				detach(t96);
				detach(section4);
			}

			heading4.$destroy();

			if (detaching) {
				detach(t99);
				detach(section5);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Recaptcha3 plugin";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

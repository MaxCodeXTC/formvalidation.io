import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, r as noop } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';

/* src/routes/guide/examples/preventing-user-to-have-same-value-as-the-placeholder/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/preventing-user-to-have-same-value-as-the-placeholder/index.svelte";

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section, p0, t2, span0, t3, t4, span1, t5, t6, code0, t7, t8, code1, t9, t10, t11, p1, t12, t13, t14, p2, t15, t16, t17, p3, t18, a, t19, t20, t21, div, t22, t23, current;

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
const checkPlaceholder = function() {
    return {
        validate: function(input) {
            // input.element presents the field element
            // input.elements presents all field elements
            // input.field is the field name
            // input.value is the field value

            // Has to return an object containing valid key
            return {
                valid: input.value != input.element.getAttribute('placeholder'),
            };
        },
    };
};
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
FormValidation
    .formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                firstName: {
                    validators: {
                        ...
                        placeholder: {
                            message: 'The value cannot be the same as placeholder'
                        },
                    }
                },
                lastName: {
                    validators: {
                        ...
                        placeholder: {
                            message: 'The value cannot be the same as placeholder'
                        },
                    }
                },
            },
            plugins: {
                ...
            },
        }
    )
    .registerValidator('placeholder', checkPlaceholder);
` },
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "javascript", code: `
callback: {
    message: 'The value cannot be the same as placeholder',
    callback: function(input) {
        return {
            valid: input.value != input.element.getAttribute('placeholder'),
        };
    },
}
` },
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/examples/preventing-user-to-have-same-value-as-the-placeholder",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['callback'] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Preventing user to have same value as the placeholder");
			t1 = space();
			section = element("section");
			p0 = element("p");
			t2 = text("For instance, we could show an error message when someone enters ");
			span0 = element("span");
			t3 = text("First name");
			t4 = text(" or ");
			span1 = element("span");
			t5 = text("Last name");
			t6 = text(" for the text fields named ");
			code0 = element("code");
			t7 = text("firstName");
			t8 = text(" and ");
			code1 = element("code");
			t9 = text("lastName");
			t10 = text(", respectively.");
			t11 = space();
			p1 = element("p");
			t12 = text("To do that, we create a custom validator following the signature as below:");
			t13 = space();
			samplecode0.$$.fragment.c();
			t14 = space();
			p2 = element("p");
			t15 = text("Now, you can apply the created validator with multiple fields:");
			t16 = space();
			samplecode1.$$.fragment.c();
			t17 = space();
			p3 = element("p");
			t18 = text("For this specific requirement, we also can use the ");
			a = element("a");
			t19 = text("callback");
			t20 = text(" validator:");
			t21 = space();
			div = element("div");
			samplecode2.$$.fragment.c();
			t22 = space();
			demo.$$.fragment.c();
			t23 = space();
			relatedvalidators.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Preventing user to have same value as the placeholder");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    \n    ");

			section = claim_element(nodes, "SECTION", { class: true }, false);
			var section_nodes = children(section);

			p0 = claim_element(section_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "For instance, we could show an error message when someone enters ");

			span0 = claim_element(p0_nodes, "SPAN", { class: true }, false);
			var span0_nodes = children(span0);

			t3 = claim_text(span0_nodes, "First name");
			span0_nodes.forEach(detach);
			t4 = claim_text(p0_nodes, " or ");

			span1 = claim_element(p0_nodes, "SPAN", { class: true }, false);
			var span1_nodes = children(span1);

			t5 = claim_text(span1_nodes, "Last name");
			span1_nodes.forEach(detach);
			t6 = claim_text(p0_nodes, " for the text fields named ");

			code0 = claim_element(p0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t7 = claim_text(code0_nodes, "firstName");
			code0_nodes.forEach(detach);
			t8 = claim_text(p0_nodes, " and ");

			code1 = claim_element(p0_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t9 = claim_text(code1_nodes, "lastName");
			code1_nodes.forEach(detach);
			t10 = claim_text(p0_nodes, ", respectively.");
			p0_nodes.forEach(detach);
			t11 = claim_text(section_nodes, "\n        ");

			p1 = claim_element(section_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t12 = claim_text(p1_nodes, "To do that, we create a custom validator following the signature as below:");
			p1_nodes.forEach(detach);
			t13 = claim_text(section_nodes, "\n");
			samplecode0.$$.fragment.l(section_nodes);
			t14 = claim_text(section_nodes, "\n        ");

			p2 = claim_element(section_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t15 = claim_text(p2_nodes, "Now, you can apply the created validator with multiple fields:");
			p2_nodes.forEach(detach);
			t16 = claim_text(section_nodes, "\n");
			samplecode1.$$.fragment.l(section_nodes);
			t17 = claim_text(section_nodes, "\n        ");

			p3 = claim_element(section_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t18 = claim_text(p3_nodes, "For this specific requirement, we also can use the ");

			a = claim_element(p3_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t19 = claim_text(a_nodes, "callback");
			a_nodes.forEach(detach);
			t20 = claim_text(p3_nodes, " validator:");
			p3_nodes.forEach(detach);
			t21 = claim_text(section_nodes, "\n        ");

			div = claim_element(section_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			samplecode2.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			t22 = claim_text(section_nodes, "\n        ");
			demo.$$.fragment.l(section_nodes);
			section_nodes.forEach(detach);
			t23 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 135);
			span0.className = "i";
			add_location(span0, file, 8, 92, 340);
			span1.className = "i";
			add_location(span1, file, 8, 129, 377);
			add_location(code0, file, 8, 188, 436);
			add_location(code1, file, 8, 215, 463);
			p0.className = "lh-copy";
			add_location(p0, file, 8, 8, 256);
			p1.className = "lh-copy";
			add_location(p1, file, 9, 8, 512);
			p2.className = "lh-copy";
			add_location(p2, file, 27, 8, 1153);
			a.href = "/guide/validators/callback";
			a.className = "blue dim link";
			add_location(a, file, 58, 78, 2181);
			p3.className = "lh-copy";
			add_location(p3, file, 58, 8, 2111);
			div.className = "mb4";
			add_location(div, file, 59, 8, 2276);
			section.className = "mv5";
			add_location(section, file, 7, 4, 226);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section, anchor);
			append(section, p0);
			append(p0, t2);
			append(p0, span0);
			append(span0, t3);
			append(p0, t4);
			append(p0, span1);
			append(span1, t5);
			append(p0, t6);
			append(p0, code0);
			append(code0, t7);
			append(p0, t8);
			append(p0, code1);
			append(code1, t9);
			append(p0, t10);
			append(section, t11);
			append(section, p1);
			append(p1, t12);
			append(section, t13);
			mount_component(samplecode0, section, null);
			append(section, t14);
			append(section, p2);
			append(p2, t15);
			append(section, t16);
			mount_component(samplecode1, section, null);
			append(section, t17);
			append(section, p3);
			append(p3, t18);
			append(p3, a);
			append(a, t19);
			append(p3, t20);
			append(section, t21);
			append(section, div);
			mount_component(samplecode2, div, null);
			append(section, t22);
			mount_component(demo, section, null);
			insert(target, t23, anchor);
			mount_component(relatedvalidators, target, anchor);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section);
			}

			samplecode0.$destroy();

			samplecode1.$destroy();

			samplecode2.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t23);
			}

			relatedvalidators.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Preventing user to have same value as the placeholder";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

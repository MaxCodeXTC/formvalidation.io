import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';

/* src/routes/guide/examples/asking-fields-to-be-unique/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/asking-fields-to-be-unique/index.svelte";

// (25:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Checking duplicate items in array");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Checking duplicate items in array");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (74:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Using the same names");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Using the same names");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (125:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Using different names");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Using different names");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section0, p0, t2, a0, t3, t4, t5, p1, t6, t7, p2, t8, t9, ul, li0, t10, a1, t11, t12, t13, li1, t14, a2, t15, t16, t17, li2, t18, code0, t19, t20, t21, p3, t22, t23, section1, t24, p4, t25, t26, t27, p5, t28, t29, t30, section2, t31, p6, t32, code1, t33, t34, t35, div0, t36, t37, section3, t38, p7, t39, t40, p8, t41, t42, t43, p9, t44, a3, t45, t46, t47, div1, t48, t49, t50, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
const hasDuplicatedItems = function(inputArray) {
    const obj = {};
    const numItems = inputArray.length;
    const duplicateRemoved = [];

    for (const i in inputArray) {
        obj[inputArray[i]] = 0;
    }

    for (const i in obj) {
        duplicateRemoved.push(obj[i]);
    }

    return duplicateRemoved.length === numItems;
}
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
// Assume that emailElements is the list of email elements
let notEmptyCount      = 0;
const obj              = {};
const duplicateRemoved = [];

for (const i in emailElements) {
    const v = emailElements[i].value;
    if (v !== '') {
        obj[v] = 0;
        notEmptyCount++;
    }
}

for (const i in obj) {
    duplicateRemoved.push(obj[i]);
}

if (duplicateRemoved.length === 0) {
    // All the items are empty
} else if (duplicateRemoved.length !== notEmptyCount) {
    // The list of emails have duplicated items
}
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "javascript", code: `
const form = document.getElementById('demoForm');
const fv = FormValidation.formValidation(
    document.getElementById('demoForm'),
    {
        fields: {
            'email[]': {
                validators: {
                    emailAddress: {
                        message: 'The value is not a valid email address'
                    },
                    callback: {
                        callback: function(input) {
                            ...

                            if (duplicateRemoved.length === 0) {
                                return {
                                    valid: false,
                                    message: 'You must fill at least one email address',
                                };
                            } else if (duplicateRemoved.length !== notEmptyCount) {
                                return {
                                    valid: false,
                                    message: 'The email address must be unique',
                                };
                            }

                            // Set all fields as valid
                            fv.updateFieldStatus('email[]', 'Valid', 'callback');
                            return {
                                valid: true,
                            };
                        }
                    },
                }
            }
        },
        plugins: {
            ...
        },
    }
);
` },
		$$inline: true
	});

	var demo0 = new Demo({
		props: {
		prefix: "/guide/examples/asking-fields-to-be-unique/basic",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode3 = new SampleCode({
		props: { lang: "html", code: `
<input type="text" class="js-user-email" name="user.email[0]" />
<input type="text" class="js-user-email" name="user.email[1]" />
<input type="text" class="js-user-email" name="user.email[2]" />
<input type="text" class="js-user-email" name="user.email[3]" />
` },
		$$inline: true
	});

	var samplecode4 = new SampleCode({
		props: { lang: "javascript", code: `
const form = document.getElementById('demoForm');
const fv = FormValidation.formValidation(
    document.getElementById('demoForm'),
    {
        fields: {
            'email[]': {
                // All email fields have .js-user-email class
                selector: '.js-user-email',
                validators: {
                    ...
                }
            }
        },
        plugins: {
            ...
        },
    }
);
` },
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/examples/asking-fields-to-be-unique/selector",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Asking fields to be unique',
        'Validating credit card expiration date',
    ] },
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['callback', 'different', 'emailAddress'] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Asking fields to be unique");
			t1 = space();
			section0 = element("section");
			p0 = element("p");
			t2 = text("Sometime the user need to fill multiple fields in form, also each of them must be unique. Any of them has to be different to the remaining.\n            You might think of using the ");
			a0 = element("a");
			t3 = text("different");
			t4 = text(" validator which requires two fields to be different to each other,\n            such as an username and password shouldn't be the same. In our case, the different validator isn't useful because the number of fields\n            for doing comparison are unknown.");
			t5 = space();
			p1 = element("p");
			t6 = text("The form in this example asks user to provide some email addresses. User is also required to fill at least one email address.\n            Each of them, if present, must be unique. This kind of form can be seen in a lot of forms nowadays.");
			t7 = space();
			p2 = element("p");
			t8 = text("The approach illustrated in this example is that:");
			t9 = space();
			ul = element("ul");
			li0 = element("li");
			t10 = text("Use the ");
			a1 = element("a");
			t11 = text("emailAddress");
			t12 = text(" validator to ensure each field need to be a valid email address");
			t13 = space();
			li1 = element("li");
			t14 = text("Use the ");
			a2 = element("a");
			t15 = text("callback");
			t16 = text(" validator to check if the list of email addresses consist duplicated item");
			t17 = space();
			li2 = element("li");
			t18 = text("If all fields pass these validators, we then use the ");
			code0 = element("code");
			t19 = text("updateFieldStatus()");
			t20 = text(" method to set them as valid fields");
			t21 = space();
			p3 = element("p");
			t22 = text("That are straight forward steps. The next sections show the implementation in details.");
			t23 = space();
			section1 = element("section");
			heading0.$$.fragment.c();
			t24 = space();
			p4 = element("p");
			t25 = text("In order to check whether an array contains duplicated items or not, we can use a simple implementation:");
			t26 = space();
			samplecode0.$$.fragment.c();
			t27 = space();
			p5 = element("p");
			t28 = text("Since the array of email addresses might consist of empty item, we need to adjust the code above a little bit to ensure that\n            the array has at least one not-empty item and doesn't contain any duplicated items:");
			t29 = space();
			samplecode1.$$.fragment.c();
			t30 = space();
			section2 = element("section");
			heading1.$$.fragment.c();
			t31 = space();
			p6 = element("p");
			t32 = text("The example code below demonstrates the implementation when all email fields use the same names, ");
			code1 = element("code");
			t33 = text("email[]");
			t34 = text(", for example.");
			t35 = space();
			div0 = element("div");
			samplecode2.$$.fragment.c();
			t36 = space();
			demo0.$$.fragment.c();
			t37 = space();
			section3 = element("section");
			heading2.$$.fragment.c();
			t38 = space();
			p7 = element("p");
			t39 = text("What if the email fields have different names? How we can set the validator rules for them?");
			t40 = space();
			p8 = element("p");
			t41 = text("In this case, we can use a same CSS class for all email fields:");
			t42 = space();
			samplecode3.$$.fragment.c();
			t43 = space();
			p9 = element("p");
			t44 = text("and then use the ");
			a3 = element("a");
			t45 = text("selector");
			t46 = text(" option to apply the same set of validation rules for them:");
			t47 = space();
			div1 = element("div");
			samplecode4.$$.fragment.c();
			t48 = space();
			demo1.$$.fragment.c();
			t49 = space();
			examples.$$.fragment.c();
			t50 = space();
			relatedvalidators.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Asking fields to be unique");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    \n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "Sometime the user need to fill multiple fields in form, also each of them must be unique. Any of them has to be different to the remaining.\n            You might think of using the ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t3 = claim_text(a0_nodes, "different");
			a0_nodes.forEach(detach);
			t4 = claim_text(p0_nodes, " validator which requires two fields to be different to each other,\n            such as an username and password shouldn't be the same. In our case, the different validator isn't useful because the number of fields\n            for doing comparison are unknown.");
			p0_nodes.forEach(detach);
			t5 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t6 = claim_text(p1_nodes, "The form in this example asks user to provide some email addresses. User is also required to fill at least one email address.\n            Each of them, if present, must be unique. This kind of form can be seen in a lot of forms nowadays.");
			p1_nodes.forEach(detach);
			t7 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t8 = claim_text(p2_nodes, "The approach illustrated in this example is that:");
			p2_nodes.forEach(detach);
			t9 = claim_text(section0_nodes, "\n        ");

			ul = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t10 = claim_text(li0_nodes, "Use the ");

			a1 = claim_element(li0_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t11 = claim_text(a1_nodes, "emailAddress");
			a1_nodes.forEach(detach);
			t12 = claim_text(li0_nodes, " validator to ensure each field need to be a valid email address");
			li0_nodes.forEach(detach);
			t13 = claim_text(ul_nodes, "\n            ");

			li1 = claim_element(ul_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t14 = claim_text(li1_nodes, "Use the ");

			a2 = claim_element(li1_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t15 = claim_text(a2_nodes, "callback");
			a2_nodes.forEach(detach);
			t16 = claim_text(li1_nodes, " validator to check if the list of email addresses consist duplicated item");
			li1_nodes.forEach(detach);
			t17 = claim_text(ul_nodes, "\n            ");

			li2 = claim_element(ul_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t18 = claim_text(li2_nodes, "If all fields pass these validators, we then use the ");

			code0 = claim_element(li2_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t19 = claim_text(code0_nodes, "updateFieldStatus()");
			code0_nodes.forEach(detach);
			t20 = claim_text(li2_nodes, " method to set them as valid fields");
			li2_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			t21 = claim_text(section0_nodes, "\n        ");

			p3 = claim_element(section0_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t22 = claim_text(p3_nodes, "That are straight forward steps. The next sections show the implementation in details.");
			p3_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t23 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading0.$$.fragment.l(section1_nodes);
			t24 = claim_text(section1_nodes, "\n\n         ");

			p4 = claim_element(section1_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t25 = claim_text(p4_nodes, "In order to check whether an array contains duplicated items or not, we can use a simple implementation:");
			p4_nodes.forEach(detach);
			t26 = claim_text(section1_nodes, "\n");
			samplecode0.$$.fragment.l(section1_nodes);
			t27 = claim_text(section1_nodes, "\n        ");

			p5 = claim_element(section1_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t28 = claim_text(p5_nodes, "Since the array of email addresses might consist of empty item, we need to adjust the code above a little bit to ensure that\n            the array has at least one not-empty item and doesn't contain any duplicated items:");
			p5_nodes.forEach(detach);
			t29 = claim_text(section1_nodes, "\n");
			samplecode1.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t30 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading1.$$.fragment.l(section2_nodes);
			t31 = claim_text(section2_nodes, "\n        ");

			p6 = claim_element(section2_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t32 = claim_text(p6_nodes, "The example code below demonstrates the implementation when all email fields use the same names, ");

			code1 = claim_element(p6_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t33 = claim_text(code1_nodes, "email[]");
			code1_nodes.forEach(detach);
			t34 = claim_text(p6_nodes, ", for example.");
			p6_nodes.forEach(detach);
			t35 = claim_text(section2_nodes, "\n        ");

			div0 = claim_element(section2_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			samplecode2.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach);
			t36 = claim_text(section2_nodes, "\n        ");
			demo0.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t37 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading2.$$.fragment.l(section3_nodes);
			t38 = claim_text(section3_nodes, "\n        ");

			p7 = claim_element(section3_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t39 = claim_text(p7_nodes, "What if the email fields have different names? How we can set the validator rules for them?");
			p7_nodes.forEach(detach);
			t40 = claim_text(section3_nodes, "\n        ");

			p8 = claim_element(section3_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t41 = claim_text(p8_nodes, "In this case, we can use a same CSS class for all email fields:");
			p8_nodes.forEach(detach);
			t42 = claim_text(section3_nodes, "\n");
			samplecode3.$$.fragment.l(section3_nodes);
			t43 = claim_text(section3_nodes, "\n        ");

			p9 = claim_element(section3_nodes, "P", { class: true }, false);
			var p9_nodes = children(p9);

			t44 = claim_text(p9_nodes, "and then use the ");

			a3 = claim_element(p9_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t45 = claim_text(a3_nodes, "selector");
			a3_nodes.forEach(detach);
			t46 = claim_text(p9_nodes, " option to apply the same set of validation rules for them:");
			p9_nodes.forEach(detach);
			t47 = claim_text(section3_nodes, "\n        ");

			div1 = claim_element(section3_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			samplecode4.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach);
			t48 = claim_text(section3_nodes, "\n        ");
			demo1.$$.fragment.l(section3_nodes);
			section3_nodes.forEach(detach);
			t49 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			t50 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 108);
			a0.href = "/guide/validators/different";
			a0.className = "blue dim link";
			add_location(a0, file, 9, 41, 402);
			p0.className = "lh-copy";
			add_location(p0, file, 8, 8, 202);
			p1.className = "lh-copy";
			add_location(p1, file, 12, 8, 748);
			p2.className = "lh-copy";
			add_location(p2, file, 14, 8, 1017);
			a1.href = "/guide/validators/email-address";
			a1.className = "blue dim link";
			add_location(a1, file, 16, 24, 1151);
			add_location(li0, file, 16, 12, 1139);
			a2.href = "/guide/validators/callback";
			a2.className = "blue dim link";
			add_location(a2, file, 17, 24, 1325);
			add_location(li1, file, 17, 12, 1313);
			add_location(code0, file, 18, 69, 1545);
			add_location(li2, file, 18, 12, 1488);
			ul.className = "ma0 pl3 lh-copy";
			add_location(ul, file, 15, 8, 1098);
			p3.className = "lh-copy";
			add_location(p3, file, 20, 8, 1640);
			section0.className = "mv5";
			add_location(section0, file, 7, 4, 172);
			p4.className = "lh-copy";
			add_location(p4, file, 26, 9, 1863);
			p5.className = "lh-copy";
			add_location(p5, file, 44, 8, 2384);
			section1.className = "mv5";
			add_location(section1, file, 23, 4, 1770);
			add_location(code1, file, 74, 124, 3412);
			p6.className = "lh-copy";
			add_location(p6, file, 74, 8, 3296);
			div0.className = "mb4";
			add_location(div0, file, 75, 8, 3459);
			section2.className = "mv5";
			add_location(section2, file, 72, 4, 3218);
			p7.className = "lh-copy";
			add_location(p7, file, 125, 8, 5197);
			p8.className = "lh-copy";
			add_location(p8, file, 126, 8, 5320);
			a3.href = "/guide/getting-started/field-selector";
			a3.className = "blue dim link";
			add_location(a3, file, 133, 44, 5749);
			p9.className = "lh-copy";
			add_location(p9, file, 133, 8, 5713);
			div1.className = "mb4";
			add_location(div1, file, 134, 8, 5903);
			section3.className = "mv5";
			add_location(section3, file, 123, 4, 5118);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section0, anchor);
			append(section0, p0);
			append(p0, t2);
			append(p0, a0);
			append(a0, t3);
			append(p0, t4);
			append(section0, t5);
			append(section0, p1);
			append(p1, t6);
			append(section0, t7);
			append(section0, p2);
			append(p2, t8);
			append(section0, t9);
			append(section0, ul);
			append(ul, li0);
			append(li0, t10);
			append(li0, a1);
			append(a1, t11);
			append(li0, t12);
			append(ul, t13);
			append(ul, li1);
			append(li1, t14);
			append(li1, a2);
			append(a2, t15);
			append(li1, t16);
			append(ul, t17);
			append(ul, li2);
			append(li2, t18);
			append(li2, code0);
			append(code0, t19);
			append(li2, t20);
			append(section0, t21);
			append(section0, p3);
			append(p3, t22);
			insert(target, t23, anchor);
			insert(target, section1, anchor);
			mount_component(heading0, section1, null);
			append(section1, t24);
			append(section1, p4);
			append(p4, t25);
			append(section1, t26);
			mount_component(samplecode0, section1, null);
			append(section1, t27);
			append(section1, p5);
			append(p5, t28);
			append(section1, t29);
			mount_component(samplecode1, section1, null);
			insert(target, t30, anchor);
			insert(target, section2, anchor);
			mount_component(heading1, section2, null);
			append(section2, t31);
			append(section2, p6);
			append(p6, t32);
			append(p6, code1);
			append(code1, t33);
			append(p6, t34);
			append(section2, t35);
			append(section2, div0);
			mount_component(samplecode2, div0, null);
			append(section2, t36);
			mount_component(demo0, section2, null);
			insert(target, t37, anchor);
			insert(target, section3, anchor);
			mount_component(heading2, section3, null);
			append(section3, t38);
			append(section3, p7);
			append(p7, t39);
			append(section3, t40);
			append(section3, p8);
			append(p8, t41);
			append(section3, t42);
			mount_component(samplecode3, section3, null);
			append(section3, t43);
			append(section3, p9);
			append(p9, t44);
			append(p9, a3);
			append(a3, t45);
			append(p9, t46);
			append(section3, t47);
			append(section3, div1);
			mount_component(samplecode4, div1, null);
			append(section3, t48);
			mount_component(demo1, section3, null);
			insert(target, t49, anchor);
			mount_component(examples, target, anchor);
			insert(target, t50, anchor);
			mount_component(relatedvalidators, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			demo0.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			samplecode3.$$.fragment.i(local);

			samplecode4.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			demo0.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			samplecode3.$$.fragment.o(local);
			samplecode4.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section0);
				detach(t23);
				detach(section1);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t30);
				detach(section2);
			}

			heading1.$destroy();

			samplecode2.$destroy();

			demo0.$destroy();

			if (detaching) {
				detach(t37);
				detach(section3);
			}

			heading2.$destroy();

			samplecode3.$destroy();

			samplecode4.$destroy();

			demo1.$destroy();

			if (detaching) {
				detach(t49);
			}

			examples.$destroy(detaching);

			if (detaching) {
				detach(t50);
			}

			relatedvalidators.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Asking fields to be unique";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

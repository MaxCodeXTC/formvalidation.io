import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';

/* src/routes/guide/api/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/api/index.svelte";

// (53:12) <PrevButton target="/guide/plugins">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Plugins");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Plugins");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (54:12) <NextButton target="/guide/api/add-field">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("addField() method");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "addField() method");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, p0, t4, code0, t5, t6, code1, t7, t8, t9, h30, t10, t11, t12, h31, t13, t14, t15, p1, t16, t17, section1, div, t18, current;

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    const fv = FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            ...
        }
    );

    // Call the public methods
    fv.METHOD_NAME(PARAMETERS);
});
</script-tag>
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import formValidation from 'formvalidation/dist/es6/core/Core';

// Initialize somewhere depending on the JavaScript framework you are using
const fv = formValidation(
    document.getElementById('demoForm'),
    {
        ...
    }
);

// Call the public methods
fv.METHOD_NAME(PARAMETERS);
` },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/plugins",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/api/add-field",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Overview");
			t1 = space();
			h2 = element("h2");
			t2 = text("A collection of public methods");
			t3 = space();
			section0 = element("section");
			p0 = element("p");
			t4 = text("After initializing the form with ");
			code0 = element("code");
			t5 = text("FormValidation.formValidation()");
			t6 = text(", you can access the public methods provided by ");
			code1 = element("code");
			t7 = text("formValidation");
			t8 = text(".");
			t9 = space();
			h30 = element("h3");
			t10 = text("Using in the browser");
			t11 = space();
			samplecode0.$$.fragment.c();
			t12 = space();
			h31 = element("h3");
			t13 = text("Using with ES6 module");
			t14 = space();
			samplecode1.$$.fragment.c();
			t15 = space();
			p1 = element("p");
			t16 = text("The next sections list all of public methods provided by library.");
			t17 = space();
			section1 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t18 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Overview");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "A collection of public methods");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t4 = claim_text(p0_nodes, "After initializing the form with ");

			code0 = claim_element(p0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t5 = claim_text(code0_nodes, "FormValidation.formValidation()");
			code0_nodes.forEach(detach);
			t6 = claim_text(p0_nodes, ", you can access the public methods provided by ");

			code1 = claim_element(p0_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t7 = claim_text(code1_nodes, "formValidation");
			code1_nodes.forEach(detach);
			t8 = claim_text(p0_nodes, ".");
			p0_nodes.forEach(detach);
			t9 = claim_text(section0_nodes, "\n\n        ");

			h30 = claim_element(section0_nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t10 = claim_text(h30_nodes, "Using in the browser");
			h30_nodes.forEach(detach);
			t11 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t12 = claim_text(section0_nodes, "\n\n        ");

			h31 = claim_element(section0_nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t13 = claim_text(h31_nodes, "Using with ES6 module");
			h31_nodes.forEach(detach);
			t14 = claim_text(section0_nodes, "\n");
			samplecode1.$$.fragment.l(section0_nodes);
			t15 = claim_text(section0_nodes, "\n        \n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t16 = claim_text(p1_nodes, "The next sections list all of public methods provided by library.");
			p1_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t17 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			div = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t18 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 85);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 131);
			add_location(code0, file, 9, 60, 276);
			add_location(code1, file, 9, 152, 368);
			p0.className = "lh-copy";
			add_location(p0, file, 9, 8, 224);
			add_location(h30, file, 11, 8, 410);
			add_location(h31, file, 30, 8, 863);
			p1.className = "lh-copy";
			add_location(p1, file, 47, 8, 1294);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 194);
			div.className = "flex";
			add_location(div, file, 51, 8, 1433);
			section1.className = "mv5";
			add_location(section1, file, 50, 4, 1403);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			append(section0, p0);
			append(p0, t4);
			append(p0, code0);
			append(code0, t5);
			append(p0, t6);
			append(p0, code1);
			append(code1, t7);
			append(p0, t8);
			append(section0, t9);
			append(section0, h30);
			append(h30, t10);
			append(section0, t11);
			mount_component(samplecode0, section0, null);
			append(section0, t12);
			append(section0, h31);
			append(h31, t13);
			append(section0, t14);
			mount_component(samplecode1, section0, null);
			append(section0, t15);
			append(section0, p1);
			append(p1, t16);
			insert(target, t17, anchor);
			insert(target, section1, anchor);
			append(section1, div);
			mount_component(prevbutton, div, null);
			append(div, t18);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			samplecode0.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t17);
				detach(section1);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • API";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

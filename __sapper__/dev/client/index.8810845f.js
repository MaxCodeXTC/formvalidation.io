import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';

/* src/routes/guide/plugins/tachyons/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/plugins/tachyons/index.svelte";

// (10:8) <Heading>
function create_default_slot_7(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Usage");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Usage");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (51:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Horizontal form");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Horizontal form");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (56:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Stacked form");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Stacked form");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (87:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Multiple fields on the same row");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Multiple fields on the same row");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (92:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changelog");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changelog");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (100:12) <PrevButton target="/guide/plugins/submit-button">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("SubmitButton plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "SubmitButton plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (101:12) <NextButton target="/guide/plugins/tooltip">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Tooltip plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Tooltip plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, a, t3, t4, t5, section0, t6, p0, t7, t8, t9, p1, t10, code0, t11, t12, t13, p2, t14, t15, section1, t16, t17, section2, t18, p3, t19, code1, t20, t21, code2, t22, t23, t24, div0, t25, p4, t26, t27, p5, t28, code3, t29, t30, code4, t31, t32, t33, p6, t34, code5, t35, t36, t37, div1, t38, t39, section3, t40, t41, section4, t42, ul, li, t43, t44, section5, div2, t45, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="https://unpkg.com/tachyons@4.10.0/css/tachyons.min.css">
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="demoForm" method="POST">
        ...
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>    
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/plugins/Tachyons.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                tachyons: new FormValidation.plugins.Tachyons(),
                ...
            },
        }
    );
});
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo0 = new Demo({
		props: {
		prefix: "/guide/plugins/tachyons/horizontal-form",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<form class="fv-stacked-form">
    <!-- The fields go here -->
    ...
</form>
` },
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "javascript", code: `
semantic: new FormValidation.plugins.Semantic({
    rowSelector: function(field, ele) {
        // field is the field name
        // ele is the field element
        return '.row';
    }

    // Or you can just simply pass it as a string:
    // rowSelector: '.row',
}),
` },
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/plugins/tachyons/stacked-form",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo2 = new Demo({
		props: {
		prefix: "/guide/plugins/tachyons/multiple-fields",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading4 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/plugins/submit-button",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/plugins/tooltip",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Tachyons plugin");
			t1 = space();
			h2 = element("h2");
			t2 = text("Integrate with ");
			a = element("a");
			t3 = text("Tachyons");
			t4 = text(" library. Support Tachyons v4.10.0");
			t5 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t6 = space();
			p0 = element("p");
			t7 = text("The following piece of code is the starting point to validate the form made in Tachyons:");
			t8 = space();
			samplecode0.$$.fragment.c();
			t9 = space();
			p1 = element("p");
			t10 = text("The sample code above assumes that the FormValidation files are placed inside the ");
			code0 = element("code");
			t11 = text("vendors");
			t12 = text(" directory. You might need to change the path depending on where you place them on the server.");
			t13 = space();
			p2 = element("p");
			t14 = text("The next sections list out some examples of various forms made with Tachyons.");
			t15 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t16 = space();
			demo0.$$.fragment.c();
			t17 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t18 = space();
			p3 = element("p");
			t19 = text("You need to add the ");
			code1 = element("code");
			t20 = text("fv-stacked-form");
			t21 = text(" class to the ");
			code2 = element("code");
			t22 = text("form");
			t23 = text(" element such as:");
			t24 = space();
			div0 = element("div");
			samplecode1.$$.fragment.c();
			t25 = space();
			p4 = element("p");
			t26 = text("In order to add the correct class for error message and the field element when it is a valid or invalid, we need to specify the CSS selector of the field container.");
			t27 = space();
			p5 = element("p");
			t28 = text("By default, the Tachyons plugin will look for the ");
			code3 = element("code");
			t29 = text(".fl");
			t30 = text(" element. But in the stacked form below, every field will be placed inside our own ");
			code4 = element("code");
			t31 = text(".row");
			t32 = text(" container.");
			t33 = space();
			p6 = element("p");
			t34 = text("We need to use the ");
			code5 = element("code");
			t35 = text("rowSelector");
			t36 = text(" option to help the plugin determine the field containers as following:");
			t37 = space();
			div1 = element("div");
			samplecode2.$$.fragment.c();
			t38 = space();
			demo1.$$.fragment.c();
			t39 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t40 = space();
			demo2.$$.fragment.c();
			t41 = space();
			section4 = element("section");
			heading4.$$.fragment.c();
			t42 = space();
			ul = element("ul");
			li = element("li");
			t43 = text("v1.0.0: First release");
			t44 = space();
			section5 = element("section");
			div2 = element("div");
			prevbutton.$$.fragment.c();
			t45 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Tachyons plugin");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Integrate with ");

			a = claim_element(h2_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t3 = claim_text(a_nodes, "Tachyons");
			a_nodes.forEach(detach);
			t4 = claim_text(h2_nodes, " library. Support Tachyons v4.10.0");
			h2_nodes.forEach(detach);
			t5 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t6 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t7 = claim_text(p0_nodes, "The following piece of code is the starting point to validate the form made in Tachyons:");
			p0_nodes.forEach(detach);
			t8 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t9 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t10 = claim_text(p1_nodes, "The sample code above assumes that the FormValidation files are placed inside the ");

			code0 = claim_element(p1_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t11 = claim_text(code0_nodes, "vendors");
			code0_nodes.forEach(detach);
			t12 = claim_text(p1_nodes, " directory. You might need to change the path depending on where you place them on the server.");
			p1_nodes.forEach(detach);
			t13 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t14 = claim_text(p2_nodes, "The next sections list out some examples of various forms made with Tachyons.");
			p2_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t15 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t16 = claim_text(section1_nodes, "\n        ");
			demo0.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t17 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t18 = claim_text(section2_nodes, "\n        ");

			p3 = claim_element(section2_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t19 = claim_text(p3_nodes, "You need to add the ");

			code1 = claim_element(p3_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t20 = claim_text(code1_nodes, "fv-stacked-form");
			code1_nodes.forEach(detach);
			t21 = claim_text(p3_nodes, " class to the ");

			code2 = claim_element(p3_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t22 = claim_text(code2_nodes, "form");
			code2_nodes.forEach(detach);
			t23 = claim_text(p3_nodes, " element such as:");
			p3_nodes.forEach(detach);
			t24 = claim_text(section2_nodes, "\n        ");

			div0 = claim_element(section2_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			samplecode1.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach);
			t25 = claim_text(section2_nodes, "\n        ");

			p4 = claim_element(section2_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t26 = claim_text(p4_nodes, "In order to add the correct class for error message and the field element when it is a valid or invalid, we need to specify the CSS selector of the field container.");
			p4_nodes.forEach(detach);
			t27 = claim_text(section2_nodes, "\n        ");

			p5 = claim_element(section2_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t28 = claim_text(p5_nodes, "By default, the Tachyons plugin will look for the ");

			code3 = claim_element(p5_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t29 = claim_text(code3_nodes, ".fl");
			code3_nodes.forEach(detach);
			t30 = claim_text(p5_nodes, " element. But in the stacked form below, every field will be placed inside our own ");

			code4 = claim_element(p5_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t31 = claim_text(code4_nodes, ".row");
			code4_nodes.forEach(detach);
			t32 = claim_text(p5_nodes, " container.");
			p5_nodes.forEach(detach);
			t33 = claim_text(section2_nodes, "\n        ");

			p6 = claim_element(section2_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t34 = claim_text(p6_nodes, "We need to use the ");

			code5 = claim_element(p6_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t35 = claim_text(code5_nodes, "rowSelector");
			code5_nodes.forEach(detach);
			t36 = claim_text(p6_nodes, " option to help the plugin determine the field containers as following:");
			p6_nodes.forEach(detach);
			t37 = claim_text(section2_nodes, "\n        ");

			div1 = claim_element(section2_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			samplecode2.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach);
			t38 = claim_text(section2_nodes, "  \n        ");
			demo1.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t39 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t40 = claim_text(section3_nodes, "\n        ");
			demo2.$$.fragment.l(section3_nodes);
			section3_nodes.forEach(detach);
			t41 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			heading4.$$.fragment.l(section4_nodes);
			t42 = claim_text(section4_nodes, "\n        ");

			ul = claim_element(section4_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li = claim_element(ul_nodes, "LI", {}, false);
			var li_nodes = children(li);

			t43 = claim_text(li_nodes, "v1.0.0: First release");
			li_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			section4_nodes.forEach(detach);
			t44 = claim_text(nodes, "\n\n    ");

			section5 = claim_element(nodes, "SECTION", { class: true }, false);
			var section5_nodes = children(section5);

			div2 = claim_element(section5_nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			prevbutton.$$.fragment.l(div2_nodes);
			t45 = claim_text(div2_nodes, "\n            ");
			nextbutton.$$.fragment.l(div2_nodes);
			div2_nodes.forEach(detach);
			section5_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 97);
			a.href = "https://tachyons.io";
			a.className = "blue dim link";
			add_location(a, file, 6, 49, 195);
			h2.className = "f4 fw4 tc lh-copy";
			add_location(h2, file, 6, 4, 150);
			p0.className = "lh-copy";
			add_location(p0, file, 10, 8, 367);
			add_location(code0, file, 45, 109, 1584);
			p1.className = "lh-copy";
			add_location(p1, file, 45, 8, 1483);
			p2.className = "lh-copy";
			add_location(p2, file, 46, 8, 1711);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 304);
			section1.className = "mv5";
			add_location(section1, file, 49, 4, 1832);
			add_location(code1, file, 56, 47, 2118);
			add_location(code2, file, 56, 89, 2160);
			p3.className = "lh-copy";
			add_location(p3, file, 56, 8, 2079);
			div0.className = "mb4";
			add_location(div0, file, 57, 8, 2207);
			p4.className = "lh-copy";
			add_location(p4, file, 65, 8, 2377);
			add_location(code3, file, 66, 77, 2642);
			add_location(code4, file, 66, 176, 2741);
			p5.className = "lh-copy";
			add_location(p5, file, 66, 8, 2573);
			add_location(code5, file, 67, 46, 2820);
			p6.className = "lh-copy";
			add_location(p6, file, 67, 8, 2782);
			div1.className = "mb4";
			add_location(div1, file, 68, 8, 2928);
			section2.className = "mv5";
			add_location(section2, file, 54, 4, 2009);
			section3.className = "mv5";
			add_location(section3, file, 85, 4, 3404);
			add_location(li, file, 93, 12, 3709);
			ul.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul, file, 92, 8, 3664);
			section4.className = "mv5";
			add_location(section4, file, 90, 4, 3597);
			div2.className = "flex";
			add_location(div2, file, 98, 8, 3804);
			section5.className = "mv5";
			add_location(section5, file, 97, 4, 3774);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			append(h2, a);
			append(a, t3);
			append(h2, t4);
			insert(target, t5, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t6);
			append(section0, p0);
			append(p0, t7);
			append(section0, t8);
			mount_component(samplecode0, section0, null);
			append(section0, t9);
			append(section0, p1);
			append(p1, t10);
			append(p1, code0);
			append(code0, t11);
			append(p1, t12);
			append(section0, t13);
			append(section0, p2);
			append(p2, t14);
			insert(target, t15, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t16);
			mount_component(demo0, section1, null);
			insert(target, t17, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t18);
			append(section2, p3);
			append(p3, t19);
			append(p3, code1);
			append(code1, t20);
			append(p3, t21);
			append(p3, code2);
			append(code2, t22);
			append(p3, t23);
			append(section2, t24);
			append(section2, div0);
			mount_component(samplecode1, div0, null);
			append(section2, t25);
			append(section2, p4);
			append(p4, t26);
			append(section2, t27);
			append(section2, p5);
			append(p5, t28);
			append(p5, code3);
			append(code3, t29);
			append(p5, t30);
			append(p5, code4);
			append(code4, t31);
			append(p5, t32);
			append(section2, t33);
			append(section2, p6);
			append(p6, t34);
			append(p6, code5);
			append(code5, t35);
			append(p6, t36);
			append(section2, t37);
			append(section2, div1);
			mount_component(samplecode2, div1, null);
			append(section2, t38);
			mount_component(demo1, section2, null);
			insert(target, t39, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t40);
			mount_component(demo2, section3, null);
			insert(target, t41, anchor);
			insert(target, section4, anchor);
			mount_component(heading4, section4, null);
			append(section4, t42);
			append(section4, ul);
			append(ul, li);
			append(li, t43);
			insert(target, t44, anchor);
			insert(target, section5, anchor);
			append(section5, div2);
			mount_component(prevbutton, div2, null);
			append(div2, t45);
			mount_component(nextbutton, div2, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var heading4_changes = {};
			if (changed.$$scope) heading4_changes.$$scope = { changed, ctx };
			heading4.$set(heading4_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			demo0.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			demo2.$$.fragment.i(local);

			heading4.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			demo0.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			demo2.$$.fragment.o(local);
			heading4.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t5);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			if (detaching) {
				detach(t15);
				detach(section1);
			}

			heading1.$destroy();

			demo0.$destroy();

			if (detaching) {
				detach(t17);
				detach(section2);
			}

			heading2.$destroy();

			samplecode1.$destroy();

			samplecode2.$destroy();

			demo1.$destroy();

			if (detaching) {
				detach(t39);
				detach(section3);
			}

			heading3.$destroy();

			demo2.$destroy();

			if (detaching) {
				detach(t41);
				detach(section4);
			}

			heading4.$destroy();

			if (detaching) {
				detach(t44);
				detach(section5);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Tachyons plugin";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

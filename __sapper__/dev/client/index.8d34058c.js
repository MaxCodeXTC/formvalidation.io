import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';

/* src/routes/guide/plugins/mandatory-icon/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/plugins/mandatory-icon/index.svelte";

// (10:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Usage");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Usage");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (69:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (74:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changelog");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changelog");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (84:12) <PrevButton target="/guide/plugins/mailgun">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Mailgun plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Mailgun plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (85:12) <NextButton target="/guide/plugins/materialize">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Materialize plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Materialize plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, p0, t5, t6, t7, p1, t8, code0, t9, t10, t11, p2, t12, a, t13, t14, code1, t15, t16, t17, t18, section1, t19, t20, section2, t21, ul, li, t22, t23, t24, section3, div, t25, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="demoForm" method="POST">
        ...
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>    
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/plugins/MandatoryIcon.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                // You have to enable MandatoryIcon plugin before the Icon plugin
                mandatoryIcon: new FormValidation.plugins.MandatoryIcon({
                    // The CSS classes (separated by a space) that present the icon
                    icon: '...'
                }),
                icon: new FormValidation.plugins.Icon({
                    valid: '...',
                    invalid: '...',
                    validating: '...',
                }),
                ...
            },
        }
    );
});
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
mandatoryIcon: new FormValidation.plugins.MandatoryIcon({
    icon: 'fa fa-asterisk',
}),
icon: new FormValidation.plugins.Icon({
    valid: 'fa fa-check',
    invalid: 'fa fa-times',
    validating: 'fa fa-refresh',
}),
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/plugins/mandatory-icon/basic",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['notEmpty'] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/plugins/mailgun",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/plugins/materialize",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("MandatoryIcon plugin");
			t1 = space();
			h2 = element("h2");
			t2 = text("Show required icons for mandatory fields");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			p0 = element("p");
			t5 = text("The following piece of code is the starting point to use the MandatoryIcon plugin:");
			t6 = space();
			samplecode0.$$.fragment.c();
			t7 = space();
			p1 = element("p");
			t8 = text("The sample code above assumes that the FormValidation files are placed inside the ");
			code0 = element("code");
			t9 = text("vendors");
			t10 = text(" directory. You might need to change the path depending on where you place them on the server.");
			t11 = space();
			p2 = element("p");
			t12 = text("For example, to use the plugin with ");
			a = element("a");
			t13 = text("FontAwesome");
			t14 = text(", we can set the ");
			code1 = element("code");
			t15 = text("icon");
			t16 = text(" option as:");
			t17 = space();
			samplecode1.$$.fragment.c();
			t18 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t19 = space();
			demo.$$.fragment.c();
			t20 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t21 = space();
			ul = element("ul");
			li = element("li");
			t22 = text("v1.0.0: First release");
			t23 = space();
			relatedvalidators.$$.fragment.c();
			t24 = space();
			section3 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t25 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "MandatoryIcon plugin");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Show required icons for mandatory fields");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t5 = claim_text(p0_nodes, "The following piece of code is the starting point to use the MandatoryIcon plugin:");
			p0_nodes.forEach(detach);
			t6 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t7 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t8 = claim_text(p1_nodes, "The sample code above assumes that the FormValidation files are placed inside the ");

			code0 = claim_element(p1_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t9 = claim_text(code0_nodes, "vendors");
			code0_nodes.forEach(detach);
			t10 = claim_text(p1_nodes, " directory. You might need to change the path depending on where you place them on the server.");
			p1_nodes.forEach(detach);
			t11 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t12 = claim_text(p2_nodes, "For example, to use the plugin with ");

			a = claim_element(p2_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t13 = claim_text(a_nodes, "FontAwesome");
			a_nodes.forEach(detach);
			t14 = claim_text(p2_nodes, ", we can set the ");

			code1 = claim_element(p2_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t15 = claim_text(code1_nodes, "icon");
			code1_nodes.forEach(detach);
			t16 = claim_text(p2_nodes, " option as:");
			p2_nodes.forEach(detach);
			t17 = claim_text(section0_nodes, "\n");
			samplecode1.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t18 = claim_text(nodes, "\n    \n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t19 = claim_text(section1_nodes, "\n        ");
			demo.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t20 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t21 = claim_text(section2_nodes, "\n        ");

			ul = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li = claim_element(ul_nodes, "LI", {}, false);
			var li_nodes = children(li);

			t22 = claim_text(li_nodes, "v1.0.0: First release");
			li_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			t23 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			t24 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			div = claim_element(section3_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t25 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 102);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 160);
			p0.className = "lh-copy";
			add_location(p0, file, 10, 8, 296);
			add_location(code0, file, 53, 109, 1830);
			p1.className = "lh-copy";
			add_location(p1, file, 53, 8, 1729);
			a.href = "https://fontawesome.com";
			a.className = "blue dim link";
			add_location(a, file, 54, 63, 2012);
			add_location(code1, file, 54, 151, 2100);
			p2.className = "lh-copy";
			add_location(p2, file, 54, 8, 1957);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 233);
			section1.className = "mv5";
			add_location(section1, file, 67, 4, 2422);
			add_location(li, file, 75, 12, 2705);
			ul.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul, file, 74, 8, 2660);
			section2.className = "mv5";
			add_location(section2, file, 72, 4, 2593);
			div.className = "flex";
			add_location(div, file, 82, 8, 2853);
			section3.className = "mv5";
			add_location(section3, file, 81, 4, 2823);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, p0);
			append(p0, t5);
			append(section0, t6);
			mount_component(samplecode0, section0, null);
			append(section0, t7);
			append(section0, p1);
			append(p1, t8);
			append(p1, code0);
			append(code0, t9);
			append(p1, t10);
			append(section0, t11);
			append(section0, p2);
			append(p2, t12);
			append(p2, a);
			append(a, t13);
			append(p2, t14);
			append(p2, code1);
			append(code1, t15);
			append(p2, t16);
			append(section0, t17);
			mount_component(samplecode1, section0, null);
			insert(target, t18, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t19);
			mount_component(demo, section1, null);
			insert(target, t20, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t21);
			append(section2, ul);
			append(ul, li);
			append(li, t22);
			insert(target, t23, anchor);
			mount_component(relatedvalidators, target, anchor);
			insert(target, t24, anchor);
			insert(target, section3, anchor);
			append(section3, div);
			mount_component(prevbutton, div, null);
			append(div, t25);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t18);
				detach(section1);
			}

			heading1.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t20);
				detach(section2);
			}

			heading2.$destroy();

			if (detaching) {
				detach(t23);
			}

			relatedvalidators.$destroy(detaching);

			if (detaching) {
				detach(t24);
				detach(section3);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • MandatoryIcon plugin";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

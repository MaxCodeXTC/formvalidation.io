import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';

/* src/routes/guide/examples/using-svg-icons/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/using-svg-icons/index.svelte";

// (59:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Using with FontAwesome SVG icons");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Using with FontAwesome SVG icons");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (139:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Using with UIKit framework");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Using with UIKit framework");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section0, p0, t2, code0, t3, t4, t5, t6, p1, t7, code1, t8, t9, t10, p2, t11, code2, t12, t13, code3, t14, t15, code4, t16, t17, t18, t19, section1, t20, p3, t21, a0, t22, t23, t24, table0, tr0, th0, t25, t26, th1, t27, t28, tr1, td0, a1, t29, t30, td1, t31, tr2, td2, a2, t32, t33, td3, t34, tr3, td4, a3, t35, t36, td5, t37, t38, section2, t39, p4, t40, a4, t41, t42, a5, t43, t44, t45, table1, tr4, th2, t46, t47, th3, t48, t49, tr5, td6, code5, t50, t51, td7, t52, tr6, td8, code6, t53, t54, td9, t55, tr7, td10, code7, t56, t57, td11, t58, t59, current;

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
FormValidation
    .formValidation(document.getElementById('demoForm'), {
        fields: {
            ...
        },
        plugins: {
            icon: new FormValidation.plugins.Icon({
                ...
            }),
        },
    })
    .on('plugins.icon.set', function(e) {
        // e.element presents the field element
        // e.field is the field name
        // e.status is the validation status which 
        // can be 'NotValidated', 'Validating', 'Valid' or 'Invalid'
        // e.iconElement presents the icon element that associates with the field element
        if (e.iconElement) {
            switch (e.status) {
                case 'Validating':
                    e.iconElement.innerHTML = '...';
                    break;

                case 'Invalid':
                    e.iconElement.innerHTML = '...';
                    break;

                case 'Valid':
                    e.iconElement.innerHTML = '...';
                    break;

                default:
                    e.iconElement.innerHTML = '';
                    break;
            }
        }
    });
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512.333 512" width="16" height="16">
    <path d="" stroke="#ff4136" />
</svg>
` },
		$$inline: true
	});

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "html", code: `
<svg xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 512.333 512" width="16" height="16">
    <path d="M440.935 12.574l3.966 82.766C399.416 
    41.904 331.674 8 256 8 134.813 8 33.933 94.924 
    12.296 209.824 10.908 217.193 16.604 224 24.103 
    224h49.084c5.57 0 10.377-3.842 11.676-9.259C103.407 
    137.408 172.931 80 256 80c60.893 0 114.512 30.856 
    146.104 77.801l-101.53-4.865c-6.845-.328-12.574 
    5.133-12.574 11.986v47.411c0 6.627 5.373 12 12 
    12h200.333c6.627 0 12-5.373 
    12-12V12c0-6.627-5.373-12-12-12h-47.411c-6.853 
    0-12.315 5.729-11.987 12.574zM256 432c-60.895 
    0-114.517-30.858-146.109-77.805l101.868 4.871c6.845.327 
    12.573-5.134 
    12.573-11.986v-47.412c0-6.627-5.373-12-12-12H12c-6.627 
    0-12 5.373-12 12V500c0 6.627 5.373 12 12 
    12h47.385c6.863 0 12.328-5.745 
    11.985-12.599l-4.129-82.575C112.725 470.166 180.405 
    504 256 504c121.187 0 222.067-86.924 243.704-201.824 
    1.388-7.369-4.308-14.176-11.807-14.176h-49.084c-5.57 
    0-10.377 3.842-11.676 9.259C408.593 374.592 339.069 
    432 256 432z" />
</svg>
` },
		$$inline: true
	});

	var samplecode3 = new SampleCode({
		props: { lang: "html", code: `
<svg xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 352 512" width="16" height="16">
    <path d="M242.72 256l100.07-100.07c12.28-12.28 
    12.28-32.19 
    0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 
    0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 
    0L9.21 111.45c-12.28 12.28-12.28 32.19 0 
    44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 
    32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 
    12.28 44.48 0L176 322.72l100.07 100.07c12.28 
    12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 
    12.28-32.19 0-44.48L242.72 256z" />
</svg>
` },
		$$inline: true
	});

	var samplecode4 = new SampleCode({
		props: { lang: "html", code: `
<svg xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 512 512" width="16" height="16">
    <path d="M173.898 
    439.404l-166.4-166.4c-9.997-9.997-9.997-26.206
    0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 
    36.204 0L192 312.69 432.095 72.596c9.997-9.997 
    26.207-9.997 36.204 0l36.203 36.204c9.997 
    9.997 9.997 26.206 0 36.204l-294.4 
    294.401c-9.998 9.997-26.207 9.997-36.204-.001z" />
</svg>
` },
		$$inline: true
	});

	var demo0 = new Demo({
		props: {
		prefix: "/guide/examples/using-svg-icons/fontawesome-svg",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode5 = new SampleCode({
		props: { lang: "html", code: `
<svg xmlns="http://www.w3.org/2000/svg" 
    width="20" height="20" viewBox="0 0 20 20">
    <path fill="none" stroke="#000" stroke-width="1.1" 
        d="M17.08,11.15 C17.09,11.31 17.1,11.47 
        17.1,11.64 C17.1,15.53 13.94,18.69 
        10.05,18.69 C6.16,18.68 3,15.53 3,11.63 
        C3,7.74 6.16,4.58 10.05,4.58 C10.9,4.58 
        11.71,4.73 12.46,5"></path>
    <polyline fill="none" stroke="#000"
        points="9.9 2 12.79 4.89 9.79 7.9"></polyline>
</svg>
` },
		$$inline: true
	});

	var samplecode6 = new SampleCode({
		props: { lang: "html", code: `
<svg xmlns="http://www.w3.org/2000/svg" 
    width="20" height="20" viewBox="0 0 20 20">
    <path fill="none" stroke="#000" stroke-width="1.06" d="M16,16 L4,4"></path>
    <path fill="none" stroke="#000" stroke-width="1.06" d="M16,4 L4,16"></path>
</svg>
` },
		$$inline: true
	});

	var samplecode7 = new SampleCode({
		props: { lang: "html", code: `
<svg xmlns="http://www.w3.org/2000/svg" 
    width="20" height="20" viewBox="0 0 20 20">
    <polyline fill="none" stroke="#000" stroke-width="1.1" 
        points="4,10 8,15 17,4"></polyline>
</svg>
` },
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/examples/using-svg-icons/svg",
		frameworks: ['uikit']
	},
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Adjusting icon position',
        'Showing icons in custom area',
        'Using FontAwesome icons',
        'Using Glyphicons icons',
        'Using Material Design icons',
        'Using Semantic UI framework icons',
        'Using Spectre framework icons',
        'Using SVG icons',
    ] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Using SVG icons");
			t1 = space();
			section0 = element("section");
			p0 = element("p");
			t2 = text("For more customization, you might want to use SVG icons in additonal to the CSS classes. Fortunately, the Icon plugin provides an event named ");
			code0 = element("code");
			t3 = text("plugins.icon.set");
			t4 = text(" that you can hook on when the field is being validated, valid or invalid:");
			t5 = space();
			samplecode0.$$.fragment.c();
			t6 = space();
			p1 = element("p");
			t7 = text("We can use the SVG icon by setting ");
			code1 = element("code");
			t8 = text("e.iconElement.innerHTML");
			t9 = text(".");
			t10 = space();
			p2 = element("p");
			t11 = text("You might need to set the ");
			code2 = element("code");
			t12 = text("width");
			t13 = text(", ");
			code3 = element("code");
			t14 = text("height");
			t15 = text(" attributes for the SVG element to make it fit in the field. Also, the icon color can be adjusted by setting the ");
			code4 = element("code");
			t16 = text("stroke");
			t17 = text(" attribute:");
			t18 = space();
			samplecode1.$$.fragment.c();
			t19 = space();
			section1 = element("section");
			heading0.$$.fragment.c();
			t20 = space();
			p3 = element("p");
			t21 = text("The following example shows how to listen on this event and display SVG icons provided by ");
			a0 = element("a");
			t22 = text("FontAwesome");
			t23 = text(":");
			t24 = space();
			table0 = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t25 = text("FontAwesome Icon");
			t26 = space();
			th1 = element("th");
			t27 = text("SVG code");
			t28 = space();
			tr1 = element("tr");
			td0 = element("td");
			a1 = element("a");
			t29 = text("sync");
			t30 = space();
			td1 = element("td");
			samplecode2.$$.fragment.c();
			t31 = space();
			tr2 = element("tr");
			td2 = element("td");
			a2 = element("a");
			t32 = text("times");
			t33 = space();
			td3 = element("td");
			samplecode3.$$.fragment.c();
			t34 = space();
			tr3 = element("tr");
			td4 = element("td");
			a3 = element("a");
			t35 = text("check");
			t36 = space();
			td5 = element("td");
			samplecode4.$$.fragment.c();
			t37 = space();
			demo0.$$.fragment.c();
			t38 = space();
			section2 = element("section");
			heading1.$$.fragment.c();
			t39 = space();
			p4 = element("p");
			t40 = text("The following example shows how to use ");
			a4 = element("a");
			t41 = text("SVG icons");
			t42 = text(" provided by ");
			a5 = element("a");
			t43 = text("UIKit framework");
			t44 = text(":");
			t45 = space();
			table1 = element("table");
			tr4 = element("tr");
			th2 = element("th");
			t46 = text("UIKit Icon");
			t47 = space();
			th3 = element("th");
			t48 = text("SVG code");
			t49 = space();
			tr5 = element("tr");
			td6 = element("td");
			code5 = element("code");
			t50 = text("refresh");
			t51 = space();
			td7 = element("td");
			samplecode5.$$.fragment.c();
			t52 = space();
			tr6 = element("tr");
			td8 = element("td");
			code6 = element("code");
			t53 = text("close");
			t54 = space();
			td9 = element("td");
			samplecode6.$$.fragment.c();
			t55 = space();
			tr7 = element("tr");
			td10 = element("td");
			code7 = element("code");
			t56 = text("check");
			t57 = space();
			td11 = element("td");
			samplecode7.$$.fragment.c();
			t58 = space();
			demo1.$$.fragment.c();
			t59 = space();
			examples.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Using SVG icons");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    \n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "For more customization, you might want to use SVG icons in additonal to the CSS classes. Fortunately, the Icon plugin provides an event named ");

			code0 = claim_element(p0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t3 = claim_text(code0_nodes, "plugins.icon.set");
			code0_nodes.forEach(detach);
			t4 = claim_text(p0_nodes, " that you can hook on when the field is being validated, valid or invalid:");
			p0_nodes.forEach(detach);
			t5 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t6 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t7 = claim_text(p1_nodes, "We can use the SVG icon by setting ");

			code1 = claim_element(p1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t8 = claim_text(code1_nodes, "e.iconElement.innerHTML");
			code1_nodes.forEach(detach);
			t9 = claim_text(p1_nodes, ".");
			p1_nodes.forEach(detach);
			t10 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t11 = claim_text(p2_nodes, "You might need to set the ");

			code2 = claim_element(p2_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t12 = claim_text(code2_nodes, "width");
			code2_nodes.forEach(detach);
			t13 = claim_text(p2_nodes, ", ");

			code3 = claim_element(p2_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t14 = claim_text(code3_nodes, "height");
			code3_nodes.forEach(detach);
			t15 = claim_text(p2_nodes, " attributes for the SVG element to make it fit in the field. Also, the icon color can be adjusted by setting the ");

			code4 = claim_element(p2_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t16 = claim_text(code4_nodes, "stroke");
			code4_nodes.forEach(detach);
			t17 = claim_text(p2_nodes, " attribute:");
			p2_nodes.forEach(detach);
			t18 = claim_text(section0_nodes, "\n");
			samplecode1.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t19 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading0.$$.fragment.l(section1_nodes);
			t20 = claim_text(section1_nodes, "\n\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t21 = claim_text(p3_nodes, "The following example shows how to listen on this event and display SVG icons provided by ");

			a0 = claim_element(p3_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t22 = claim_text(a0_nodes, "FontAwesome");
			a0_nodes.forEach(detach);
			t23 = claim_text(p3_nodes, ":");
			p3_nodes.forEach(detach);
			t24 = claim_text(section1_nodes, "\n        ");

			table0 = claim_element(section1_nodes, "TABLE", { class: true }, false);
			var table0_nodes = children(table0);

			tr0 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t25 = claim_text(th0_nodes, "FontAwesome Icon");
			th0_nodes.forEach(detach);
			t26 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t27 = claim_text(th1_nodes, "SVG code");
			th1_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t28 = claim_text(table0_nodes, "\n            ");

			tr1 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			a1 = claim_element(td0_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t29 = claim_text(a1_nodes, "sync");
			a1_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t30 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			samplecode2.$$.fragment.l(td1_nodes);
			td1_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t31 = claim_text(table0_nodes, "\n            ");

			tr2 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td2 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			a2 = claim_element(td2_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t32 = claim_text(a2_nodes, "times");
			a2_nodes.forEach(detach);
			td2_nodes.forEach(detach);
			t33 = claim_text(tr2_nodes, "\n                ");

			td3 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			samplecode3.$$.fragment.l(td3_nodes);
			td3_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t34 = claim_text(table0_nodes, "\n            ");

			tr3 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td4 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			a3 = claim_element(td4_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t35 = claim_text(a3_nodes, "check");
			a3_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t36 = claim_text(tr3_nodes, "\n                ");

			td5 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			samplecode4.$$.fragment.l(td5_nodes);
			td5_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			table0_nodes.forEach(detach);
			t37 = claim_text(section1_nodes, "\n        ");
			demo0.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t38 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading1.$$.fragment.l(section2_nodes);
			t39 = claim_text(section2_nodes, "\n\n        ");

			p4 = claim_element(section2_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t40 = claim_text(p4_nodes, "The following example shows how to use ");

			a4 = claim_element(p4_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t41 = claim_text(a4_nodes, "SVG icons");
			a4_nodes.forEach(detach);
			t42 = claim_text(p4_nodes, " provided by ");

			a5 = claim_element(p4_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t43 = claim_text(a5_nodes, "UIKit framework");
			a5_nodes.forEach(detach);
			t44 = claim_text(p4_nodes, ":");
			p4_nodes.forEach(detach);
			t45 = claim_text(section2_nodes, "\n        ");

			table1 = claim_element(section2_nodes, "TABLE", { class: true }, false);
			var table1_nodes = children(table1);

			tr4 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			th2 = claim_element(tr4_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t46 = claim_text(th2_nodes, "UIKit Icon");
			th2_nodes.forEach(detach);
			t47 = claim_text(tr4_nodes, "\n                ");

			th3 = claim_element(tr4_nodes, "TH", { class: true }, false);
			var th3_nodes = children(th3);

			t48 = claim_text(th3_nodes, "SVG code");
			th3_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			t49 = claim_text(table1_nodes, "\n            ");

			tr5 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr5_nodes = children(tr5);

			td6 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			code5 = claim_element(td6_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t50 = claim_text(code5_nodes, "refresh");
			code5_nodes.forEach(detach);
			td6_nodes.forEach(detach);
			t51 = claim_text(tr5_nodes, "\n                ");

			td7 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			samplecode5.$$.fragment.l(td7_nodes);
			td7_nodes.forEach(detach);
			tr5_nodes.forEach(detach);
			t52 = claim_text(table1_nodes, "\n            ");

			tr6 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr6_nodes = children(tr6);

			td8 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			code6 = claim_element(td8_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t53 = claim_text(code6_nodes, "close");
			code6_nodes.forEach(detach);
			td8_nodes.forEach(detach);
			t54 = claim_text(tr6_nodes, "\n                ");

			td9 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			samplecode6.$$.fragment.l(td9_nodes);
			td9_nodes.forEach(detach);
			tr6_nodes.forEach(detach);
			t55 = claim_text(table1_nodes, "\n            ");

			tr7 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr7_nodes = children(tr7);

			td10 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td10_nodes = children(td10);

			code7 = claim_element(td10_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t56 = claim_text(code7_nodes, "check");
			code7_nodes.forEach(detach);
			td10_nodes.forEach(detach);
			t57 = claim_text(tr7_nodes, "\n                ");

			td11 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td11_nodes = children(td11);

			samplecode7.$$.fragment.l(td11_nodes);
			td11_nodes.forEach(detach);
			tr7_nodes.forEach(detach);
			table1_nodes.forEach(detach);
			t58 = claim_text(section2_nodes, "\n        ");
			demo1.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t59 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 97);
			add_location(code0, file, 8, 169, 341);
			p0.className = "lh-copy";
			add_location(p0, file, 8, 8, 180);
			add_location(code1, file, 48, 62, 1672);
			p1.className = "lh-copy";
			add_location(p1, file, 48, 8, 1618);
			add_location(code2, file, 49, 53, 1767);
			add_location(code3, file, 49, 73, 1787);
			add_location(code4, file, 49, 205, 1919);
			p2.className = "lh-copy";
			add_location(p2, file, 49, 8, 1722);
			section0.className = "mv5";
			add_location(section0, file, 7, 4, 150);
			a0.href = "https://fontawesome.com";
			a0.className = "blue dim link";
			add_location(a0, file, 60, 117, 2344);
			p3.className = "lh-copy";
			add_location(p3, file, 60, 8, 2235);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 63, 16, 2552);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 64, 16, 2624);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 62, 12, 2503);
			a1.href = "https://fontawesome.com/icons/sync?style=solid";
			a1.className = "blue dim link";
			add_location(a1, file, 67, 36, 2771);
			td0.className = "pv2 ph3";
			add_location(td0, file, 67, 16, 2751);
			td1.className = "pv2 ph3";
			add_location(td1, file, 68, 16, 2880);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 66, 12, 2702);
			a2.href = "https://fontawesome.com/icons/times?style=solid";
			a2.className = "blue dim link";
			add_location(a2, file, 97, 36, 4142);
			td2.className = "pv2 ph3";
			add_location(td2, file, 97, 16, 4122);
			td3.className = "pv2 ph3";
			add_location(td3, file, 98, 16, 4253);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 96, 12, 4073);
			a3.href = "https://fontawesome.com/icons/check?style=solid";
			a3.className = "blue dim link";
			add_location(a3, file, 117, 36, 5008);
			td4.className = "pv2 ph3";
			add_location(td4, file, 117, 16, 4988);
			td5.className = "pv2 ph3";
			add_location(td5, file, 118, 16, 5119);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 116, 12, 4939);
			table0.className = "collapse ba br2 b--black-10 pv2 ph3 w-100 mb4";
			add_location(table0, file, 61, 8, 2429);
			section1.className = "mv5";
			add_location(section1, file, 57, 4, 2144);
			a4.href = "https://getuikit.com/docs/icon";
			a4.className = "blue dim link";
			add_location(a4, file, 140, 66, 5916);
			a5.href = "https://getuikit.com";
			a5.className = "blue dim link";
			add_location(a5, file, 140, 155, 6005);
			p4.className = "lh-copy";
			add_location(p4, file, 140, 8, 5858);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 143, 16, 6214);
			th3.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th3, file, 144, 16, 6280);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 142, 12, 6165);
			add_location(code5, file, 147, 36, 6427);
			td6.className = "pv2 ph3";
			add_location(td6, file, 147, 16, 6407);
			td7.className = "pv2 ph3";
			add_location(td7, file, 148, 16, 6469);
			tr5.className = "striped--light-gray";
			add_location(tr5, file, 146, 12, 6358);
			add_location(code6, file, 165, 36, 7123);
			td8.className = "pv2 ph3";
			add_location(td8, file, 165, 16, 7103);
			td9.className = "pv2 ph3";
			add_location(td9, file, 166, 16, 7163);
			tr6.className = "striped--light-gray";
			add_location(tr6, file, 164, 12, 7054);
			add_location(code7, file, 177, 36, 7599);
			td10.className = "pv2 ph3";
			add_location(td10, file, 177, 16, 7579);
			td11.className = "pv2 ph3";
			add_location(td11, file, 178, 16, 7639);
			tr7.className = "striped--light-gray";
			add_location(tr7, file, 176, 12, 7530);
			table1.className = "collapse ba br2 b--black-10 pv2 ph3 w-100 mb4";
			add_location(table1, file, 141, 8, 6091);
			section2.className = "mv5";
			add_location(section2, file, 137, 4, 5773);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section0, anchor);
			append(section0, p0);
			append(p0, t2);
			append(p0, code0);
			append(code0, t3);
			append(p0, t4);
			append(section0, t5);
			mount_component(samplecode0, section0, null);
			append(section0, t6);
			append(section0, p1);
			append(p1, t7);
			append(p1, code1);
			append(code1, t8);
			append(p1, t9);
			append(section0, t10);
			append(section0, p2);
			append(p2, t11);
			append(p2, code2);
			append(code2, t12);
			append(p2, t13);
			append(p2, code3);
			append(code3, t14);
			append(p2, t15);
			append(p2, code4);
			append(code4, t16);
			append(p2, t17);
			append(section0, t18);
			mount_component(samplecode1, section0, null);
			insert(target, t19, anchor);
			insert(target, section1, anchor);
			mount_component(heading0, section1, null);
			append(section1, t20);
			append(section1, p3);
			append(p3, t21);
			append(p3, a0);
			append(a0, t22);
			append(p3, t23);
			append(section1, t24);
			append(section1, table0);
			append(table0, tr0);
			append(tr0, th0);
			append(th0, t25);
			append(tr0, t26);
			append(tr0, th1);
			append(th1, t27);
			append(table0, t28);
			append(table0, tr1);
			append(tr1, td0);
			append(td0, a1);
			append(a1, t29);
			append(tr1, t30);
			append(tr1, td1);
			mount_component(samplecode2, td1, null);
			append(table0, t31);
			append(table0, tr2);
			append(tr2, td2);
			append(td2, a2);
			append(a2, t32);
			append(tr2, t33);
			append(tr2, td3);
			mount_component(samplecode3, td3, null);
			append(table0, t34);
			append(table0, tr3);
			append(tr3, td4);
			append(td4, a3);
			append(a3, t35);
			append(tr3, t36);
			append(tr3, td5);
			mount_component(samplecode4, td5, null);
			append(section1, t37);
			mount_component(demo0, section1, null);
			insert(target, t38, anchor);
			insert(target, section2, anchor);
			mount_component(heading1, section2, null);
			append(section2, t39);
			append(section2, p4);
			append(p4, t40);
			append(p4, a4);
			append(a4, t41);
			append(p4, t42);
			append(p4, a5);
			append(a5, t43);
			append(p4, t44);
			append(section2, t45);
			append(section2, table1);
			append(table1, tr4);
			append(tr4, th2);
			append(th2, t46);
			append(tr4, t47);
			append(tr4, th3);
			append(th3, t48);
			append(table1, t49);
			append(table1, tr5);
			append(tr5, td6);
			append(td6, code5);
			append(code5, t50);
			append(tr5, t51);
			append(tr5, td7);
			mount_component(samplecode5, td7, null);
			append(table1, t52);
			append(table1, tr6);
			append(tr6, td8);
			append(td8, code6);
			append(code6, t53);
			append(tr6, t54);
			append(tr6, td9);
			mount_component(samplecode6, td9, null);
			append(table1, t55);
			append(table1, tr7);
			append(tr7, td10);
			append(td10, code7);
			append(code7, t56);
			append(tr7, t57);
			append(tr7, td11);
			mount_component(samplecode7, td11, null);
			append(section2, t58);
			mount_component(demo1, section2, null);
			insert(target, t59, anchor);
			mount_component(examples, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);
		},

		i: function intro(local) {
			if (current) return;
			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			heading0.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			samplecode3.$$.fragment.i(local);

			samplecode4.$$.fragment.i(local);

			demo0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode5.$$.fragment.i(local);

			samplecode6.$$.fragment.i(local);

			samplecode7.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			heading0.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			samplecode3.$$.fragment.o(local);
			samplecode4.$$.fragment.o(local);
			demo0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode5.$$.fragment.o(local);
			samplecode6.$$.fragment.o(local);
			samplecode7.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section0);
			}

			samplecode0.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t19);
				detach(section1);
			}

			heading0.$destroy();

			samplecode2.$destroy();

			samplecode3.$destroy();

			samplecode4.$destroy();

			demo0.$destroy();

			if (detaching) {
				detach(t38);
				detach(section2);
			}

			heading1.$destroy();

			samplecode5.$destroy();

			samplecode6.$destroy();

			samplecode7.$destroy();

			demo1.$destroy();

			if (detaching) {
				detach(t59);
			}

			examples.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Using SVG icons";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

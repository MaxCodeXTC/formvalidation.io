import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';

/* src/routes/guide/examples/terms-and-conditions-agreement-validation/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/terms-and-conditions-agreement-validation/index.svelte";

// (12:8) <Tip>
function create_default_slot_3(ctx) {
	var t0, a0, t1, t2, a1, t3, t4;

	return {
		c: function create() {
			t0 = text("It's recommended to use a ");
			a0 = element("a");
			t1 = text("basic math calculation");
			t2 = text(" captcha or ");
			a1 = element("a");
			t3 = text("Google reCaptcha");
			t4 = text(" in a registration form");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "It's recommended to use a ");

			a0 = claim_element(nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t1 = claim_text(a0_nodes, "basic math calculation");
			a0_nodes.forEach(detach);
			t2 = claim_text(nodes, " captcha or ");

			a1 = claim_element(nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t3 = claim_text(a1_nodes, "Google reCaptcha");
			a1_nodes.forEach(detach);
			t4 = claim_text(nodes, " in a registration form");
			this.h();
		},

		h: function hydrate() {
			a0.href = "/guide/validators/callback#basic-example";
			a0.className = "blue dim link";
			add_location(a0, file, 11, 39, 523);
			a1.href = "/guide/plugins/recaptcha";
			a1.className = "blue dim link";
			add_location(a1, file, 11, 150, 634);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a0, anchor);
			append(a0, t1);
			insert(target, t2, anchor);
			insert(target, a1, anchor);
			append(a1, t3);
			insert(target, t4, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(a0);
				detach(t2);
				detach(a1);
				detach(t4);
			}
		}
	};
}

// (16:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Showing terms and conditions in the same form");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Showing terms and conditions in the same form");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (40:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Showing terms and conditions in a modal");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Showing terms and conditions in a modal");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section0, p0, t2, t3, t4, section1, t5, p1, t6, a0, t7, t8, t9, div, t10, t11, section2, t12, p2, t13, t14, p3, t15, t16, p4, t17, t18, h30, t19, t20, p5, t21, code0, t22, t23, t24, t25, h31, t26, t27, p6, t28, a1, t29, t30, t31, t32, h32, t33, t34, p7, t35, strong0, t36, t37, strong1, t38, t39, code1, t40, t41, code2, t42, t43, t44, p8, t45, a2, t46, t47, t48, t49, p9, t50, a3, t51, t52, t53, t54, current;

	var tip = new Tip({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
FormValidation.formValidation(document.getElementById('registrationForm'), {
    fields: {
        ...
        agree: {
            validators: {
                notEmpty: {
                    message: 'You must agree with the terms and conditions'
                }
            }
        }
    }
});
` },
		$$inline: true
	});

	var demo0 = new Demo({
		props: {
		prefix: "/guide/examples/terms-and-conditions-agreement-validation/basic",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<input type="hidden" name="agree" value="no" />
` },
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "javascript", code: `
const fv = FormValidation.formValidation(document.getElementById('registrationForm'), {
    fields: {
        ...
        agree: {
            callback: {
                message: 'You must agree with the terms and conditions',
                callback: function(input) {
                    return input.value === 'yes';
                }
            }
        }
    }
});
` },
		$$inline: true
	});

	var samplecode3 = new SampleCode({
		props: { lang: "javascript", code: `
// Update the value of "agree" input when clicking the Agree/Disagree button
const agreeInput = demoForm.querySelector('[name="agree"]');
document.getElementById('agreeButton').addEventListener('click', function() {
    agreeInput.value = 'yes';
    fv.revalidateField('agree');
});

document.getElementById('disagreeButton').addEventListener('click', function() {
    agreeInput.value = 'no';
    fv.revalidateField('agree');
});
` },
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/examples/terms-and-conditions-agreement-validation/modal",
		frameworks: ['bootstrap']
	},
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['callback', 'notEmpty'] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Terms and conditions agreement validation");
			t1 = space();
			section0 = element("section");
			p0 = element("p");
			t2 = text("Showing and asking user to agree with terms and conditions is a common task, especially in registration forms.\n            This example collects two popular approaches and shows how to force visitors to agree with the terms of use.");
			t3 = space();
			tip.$$.fragment.c();
			t4 = space();
			section1 = element("section");
			heading0.$$.fragment.c();
			t5 = space();
			p1 = element("p");
			t6 = text("In the form below, the terms of use is shown in the same form. It's easy for you to use the ");
			a0 = element("a");
			t7 = text("notEmpty");
			t8 = text(" validator in this case:");
			t9 = space();
			div = element("div");
			samplecode0.$$.fragment.c();
			t10 = space();
			demo0.$$.fragment.c();
			t11 = space();
			section2 = element("section");
			heading1.$$.fragment.c();
			t12 = space();
			p2 = element("p");
			t13 = text("If the terms of use is too long and you want the user to pay more attention in reading it, it's great idea to place it in a modal.");
			t14 = space();
			p3 = element("p");
			t15 = text("The modal consists of two buttons, one to indicate the agreement and the other to indicate the disagreement.");
			t16 = space();
			p4 = element("p");
			t17 = text("The implementation can be described as following:");
			t18 = space();
			h30 = element("h3");
			t19 = text("Step 1: Create a hidden input to determine whether user agree with the terms or not");
			t20 = space();
			p5 = element("p");
			t21 = text("Initially, the field's value is set as ");
			code0 = element("code");
			t22 = text("no");
			t23 = text(":");
			t24 = space();
			samplecode1.$$.fragment.c();
			t25 = space();
			h31 = element("h3");
			t26 = text("Step 2: Define validation rules for the field");
			t27 = space();
			p6 = element("p");
			t28 = text("It's easy to check if user agree with the terms by checking the field value via the ");
			a1 = element("a");
			t29 = text("callback");
			t30 = text(" validator:");
			t31 = space();
			samplecode2.$$.fragment.c();
			t32 = space();
			h32 = element("h3");
			t33 = text("Step 3: Handle the Agree and Disagree click event");
			t34 = space();
			p7 = element("p");
			t35 = text("When user click the ");
			strong0 = element("strong");
			t36 = text("Agree");
			t37 = text(" or ");
			strong1 = element("strong");
			t38 = text("Disagree");
			t39 = text(" button placed inside the modal, we need to set the hidden field's value to ");
			code1 = element("code");
			t40 = text("yes");
			t41 = text(" or ");
			code2 = element("code");
			t42 = text("no");
			t43 = text(".");
			t44 = space();
			p8 = element("p");
			t45 = text("Also, revalidate the field by using the ");
			a2 = element("a");
			t46 = text("revalidateField()");
			t47 = text(" method:");
			t48 = space();
			samplecode3.$$.fragment.c();
			t49 = space();
			p9 = element("p");
			t50 = text("Below is the working example demonstrating all the implementation steps above. The terms are placed inside a ");
			a3 = element("a");
			t51 = text("Bootstrap modal");
			t52 = text(".");
			t53 = space();
			demo1.$$.fragment.c();
			t54 = space();
			relatedvalidators.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Terms and conditions agreement validation");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "Showing and asking user to agree with terms and conditions is a common task, especially in registration forms.\n            This example collects two popular approaches and shows how to force visitors to agree with the terms of use.");
			p0_nodes.forEach(detach);
			t3 = claim_text(section0_nodes, "\n\n        ");
			tip.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t4 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading0.$$.fragment.l(section1_nodes);
			t5 = claim_text(section1_nodes, "\n\n        ");

			p1 = claim_element(section1_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t6 = claim_text(p1_nodes, "In the form below, the terms of use is shown in the same form. It's easy for you to use the ");

			a0 = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t7 = claim_text(a0_nodes, "notEmpty");
			a0_nodes.forEach(detach);
			t8 = claim_text(p1_nodes, " validator in this case:");
			p1_nodes.forEach(detach);
			t9 = claim_text(section1_nodes, "\n\n        ");

			div = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			samplecode0.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			t10 = claim_text(section1_nodes, "\n        ");
			demo0.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t11 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading1.$$.fragment.l(section2_nodes);
			t12 = claim_text(section2_nodes, "\n\n        ");

			p2 = claim_element(section2_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t13 = claim_text(p2_nodes, "If the terms of use is too long and you want the user to pay more attention in reading it, it's great idea to place it in a modal.");
			p2_nodes.forEach(detach);
			t14 = claim_text(section2_nodes, "\n        ");

			p3 = claim_element(section2_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t15 = claim_text(p3_nodes, "The modal consists of two buttons, one to indicate the agreement and the other to indicate the disagreement.");
			p3_nodes.forEach(detach);
			t16 = claim_text(section2_nodes, "\n        ");

			p4 = claim_element(section2_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t17 = claim_text(p4_nodes, "The implementation can be described as following:");
			p4_nodes.forEach(detach);
			t18 = claim_text(section2_nodes, "\n\n        ");

			h30 = claim_element(section2_nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t19 = claim_text(h30_nodes, "Step 1: Create a hidden input to determine whether user agree with the terms or not");
			h30_nodes.forEach(detach);
			t20 = claim_text(section2_nodes, "\n        ");

			p5 = claim_element(section2_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t21 = claim_text(p5_nodes, "Initially, the field's value is set as ");

			code0 = claim_element(p5_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t22 = claim_text(code0_nodes, "no");
			code0_nodes.forEach(detach);
			t23 = claim_text(p5_nodes, ":");
			p5_nodes.forEach(detach);
			t24 = claim_text(section2_nodes, "\n\n");
			samplecode1.$$.fragment.l(section2_nodes);
			t25 = claim_text(section2_nodes, "\n\n        ");

			h31 = claim_element(section2_nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t26 = claim_text(h31_nodes, "Step 2: Define validation rules for the field");
			h31_nodes.forEach(detach);
			t27 = claim_text(section2_nodes, "\n\n        ");

			p6 = claim_element(section2_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t28 = claim_text(p6_nodes, "It's easy to check if user agree with the terms by checking the field value via the ");

			a1 = claim_element(p6_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t29 = claim_text(a1_nodes, "callback");
			a1_nodes.forEach(detach);
			t30 = claim_text(p6_nodes, " validator:");
			p6_nodes.forEach(detach);
			t31 = claim_text(section2_nodes, "\n\n");
			samplecode2.$$.fragment.l(section2_nodes);
			t32 = claim_text(section2_nodes, "\n\n        ");

			h32 = claim_element(section2_nodes, "H3", {}, false);
			var h32_nodes = children(h32);

			t33 = claim_text(h32_nodes, "Step 3: Handle the Agree and Disagree click event");
			h32_nodes.forEach(detach);
			t34 = claim_text(section2_nodes, "\n        ");

			p7 = claim_element(section2_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t35 = claim_text(p7_nodes, "When user click the ");

			strong0 = claim_element(p7_nodes, "STRONG", {}, false);
			var strong0_nodes = children(strong0);

			t36 = claim_text(strong0_nodes, "Agree");
			strong0_nodes.forEach(detach);
			t37 = claim_text(p7_nodes, " or ");

			strong1 = claim_element(p7_nodes, "STRONG", {}, false);
			var strong1_nodes = children(strong1);

			t38 = claim_text(strong1_nodes, "Disagree");
			strong1_nodes.forEach(detach);
			t39 = claim_text(p7_nodes, " button placed inside the modal, we need to set the hidden field's value to ");

			code1 = claim_element(p7_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t40 = claim_text(code1_nodes, "yes");
			code1_nodes.forEach(detach);
			t41 = claim_text(p7_nodes, " or ");

			code2 = claim_element(p7_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t42 = claim_text(code2_nodes, "no");
			code2_nodes.forEach(detach);
			t43 = claim_text(p7_nodes, ".");
			p7_nodes.forEach(detach);
			t44 = claim_text(section2_nodes, "\n        ");

			p8 = claim_element(section2_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t45 = claim_text(p8_nodes, "Also, revalidate the field by using the ");

			a2 = claim_element(p8_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t46 = claim_text(a2_nodes, "revalidateField()");
			a2_nodes.forEach(detach);
			t47 = claim_text(p8_nodes, " method:");
			p8_nodes.forEach(detach);
			t48 = claim_text(section2_nodes, "\n\n");
			samplecode3.$$.fragment.l(section2_nodes);
			t49 = claim_text(section2_nodes, "\n\n        ");

			p9 = claim_element(section2_nodes, "P", { class: true }, false);
			var p9_nodes = children(p9);

			t50 = claim_text(p9_nodes, "Below is the working example demonstrating all the implementation steps above. The terms are placed inside a ");

			a3 = claim_element(p9_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t51 = claim_text(a3_nodes, "Bootstrap modal");
			a3_nodes.forEach(detach);
			t52 = claim_text(p9_nodes, ".");
			p9_nodes.forEach(detach);
			t53 = claim_text(section2_nodes, "\n\n        ");
			demo1.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t54 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 123);
			p0.className = "lh-copy";
			add_location(p0, file, 8, 8, 228);
			section0.className = "mv5";
			add_location(section0, file, 7, 4, 198);
			a0.href = "/guide/validators/not-empty";
			a0.className = "blue dim link";
			add_location(a0, file, 17, 119, 976);
			p1.className = "lh-copy";
			add_location(p1, file, 17, 8, 865);
			div.className = "mb4";
			add_location(div, file, 19, 8, 1086);
			section1.className = "mv5";
			add_location(section1, file, 14, 4, 761);
			p2.className = "lh-copy";
			add_location(p2, file, 41, 8, 1699);
			p3.className = "lh-copy";
			add_location(p3, file, 42, 8, 1861);
			p4.className = "lh-copy";
			add_location(p4, file, 43, 8, 2001);
			add_location(h30, file, 45, 8, 2083);
			add_location(code0, file, 46, 66, 2242);
			p5.className = "lh-copy";
			add_location(p5, file, 46, 8, 2184);
			add_location(h31, file, 52, 8, 2359);
			a1.href = "/guide/validators/callback";
			a1.className = "blue dim link";
			add_location(a1, file, 54, 111, 2526);
			p6.className = "lh-copy";
			add_location(p6, file, 54, 8, 2423);
			add_location(h32, file, 72, 8, 3041);
			add_location(strong0, file, 73, 47, 3147);
			add_location(strong1, file, 73, 73, 3173);
			add_location(code1, file, 73, 174, 3274);
			add_location(code2, file, 73, 194, 3294);
			p7.className = "lh-copy";
			add_location(p7, file, 73, 8, 3108);
			a2.href = "/guide/api/revalidate-field";
			a2.className = "blue dim link";
			add_location(a2, file, 74, 67, 3382);
			p8.className = "lh-copy";
			add_location(p8, file, 74, 8, 3323);
			a3.href = "http://getbootstrap.com/javascript/#modals";
			a3.className = "blue dim link";
			add_location(a3, file, 90, 136, 4089);
			p9.className = "lh-copy";
			add_location(p9, file, 90, 8, 3961);
			section2.className = "mv5";
			add_location(section2, file, 38, 4, 1601);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section0, anchor);
			append(section0, p0);
			append(p0, t2);
			append(section0, t3);
			mount_component(tip, section0, null);
			insert(target, t4, anchor);
			insert(target, section1, anchor);
			mount_component(heading0, section1, null);
			append(section1, t5);
			append(section1, p1);
			append(p1, t6);
			append(p1, a0);
			append(a0, t7);
			append(p1, t8);
			append(section1, t9);
			append(section1, div);
			mount_component(samplecode0, div, null);
			append(section1, t10);
			mount_component(demo0, section1, null);
			insert(target, t11, anchor);
			insert(target, section2, anchor);
			mount_component(heading1, section2, null);
			append(section2, t12);
			append(section2, p2);
			append(p2, t13);
			append(section2, t14);
			append(section2, p3);
			append(p3, t15);
			append(section2, t16);
			append(section2, p4);
			append(p4, t17);
			append(section2, t18);
			append(section2, h30);
			append(h30, t19);
			append(section2, t20);
			append(section2, p5);
			append(p5, t21);
			append(p5, code0);
			append(code0, t22);
			append(p5, t23);
			append(section2, t24);
			mount_component(samplecode1, section2, null);
			append(section2, t25);
			append(section2, h31);
			append(h31, t26);
			append(section2, t27);
			append(section2, p6);
			append(p6, t28);
			append(p6, a1);
			append(a1, t29);
			append(p6, t30);
			append(section2, t31);
			mount_component(samplecode2, section2, null);
			append(section2, t32);
			append(section2, h32);
			append(h32, t33);
			append(section2, t34);
			append(section2, p7);
			append(p7, t35);
			append(p7, strong0);
			append(strong0, t36);
			append(p7, t37);
			append(p7, strong1);
			append(strong1, t38);
			append(p7, t39);
			append(p7, code1);
			append(code1, t40);
			append(p7, t41);
			append(p7, code2);
			append(code2, t42);
			append(p7, t43);
			append(section2, t44);
			append(section2, p8);
			append(p8, t45);
			append(p8, a2);
			append(a2, t46);
			append(p8, t47);
			append(section2, t48);
			mount_component(samplecode3, section2, null);
			append(section2, t49);
			append(section2, p9);
			append(p9, t50);
			append(p9, a3);
			append(a3, t51);
			append(p9, t52);
			append(section2, t53);
			mount_component(demo1, section2, null);
			insert(target, t54, anchor);
			mount_component(relatedvalidators, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var tip_changes = {};
			if (changed.$$scope) tip_changes.$$scope = { changed, ctx };
			tip.$set(tip_changes);

			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);
		},

		i: function intro(local) {
			if (current) return;
			tip.$$.fragment.i(local);

			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			demo0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			samplecode3.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			tip.$$.fragment.o(local);
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			demo0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			samplecode3.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section0);
			}

			tip.$destroy();

			if (detaching) {
				detach(t4);
				detach(section1);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			demo0.$destroy();

			if (detaching) {
				detach(t11);
				detach(section2);
			}

			heading1.$destroy();

			samplecode1.$destroy();

			samplecode2.$destroy();

			samplecode3.$destroy();

			demo1.$destroy();

			if (detaching) {
				detach(t54);
			}

			relatedvalidators.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Terms and conditions agreement validation";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

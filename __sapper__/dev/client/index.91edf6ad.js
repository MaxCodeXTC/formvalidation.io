import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';

/* src/routes/guide/examples/can-not-submit-form-after-validation/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/can-not-submit-form-after-validation/index.svelte";

// (12:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Enabling the DefaultSubmit plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Enabling the DefaultSubmit plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (42:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("The target is not a form");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "The target is not a form");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (70:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("The target's ID is duplicated");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "The target's ID is duplicated");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (96:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("The submit button's name is not valid");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "The submit button's name is not valid");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, p0, t2, t3, p1, t4, t5, section0, t6, p2, t7, t8, ul, li0, t9, a0, t10, t11, li1, t12, a1, t13, t14, p3, t15, a2, t16, t17, t18, t19, section1, t20, p4, t21, t22, t23, section2, t24, p5, t25, t26, t27, section3, t28, p6, t29, code0, t30, t31, code1, t32, t33, t34, p7, t35, a3, t36, t37, code2, t38, t39, code3, t40, t41, code4, t42, t43, t44, p8, t45, code5, t46, t47, code6, t48, t49, code7, t50, t51, t52, t53, p9, a4, t54, t55, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
FormValidation.formValidation(
    document.getElementById('demoForm'),
    {
        fields: {
            ...
        },
        plugins: {
            // Validate fields when clicking the Submit button
            submitButton: new FormValidation.plugins.SubmitButton(),

            // Submit the form when all fields are valid
            defaultSubmit: new FormValidation.plugins.DefaultSubmit(),
            ...
        },
    }
);
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<!-- It will be submitted because it is NOT a form tag -->
<div id="container" method="POST">
    ...
</div>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('container'),
        {
            fields: {
                ...
            },
            plugins: {
                defaultSubmit: new FormValidation.plugins.DefaultSubmit(),
                ...
            },
        }
    );
});
</script-tag>
` },
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "html", code: `
<div id="payment"></div>

<form id="payment"></form>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('payment'),
        {
            fields: {
                ...
            },
            plugins: {
                ...
            },
        }
    );
});
</script-tag>
` },
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode3 = new SampleCode({
		props: { lang: "html", code: `
<!-- Do NOT -->
<button type="submit" name="submit">Submit</button>
<button type="submit" id="submit">Submit</button>

<!-- Do -->
<button type="submit" name="submitButton">Submit</button>
` },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Can not submit form after validation");
			t1 = space();
			p0 = element("p");
			t2 = text("There are some mistakes causing the issue that the form can't be submitted although the validation is working fine.");
			t3 = space();
			p1 = element("p");
			t4 = text("This page collects some popular check list to avoid this problem.");
			t5 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t6 = space();
			p2 = element("p");
			t7 = text("Before v1.0.0, the form will be submitted automatically if all fields are valid. There are some cases user wants to do something else such as");
			t8 = space();
			ul = element("ul");
			li0 = element("li");
			t9 = text("sending form to back-end via an ");
			a0 = element("a");
			t10 = text("Ajax request");
			t11 = space();
			li1 = element("li");
			t12 = text("jumping to the next step in a ");
			a1 = element("a");
			t13 = text("wizard");
			t14 = space();
			p3 = element("p");
			t15 = text("So, the default behaviour is removed from v1.0.0. It's up to users to decide what they want to do. If you want to submit the form when all fields are valid, then enable the \n            ");
			a2 = element("a");
			t16 = text("DefaultSubmit");
			t17 = text(" plugin:");
			t18 = space();
			samplecode0.$$.fragment.c();
			t19 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t20 = space();
			p4 = element("p");
			t21 = text("Please ensure that the target is a HTML form element:");
			t22 = space();
			samplecode1.$$.fragment.c();
			t23 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t24 = space();
			p5 = element("p");
			t25 = text("In the case you are using an ID selector, ensure that there is only one element on page having that ID:");
			t26 = space();
			samplecode2.$$.fragment.c();
			t27 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t28 = space();
			p6 = element("p");
			t29 = text("If the form can't be submitted, the reason might be caused by using ");
			code0 = element("code");
			t30 = text("name=\"submit\"");
			t31 = text(" or ");
			code1 = element("code");
			t32 = text("id=\"submit\"");
			t33 = text(" attribute for the submit button.");
			t34 = space();
			p7 = element("p");
			t35 = text("Behind the scene, FormValidation uses the ");
			a3 = element("a");
			t36 = text("submit()");
			t37 = text(" method to submit the form.\n            If the submit button has either ");
			code2 = element("code");
			t38 = text("name=\"submit\"");
			t39 = text(" or ");
			code3 = element("code");
			t40 = text("id=\"submit\"");
			t41 = text(" attribute, then ");
			code4 = element("code");
			t42 = text("form.submit");
			t43 = text(" will\n            return the submit button instance instead of submitting the form.");
			t44 = space();
			p8 = element("p");
			t45 = text("That's why we can't submit the form. The similar issue occurs when using special properties of form such as ");
			code5 = element("code");
			t46 = text("reset");
			t47 = text(", ");
			code6 = element("code");
			t48 = text("length");
			t49 = text(", ");
			code7 = element("code");
			t50 = text("method");
			t51 = text(".");
			t52 = space();
			samplecode3.$$.fragment.c();
			t53 = space();
			p9 = element("p");
			a4 = element("a");
			t54 = text("DOMLint");
			t55 = text(" has a complete list of rules to check the markup for these kind of problems.");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Can not submit form after validation");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n\n    ");

			p0 = claim_element(nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "There are some mistakes causing the issue that the form can't be submitted although the validation is working fine.");
			p0_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n    ");

			p1 = claim_element(nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t4 = claim_text(p1_nodes, "This page collects some popular check list to avoid this problem.");
			p1_nodes.forEach(detach);
			t5 = claim_text(nodes, "\n    \n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t6 = claim_text(section0_nodes, "\n\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t7 = claim_text(p2_nodes, "Before v1.0.0, the form will be submitted automatically if all fields are valid. There are some cases user wants to do something else such as");
			p2_nodes.forEach(detach);
			t8 = claim_text(section0_nodes, "\n        ");

			ul = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t9 = claim_text(li0_nodes, "sending form to back-end via an ");

			a0 = claim_element(li0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t10 = claim_text(a0_nodes, "Ajax request");
			a0_nodes.forEach(detach);
			li0_nodes.forEach(detach);
			t11 = claim_text(ul_nodes, "\n            ");

			li1 = claim_element(ul_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t12 = claim_text(li1_nodes, "jumping to the next step in a ");

			a1 = claim_element(li1_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t13 = claim_text(a1_nodes, "wizard");
			a1_nodes.forEach(detach);
			li1_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			t14 = claim_text(section0_nodes, "\n        ");

			p3 = claim_element(section0_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t15 = claim_text(p3_nodes, "So, the default behaviour is removed from v1.0.0. It's up to users to decide what they want to do. If you want to submit the form when all fields are valid, then enable the \n            ");

			a2 = claim_element(p3_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t16 = claim_text(a2_nodes, "DefaultSubmit");
			a2_nodes.forEach(detach);
			t17 = claim_text(p3_nodes, " plugin:");
			p3_nodes.forEach(detach);
			t18 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t19 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t20 = claim_text(section1_nodes, "\n        ");

			p4 = claim_element(section1_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t21 = claim_text(p4_nodes, "Please ensure that the target is a HTML form element:");
			p4_nodes.forEach(detach);
			t22 = claim_text(section1_nodes, "\n");
			samplecode1.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t23 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t24 = claim_text(section2_nodes, "\n        ");

			p5 = claim_element(section2_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t25 = claim_text(p5_nodes, "In the case you are using an ID selector, ensure that there is only one element on page having that ID:");
			p5_nodes.forEach(detach);
			t26 = claim_text(section2_nodes, "\n");
			samplecode2.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t27 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t28 = claim_text(section3_nodes, "\n        ");

			p6 = claim_element(section3_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t29 = claim_text(p6_nodes, "If the form can't be submitted, the reason might be caused by using ");

			code0 = claim_element(p6_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t30 = claim_text(code0_nodes, "name=\"submit\"");
			code0_nodes.forEach(detach);
			t31 = claim_text(p6_nodes, " or ");

			code1 = claim_element(p6_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t32 = claim_text(code1_nodes, "id=\"submit\"");
			code1_nodes.forEach(detach);
			t33 = claim_text(p6_nodes, " attribute for the submit button.");
			p6_nodes.forEach(detach);
			t34 = claim_text(section3_nodes, "\n        ");

			p7 = claim_element(section3_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t35 = claim_text(p7_nodes, "Behind the scene, FormValidation uses the ");

			a3 = claim_element(p7_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t36 = claim_text(a3_nodes, "submit()");
			a3_nodes.forEach(detach);
			t37 = claim_text(p7_nodes, " method to submit the form.\n            If the submit button has either ");

			code2 = claim_element(p7_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t38 = claim_text(code2_nodes, "name=\"submit\"");
			code2_nodes.forEach(detach);
			t39 = claim_text(p7_nodes, " or ");

			code3 = claim_element(p7_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t40 = claim_text(code3_nodes, "id=\"submit\"");
			code3_nodes.forEach(detach);
			t41 = claim_text(p7_nodes, " attribute, then ");

			code4 = claim_element(p7_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t42 = claim_text(code4_nodes, "form.submit");
			code4_nodes.forEach(detach);
			t43 = claim_text(p7_nodes, " will\n            return the submit button instance instead of submitting the form.");
			p7_nodes.forEach(detach);
			t44 = claim_text(section3_nodes, "\n        ");

			p8 = claim_element(section3_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t45 = claim_text(p8_nodes, "That's why we can't submit the form. The similar issue occurs when using special properties of form such as ");

			code5 = claim_element(p8_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t46 = claim_text(code5_nodes, "reset");
			code5_nodes.forEach(detach);
			t47 = claim_text(p8_nodes, ", ");

			code6 = claim_element(p8_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t48 = claim_text(code6_nodes, "length");
			code6_nodes.forEach(detach);
			t49 = claim_text(p8_nodes, ", ");

			code7 = claim_element(p8_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t50 = claim_text(code7_nodes, "method");
			code7_nodes.forEach(detach);
			t51 = claim_text(p8_nodes, ".");
			p8_nodes.forEach(detach);
			t52 = claim_text(section3_nodes, "\n");
			samplecode3.$$.fragment.l(section3_nodes);
			t53 = claim_text(section3_nodes, "\n        ");

			p9 = claim_element(section3_nodes, "P", { class: true }, false);
			var p9_nodes = children(p9);

			a4 = claim_element(p9_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t54 = claim_text(a4_nodes, "DOMLint");
			a4_nodes.forEach(detach);
			t55 = claim_text(p9_nodes, " has a complete list of rules to check the markup for these kind of problems.");
			p9_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 118);
			p0.className = "lh-copy";
			add_location(p0, file, 7, 4, 188);
			p1.className = "lh-copy";
			add_location(p1, file, 8, 4, 331);
			p2.className = "lh-copy";
			add_location(p2, file, 13, 8, 521);
			a0.href = "/guide/examples/using-ajax-to-submit-the-form";
			a0.className = "blue dim link";
			add_location(a0, file, 15, 48, 771);
			add_location(li0, file, 15, 12, 735);
			a1.href = "/guide/examples/multiple-steps-wizard";
			a1.className = "blue dim link";
			add_location(a1, file, 16, 46, 917);
			add_location(li1, file, 16, 12, 883);
			ul.className = "ma0 pl3 lh-copy";
			add_location(ul, file, 14, 8, 694);
			a2.href = "/guide/plugins/default-submit";
			a2.className = "blue dim link";
			add_location(a2, file, 19, 12, 1230);
			p3.className = "lh-copy";
			add_location(p3, file, 18, 8, 1025);
			section0.className = "mv5";
			add_location(section0, file, 10, 4, 429);
			p4.className = "lh-copy";
			add_location(p4, file, 42, 8, 1907);
			section1.className = "mv5";
			add_location(section1, file, 40, 4, 1825);
			p5.className = "lh-copy";
			add_location(p5, file, 70, 8, 2628);
			section2.className = "mv5";
			add_location(section2, file, 68, 4, 2541);
			add_location(code0, file, 96, 95, 3368);
			add_location(code1, file, 96, 125, 3398);
			p6.className = "lh-copy";
			add_location(p6, file, 96, 8, 3281);
			a3.href = "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit";
			a3.className = "blue dim link";
			add_location(a3, file, 97, 69, 3529);
			add_location(code2, file, 98, 44, 3717);
			add_location(code3, file, 98, 74, 3747);
			add_location(code4, file, 98, 115, 3788);
			p7.className = "lh-copy";
			add_location(p7, file, 97, 8, 3468);
			add_location(code5, file, 100, 135, 4035);
			add_location(code6, file, 100, 155, 4055);
			add_location(code7, file, 100, 176, 4076);
			p8.className = "lh-copy";
			add_location(p8, file, 100, 8, 3908);
			a4.href = "http://kangax.github.com/domlint";
			a4.className = "blue dim link";
			add_location(a4, file, 109, 27, 4355);
			p9.className = "lh-copy";
			add_location(p9, file, 109, 8, 4336);
			section3.className = "mv5";
			add_location(section3, file, 94, 4, 3186);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, p0, anchor);
			append(p0, t2);
			insert(target, t3, anchor);
			insert(target, p1, anchor);
			append(p1, t4);
			insert(target, t5, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t6);
			append(section0, p2);
			append(p2, t7);
			append(section0, t8);
			append(section0, ul);
			append(ul, li0);
			append(li0, t9);
			append(li0, a0);
			append(a0, t10);
			append(ul, t11);
			append(ul, li1);
			append(li1, t12);
			append(li1, a1);
			append(a1, t13);
			append(section0, t14);
			append(section0, p3);
			append(p3, t15);
			append(p3, a2);
			append(a2, t16);
			append(p3, t17);
			append(section0, t18);
			mount_component(samplecode0, section0, null);
			insert(target, t19, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t20);
			append(section1, p4);
			append(p4, t21);
			append(section1, t22);
			mount_component(samplecode1, section1, null);
			insert(target, t23, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t24);
			append(section2, p5);
			append(p5, t25);
			append(section2, t26);
			mount_component(samplecode2, section2, null);
			insert(target, t27, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t28);
			append(section3, p6);
			append(p6, t29);
			append(p6, code0);
			append(code0, t30);
			append(p6, t31);
			append(p6, code1);
			append(code1, t32);
			append(p6, t33);
			append(section3, t34);
			append(section3, p7);
			append(p7, t35);
			append(p7, a3);
			append(a3, t36);
			append(p7, t37);
			append(p7, code2);
			append(code2, t38);
			append(p7, t39);
			append(p7, code3);
			append(code3, t40);
			append(p7, t41);
			append(p7, code4);
			append(code4, t42);
			append(p7, t43);
			append(section3, t44);
			append(section3, p8);
			append(p8, t45);
			append(p8, code5);
			append(code5, t46);
			append(p8, t47);
			append(p8, code6);
			append(code6, t48);
			append(p8, t49);
			append(p8, code7);
			append(code7, t50);
			append(p8, t51);
			append(section3, t52);
			mount_component(samplecode3, section3, null);
			append(section3, t53);
			append(section3, p9);
			append(p9, a4);
			append(a4, t54);
			append(p9, t55);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			samplecode3.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			samplecode3.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(p0);
				detach(t3);
				detach(p1);
				detach(t5);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			if (detaching) {
				detach(t19);
				detach(section1);
			}

			heading1.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t23);
				detach(section2);
			}

			heading2.$destroy();

			samplecode2.$destroy();

			if (detaching) {
				detach(t27);
				detach(section3);
			}

			heading3.$destroy();

			samplecode3.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Can not submit form after validation";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

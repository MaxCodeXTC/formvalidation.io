import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';

/* src/routes/guide/examples/adding-dynamic-field/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/adding-dynamic-field/index.svelte";

// (38:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Adding fields with different names");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Adding fields with different names");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (49:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Using other library for added fields");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Using other library for added fields");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (93:8) <Tip>
function create_default_slot_1(ctx) {
	var t0, a, t1, t2;

	return {
		c: function create() {
			t0 = text("You should look at the ");
			a = element("a");
			t1 = text("principles");
			t2 = text(" when integrating FormValidation with other plugins");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "You should look at the ");

			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t1 = claim_text(a_nodes, "principles");
			a_nodes.forEach(detach);
			t2 = claim_text(nodes, " when integrating FormValidation with other plugins");
			this.h();
		},

		h: function hydrate() {
			a.href = "/guide/examples/integrating-with-3rd-party-libraries";
			a.className = "blue dim link";
			add_location(a, file, 92, 36, 4341);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a, anchor);
			append(a, t1);
			insert(target, t2, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(a);
				detach(t2);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section0, p0, t2, t3, p1, t4, t5, p2, t6, t7, table, tr0, th0, t8, t9, th1, t10, t11, tr1, td0, a0, t12, t13, td1, t14, t15, tr2, td2, a1, t16, t17, td3, t18, t19, tr3, td4, a2, t20, t21, td5, t22, t23, tr4, td6, a3, t24, t25, td7, t26, t27, section1, t28, p3, t29, t30, p4, t31, code0, t32, t33, code1, t34, t35, code2, t36, t37, code3, t38, t39, t40, t41, section2, t42, p5, t43, t44, p6, t45, t46, p7, t47, a4, t48, t49, t50, div, t51, t52, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo0 = new Demo({
		props: {
		prefix: "/guide/examples/adding-dynamic-field/different-name",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode = new SampleCode({
		props: { lang: "javascript", code: `
// The index of row
let rowIndex = 0;

const demoForm = document.getElementById('demoForm');

const fv = FormValidation.formValidation(demoForm, {
    fields: {
        'task[0].title': titleValidators,
        'task[0].dueDate': dueDateValidators,
    },
    plugins: {
        ...
    },
}).on('core.field.added', function(e) {
    if (e.field === 'task[' + rowIndex + '].dueDate') {
        // The added field is due date
        attachPickAdayPicker(e.field);
    }
});

const attachPickAdayPicker = function(fieldName) {
    new Pikaday({
        field: demoForm.querySelector('[name="' + fieldName + '"]'),
        onSelect: function() {
            // Revalidate the date field
            if (fv) {
                fv.revalidateField(fieldName);
            }
        }
    });
};

// Attach pickaday to the first existing due date
attachPickAdayPicker('task[0].dueDate');
` },
		$$inline: true
	});

	var tip = new Tip({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/examples/adding-dynamic-field/using-other-library",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Adding dynamic field");
			t1 = space();
			section0 = element("section");
			p0 = element("p");
			t2 = text("When working with complex form, the fields might be added to (or remove from) the form dynamically. The newly added fields also need to be validated.");
			t3 = space();
			p1 = element("p");
			t4 = text("This example demonstrates a sample scenario where you have to solve validating dynamic fields problem.");
			t5 = space();
			p2 = element("p");
			t6 = text("Before going to the details, there are some methods and events you need to know:");
			t7 = space();
			table = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t8 = text("Method/Event");
			t9 = space();
			th1 = element("th");
			t10 = text("Description");
			t11 = space();
			tr1 = element("tr");
			td0 = element("td");
			a0 = element("a");
			t12 = text("addField() method");
			t13 = space();
			td1 = element("td");
			t14 = text("Adding new field");
			t15 = space();
			tr2 = element("tr");
			td2 = element("td");
			a1 = element("a");
			t16 = text("removeField() method");
			t17 = space();
			td3 = element("td");
			t18 = text("Removing new field");
			t19 = space();
			tr3 = element("tr");
			td4 = element("td");
			a2 = element("a");
			t20 = text("core.field.added event");
			t21 = space();
			td5 = element("td");
			t22 = text("Called after adding new field");
			t23 = space();
			tr4 = element("tr");
			td6 = element("td");
			a3 = element("a");
			t24 = text("core.field.removed event");
			t25 = space();
			td7 = element("td");
			t26 = text("Called after removing given field");
			t27 = space();
			section1 = element("section");
			heading0.$$.fragment.c();
			t28 = space();
			p3 = element("p");
			t29 = text("The following form manages the wish list of books you would love to buy. Each book must have three properties which are title, ISBN number and price (in dollar).");
			t30 = space();
			p4 = element("p");
			t31 = text("Assume that, due to the required naming convention from server, the fields for these properties\n            are named as ");
			code0 = element("code");
			t32 = text("book[i].title");
			t33 = text(", ");
			code1 = element("code");
			t34 = text("book[i].isbn");
			t35 = text(" and ");
			code2 = element("code");
			t36 = text("book[i].price");
			t37 = text(",\n            where ");
			code3 = element("code");
			t38 = text("i");
			t39 = text(" is the index number of book which can be 0, 1, 2, and so forth.");
			t40 = space();
			demo0.$$.fragment.c();
			t41 = space();
			section2 = element("section");
			heading1.$$.fragment.c();
			t42 = space();
			p5 = element("p");
			t43 = text("Sometime, the added fields aren't just simply a normal input such as text box, text area. They can be used with other plugins such as a date picker, an auto-completed control, etc.");
			t44 = space();
			p6 = element("p");
			t45 = text("In this case, the field should be initially as a normal text input, and then integrated with other plugin after being added.");
			t46 = space();
			p7 = element("p");
			t47 = text("The following sample code attaches a date picker to newly added input by triggering the ");
			a4 = element("a");
			t48 = text("core.field.added event");
			t49 = text(":");
			t50 = space();
			div = element("div");
			samplecode.$$.fragment.c();
			t51 = space();
			tip.$$.fragment.c();
			t52 = space();
			demo1.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Adding dynamic field");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    \n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "When working with complex form, the fields might be added to (or remove from) the form dynamically. The newly added fields also need to be validated.");
			p0_nodes.forEach(detach);
			t3 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t4 = claim_text(p1_nodes, "This example demonstrates a sample scenario where you have to solve validating dynamic fields problem.");
			p1_nodes.forEach(detach);
			t5 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t6 = claim_text(p2_nodes, "Before going to the details, there are some methods and events you need to know:");
			p2_nodes.forEach(detach);
			t7 = claim_text(section0_nodes, "\n\n        ");

			table = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table_nodes = children(table);

			tr0 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t8 = claim_text(th0_nodes, "Method/Event");
			th0_nodes.forEach(detach);
			t9 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t10 = claim_text(th1_nodes, "Description");
			th1_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t11 = claim_text(table_nodes, "\n            ");

			tr1 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			a0 = claim_element(td0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t12 = claim_text(a0_nodes, "addField() method");
			a0_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t13 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			t14 = claim_text(td1_nodes, "Adding new field");
			td1_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t15 = claim_text(table_nodes, "\n            ");

			tr2 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td2 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			a1 = claim_element(td2_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t16 = claim_text(a1_nodes, "removeField() method");
			a1_nodes.forEach(detach);
			td2_nodes.forEach(detach);
			t17 = claim_text(tr2_nodes, "\n                ");

			td3 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			t18 = claim_text(td3_nodes, "Removing new field");
			td3_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t19 = claim_text(table_nodes, "\n            ");

			tr3 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td4 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			a2 = claim_element(td4_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t20 = claim_text(a2_nodes, "core.field.added event");
			a2_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t21 = claim_text(tr3_nodes, "\n                ");

			td5 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			t22 = claim_text(td5_nodes, "Called after adding new field");
			td5_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			t23 = claim_text(table_nodes, "\n            ");

			tr4 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			td6 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			a3 = claim_element(td6_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t24 = claim_text(a3_nodes, "core.field.removed event");
			a3_nodes.forEach(detach);
			td6_nodes.forEach(detach);
			t25 = claim_text(tr4_nodes, "\n                ");

			td7 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			t26 = claim_text(td7_nodes, "Called after removing given field");
			td7_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			table_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t27 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading0.$$.fragment.l(section1_nodes);
			t28 = claim_text(section1_nodes, "\n\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t29 = claim_text(p3_nodes, "The following form manages the wish list of books you would love to buy. Each book must have three properties which are title, ISBN number and price (in dollar).");
			p3_nodes.forEach(detach);
			t30 = claim_text(section1_nodes, "\n        ");

			p4 = claim_element(section1_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t31 = claim_text(p4_nodes, "Assume that, due to the required naming convention from server, the fields for these properties\n            are named as ");

			code0 = claim_element(p4_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t32 = claim_text(code0_nodes, "book[i].title");
			code0_nodes.forEach(detach);
			t33 = claim_text(p4_nodes, ", ");

			code1 = claim_element(p4_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t34 = claim_text(code1_nodes, "book[i].isbn");
			code1_nodes.forEach(detach);
			t35 = claim_text(p4_nodes, " and ");

			code2 = claim_element(p4_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t36 = claim_text(code2_nodes, "book[i].price");
			code2_nodes.forEach(detach);
			t37 = claim_text(p4_nodes, ",\n            where ");

			code3 = claim_element(p4_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t38 = claim_text(code3_nodes, "i");
			code3_nodes.forEach(detach);
			t39 = claim_text(p4_nodes, " is the index number of book which can be 0, 1, 2, and so forth.");
			p4_nodes.forEach(detach);
			t40 = claim_text(section1_nodes, "\n\n        ");
			demo0.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t41 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading1.$$.fragment.l(section2_nodes);
			t42 = claim_text(section2_nodes, "\n\n        ");

			p5 = claim_element(section2_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t43 = claim_text(p5_nodes, "Sometime, the added fields aren't just simply a normal input such as text box, text area. They can be used with other plugins such as a date picker, an auto-completed control, etc.");
			p5_nodes.forEach(detach);
			t44 = claim_text(section2_nodes, "\n        ");

			p6 = claim_element(section2_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t45 = claim_text(p6_nodes, "In this case, the field should be initially as a normal text input, and then integrated with other plugin after being added.");
			p6_nodes.forEach(detach);
			t46 = claim_text(section2_nodes, "\n        ");

			p7 = claim_element(section2_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t47 = claim_text(p7_nodes, "The following sample code attaches a date picker to newly added input by triggering the ");

			a4 = claim_element(p7_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t48 = claim_text(a4_nodes, "core.field.added event");
			a4_nodes.forEach(detach);
			t49 = claim_text(p7_nodes, ":");
			p7_nodes.forEach(detach);
			t50 = claim_text(section2_nodes, "\n\n        ");

			div = claim_element(section2_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			samplecode.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			t51 = claim_text(section2_nodes, "\n        ");
			tip.$$.fragment.l(section2_nodes);
			t52 = claim_text(section2_nodes, "\n        ");
			demo1.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 102);
			p0.className = "lh-copy";
			add_location(p0, file, 8, 8, 190);
			p1.className = "lh-copy";
			add_location(p1, file, 9, 8, 371);
			p2.className = "lh-copy";
			add_location(p2, file, 10, 8, 505);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 14, 16, 741);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 15, 16, 809);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 13, 12, 692);
			a0.href = "/guide/api/add-field";
			a0.className = "blue dim link";
			add_location(a0, file, 18, 36, 959);
			td0.className = "pv2 ph3";
			add_location(td0, file, 18, 16, 939);
			td1.className = "pv2 ph3";
			add_location(td1, file, 19, 16, 1055);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 17, 12, 890);
			a1.href = "/guide/api/remove-field";
			a1.className = "blue dim link";
			add_location(a1, file, 22, 36, 1196);
			td2.className = "pv2 ph3";
			add_location(td2, file, 22, 16, 1176);
			td3.className = "pv2 ph3";
			add_location(td3, file, 23, 16, 1298);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 21, 12, 1127);
			a2.href = "/guide/events/core.field.added";
			a2.className = "blue dim link";
			add_location(a2, file, 26, 36, 1441);
			td4.className = "pv2 ph3";
			add_location(td4, file, 26, 16, 1421);
			td5.className = "pv2 ph3";
			add_location(td5, file, 27, 16, 1552);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 25, 12, 1372);
			a3.href = "/guide/events/core.field.removed";
			a3.className = "blue dim link";
			add_location(a3, file, 30, 36, 1706);
			td6.className = "pv2 ph3";
			add_location(td6, file, 30, 16, 1686);
			td7.className = "pv2 ph3";
			add_location(td7, file, 31, 16, 1821);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 29, 12, 1637);
			table.className = "collapse ba br2 b--black-10 pv2 ph3 w-100 mb4";
			add_location(table, file, 12, 8, 618);
			section0.className = "mv5";
			add_location(section0, file, 7, 4, 160);
			p3.className = "lh-copy";
			add_location(p3, file, 39, 8, 2028);
			add_location(code0, file, 41, 25, 2361);
			add_location(code1, file, 41, 53, 2389);
			add_location(code2, file, 41, 83, 2419);
			add_location(code3, file, 42, 18, 2465);
			p4.className = "lh-copy";
			add_location(p4, file, 40, 8, 2221);
			section1.className = "mv5";
			add_location(section1, file, 36, 4, 1935);
			p5.className = "lh-copy";
			add_location(p5, file, 50, 8, 2768);
			p6.className = "lh-copy";
			add_location(p6, file, 51, 8, 2980);
			a4.href = "/guide/events/core.field.added";
			a4.className = "blue dim link";
			add_location(a4, file, 52, 115, 3243);
			p7.className = "lh-copy";
			add_location(p7, file, 52, 8, 3136);
			div.className = "mb4";
			add_location(div, file, 54, 8, 3347);
			section2.className = "mv5";
			add_location(section2, file, 47, 4, 2673);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section0, anchor);
			append(section0, p0);
			append(p0, t2);
			append(section0, t3);
			append(section0, p1);
			append(p1, t4);
			append(section0, t5);
			append(section0, p2);
			append(p2, t6);
			append(section0, t7);
			append(section0, table);
			append(table, tr0);
			append(tr0, th0);
			append(th0, t8);
			append(tr0, t9);
			append(tr0, th1);
			append(th1, t10);
			append(table, t11);
			append(table, tr1);
			append(tr1, td0);
			append(td0, a0);
			append(a0, t12);
			append(tr1, t13);
			append(tr1, td1);
			append(td1, t14);
			append(table, t15);
			append(table, tr2);
			append(tr2, td2);
			append(td2, a1);
			append(a1, t16);
			append(tr2, t17);
			append(tr2, td3);
			append(td3, t18);
			append(table, t19);
			append(table, tr3);
			append(tr3, td4);
			append(td4, a2);
			append(a2, t20);
			append(tr3, t21);
			append(tr3, td5);
			append(td5, t22);
			append(table, t23);
			append(table, tr4);
			append(tr4, td6);
			append(td6, a3);
			append(a3, t24);
			append(tr4, t25);
			append(tr4, td7);
			append(td7, t26);
			insert(target, t27, anchor);
			insert(target, section1, anchor);
			mount_component(heading0, section1, null);
			append(section1, t28);
			append(section1, p3);
			append(p3, t29);
			append(section1, t30);
			append(section1, p4);
			append(p4, t31);
			append(p4, code0);
			append(code0, t32);
			append(p4, t33);
			append(p4, code1);
			append(code1, t34);
			append(p4, t35);
			append(p4, code2);
			append(code2, t36);
			append(p4, t37);
			append(p4, code3);
			append(code3, t38);
			append(p4, t39);
			append(section1, t40);
			mount_component(demo0, section1, null);
			insert(target, t41, anchor);
			insert(target, section2, anchor);
			mount_component(heading1, section2, null);
			append(section2, t42);
			append(section2, p5);
			append(p5, t43);
			append(section2, t44);
			append(section2, p6);
			append(p6, t45);
			append(section2, t46);
			append(section2, p7);
			append(p7, t47);
			append(p7, a4);
			append(a4, t48);
			append(p7, t49);
			append(section2, t50);
			append(section2, div);
			mount_component(samplecode, div, null);
			append(section2, t51);
			mount_component(tip, section2, null);
			append(section2, t52);
			mount_component(demo1, section2, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var tip_changes = {};
			if (changed.$$scope) tip_changes.$$scope = { changed, ctx };
			tip.$set(tip_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			demo0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode.$$.fragment.i(local);

			tip.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			demo0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode.$$.fragment.o(local);
			tip.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section0);
				detach(t27);
				detach(section1);
			}

			heading0.$destroy();

			demo0.$destroy();

			if (detaching) {
				detach(t41);
				detach(section2);
			}

			heading1.$destroy();

			samplecode.$destroy();

			tip.$destroy();

			demo1.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Adding dynamic field";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

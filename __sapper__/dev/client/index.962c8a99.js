import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';

/* src/routes/guide/getting-started/field-selector/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/getting-started/field-selector/index.svelte";

// (36:8) <Tip>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("By not using the name attribute for sensitive fields, we can prevent them from sending to the server when the form is submitted.");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "By not using the name attribute for sensitive fields, we can prevent them from sending to the server when the form is submitted.");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (79:12) <PrevButton target="/guide/getting-started/special-field-name">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Special field name");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Special field name");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (80:12) <NextButton target="/guide/validators">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Validators");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Validators");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, p0, t4, a0, t5, t6, code0, t7, t8, t9, t10, p1, t11, code1, t12, t13, t14, p2, t15, t16, t17, p3, t18, code2, t19, t20, t21, t22, p4, t23, a1, t24, t25, t26, p5, t27, code3, t28, t29, code4, t30, t31, t32, t33, section1, div, t34, current;

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<form id="loginForm" method="POST">
    <input type="text" name="username" />
    ...
</form>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('loginForm'),
        {
            fields: {
                username: {
                    validators: {
                        ...
                    }
                },
            }
        }
    );
});    
</script-tag>
` },
		$$inline: true
	});

	var tip = new Tip({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<form id="purchaseForm" method="POST">
    <input type="text" [data-stripe="number"] />
    ...
</form>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('purchaseForm'),
        {
            fields: {
                ccNumber: {
                    // The credit card number field can be retrieved
                    // by [data-stripe="number"] attribute
                    selector: '[data-stripe="number"]',
                    validators: {
                        notEmpty: {
                            ...
                        },
                        creditCard: {
                            ...
                        }
                    }
                },
            },
        }
    );
});
</script-tag>
` },
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/getting-started/field-selector/stripe",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/getting-started/special-field-name",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/validators",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Field selector");
			t1 = space();
			h2 = element("h2");
			t2 = text("Validating field determined by a CSS selector");
			t3 = space();
			section0 = element("section");
			p0 = element("p");
			t4 = text("In the ");
			a0 = element("a");
			t5 = text("Usage");
			t6 = text(" page, we know that it's possible to declare the validator rules for field via its ");
			code0 = element("code");
			t7 = text("name");
			t8 = text(" attribute:");
			t9 = space();
			samplecode0.$$.fragment.c();
			t10 = space();
			p1 = element("p");
			t11 = text("But in reality, there're cases that it's not possible to use the ");
			code1 = element("code");
			t12 = text("name");
			t13 = text(" attribute for the field.");
			t14 = space();
			p2 = element("p");
			t15 = text("For example, assume that you have to fill in a payment form containing sensitive data such as the credit card number, its expiration date, .etc. These fields are nameless elements. How we can apply the validation rules for them?");
			t16 = space();
			tip.$$.fragment.c();
			t17 = space();
			p3 = element("p");
			t18 = text("Fortunately, FormValidation provides the ");
			code2 = element("code");
			t19 = text("selector");
			t20 = text(" option to support indicating fields via a CSS selector:");
			t21 = space();
			samplecode1.$$.fragment.c();
			t22 = space();
			p4 = element("p");
			t23 = text("The following example shows how to use this option to validate a a standard ");
			a1 = element("a");
			t24 = text("Stripe");
			t25 = text(" payment form.");
			t26 = space();
			p5 = element("p");
			t27 = text("All fields for filling the credit card information don't have the ");
			code3 = element("code");
			t28 = text("name");
			t29 = text(" attribute.\n            Instead, they use the ");
			code4 = element("code");
			t30 = text("data-stripe");
			t31 = text(" attribute which are defined by Stripe. The Stripe API then will\n            collects the credit card data from fields using this attribute.");
			t32 = space();
			demo.$$.fragment.c();
			t33 = space();
			section1 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t34 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Field selector");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Validating field determined by a CSS selector");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t4 = claim_text(p0_nodes, "In the ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t5 = claim_text(a0_nodes, "Usage");
			a0_nodes.forEach(detach);
			t6 = claim_text(p0_nodes, " page, we know that it's possible to declare the validator rules for field via its ");

			code0 = claim_element(p0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t7 = claim_text(code0_nodes, "name");
			code0_nodes.forEach(detach);
			t8 = claim_text(p0_nodes, " attribute:");
			p0_nodes.forEach(detach);
			t9 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t10 = claim_text(section0_nodes, " \n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t11 = claim_text(p1_nodes, "But in reality, there're cases that it's not possible to use the ");

			code1 = claim_element(p1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t12 = claim_text(code1_nodes, "name");
			code1_nodes.forEach(detach);
			t13 = claim_text(p1_nodes, " attribute for the field.");
			p1_nodes.forEach(detach);
			t14 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t15 = claim_text(p2_nodes, "For example, assume that you have to fill in a payment form containing sensitive data such as the credit card number, its expiration date, .etc. These fields are nameless elements. How we can apply the validation rules for them?");
			p2_nodes.forEach(detach);
			t16 = claim_text(section0_nodes, "\n        ");
			tip.$$.fragment.l(section0_nodes);
			t17 = claim_text(section0_nodes, "\n        ");

			p3 = claim_element(section0_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t18 = claim_text(p3_nodes, "Fortunately, FormValidation provides the ");

			code2 = claim_element(p3_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t19 = claim_text(code2_nodes, "selector");
			code2_nodes.forEach(detach);
			t20 = claim_text(p3_nodes, " option to support indicating fields via a CSS selector:");
			p3_nodes.forEach(detach);
			t21 = claim_text(section0_nodes, "\n");
			samplecode1.$$.fragment.l(section0_nodes);
			t22 = claim_text(section0_nodes, "\n        ");

			p4 = claim_element(section0_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t23 = claim_text(p4_nodes, "The following example shows how to use this option to validate a a standard ");

			a1 = claim_element(p4_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t24 = claim_text(a1_nodes, "Stripe");
			a1_nodes.forEach(detach);
			t25 = claim_text(p4_nodes, " payment form.");
			p4_nodes.forEach(detach);
			t26 = claim_text(section0_nodes, "\n        ");

			p5 = claim_element(section0_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t27 = claim_text(p5_nodes, "All fields for filling the credit card information don't have the ");

			code3 = claim_element(p5_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t28 = claim_text(code3_nodes, "name");
			code3_nodes.forEach(detach);
			t29 = claim_text(p5_nodes, " attribute.\n            Instead, they use the ");

			code4 = claim_element(p5_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t30 = claim_text(code4_nodes, "data-stripe");
			code4_nodes.forEach(detach);
			t31 = claim_text(p5_nodes, " attribute which are defined by Stripe. The Stripe API then will\n            collects the credit card data from fields using this attribute.");
			p5_nodes.forEach(detach);
			t32 = claim_text(section0_nodes, "\n        \n        ");
			demo.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t33 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			div = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t34 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 96);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 148);
			a0.href = "/guide/getting-started/usage";
			a0.className = "blue dim link";
			add_location(a0, file, 9, 34, 282);
			add_location(code0, file, 9, 187, 435);
			p0.className = "lh-copy";
			add_location(p0, file, 9, 8, 256);
			add_location(code1, file, 33, 92, 1064);
			p1.className = "lh-copy";
			add_location(p1, file, 33, 8, 980);
			p2.className = "lh-copy";
			add_location(p2, file, 34, 8, 1119);
			add_location(code2, file, 36, 68, 1587);
			p3.className = "lh-copy";
			add_location(p3, file, 36, 8, 1527);
			a1.href = "https://stripe.com";
			a1.className = "blue dim link";
			add_location(a1, file, 68, 103, 2632);
			p4.className = "lh-copy";
			add_location(p4, file, 68, 8, 2537);
			add_location(code3, file, 69, 93, 2805);
			add_location(code4, file, 70, 34, 2868);
			p5.className = "lh-copy";
			add_location(p5, file, 69, 8, 2720);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 226);
			div.className = "flex";
			add_location(div, file, 77, 8, 3193);
			section1.className = "mv5";
			add_location(section1, file, 76, 4, 3163);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			append(section0, p0);
			append(p0, t4);
			append(p0, a0);
			append(a0, t5);
			append(p0, t6);
			append(p0, code0);
			append(code0, t7);
			append(p0, t8);
			append(section0, t9);
			mount_component(samplecode0, section0, null);
			append(section0, t10);
			append(section0, p1);
			append(p1, t11);
			append(p1, code1);
			append(code1, t12);
			append(p1, t13);
			append(section0, t14);
			append(section0, p2);
			append(p2, t15);
			append(section0, t16);
			mount_component(tip, section0, null);
			append(section0, t17);
			append(section0, p3);
			append(p3, t18);
			append(p3, code2);
			append(code2, t19);
			append(p3, t20);
			append(section0, t21);
			mount_component(samplecode1, section0, null);
			append(section0, t22);
			append(section0, p4);
			append(p4, t23);
			append(p4, a1);
			append(a1, t24);
			append(p4, t25);
			append(section0, t26);
			append(section0, p5);
			append(p5, t27);
			append(p5, code3);
			append(code3, t28);
			append(p5, t29);
			append(p5, code4);
			append(code4, t30);
			append(p5, t31);
			append(section0, t32);
			mount_component(demo, section0, null);
			insert(target, t33, anchor);
			insert(target, section1, anchor);
			append(section1, div);
			mount_component(prevbutton, div, null);
			append(div, t34);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var tip_changes = {};
			if (changed.$$scope) tip_changes.$$scope = { changed, ctx };
			tip.$set(tip_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			samplecode0.$$.fragment.i(local);

			tip.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode0.$$.fragment.o(local);
			tip.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			samplecode0.$destroy();

			tip.$destroy();

			samplecode1.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t33);
				detach(section1);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Field selector";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

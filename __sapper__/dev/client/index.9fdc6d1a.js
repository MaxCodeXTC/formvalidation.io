import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as ChangelogLayout } from './chunk.4a563e90.js';

/* src/routes/updates/v0.4.1/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/updates/v0.4.1/index.svelte";

// (10:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Improvements");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Improvements");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (22:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Bug fixes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Bug fixes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <ChangelogLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, ul0, li0, t5, code0, t6, t7, code1, t8, t9, t10, li1, t11, t12, li2, t13, t14, li3, t15, code2, t16, t17, t18, li4, t19, t20, li5, t21, a, t22, t23, t24, section1, t25, ul1, li6, t26, t27, li7, t28, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Version 0.4.1");
			t1 = space();
			h2 = element("h2");
			t2 = text("Released 12 April 2014");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			ul0 = element("ul");
			li0 = element("li");
			t5 = text("Prevent the ");
			code0 = element("code");
			t6 = text("validate()");
			t7 = text(" method from submit the form automatically. So we can call ");
			code1 = element("code");
			t8 = text("validate()");
			t9 = text(" method to validate the form");
			t10 = space();
			li1 = element("li");
			t11 = text("Doesn't trigger validation on the first focus");
			t12 = space();
			li2 = element("li");
			t13 = text("The row state is now only marked as success if all fields on it are valid");
			t14 = space();
			li3 = element("li");
			t15 = text("Add support for element outside of form using the ");
			code2 = element("code");
			t16 = text("selector");
			t17 = text(" option");
			t18 = space();
			li4 = element("li");
			t19 = text("User doesn't need to submit the form twice when remote validator complete");
			t20 = space();
			li5 = element("li");
			t21 = text("The ");
			a = element("a");
			t22 = text("phone validator");
			t23 = text(" now also checks the length of US phone number");
			t24 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t25 = space();
			ul1 = element("ul");
			li6 = element("li");
			t26 = text("Fixed an issue that the custom submit handler is not fired from the second time");
			t27 = space();
			li7 = element("li");
			t28 = text("Fix errors in IE 8");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Version 0.4.1");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Released 12 April 2014");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			ul0 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t5 = claim_text(li0_nodes, "Prevent the ");

			code0 = claim_element(li0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t6 = claim_text(code0_nodes, "validate()");
			code0_nodes.forEach(detach);
			t7 = claim_text(li0_nodes, " method from submit the form automatically. So we can call ");

			code1 = claim_element(li0_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t8 = claim_text(code1_nodes, "validate()");
			code1_nodes.forEach(detach);
			t9 = claim_text(li0_nodes, " method to validate the form");
			li0_nodes.forEach(detach);
			t10 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t11 = claim_text(li1_nodes, "Doesn't trigger validation on the first focus");
			li1_nodes.forEach(detach);
			t12 = claim_text(ul0_nodes, "\n            ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t13 = claim_text(li2_nodes, "The row state is now only marked as success if all fields on it are valid");
			li2_nodes.forEach(detach);
			t14 = claim_text(ul0_nodes, "\n            ");

			li3 = claim_element(ul0_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t15 = claim_text(li3_nodes, "Add support for element outside of form using the ");

			code2 = claim_element(li3_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t16 = claim_text(code2_nodes, "selector");
			code2_nodes.forEach(detach);
			t17 = claim_text(li3_nodes, " option");
			li3_nodes.forEach(detach);
			t18 = claim_text(ul0_nodes, "\n            ");

			li4 = claim_element(ul0_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			t19 = claim_text(li4_nodes, "User doesn't need to submit the form twice when remote validator complete");
			li4_nodes.forEach(detach);
			t20 = claim_text(ul0_nodes, "\n            ");

			li5 = claim_element(ul0_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			t21 = claim_text(li5_nodes, "The ");

			a = claim_element(li5_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t22 = claim_text(a_nodes, "phone validator");
			a_nodes.forEach(detach);
			t23 = claim_text(li5_nodes, " now also checks the length of US phone number");
			li5_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t24 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t25 = claim_text(section1_nodes, "\n        ");

			ul1 = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li6 = claim_element(ul1_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			t26 = claim_text(li6_nodes, "Fixed an issue that the custom submit handler is not fired from the second time");
			li6_nodes.forEach(detach);
			t27 = claim_text(ul1_nodes, "\n            ");

			li7 = claim_element(ul1_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			t28 = claim_text(li7_nodes, "Fix errors in IE 8");
			li7_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 92);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 143);
			add_location(code0, file, 11, 28, 329);
			add_location(code1, file, 11, 110, 411);
			add_location(li0, file, 11, 12, 313);
			add_location(li1, file, 12, 12, 480);
			add_location(li2, file, 13, 12, 547);
			add_location(code2, file, 14, 66, 696);
			add_location(li3, file, 14, 12, 642);
			add_location(li4, file, 15, 12, 742);
			a.href = "/guide/validators/phone";
			a.className = "blue dim link";
			add_location(a, file, 16, 20, 845);
			add_location(li5, file, 16, 12, 837);
			ul0.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul0, file, 10, 8, 268);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 198);
			add_location(li6, file, 23, 12, 1118);
			add_location(li7, file, 24, 12, 1219);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 22, 8, 1073);
			section1.className = "mv5";
			add_location(section1, file, 20, 4, 1006);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, ul0);
			append(ul0, li0);
			append(li0, t5);
			append(li0, code0);
			append(code0, t6);
			append(li0, t7);
			append(li0, code1);
			append(code1, t8);
			append(li0, t9);
			append(ul0, t10);
			append(ul0, li1);
			append(li1, t11);
			append(ul0, t12);
			append(ul0, li2);
			append(li2, t13);
			append(ul0, t14);
			append(ul0, li3);
			append(li3, t15);
			append(li3, code2);
			append(code2, t16);
			append(li3, t17);
			append(ul0, t18);
			append(ul0, li4);
			append(li4, t19);
			append(ul0, t20);
			append(ul0, li5);
			append(li5, t21);
			append(li5, a);
			append(a, t22);
			append(li5, t23);
			insert(target, t24, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t25);
			append(section1, ul1);
			append(ul1, li6);
			append(li6, t26);
			append(ul1, t27);
			append(ul1, li7);
			append(li7, t28);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			if (detaching) {
				detach(t24);
				detach(section1);
			}

			heading1.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var changeloglayout = new ChangelogLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			changeloglayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			changeloglayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • v0.4.1";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(changeloglayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var changeloglayout_changes = {};
			if (changed.$$scope) changeloglayout_changes.$$scope = { changed, ctx };
			changeloglayout.$set(changeloglayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			changeloglayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			changeloglayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			changeloglayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

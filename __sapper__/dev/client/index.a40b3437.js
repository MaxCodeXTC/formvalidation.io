import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, r as noop } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';

/* src/routes/guide/examples/hiding-success-class/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/hiding-success-class/index.svelte";

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section, p0, t2, a0, t3, t4, code0, t5, t6, code1, t7, t8, code2, t9, t10, code3, t11, t12, t13, p1, t14, code4, t15, t16, t17, p2, t18, a1, t19, t20, t21, div, t22, t23, current;

	var samplecode = new SampleCode({
		props: { lang: "javascript", code: `
FormValidation
    .formValidation(
        form,
        {
            fields: {
                ...
            },
            plugins: {
                ...
            },
        }
    )
    .on('core.element.validated', function(e) {
        // e.element presents the field element
        // e.valid indicates the field is valid or not
        if (e.valid) {
            // Remove has-success from the container
            const groupEle = FormValidation.utils.closest(e.element, '.form-group');
            if (groupEle) {
                FormValidation.utils.classSet(groupEle, {
                    'has-success': false,
                });
            }

            // Remove is-valid from the element
            FormValidation.utils.classSet(e.element, {
                'is-valid': false,
            });
        }
    });
` },
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/examples/hiding-success-class",
		frameworks: ['bootstrap']
	},
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Changing success and error colors',
        'Hiding success class',
    ] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Hiding success class");
			t1 = space();
			section = element("section");
			p0 = element("p");
			t2 = text("Based on the field status, the field and its container are marked as success or error element. For ");
			a0 = element("a");
			t3 = text("Bootstrap");
			t4 = text(" form,\n            the plugin will add ");
			code0 = element("code");
			t5 = text(".has-success");
			t6 = text(" or ");
			code1 = element("code");
			t7 = text(".has-danger");
			t8 = text(" class to the container element. It also adds ");
			code2 = element("code");
			t9 = text(".is-valid");
			t10 = text(" or ");
			code3 = element("code");
			t11 = text(".is-invalid");
			t12 = text(" class to the field element.");
			t13 = space();
			p1 = element("p");
			t14 = text("If you think that it's better to indicate error status only due to the similarity of these status colors, you can remove ");
			code4 = element("code");
			t15 = text(".has-success");
			t16 = text(" class from the container.");
			t17 = space();
			p2 = element("p");
			t18 = text("It can be done by triggering the ");
			a1 = element("a");
			t19 = text("core.element.validated");
			t20 = text(" event as below:");
			t21 = space();
			div = element("div");
			samplecode.$$.fragment.c();
			t22 = space();
			demo.$$.fragment.c();
			t23 = space();
			examples.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Hiding success class");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n\n    ");

			section = claim_element(nodes, "SECTION", { class: true }, false);
			var section_nodes = children(section);

			p0 = claim_element(section_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "Based on the field status, the field and its container are marked as success or error element. For ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t3 = claim_text(a0_nodes, "Bootstrap");
			a0_nodes.forEach(detach);
			t4 = claim_text(p0_nodes, " form,\n            the plugin will add ");

			code0 = claim_element(p0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t5 = claim_text(code0_nodes, ".has-success");
			code0_nodes.forEach(detach);
			t6 = claim_text(p0_nodes, " or ");

			code1 = claim_element(p0_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t7 = claim_text(code1_nodes, ".has-danger");
			code1_nodes.forEach(detach);
			t8 = claim_text(p0_nodes, " class to the container element. It also adds ");

			code2 = claim_element(p0_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t9 = claim_text(code2_nodes, ".is-valid");
			code2_nodes.forEach(detach);
			t10 = claim_text(p0_nodes, " or ");

			code3 = claim_element(p0_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t11 = claim_text(code3_nodes, ".is-invalid");
			code3_nodes.forEach(detach);
			t12 = claim_text(p0_nodes, " class to the field element.");
			p0_nodes.forEach(detach);
			t13 = claim_text(section_nodes, "\n        ");

			p1 = claim_element(section_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t14 = claim_text(p1_nodes, "If you think that it's better to indicate error status only due to the similarity of these status colors, you can remove ");

			code4 = claim_element(p1_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t15 = claim_text(code4_nodes, ".has-success");
			code4_nodes.forEach(detach);
			t16 = claim_text(p1_nodes, " class from the container.");
			p1_nodes.forEach(detach);
			t17 = claim_text(section_nodes, "\n        ");

			p2 = claim_element(section_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t18 = claim_text(p2_nodes, "It can be done by triggering the ");

			a1 = claim_element(p2_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t19 = claim_text(a1_nodes, "core.element.validated");
			a1_nodes.forEach(detach);
			t20 = claim_text(p2_nodes, " event as below:");
			p2_nodes.forEach(detach);
			t21 = claim_text(section_nodes, "\n        ");

			div = claim_element(section_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			samplecode.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			t22 = claim_text(section_nodes, "\n        ");
			demo.$$.fragment.l(section_nodes);
			section_nodes.forEach(detach);
			t23 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 102);
			a0.href = "/guide/plugins/bootstrap";
			a0.className = "blue dim link";
			add_location(a0, file, 8, 126, 304);
			add_location(code0, file, 9, 32, 413);
			add_location(code1, file, 9, 61, 442);
			add_location(code2, file, 9, 131, 512);
			add_location(code3, file, 9, 157, 538);
			p0.className = "lh-copy";
			add_location(p0, file, 8, 8, 186);
			add_location(code4, file, 10, 148, 743);
			p1.className = "lh-copy";
			add_location(p1, file, 10, 8, 603);
			a1.href = "/guide/events/core.element.validated";
			a1.className = "blue dim link";
			add_location(a1, file, 11, 60, 859);
			p2.className = "lh-copy";
			add_location(p2, file, 11, 8, 807);
			div.className = "mb4";
			add_location(div, file, 12, 8, 983);
			section.className = "mv5";
			add_location(section, file, 7, 4, 156);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section, anchor);
			append(section, p0);
			append(p0, t2);
			append(p0, a0);
			append(a0, t3);
			append(p0, t4);
			append(p0, code0);
			append(code0, t5);
			append(p0, t6);
			append(p0, code1);
			append(code1, t7);
			append(p0, t8);
			append(p0, code2);
			append(code2, t9);
			append(p0, t10);
			append(p0, code3);
			append(code3, t11);
			append(p0, t12);
			append(section, t13);
			append(section, p1);
			append(p1, t14);
			append(p1, code4);
			append(code4, t15);
			append(p1, t16);
			append(section, t17);
			append(section, p2);
			append(p2, t18);
			append(p2, a1);
			append(a1, t19);
			append(p2, t20);
			append(section, t21);
			append(section, div);
			mount_component(samplecode, div, null);
			append(section, t22);
			mount_component(demo, section, null);
			insert(target, t23, anchor);
			mount_component(examples, target, anchor);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			samplecode.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section);
			}

			samplecode.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t23);
			}

			examples.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Hiding success class";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';

/* src/routes/guide/validators/uuid/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/validators/uuid/index.svelte";

// (10:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (60:12) <PrevButton target="/guide/validators/uri">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("uri validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "uri validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (61:12) <NextButton target="/guide/validators/vat">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("vat validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "vat validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, a0, t3, t4, section0, t5, h30, t6, t7, p, t8, a1, t9, t10, t11, table, tr0, th0, t12, t13, th1, t14, t15, th2, t16, t17, th3, t18, t19, tr1, td0, code0, t20, t21, td1, code1, t22, t23, td2, t24, t25, td3, t26, t27, tr2, td4, code2, t28, t29, td5, code3, t30, t31, td6, t32, t33, td7, t34, code4, t35, t36, code5, t37, t38, code6, t39, t40, code7, t41, t42, t43, h31, t44, t45, t46, t47, section1, div, t48, current;

	var heading = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import uuid from 'formvalidation/dist/es6/validators/uuid';

const result = uuid().validate({
    value: ...,
    options: {
        message: ...,
    },
});
/*
result is an object of
{
    valid: true or false,
    message: The error message
}
*/
` },
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['regexp'] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/validators/uri",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/validators/vat",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("uuid validator");
			t1 = space();
			h2 = element("h2");
			t2 = text("Validate an ");
			a0 = element("a");
			t3 = text("UUID");
			t4 = space();
			section0 = element("section");
			heading.$$.fragment.c();
			t5 = space();
			h30 = element("h3");
			t6 = text("Using with form field");
			t7 = space();
			p = element("p");
			t8 = text("The HTML attributes are used to set the validator options via the ");
			a1 = element("a");
			t9 = text("Declarative");
			t10 = text(" plugin");
			t11 = space();
			table = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t12 = text("Name");
			t13 = space();
			th1 = element("th");
			t14 = text("HTML attribute");
			t15 = space();
			th2 = element("th");
			t16 = text("Type");
			t17 = space();
			th3 = element("th");
			t18 = text("Description");
			t19 = space();
			tr1 = element("tr");
			td0 = element("td");
			code0 = element("code");
			t20 = text("message");
			t21 = space();
			td1 = element("td");
			code1 = element("code");
			t22 = text("data-fv-uuid___message");
			t23 = space();
			td2 = element("td");
			t24 = text("String");
			t25 = space();
			td3 = element("td");
			t26 = text("The error message");
			t27 = space();
			tr2 = element("tr");
			td4 = element("td");
			code2 = element("code");
			t28 = text("version");
			t29 = space();
			td5 = element("td");
			code3 = element("code");
			t30 = text("data-fv-uuid___version");
			t31 = space();
			td6 = element("td");
			t32 = text("String");
			t33 = space();
			td7 = element("td");
			t34 = text("The UUID version. Can be ");
			code4 = element("code");
			t35 = text("3");
			t36 = text(", ");
			code5 = element("code");
			t37 = text("4");
			t38 = text(", ");
			code6 = element("code");
			t39 = text("5");
			t40 = text(" or ");
			code7 = element("code");
			t41 = text("all");
			t42 = text(" (the default version)");
			t43 = space();
			h31 = element("h3");
			t44 = text("Using with ES6 module");
			t45 = space();
			samplecode.$$.fragment.c();
			t46 = space();
			relatedvalidators.$$.fragment.c();
			t47 = space();
			section1 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t48 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "uuid validator");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Validate an ");

			a0 = claim_element(h2_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t3 = claim_text(a0_nodes, "UUID");
			a0_nodes.forEach(detach);
			h2_nodes.forEach(detach);
			t4 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading.$$.fragment.l(section0_nodes);
			t5 = claim_text(section0_nodes, "\n\n        ");

			h30 = claim_element(section0_nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t6 = claim_text(h30_nodes, "Using with form field");
			h30_nodes.forEach(detach);
			t7 = claim_text(section0_nodes, "\n        ");

			p = claim_element(section0_nodes, "P", { class: true }, false);
			var p_nodes = children(p);

			t8 = claim_text(p_nodes, "The HTML attributes are used to set the validator options via the ");

			a1 = claim_element(p_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t9 = claim_text(a1_nodes, "Declarative");
			a1_nodes.forEach(detach);
			t10 = claim_text(p_nodes, " plugin");
			p_nodes.forEach(detach);
			t11 = claim_text(section0_nodes, "\n        ");

			table = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table_nodes = children(table);

			tr0 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t12 = claim_text(th0_nodes, "Name");
			th0_nodes.forEach(detach);
			t13 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t14 = claim_text(th1_nodes, "HTML attribute");
			th1_nodes.forEach(detach);
			t15 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t16 = claim_text(th2_nodes, "Type");
			th2_nodes.forEach(detach);
			t17 = claim_text(tr0_nodes, "\n                ");

			th3 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th3_nodes = children(th3);

			t18 = claim_text(th3_nodes, "Description");
			th3_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t19 = claim_text(table_nodes, "\n            ");

			tr1 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code0 = claim_element(td0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t20 = claim_text(code0_nodes, "message");
			code0_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t21 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			code1 = claim_element(td1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t22 = claim_text(code1_nodes, "data-fv-uuid___message");
			code1_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			t23 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t24 = claim_text(td2_nodes, "String");
			td2_nodes.forEach(detach);
			t25 = claim_text(tr1_nodes, "\n                ");

			td3 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			t26 = claim_text(td3_nodes, "The error message");
			td3_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t27 = claim_text(table_nodes, "\n            ");

			tr2 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			code2 = claim_element(td4_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t28 = claim_text(code2_nodes, "version");
			code2_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t29 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			code3 = claim_element(td5_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t30 = claim_text(code3_nodes, "data-fv-uuid___version");
			code3_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			t31 = claim_text(tr2_nodes, "\n                ");

			td6 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			t32 = claim_text(td6_nodes, "String");
			td6_nodes.forEach(detach);
			t33 = claim_text(tr2_nodes, "\n                ");

			td7 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			t34 = claim_text(td7_nodes, "The UUID version. Can be ");

			code4 = claim_element(td7_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t35 = claim_text(code4_nodes, "3");
			code4_nodes.forEach(detach);
			t36 = claim_text(td7_nodes, ", ");

			code5 = claim_element(td7_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t37 = claim_text(code5_nodes, "4");
			code5_nodes.forEach(detach);
			t38 = claim_text(td7_nodes, ", ");

			code6 = claim_element(td7_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t39 = claim_text(code6_nodes, "5");
			code6_nodes.forEach(detach);
			t40 = claim_text(td7_nodes, " or ");

			code7 = claim_element(td7_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t41 = claim_text(code7_nodes, "all");
			code7_nodes.forEach(detach);
			t42 = claim_text(td7_nodes, " (the default version)");
			td7_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			table_nodes.forEach(detach);
			t43 = claim_text(section0_nodes, "\n\n        ");

			h31 = claim_element(section0_nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t44 = claim_text(h31_nodes, "Using with ES6 module");
			h31_nodes.forEach(detach);
			t45 = claim_text(section0_nodes, "\n");
			samplecode.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t46 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			t47 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			div = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t48 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 96);
			a0.href = "https://en.wikipedia.org/wiki/Universally_unique_identifier";
			a0.className = "blue dim link";
			add_location(a0, file, 6, 38, 182);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 148);
			add_location(h30, file, 11, 8, 359);
			a1.href = "/guide/plugins/declarative";
			a1.className = "blue dim link";
			add_location(a1, file, 12, 95, 485);
			p.className = "lh-copy i";
			add_location(p, file, 12, 8, 398);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 15, 16, 698);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 16, 16, 758);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 17, 16, 828);
			th3.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th3, file, 18, 16, 888);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 14, 12, 649);
			add_location(code0, file, 21, 36, 1038);
			td0.className = "pv2 ph3";
			add_location(td0, file, 21, 16, 1018);
			add_location(code1, file, 22, 36, 1100);
			td1.className = "pv2 ph3";
			add_location(td1, file, 22, 16, 1080);
			td2.className = "pv2 ph3";
			add_location(td2, file, 23, 16, 1157);
			td3.className = "pv2 ph3";
			add_location(td3, file, 24, 16, 1205);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 20, 12, 969);
			add_location(code2, file, 27, 36, 1347);
			td4.className = "pv2 ph3";
			add_location(td4, file, 27, 16, 1327);
			add_location(code3, file, 28, 36, 1409);
			td5.className = "pv2 ph3";
			add_location(td5, file, 28, 16, 1389);
			td6.className = "pv2 ph3";
			add_location(td6, file, 29, 16, 1466);
			add_location(code4, file, 30, 61, 1559);
			add_location(code5, file, 30, 77, 1575);
			add_location(code6, file, 30, 93, 1591);
			add_location(code7, file, 30, 111, 1609);
			td7.className = "pv2 ph3";
			add_location(td7, file, 30, 16, 1514);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 26, 12, 1278);
			table.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table, file, 13, 8, 579);
			add_location(h31, file, 34, 8, 1697);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 293);
			div.className = "flex";
			add_location(div, file, 58, 8, 2168);
			section1.className = "mv5";
			add_location(section1, file, 57, 4, 2138);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			append(h2, a0);
			append(a0, t3);
			insert(target, t4, anchor);
			insert(target, section0, anchor);
			mount_component(heading, section0, null);
			append(section0, t5);
			append(section0, h30);
			append(h30, t6);
			append(section0, t7);
			append(section0, p);
			append(p, t8);
			append(p, a1);
			append(a1, t9);
			append(p, t10);
			append(section0, t11);
			append(section0, table);
			append(table, tr0);
			append(tr0, th0);
			append(th0, t12);
			append(tr0, t13);
			append(tr0, th1);
			append(th1, t14);
			append(tr0, t15);
			append(tr0, th2);
			append(th2, t16);
			append(tr0, t17);
			append(tr0, th3);
			append(th3, t18);
			append(table, t19);
			append(table, tr1);
			append(tr1, td0);
			append(td0, code0);
			append(code0, t20);
			append(tr1, t21);
			append(tr1, td1);
			append(td1, code1);
			append(code1, t22);
			append(tr1, t23);
			append(tr1, td2);
			append(td2, t24);
			append(tr1, t25);
			append(tr1, td3);
			append(td3, t26);
			append(table, t27);
			append(table, tr2);
			append(tr2, td4);
			append(td4, code2);
			append(code2, t28);
			append(tr2, t29);
			append(tr2, td5);
			append(td5, code3);
			append(code3, t30);
			append(tr2, t31);
			append(tr2, td6);
			append(td6, t32);
			append(tr2, t33);
			append(tr2, td7);
			append(td7, t34);
			append(td7, code4);
			append(code4, t35);
			append(td7, t36);
			append(td7, code5);
			append(code5, t37);
			append(td7, t38);
			append(td7, code6);
			append(code6, t39);
			append(td7, t40);
			append(td7, code7);
			append(code7, t41);
			append(td7, t42);
			append(section0, t43);
			append(section0, h31);
			append(h31, t44);
			append(section0, t45);
			mount_component(samplecode, section0, null);
			insert(target, t46, anchor);
			mount_component(relatedvalidators, target, anchor);
			insert(target, t47, anchor);
			insert(target, section1, anchor);
			append(section1, div);
			mount_component(prevbutton, div, null);
			append(div, t48);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading_changes = {};
			if (changed.$$scope) heading_changes.$$scope = { changed, ctx };
			heading.$set(heading_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading.$$.fragment.i(local);

			samplecode.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading.$$.fragment.o(local);
			samplecode.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t4);
				detach(section0);
			}

			heading.$destroy();

			samplecode.$destroy();

			if (detaching) {
				detach(t46);
			}

			relatedvalidators.$destroy(detaching);

			if (detaching) {
				detach(t47);
				detach(section1);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • uuid validator";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as ChangelogLayout } from './chunk.4a563e90.js';

/* src/routes/updates/v0.3.3/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/updates/v0.3.3/index.svelte";

// (10:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Improvements");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Improvements");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (18:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Bug fixes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Bug fixes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <ChangelogLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, ul0, li0, t5, t6, li1, t7, t8, section1, t9, ul1, li2, t10, code0, t11, t12, code1, t13, t14, li3, t15, a, t16, t17, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Version 0.3.3");
			t1 = space();
			h2 = element("h2");
			t2 = text("Released 27 March 2014");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			ul0 = element("ul");
			li0 = element("li");
			t5 = text("Don't validate disabled element");
			t6 = space();
			li1 = element("li");
			t7 = text("Handle case where a field is removed after the bootstrap validation");
			t8 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t9 = space();
			ul1 = element("ul");
			li2 = element("li");
			t10 = text("Cannot call ");
			code0 = element("code");
			t11 = text("form.submit()");
			t12 = text(" inside ");
			code1 = element("code");
			t13 = text("submitHandler");
			t14 = space();
			li3 = element("li");
			t15 = text("The ");
			a = element("a");
			t16 = text("notEmpty validator");
			t17 = text(" doesn't work on file input");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Version 0.3.3");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Released 27 March 2014");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			ul0 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t5 = claim_text(li0_nodes, "Don't validate disabled element");
			li0_nodes.forEach(detach);
			t6 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t7 = claim_text(li1_nodes, "Handle case where a field is removed after the bootstrap validation");
			li1_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t8 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t9 = claim_text(section1_nodes, "\n        ");

			ul1 = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li2 = claim_element(ul1_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t10 = claim_text(li2_nodes, "Cannot call ");

			code0 = claim_element(li2_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t11 = claim_text(code0_nodes, "form.submit()");
			code0_nodes.forEach(detach);
			t12 = claim_text(li2_nodes, " inside ");

			code1 = claim_element(li2_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t13 = claim_text(code1_nodes, "submitHandler");
			code1_nodes.forEach(detach);
			li2_nodes.forEach(detach);
			t14 = claim_text(ul1_nodes, "\n            ");

			li3 = claim_element(ul1_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t15 = claim_text(li3_nodes, "The ");

			a = claim_element(li3_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t16 = claim_text(a_nodes, "notEmpty validator");
			a_nodes.forEach(detach);
			t17 = claim_text(li3_nodes, " doesn't work on file input");
			li3_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 92);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 143);
			add_location(li0, file, 11, 12, 313);
			add_location(li1, file, 12, 12, 366);
			ul0.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul0, file, 10, 8, 268);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 198);
			add_location(code0, file, 19, 28, 605);
			add_location(code1, file, 19, 62, 639);
			add_location(li2, file, 19, 12, 589);
			a.href = "/guide/validators/not-empty";
			a.className = "blue dim link";
			add_location(a, file, 20, 20, 691);
			add_location(li3, file, 20, 12, 683);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 18, 8, 544);
			section1.className = "mv5";
			add_location(section1, file, 16, 4, 477);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, ul0);
			append(ul0, li0);
			append(li0, t5);
			append(ul0, t6);
			append(ul0, li1);
			append(li1, t7);
			insert(target, t8, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t9);
			append(section1, ul1);
			append(ul1, li2);
			append(li2, t10);
			append(li2, code0);
			append(code0, t11);
			append(li2, t12);
			append(li2, code1);
			append(code1, t13);
			append(ul1, t14);
			append(ul1, li3);
			append(li3, t15);
			append(li3, a);
			append(a, t16);
			append(li3, t17);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			if (detaching) {
				detach(t8);
				detach(section1);
			}

			heading1.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var changeloglayout = new ChangelogLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			changeloglayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			changeloglayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation â€¢ v0.3.3";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(changeloglayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var changeloglayout_changes = {};
			if (changed.$$scope) changeloglayout_changes.$$scope = { changed, ctx };
			changeloglayout.$set(changeloglayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			changeloglayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			changeloglayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			changeloglayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, h as element, g as space, i as text, k as claim_element, l as children, m as detach, j as claim_text, n as add_location, A as attr, o as insert, p as append, r as noop, B as onMount, C as listen, D as add_binding_callback, d as create_slot, e as get_slot_changes, f as get_slot_context, q as set_data, t as mount_component } from './chunk.989912da.js';
import { a as Plugin, b as formValidation } from './chunk.b786f426.js';
import { c as Trigger, a as classSet } from './chunk.fb19edaf.js';
import { b as Icon } from './chunk.79c24606.js';
import { a as Tachyons } from './chunk.2bbbb746.js';
import { a as siteData, b as Footer } from './chunk.9eca0151.js';
import { a as Cards, b as Card } from './chunk.77ca656e.js';
import { a as DotDotDot } from './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import { a as Tabs } from './chunk.42493314.js';

class TypingAnimation extends Plugin {
    constructor(opts) {
        super(opts);
        this.opts = Object.assign({}, {
            autoPlay: true,
        }, opts);
    }
    install() {
        this.fields = Object.keys(this.core.getFields());
        if (this.opts.autoPlay) {
            this.play();
        }
    }
    play() {
        return this.animate(0);
    }
    animate(fieldIndex) {
        if (fieldIndex >= this.fields.length) {
            return Promise.resolve(fieldIndex);
        }
        const field = this.fields[fieldIndex];
        const ele = this.core.getElements(field)[0];
        const inputType = ele.getAttribute('type');
        const samples = this.opts.data[field];
        if ('checkbox' === inputType || 'radio' === inputType) {
            ele.checked = true;
            ele.setAttribute('checked', 'true');
            return this.core.revalidateField(field).then((status) => {
                return this.animate(fieldIndex + 1);
            });
        }
        else if (!samples) {
            return this.animate(fieldIndex + 1);
        }
        else {
            return new Promise((resolve) => {
                return new Typed(ele, {
                    attr: 'value',
                    autoInsertCss: true,
                    bindInputFocusEvents: true,
                    onComplete: () => {
                        resolve(fieldIndex + 1);
                    },
                    onStringTyped: (arrayPos, self) => {
                        ele.value = samples[arrayPos];
                        this.core.revalidateField(field);
                    },
                    strings: samples,
                    typeSpeed: 100,
                });
            }).then((nextFieldIndex) => {
                return this.animate(nextFieldIndex);
            });
        }
    }
}

/* src/_demo/typed/Tachyons.svelte generated by Svelte v3.4.2 */

const file = "src/_demo/typed/Tachyons.svelte";

function create_fragment(ctx) {
	var div44, div2, span0, i, t0, div1, div0, t1, t2, span1, t3, t4, div10, div8, div7, div6, div3, t5, div4, t6, div5, t7, div9, t8, a, t9, t10, div43, form, div17, div16, div11, t11, t12, div15, div14, div12, input0, t13, div13, input1, t14, div21, div20, div18, t15, t16, div19, input2, t17, div25, div24, div22, t18, t19, div23, input3, t20, div29, div28, div26, t21, t22, div27, input4, t23, div33, div32, div30, t24, t25, div31, label0, input5, t26, t27, label1, input6, t28, t29, label2, input7, t30, t31, div38, div37, div35, div34, t32, div36, input8, t33, div42, div41, div39, t34, div40, label3, input9, t35;

	return {
		c: function create() {
			div44 = element("div");
			div2 = element("div");
			span0 = element("span");
			i = element("i");
			t0 = space();
			div1 = element("div");
			div0 = element("div");
			t1 = text("It's a REAL form actually.");
			t2 = space();
			span1 = element("span");
			t3 = text("Try it yourself!");
			t4 = space();
			div10 = element("div");
			div8 = element("div");
			div7 = element("div");
			div6 = element("div");
			div3 = element("div");
			t5 = space();
			div4 = element("div");
			t6 = space();
			div5 = element("div");
			t7 = space();
			div9 = element("div");
			t8 = text("Demo with form made by ");
			a = element("a");
			t9 = text("Tachyons");
			t10 = space();
			div43 = element("div");
			form = element("form");
			div17 = element("div");
			div16 = element("div");
			div11 = element("div");
			t11 = text("Full name");
			t12 = space();
			div15 = element("div");
			div14 = element("div");
			div12 = element("div");
			input0 = element("input");
			t13 = space();
			div13 = element("div");
			input1 = element("input");
			t14 = space();
			div21 = element("div");
			div20 = element("div");
			div18 = element("div");
			t15 = text("Username");
			t16 = space();
			div19 = element("div");
			input2 = element("input");
			t17 = space();
			div25 = element("div");
			div24 = element("div");
			div22 = element("div");
			t18 = text("Email");
			t19 = space();
			div23 = element("div");
			input3 = element("input");
			t20 = space();
			div29 = element("div");
			div28 = element("div");
			div26 = element("div");
			t21 = text("Password");
			t22 = space();
			div27 = element("div");
			input4 = element("input");
			t23 = space();
			div33 = element("div");
			div32 = element("div");
			div30 = element("div");
			t24 = text("Gender");
			t25 = space();
			div31 = element("div");
			label0 = element("label");
			input5 = element("input");
			t26 = text(" Male");
			t27 = space();
			label1 = element("label");
			input6 = element("input");
			t28 = text(" Female");
			t29 = space();
			label2 = element("label");
			input7 = element("input");
			t30 = text(" Other");
			t31 = space();
			div38 = element("div");
			div37 = element("div");
			div35 = element("div");
			div34 = element("div");
			t32 = space();
			div36 = element("div");
			input8 = element("input");
			t33 = space();
			div42 = element("div");
			div41 = element("div");
			div39 = element("div");
			t34 = space();
			div40 = element("div");
			label3 = element("label");
			input9 = element("input");
			t35 = text(" Agree with the terms and conditions");
			this.h();
		},

		l: function claim(nodes) {
			div44 = claim_element(nodes, "DIV", { class: true }, false);
			var div44_nodes = children(div44);

			div2 = claim_element(div44_nodes, "DIV", { class: true, id: true }, false);
			var div2_nodes = children(div2);

			span0 = claim_element(div2_nodes, "SPAN", { class: true, id: true }, false);
			var span0_nodes = children(span0);

			i = claim_element(span0_nodes, "I", { class: true }, false);
			var i_nodes = children(i);

			i_nodes.forEach(detach);
			span0_nodes.forEach(detach);
			t0 = claim_text(div2_nodes, "\n        ");

			div1 = claim_element(div2_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			div0 = claim_element(div1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			t1 = claim_text(div0_nodes, "It's a REAL form actually.");
			div0_nodes.forEach(detach);
			t2 = claim_text(div1_nodes, "\n            ");

			span1 = claim_element(div1_nodes, "SPAN", { class: true, id: true }, false);
			var span1_nodes = children(span1);

			t3 = claim_text(span1_nodes, "Try it yourself!");
			span1_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			t4 = claim_text(div44_nodes, "\n\n    \n    ");

			div10 = claim_element(div44_nodes, "DIV", { class: true }, false);
			var div10_nodes = children(div10);

			div8 = claim_element(div10_nodes, "DIV", { class: true }, false);
			var div8_nodes = children(div8);

			div7 = claim_element(div8_nodes, "DIV", { class: true }, false);
			var div7_nodes = children(div7);

			div6 = claim_element(div7_nodes, "DIV", { class: true }, false);
			var div6_nodes = children(div6);

			div3 = claim_element(div6_nodes, "DIV", { class: true }, false);
			var div3_nodes = children(div3);

			div3_nodes.forEach(detach);
			t5 = claim_text(div6_nodes, "\n                    ");

			div4 = claim_element(div6_nodes, "DIV", { class: true }, false);
			var div4_nodes = children(div4);

			div4_nodes.forEach(detach);
			t6 = claim_text(div6_nodes, "\n                    ");

			div5 = claim_element(div6_nodes, "DIV", { class: true }, false);
			var div5_nodes = children(div5);

			div5_nodes.forEach(detach);
			div6_nodes.forEach(detach);
			div7_nodes.forEach(detach);
			div8_nodes.forEach(detach);
			t7 = claim_text(div10_nodes, "\n        ");

			div9 = claim_element(div10_nodes, "DIV", { class: true }, false);
			var div9_nodes = children(div9);

			t8 = claim_text(div9_nodes, "Demo with form made by ");

			a = claim_element(div9_nodes, "A", { href: true, title: true, class: true }, false);
			var a_nodes = children(a);

			t9 = claim_text(a_nodes, "Tachyons");
			a_nodes.forEach(detach);
			div9_nodes.forEach(detach);
			div10_nodes.forEach(detach);
			t10 = claim_text(div44_nodes, "\n\n    \n    ");

			div43 = claim_element(div44_nodes, "DIV", { class: true }, false);
			var div43_nodes = children(div43);

			form = claim_element(div43_nodes, "FORM", { id: true, method: true }, false);
			var form_nodes = children(form);

			div17 = claim_element(form_nodes, "DIV", { class: true }, false);
			var div17_nodes = children(div17);

			div16 = claim_element(div17_nodes, "DIV", { class: true }, false);
			var div16_nodes = children(div16);

			div11 = claim_element(div16_nodes, "DIV", { class: true }, false);
			var div11_nodes = children(div11);

			t11 = claim_text(div11_nodes, "Full name");
			div11_nodes.forEach(detach);
			t12 = claim_text(div16_nodes, "\n                    ");

			div15 = claim_element(div16_nodes, "DIV", { class: true }, false);
			var div15_nodes = children(div15);

			div14 = claim_element(div15_nodes, "DIV", { class: true }, false);
			var div14_nodes = children(div14);

			div12 = claim_element(div14_nodes, "DIV", { class: true }, false);
			var div12_nodes = children(div12);

			input0 = claim_element(div12_nodes, "INPUT", { type: true, name: true, class: true }, false);
			var input0_nodes = children(input0);

			input0_nodes.forEach(detach);
			div12_nodes.forEach(detach);
			t13 = claim_text(div14_nodes, "\n                            ");

			div13 = claim_element(div14_nodes, "DIV", { class: true }, false);
			var div13_nodes = children(div13);

			input1 = claim_element(div13_nodes, "INPUT", { type: true, name: true, class: true }, false);
			var input1_nodes = children(input1);

			input1_nodes.forEach(detach);
			div13_nodes.forEach(detach);
			div14_nodes.forEach(detach);
			div15_nodes.forEach(detach);
			div16_nodes.forEach(detach);
			div17_nodes.forEach(detach);
			t14 = claim_text(form_nodes, "\n            ");

			div21 = claim_element(form_nodes, "DIV", { class: true }, false);
			var div21_nodes = children(div21);

			div20 = claim_element(div21_nodes, "DIV", { class: true }, false);
			var div20_nodes = children(div20);

			div18 = claim_element(div20_nodes, "DIV", { class: true }, false);
			var div18_nodes = children(div18);

			t15 = claim_text(div18_nodes, "Username");
			div18_nodes.forEach(detach);
			t16 = claim_text(div20_nodes, "\n                    ");

			div19 = claim_element(div20_nodes, "DIV", { class: true }, false);
			var div19_nodes = children(div19);

			input2 = claim_element(div19_nodes, "INPUT", { type: true, name: true, class: true }, false);
			var input2_nodes = children(input2);

			input2_nodes.forEach(detach);
			div19_nodes.forEach(detach);
			div20_nodes.forEach(detach);
			div21_nodes.forEach(detach);
			t17 = claim_text(form_nodes, "\n            ");

			div25 = claim_element(form_nodes, "DIV", { class: true }, false);
			var div25_nodes = children(div25);

			div24 = claim_element(div25_nodes, "DIV", { class: true }, false);
			var div24_nodes = children(div24);

			div22 = claim_element(div24_nodes, "DIV", { class: true }, false);
			var div22_nodes = children(div22);

			t18 = claim_text(div22_nodes, "Email");
			div22_nodes.forEach(detach);
			t19 = claim_text(div24_nodes, "\n                    ");

			div23 = claim_element(div24_nodes, "DIV", { class: true }, false);
			var div23_nodes = children(div23);

			input3 = claim_element(div23_nodes, "INPUT", { type: true, name: true, class: true }, false);
			var input3_nodes = children(input3);

			input3_nodes.forEach(detach);
			div23_nodes.forEach(detach);
			div24_nodes.forEach(detach);
			div25_nodes.forEach(detach);
			t20 = claim_text(form_nodes, "\n            ");

			div29 = claim_element(form_nodes, "DIV", { class: true }, false);
			var div29_nodes = children(div29);

			div28 = claim_element(div29_nodes, "DIV", { class: true }, false);
			var div28_nodes = children(div28);

			div26 = claim_element(div28_nodes, "DIV", { class: true }, false);
			var div26_nodes = children(div26);

			t21 = claim_text(div26_nodes, "Password");
			div26_nodes.forEach(detach);
			t22 = claim_text(div28_nodes, "\n                    ");

			div27 = claim_element(div28_nodes, "DIV", { class: true }, false);
			var div27_nodes = children(div27);

			input4 = claim_element(div27_nodes, "INPUT", { type: true, name: true, class: true }, false);
			var input4_nodes = children(input4);

			input4_nodes.forEach(detach);
			div27_nodes.forEach(detach);
			div28_nodes.forEach(detach);
			div29_nodes.forEach(detach);
			t23 = claim_text(form_nodes, "\n            ");

			div33 = claim_element(form_nodes, "DIV", { class: true }, false);
			var div33_nodes = children(div33);

			div32 = claim_element(div33_nodes, "DIV", { class: true }, false);
			var div32_nodes = children(div32);

			div30 = claim_element(div32_nodes, "DIV", { class: true }, false);
			var div30_nodes = children(div30);

			t24 = claim_text(div30_nodes, "Gender");
			div30_nodes.forEach(detach);
			t25 = claim_text(div32_nodes, "\n                    ");

			div31 = claim_element(div32_nodes, "DIV", { class: true }, false);
			var div31_nodes = children(div31);

			label0 = claim_element(div31_nodes, "LABEL", { for: true, class: true }, false);
			var label0_nodes = children(label0);

			input5 = claim_element(label0_nodes, "INPUT", { class: true, type: true, name: true, id: true, value: true }, false);
			var input5_nodes = children(input5);

			input5_nodes.forEach(detach);
			t26 = claim_text(label0_nodes, " Male");
			label0_nodes.forEach(detach);
			t27 = claim_text(div31_nodes, "\n                        ");

			label1 = claim_element(div31_nodes, "LABEL", { for: true, class: true }, false);
			var label1_nodes = children(label1);

			input6 = claim_element(label1_nodes, "INPUT", { class: true, type: true, name: true, id: true, value: true }, false);
			var input6_nodes = children(input6);

			input6_nodes.forEach(detach);
			t28 = claim_text(label1_nodes, " Female");
			label1_nodes.forEach(detach);
			t29 = claim_text(div31_nodes, "\n                        ");

			label2 = claim_element(div31_nodes, "LABEL", { for: true, class: true }, false);
			var label2_nodes = children(label2);

			input7 = claim_element(label2_nodes, "INPUT", { class: true, type: true, name: true, id: true, value: true }, false);
			var input7_nodes = children(input7);

			input7_nodes.forEach(detach);
			t30 = claim_text(label2_nodes, " Other");
			label2_nodes.forEach(detach);
			div31_nodes.forEach(detach);
			div32_nodes.forEach(detach);
			div33_nodes.forEach(detach);
			t31 = claim_text(form_nodes, "\n            ");

			div38 = claim_element(form_nodes, "DIV", { class: true }, false);
			var div38_nodes = children(div38);

			div37 = claim_element(div38_nodes, "DIV", { class: true }, false);
			var div37_nodes = children(div37);

			div35 = claim_element(div37_nodes, "DIV", { class: true }, false);
			var div35_nodes = children(div35);

			div34 = claim_element(div35_nodes, "DIV", { id: true }, false);
			var div34_nodes = children(div34);

			div34_nodes.forEach(detach);
			div35_nodes.forEach(detach);
			t32 = claim_text(div37_nodes, "\n                    ");

			div36 = claim_element(div37_nodes, "DIV", { class: true }, false);
			var div36_nodes = children(div36);

			input8 = claim_element(div36_nodes, "INPUT", { type: true, name: true, class: true }, false);
			var input8_nodes = children(input8);

			input8_nodes.forEach(detach);
			div36_nodes.forEach(detach);
			div37_nodes.forEach(detach);
			div38_nodes.forEach(detach);
			t33 = claim_text(form_nodes, "\n            ");

			div42 = claim_element(form_nodes, "DIV", { class: true }, false);
			var div42_nodes = children(div42);

			div41 = claim_element(div42_nodes, "DIV", { class: true }, false);
			var div41_nodes = children(div41);

			div39 = claim_element(div41_nodes, "DIV", { class: true }, false);
			var div39_nodes = children(div39);

			div39_nodes.forEach(detach);
			t34 = claim_text(div41_nodes, "\n                    ");

			div40 = claim_element(div41_nodes, "DIV", { class: true }, false);
			var div40_nodes = children(div40);

			label3 = claim_element(div40_nodes, "LABEL", { class: true }, false);
			var label3_nodes = children(label3);

			input9 = claim_element(label3_nodes, "INPUT", { class: true, type: true, name: true, value: true }, false);
			var input9_nodes = children(input9);

			input9_nodes.forEach(detach);
			t35 = claim_text(label3_nodes, " Agree with the terms and conditions");
			label3_nodes.forEach(detach);
			div40_nodes.forEach(detach);
			div41_nodes.forEach(detach);
			div42_nodes.forEach(detach);
			form_nodes.forEach(detach);
			div43_nodes.forEach(detach);
			div44_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			i.className = "fa fa-youtube-play fa-4x";
			add_location(i, file, 3, 43, 270);
			span0.className = "pointer";
			span0.id = "playBtn";
			add_location(span0, file, 3, 8, 235);
			div0.className = "pa2";
			add_location(div0, file, 5, 12, 368);
			span1.className = "pointer underline";
			span1.id = "tryBtn";
			add_location(span1, file, 6, 12, 430);
			div1.className = "dn f2 fw6 white";
			add_location(div1, file, 4, 8, 326);
			div2.className = "absolute bg-black-40 top-0 left-0 w-100 h-100 flex flex-column items-center justify-center justify-tc tc z-999";
			div2.id = "demoOverlay";
			add_location(div2, file, 2, 4, 85);
			div3.className = "dib br-100 h1 w1 bg-red";
			add_location(div3, file, 15, 20, 735);
			div4.className = "dib br-100 h1 w1 bg-yellow";
			add_location(div4, file, 16, 20, 799);
			div5.className = "dib br-100 h1 w1 bg-green";
			add_location(div5, file, 17, 20, 866);
			div6.className = "dtc v-mid";
			add_location(div6, file, 14, 16, 691);
			div7.className = "dt h-100";
			add_location(div7, file, 13, 12, 652);
			div8.className = "absolute top-0 left-1 h-100";
			add_location(div8, file, 12, 8, 598);
			a.href = "/guide/plugins/tachyons";
			a.title = "Tachyons framework";
			a.className = "blue dim link";
			add_location(a, file, 21, 47, 1016);
			div9.className = "tc";
			add_location(div9, file, 21, 8, 977);
			div10.className = "pa2 relative bg-light-gray";
			add_location(div10, file, 11, 4, 549);
			div11.className = "fl w-25 pa2";
			add_location(div11, file, 29, 20, 1310);
			attr(input0, "type", "text");
			input0.name = "firstName";
			input0.className = "input-reset ba b--black-20 pa2 mb2 db w-100";
			add_location(input0, file, 33, 32, 1522);
			div12.className = "fl w-50";
			add_location(div12, file, 32, 28, 1468);
			attr(input1, "type", "text");
			input1.name = "lastName";
			input1.className = "input-reset ba b--black-20 pa2 mb2 db w-100";
			add_location(input1, file, 36, 32, 1730);
			div13.className = "fl w-50";
			add_location(div13, file, 35, 28, 1676);
			div14.className = "fl w-100";
			add_location(div14, file, 31, 24, 1417);
			div15.className = "fl w-75";
			add_location(div15, file, 30, 20, 1371);
			div16.className = "fl w-100";
			add_location(div16, file, 28, 16, 1267);
			div17.className = "cf mb2";
			add_location(div17, file, 27, 12, 1230);
			div18.className = "fl w-25 pa2";
			add_location(div18, file, 44, 20, 2047);
			attr(input2, "type", "text");
			input2.name = "username";
			input2.className = "input-reset ba b--black-20 pa2 mb2 db w-100";
			add_location(input2, file, 46, 24, 2153);
			div19.className = "fl w-50";
			add_location(div19, file, 45, 20, 2107);
			div20.className = "fl w-100";
			add_location(div20, file, 43, 16, 2004);
			div21.className = "cf mb2";
			add_location(div21, file, 42, 12, 1967);
			div22.className = "fl w-25 pa2";
			add_location(div22, file, 52, 20, 2404);
			attr(input3, "type", "text");
			input3.name = "email";
			input3.className = "input-reset ba b--black-20 pa2 mb2 db w-100";
			add_location(input3, file, 54, 24, 2507);
			div23.className = "fl w-50";
			add_location(div23, file, 53, 20, 2461);
			div24.className = "fl w-100";
			add_location(div24, file, 51, 16, 2361);
			div25.className = "cf mb2";
			add_location(div25, file, 50, 12, 2324);
			div26.className = "fl w-25 pa2";
			add_location(div26, file, 60, 20, 2755);
			attr(input4, "type", "password");
			input4.name = "password";
			input4.className = "input-reset ba b--black-20 pa2 mb2 db w-100";
			add_location(input4, file, 62, 24, 2861);
			div27.className = "fl w-50";
			add_location(div27, file, 61, 20, 2815);
			div28.className = "fl w-100";
			add_location(div28, file, 59, 16, 2712);
			div29.className = "cf mb2";
			add_location(div29, file, 58, 12, 2675);
			div30.className = "fl w-25 pa2";
			add_location(div30, file, 68, 20, 3116);
			input5.className = "mr2";
			attr(input5, "type", "radio");
			input5.name = "gender";
			input5.id = "genderMale";
			input5.value = "male";
			add_location(input5, file, 70, 68, 3264);
			label0.htmlFor = "genderMale";
			label0.className = "lh-copy mr4";
			add_location(label0, file, 70, 24, 3220);
			input6.className = "mr2";
			attr(input6, "type", "radio");
			input6.name = "gender";
			input6.id = "genderFemale";
			input6.value = "female";
			add_location(input6, file, 71, 70, 3425);
			label1.htmlFor = "genderFemale";
			label1.className = "lh-copy mr4";
			add_location(label1, file, 71, 24, 3379);
			input7.className = "mr2";
			attr(input7, "type", "radio");
			input7.name = "gender";
			input7.id = "genderOther";
			input7.value = "other";
			add_location(input7, file, 72, 65, 3587);
			label2.htmlFor = "genderOther";
			label2.className = "lh-copy";
			add_location(label2, file, 72, 24, 3546);
			div31.className = "fl w-50";
			add_location(div31, file, 69, 20, 3174);
			div32.className = "fl w-100";
			add_location(div32, file, 67, 16, 3073);
			div33.className = "cf mb2";
			add_location(div33, file, 66, 12, 3036);
			div34.id = "captchaOperation";
			add_location(div34, file, 78, 45, 3867);
			div35.className = "fl w-25 pa2";
			add_location(div35, file, 78, 20, 3842);
			attr(input8, "type", "text");
			input8.name = "captcha";
			input8.className = "input-reset ba b--black-20 pa2 mb2 db w-100";
			add_location(input8, file, 80, 24, 3973);
			div36.className = "fl w-50";
			add_location(div36, file, 79, 20, 3927);
			div37.className = "fl w-100";
			add_location(div37, file, 77, 16, 3799);
			div38.className = "cf mb2";
			add_location(div38, file, 76, 12, 3762);
			div39.className = "fl w-25 pa2";
			add_location(div39, file, 86, 20, 4223);
			input9.className = "mr2";
			attr(input9, "type", "checkbox");
			input9.name = "agree";
			input9.value = "agree";
			add_location(input9, file, 88, 47, 4344);
			label3.className = "lh-copy";
			add_location(label3, file, 88, 24, 4321);
			div40.className = "fl w-50";
			add_location(div40, file, 87, 20, 4275);
			div41.className = "fl w-100";
			add_location(div41, file, 85, 16, 4180);
			div42.className = "cf mb2";
			add_location(div42, file, 84, 12, 4143);
			form.id = "demoForm";
			form.method = "post";
			add_location(form, file, 26, 8, 1183);
			div43.className = "pa2";
			add_location(div43, file, 25, 4, 1157);
			div44.className = "near-black b--light-gray br2 demo relative tl svelte-euxpvl";
			add_location(div44, file, 0, 0, 0);
		},

		m: function mount(target, anchor) {
			insert(target, div44, anchor);
			append(div44, div2);
			append(div2, span0);
			append(span0, i);
			append(div2, t0);
			append(div2, div1);
			append(div1, div0);
			append(div0, t1);
			append(div1, t2);
			append(div1, span1);
			append(span1, t3);
			append(div44, t4);
			append(div44, div10);
			append(div10, div8);
			append(div8, div7);
			append(div7, div6);
			append(div6, div3);
			append(div6, t5);
			append(div6, div4);
			append(div6, t6);
			append(div6, div5);
			append(div10, t7);
			append(div10, div9);
			append(div9, t8);
			append(div9, a);
			append(a, t9);
			append(div44, t10);
			append(div44, div43);
			append(div43, form);
			append(form, div17);
			append(div17, div16);
			append(div16, div11);
			append(div11, t11);
			append(div16, t12);
			append(div16, div15);
			append(div15, div14);
			append(div14, div12);
			append(div12, input0);
			append(div14, t13);
			append(div14, div13);
			append(div13, input1);
			append(form, t14);
			append(form, div21);
			append(div21, div20);
			append(div20, div18);
			append(div18, t15);
			append(div20, t16);
			append(div20, div19);
			append(div19, input2);
			append(form, t17);
			append(form, div25);
			append(div25, div24);
			append(div24, div22);
			append(div22, t18);
			append(div24, t19);
			append(div24, div23);
			append(div23, input3);
			append(form, t20);
			append(form, div29);
			append(div29, div28);
			append(div28, div26);
			append(div26, t21);
			append(div28, t22);
			append(div28, div27);
			append(div27, input4);
			append(form, t23);
			append(form, div33);
			append(div33, div32);
			append(div32, div30);
			append(div30, t24);
			append(div32, t25);
			append(div32, div31);
			append(div31, label0);
			append(label0, input5);
			append(label0, t26);
			append(div31, t27);
			append(div31, label1);
			append(label1, input6);
			append(label1, t28);
			append(div31, t29);
			append(div31, label2);
			append(label2, input7);
			append(label2, t30);
			append(form, t31);
			append(form, div38);
			append(div38, div37);
			append(div37, div35);
			append(div35, div34);
			append(div37, t32);
			append(div37, div36);
			append(div36, input8);
			append(form, t33);
			append(form, div42);
			append(div42, div41);
			append(div41, div39);
			append(div41, t34);
			append(div41, div40);
			append(div40, label3);
			append(label3, input9);
			append(label3, t35);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(div44);
			}
		}
	};
}

function instance($$self) {
	

onMount(() => {
    // Generate a simple captcha
    const randomNumber = (min, max) => {
        return Math.floor(Math.random() * (max - min + 1) + min);
    };
    const random = [randomNumber(1, 100), randomNumber(1, 200)];
    document.getElementById('captchaOperation').innerHTML = [random[0], '+', random[1], '='].join(' ');

    const form = document.getElementById('demoForm');
    const fv = formValidation(form, {
        fields: {
            firstName: {
                validators: {
                    notEmpty: {
                        message: 'The first name is required'
                    }
                }
            },
            lastName: {
                validators: {
                    notEmpty: {
                        message: 'The last name is required'
                    }
                }
            },
            username: {
                validators: {
                    notEmpty: {
                        message: 'The username is required'
                    },
                    stringLength: {
                        min: 6,
                        max: 30,
                        message: 'The username must be more than 6 and less than 30 characters long'
                    },
                    regexp: {
                        regexp: /^[a-zA-Z0-9_]+$/,
                        message: 'The username can only consist of alphabetical, number and underscore'
                    }
                }
            },
            email: {
                validators: {
                    notEmpty: {
                        message: 'The email address is required'
                    },
                    emailAddress: {
                        message: 'The input is not a valid email address'
                    }
                }
            },
            password: {
                validators: {
                    notEmpty: {
                        message: 'The password is required'
                    },
                    stringLength: {
                        min: 8,
                        message: 'The password must have at least 8 characters'
                    },
                    different: {
                        message: 'The password cannot be the same as username',
                        compare: () => {
                            return form.querySelector('[name="username"]').value;
                        }
                    }
                }
            },
            gender: {
                validators: {
                    notEmpty: {
                        message: 'The gender is required'
                    }
                }
            },
            captcha: {
                validators: {
                    callback: {
                        message: 'Wrong answer',
                        callback: (input) => {
                            const items = document.getElementById('captchaOperation').innerHTML.split(' ');
                            const sum = parseInt(items[0]) + parseInt(items[2]);
                            return input.value == sum;
                        }
                    }
                }
            },
            agree: {
                validators: {
                    notEmpty: {
                        message: 'You must agree with the terms and conditions'
                    }
                }
            }
        },
        plugins: {
            trigger: new Trigger(),
            tachyons: new Tachyons(),
            icon: new Icon({
                valid: 'fa fa-check',
                invalid: 'fa fa-times',
                validating: 'fa fa-refresh'
            }),
            typingAnimation: new TypingAnimation({
                autoPlay: false,
                data: {
                    firstName: ['', 'J', 'John'],
                    lastName: ['', 'S', 'Smith'],
                    username: ['', 'j', 'john', 'john#', 'johnsmith'],
                    email: ['', 'j', 'john', 'johnsmith@', 'johnsmith@gmail.com'],
                    password: ['', 't', 'this', 'thisis', 'this@is#Password'],
                    captcha: [`${randomNumber(1, random[0] + random[1] - 1)}`, `${randomNumber(random[0] + random[1] + 1, random[0] + random[1] + 100)}`, `${random[0] + random[1]}`]
                }
            })
        }
    });

    const demoOverlay = document.getElementById('demoOverlay');

    document.getElementById('playBtn').addEventListener('click', () => {
        classSet(demoOverlay, {
            'flex': false,
            'dn': true,
        });

        fv.resetForm(true).getPlugin('typingAnimation').play().then((fieldIndex) => {
            if (fieldIndex === Object.keys(fv.getFields()).length) {
                classSet(demoOverlay, {
                    'flex z-999': true,
                    'dn': false,
                });
                // All field validations are emulated
                classSet(document.getElementById('tryBtn').parentNode, {
                    dn: false,
                });
            }
        });
    });

    document.getElementById('tryBtn').addEventListener('click', () => {
        classSet(demoOverlay, {
            'flex z-999': false,
            'dn': true,
        });

        // Change the captcha
        const random = [randomNumber(1, 100), randomNumber(1, 200)];
        document.getElementById('captchaOperation').innerHTML = [random[0], '+', random[1], '='].join(' ');

        // Reset the form
        fv.resetForm(true);

        // Focus on the first field
        form.querySelector('[name="firstName"]').focus();
    });

    return () => {
        fv.destroy();
    };
});

	return {};
}

class Tachyons_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

/* src/components/Header.svelte generated by Svelte v3.4.2 */

const file$1 = "src/components/Header.svelte";

function create_fragment$1(ctx) {
	var header, div, a0, t0, t1, a1, t2, t3, a2, t4, t5, a3, t6, t7, a4, t8, t9, a5, t10, t11_value = siteData.version, t11, dispose;

	return {
		c: function create() {
			header = element("header");
			div = element("div");
			a0 = element("a");
			t0 = text("Guide");
			t1 = space();
			a1 = element("a");
			t2 = text("Validators");
			t3 = space();
			a2 = element("a");
			t4 = text("Plugins");
			t5 = space();
			a3 = element("a");
			t6 = text("Examples");
			t7 = space();
			a4 = element("a");
			t8 = text("Updates");
			t9 = space();
			a5 = element("a");
			t10 = text("Download v");
			t11 = text(t11_value);
			this.h();
		},

		l: function claim(nodes) {
			header = claim_element(nodes, "HEADER", { class: true }, false);
			var header_nodes = children(header);

			div = claim_element(header_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			a0 = claim_element(div_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t0 = claim_text(a0_nodes, "Guide");
			a0_nodes.forEach(detach);
			t1 = claim_text(div_nodes, "\n        ");

			a1 = claim_element(div_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t2 = claim_text(a1_nodes, "Validators");
			a1_nodes.forEach(detach);
			t3 = claim_text(div_nodes, "\n        ");

			a2 = claim_element(div_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t4 = claim_text(a2_nodes, "Plugins");
			a2_nodes.forEach(detach);
			t5 = claim_text(div_nodes, "\n        ");

			a3 = claim_element(div_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t6 = claim_text(a3_nodes, "Examples");
			a3_nodes.forEach(detach);
			t7 = claim_text(div_nodes, "\n        ");

			a4 = claim_element(div_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t8 = claim_text(a4_nodes, "Updates");
			a4_nodes.forEach(detach);
			t9 = claim_text(div_nodes, "\n        ");

			a5 = claim_element(div_nodes, "A", { href: true, title: true, class: true }, false);
			var a5_nodes = children(a5);

			t10 = claim_text(a5_nodes, "Download v");
			t11 = claim_text(a5_nodes, t11_value);
			a5_nodes.forEach(detach);
			div_nodes.forEach(detach);
			header_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			a0.href = "/guide";
			a0.className = "link white";
			add_location(a0, file$1, 2, 8, 152);
			a1.href = "/guide/validators";
			a1.className = "link white";
			add_location(a1, file$1, 3, 8, 206);
			a2.href = "/guide/plugins";
			a2.className = "link white";
			add_location(a2, file$1, 4, 8, 276);
			a3.href = "/guide/examples";
			a3.className = "link white";
			add_location(a3, file$1, 5, 8, 340);
			a4.href = "/updates";
			a4.className = "link white";
			add_location(a4, file$1, 6, 8, 406);
			a5.href = "/download";
			a5.title = "Download";
			a5.className = "fw6 bg-red white ph3 pv2 br2 grow no-underline";
			add_location(a5, file$1, 7, 8, 464);
			div.className = "flex justify-around items-center";
			add_location(div, file$1, 1, 4, 97);
			header.className = "dn fixed w-100 pa3 top-0 f4 bg-dark-blue white z-9999";
			add_location(header, file$1, 0, 0, 0);
			dispose = listen(window, "scroll", ctx.onScroll);
		},

		m: function mount(target, anchor) {
			insert(target, header, anchor);
			append(header, div);
			append(div, a0);
			append(a0, t0);
			append(div, t1);
			append(div, a1);
			append(a1, t2);
			append(div, t3);
			append(div, a2);
			append(a2, t4);
			append(div, t5);
			append(div, a3);
			append(a3, t6);
			append(div, t7);
			append(div, a4);
			append(a4, t8);
			append(div, t9);
			append(div, a5);
			append(a5, t10);
			append(a5, t11);
			add_binding_callback(() => ctx.header_binding(header, null));
		},

		p: function update(changed, ctx) {
			if (changed.items) {
				ctx.header_binding(null, header);
				ctx.header_binding(header, null);
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(header);
			}

			ctx.header_binding(null, header);
			dispose();
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let container;

const onScroll = () => {
    container.classList.remove('dn');
};

	function header_binding($$node, check) {
		container = $$node;
		$$invalidate('container', container);
	}

	return { container, onScroll, header_binding };
}

class Header extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, []);
	}
}

/* src/components/Testimonial.svelte generated by Svelte v3.4.2 */

const file$2 = "src/components/Testimonial.svelte";

function create_fragment$2(ctx) {
	var div, blockquote, p, t0, a, img, img_src_value, t1, cite, t2, t3, a_href_value, current;

	const default_slot_1 = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_1, ctx, null);

	return {
		c: function create() {
			div = element("div");
			blockquote = element("blockquote");
			p = element("p");

			if (default_slot) default_slot.c();
			t0 = space();
			a = element("a");
			img = element("img");
			t1 = text(" — ");
			cite = element("cite");
			t2 = text("@");
			t3 = text(ctx.user);
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			blockquote = claim_element(div_nodes, "BLOCKQUOTE", { class: true }, false);
			var blockquote_nodes = children(blockquote);

			p = claim_element(blockquote_nodes, "P", { class: true }, false);
			var p_nodes = children(p);

			if (default_slot) default_slot.l(p_nodes);
			p_nodes.forEach(detach);
			t0 = claim_text(blockquote_nodes, "\n        ");

			a = claim_element(blockquote_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			img = claim_element(a_nodes, "IMG", { src: true, alt: true, class: true }, false);
			var img_nodes = children(img);

			img_nodes.forEach(detach);
			t1 = claim_text(a_nodes, " — ");

			cite = claim_element(a_nodes, "CITE", {}, false);
			var cite_nodes = children(cite);

			t2 = claim_text(cite_nodes, "@");
			t3 = claim_text(cite_nodes, ctx.user);
			cite_nodes.forEach(detach);
			a_nodes.forEach(detach);
			blockquote_nodes.forEach(detach);
			div_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			p.className = "lh-copy";
			add_location(p, file$2, 13, 8, 210);
			img.src = img_src_value = "/testimonial/" + ctx.avatar;
			img.alt = ctx.user;
			img.className = "br-100 h2 w2 v-mid";
			add_location(img, file$2, 17, 12, 353);
			add_location(cite, file$2, 17, 96, 437);
			a.href = a_href_value = "https://twitter.com/" + ctx.user;
			a.className = "link no-underline";
			add_location(a, file$2, 16, 8, 277);
			blockquote.className = "ml0 mt0 pl3 black-90 bl bw2 b--blue";
			add_location(blockquote, file$2, 12, 4, 145);
			div.className = "fl w-100 w-third-ns pa2";
			add_location(div, file$2, 11, 0, 103);
		},

		m: function mount(target, anchor) {
			insert(target, div, anchor);
			append(div, blockquote);
			append(blockquote, p);

			if (default_slot) {
				default_slot.m(p, null);
			}

			append(blockquote, t0);
			append(blockquote, a);
			append(a, img);
			append(a, t1);
			append(a, cite);
			append(cite, t2);
			append(cite, t3);
			current = true;
		},

		p: function update(changed, ctx) {
			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(get_slot_changes(default_slot_1, ctx, changed, null), get_slot_context(default_slot_1, ctx, null));
			}

			if ((!current || changed.avatar) && img_src_value !== (img_src_value = "/testimonial/" + ctx.avatar)) {
				img.src = img_src_value;
			}

			if (!current || changed.user) {
				img.alt = ctx.user;
				set_data(t3, ctx.user);
			}

			if ((!current || changed.user) && a_href_value !== (a_href_value = "https://twitter.com/" + ctx.user)) {
				a.href = a_href_value;
			}
		},

		i: function intro(local) {
			if (current) return;
			if (default_slot && default_slot.i) default_slot.i(local);
			current = true;
		},

		o: function outro(local) {
			if (default_slot && default_slot.o) default_slot.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div);
			}

			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	// Public props
let { user = '', avatar = '' } = $$props;

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('user' in $$props) $$invalidate('user', user = $$props.user);
		if ('avatar' in $$props) $$invalidate('avatar', avatar = $$props.avatar);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	return { user, avatar, $$slots, $$scope };
}

class Testimonial extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, ["user", "avatar"]);
	}

	get user() {
		throw new Error("<Testimonial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set user(value) {
		throw new Error("<Testimonial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get avatar() {
		throw new Error("<Testimonial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set avatar(value) {
		throw new Error("<Testimonial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var sampleDemoCode = `<!doctype html>
<html>
<head>
    <link-tag rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link-tag rel="stylesheet" href="https://unpkg.com/tachyons@4.10.0/css/tachyons.min.css">
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form fix-html-id="demoForm" method="post">
        <div class="cf mb2">
            <div class="fl w-100">
                <div class="fl w-25 pa2">Full name</div>
                <div class="fl w-75">
                    <div class="fl w-100">
                        <div class="fl w-50">
                            <input type="text" name="firstName" class="input-reset ba b--black-20 pa2 mb2 db w-100" />
                        </div>
                        <div class="fl w-50">
                            <input type="text" name="lastName" class="input-reset ba b--black-20 pa2 mb2 db w-100" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="cf mb2">
            <div class="fl w-100">
                <div class="fl w-25 pa2">Username</div>
                <div class="fl w-50">
                    <input type="text" name="username" class="input-reset ba b--black-20 pa2 mb2 db w-100" />
                </div>
            </div>
        </div>
        <div class="cf mb2">
            <div class="fl w-100">
                <div class="fl w-25 pa2">Email</div>
                <div class="fl w-50">
                    <input type="text" name="email" class="input-reset ba b--black-20 pa2 mb2 db w-100" />
                </div>
            </div>
        </div>
        <div class="cf mb2">
            <div class="fl w-100">
                <div class="fl w-25 pa2">Password</div>
                <div class="fl w-50">
                    <input type="password" name="password" class="input-reset ba b--black-20 pa2 mb2 db w-100" />
                </div>
            </div>
        </div>
        <div class="cf mb2">
            <div class="fl w-100">
                <div class="fl w-25 pa2">Gender</div>
                <div class="fl w-50">
                    <label for="genderMale" class="lh-copy mr4">
                        <input class="mr2" type="radio" name="gender" fix-html-id="genderMale" value="male" /> Male
                    </label>
                    <label for="genderFemale" class="lh-copy mr4">
                        <input class="mr2" type="radio" name="gender" fix-html-id="genderFemale" value="female" /> Female
                    </label>
                    <label for="genderOther" class="lh-copy">
                        <input class="mr2" type="radio" name="gender" fix-html-id="genderOther" value="other" /> Other
                    </label>
                </div>
            </div>
        </div>
        <div class="cf mb2">
            <div class="fl w-100">
                <div class="fl w-25 pa2"><div fix-html-id="captchaOperation"></div></div>
                <div class="fl w-50">
                    <input type="text" name="captcha" class="input-reset ba b--black-20 pa2 mb2 db w-100" />
                </div>
            </div>
        </div>
        <div class="cf mb2">
            <div class="fl w-100">
                <div class="fl w-25 pa2"></div>
                <div class="fl w-50">
                    <label class="lh-copy">
                        <input class="mr2" type="checkbox" name="agree" value="agree" /> Agree with the terms and conditions
                    </label>
                </div>
            </div>
        </div>
        <div class="cf mb2">
            <div class="fl w-100">
                <div class="fl w-25 pa2"></div>
                <div class="fl w-50">
                    <button type="submit" class="ba b--black-20 bg-blue white ph3 pv2 br2">Submit</button>
                </div>
            </div>
        </div>
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>    
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/plugins/Tachyons.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    // Generate a simple captcha
    const randomNumber = function(min, max) {
        return Math.floor(Math.random() * (max - min + 1) + min);
    };
    const random = [randomNumber(1, 100), randomNumber(1, 200)];
    document.getElementById('captchaOperation').innerHTML = [random[0], '+', random[1], '='].join(' ');

    const form = document.getElementById('demoForm');
    FormValidation.formValidation(form, {
        fields: {
            firstName: {
                validators: {
                    notEmpty: {
                        message: 'The first name is required'
                    }
                }
            },
            lastName: {
                validators: {
                    notEmpty: {
                        message: 'The last name is required'
                    }
                }
            },
            username: {
                validators: {
                    notEmpty: {
                        message: 'The username is required'
                    },
                    stringLength: {
                        min: 6,
                        max: 30,
                        message: 'The username must be more than 6 and less than 30 characters long'
                    },
                    regexp: {
                        regexp: /^[a-zA-Z0-9_]+$/,
                        message: 'The username can only consist of alphabetical, number and underscore'
                    }
                }
            },
            email: {
                validators: {
                    notEmpty: {
                        message: 'The email address is required'
                    },
                    emailAddress: {
                        message: 'The input is not a valid email address'
                    }
                }
            },
            password: {
                validators: {
                    notEmpty: {
                        message: 'The password is required'
                    },
                    stringLength: {
                        min: 8,
                        message: 'The password must have at least 8 characters'
                    },
                    different: {
                        message: 'The password cannot be the same as username',
                        compare: function() {
                            return form.querySelector('[name="username"]').value;
                        }
                    }
                }
            },
            gender: {
                validators: {
                    notEmpty: {
                        message: 'The gender is required'
                    }
                }
            },
            captcha: {
                validators: {
                    callback: {
                        message: 'Wrong answer',
                        callback: function(input) {
                            const items = document.getElementById('captchaOperation').innerHTML.split(' ');
                            const sum = parseInt(items[0]) + parseInt(items[2]);
                            return input.value == sum;
                        }
                    }
                }
            },
            agree: {
                validators: {
                    notEmpty: {
                        message: 'You must agree with the terms and conditions'
                    }
                }
            }
        },
        plugins: {
            trigger: new FormValidation.plugins.Trigger(),
            tachyons: new FormValidation.plugins.Tachyons(),
            submitButton: new FormValidation.plugins.SubmitButton(),
            icon: new FormValidation.plugins.Icon({
                valid: 'fa fa-check',
                invalid: 'fa fa-times',
                validating: 'fa fa-refresh'
            }),
        }
    });  
});
</script-tag>
</body>
</html>
`;

/* src/routes/index.svelte generated by Svelte v3.4.2 */

const file$3 = "src/routes/index.svelte";

// (43:12) <Tabs titles={["<span class='white'>Demo</span>", "<span class='white'>Code</span>"]}>
function create_default_slot_42(ctx) {
	var div0, t, div1, current;

	var typed = new Tachyons_1({ $$inline: true });

	var samplecode = new SampleCode({
		props: {
		lang: "html",
		code: sampleDemoCode,
		maxHeight: "300px"
	},
		$$inline: true
	});

	return {
		c: function create() {
			div0 = element("div");
			typed.$$.fragment.c();
			t = space();
			div1 = element("div");
			samplecode.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			typed.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach);
			t = claim_text(nodes, "\n                ");

			div1 = claim_element(nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			samplecode.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			div0.className = "relative bg-white";
			add_location(div0, file$3, 43, 16, 1165);
			div1.className = "dn";
			add_location(div1, file$3, 44, 16, 1228);
		},

		m: function mount(target, anchor) {
			insert(target, div0, anchor);
			mount_component(typed, div0, null);
			insert(target, t, anchor);
			insert(target, div1, anchor);
			mount_component(samplecode, div1, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var samplecode_changes = {};
			if (changed.sampleDemoCode) samplecode_changes.code = sampleDemoCode;
			samplecode.$set(samplecode_changes);
		},

		i: function intro(local) {
			if (current) return;
			typed.$$.fragment.i(local);

			samplecode.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			typed.$$.fragment.o(local);
			samplecode.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div0);
			}

			typed.$destroy();

			if (detaching) {
				detach(t);
				detach(div1);
			}

			samplecode.$destroy();
		}
	};
}

// (109:8) <Tabs titles={["Unit tests", "End-to-end tests"]}>
function create_default_slot_41(ctx) {
	var div0, t, div1, current;

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
import { expect } from 'chai';
import isbn from '../../src/js/validators/isbn';

describe('Test isbn validator', () => {
    it('isbn10 hyphen', () => {
        const samples = [
            '99921-58-10-7', '9971-5-0210-0',
            '960-425-059-0', '80-902734-1-6',
        ];
        samples.forEach(sample => {
            const result = isbn().validate({ value: sample });
            expect(result.valid).to.be.true;
        });
    });
});
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
module.exports = {
    'Test Alias plugin': (browser) => {
        browser
            .url(
                browser.launchUrl + '/demo/plugins/alias.html'
            )
            .setValue(
                'input[name="email"]',
                ['invalid.email', '\u0008']
            )
            .waitForElementVisible(
                '[data-validator][data-field="email"]', 100
            )
            .assert.containsText(
                '[data-validator][data-field="email"]',
                'The email address is not valid'
            )
            .end();
    }
};
` },
		$$inline: true
	});

	return {
		c: function create() {
			div0 = element("div");
			samplecode0.$$.fragment.c();
			t = space();
			div1 = element("div");
			samplecode1.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", {}, false);
			var div0_nodes = children(div0);

			samplecode0.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach);
			t = claim_text(nodes, "\n            ");

			div1 = claim_element(nodes, "DIV", {}, false);
			var div1_nodes = children(div1);

			samplecode1.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			add_location(div0, file$3, 109, 12, 3645);
			add_location(div1, file$3, 128, 12, 4188);
		},

		m: function mount(target, anchor) {
			insert(target, div0, anchor);
			mount_component(samplecode0, div0, null);
			insert(target, t, anchor);
			insert(target, div1, anchor);
			mount_component(samplecode1, div1, null);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div0);
			}

			samplecode0.$destroy();

			if (detaching) {
				detach(t);
				detach(div1);
			}

			samplecode1.$destroy();
		}
	};
}

// (171:12) <Card target="/guide/validators/callback" title="callback">
function create_default_slot_40(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Check if the input value passes a callback method");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Check if the input value passes a callback method");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (172:12) <Card target="/guide/validators/credit-card" title="creditCard">
function create_default_slot_39(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Validate a credit card number");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Validate a credit card number");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (173:12) <Card target="/guide/validators/date" title="date">
function create_default_slot_38(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Validate a date");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Validate a date");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (174:12) <Card target="/guide/validators/promise" title="promise">
function create_default_slot_37(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Use a Promise to validate value");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Use a Promise to validate value");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (175:12) <Card target="/guide/validators/remote" title="remote">
function create_default_slot_36(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Perform remote checking via Ajax request");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Perform remote checking via Ajax request");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (176:12) <Card target="/guide/validators/iban" title="iban">
function create_default_slot_35(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Validate an International Bank Account Number");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Validate an International Bank Account Number");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (177:12) <Card target="/guide/validators/id" title="id">
function create_default_slot_34(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Validate an identification number");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Validate an identification number");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (178:12) <Card target="/guide/validators/phone" title="phone">
function create_default_slot_33(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Validate a phone number");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Validate a phone number");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (179:12) <Card target="/guide/validators/vat" title="vat">
function create_default_slot_32(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Validate a VAT number");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Validate a VAT number");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (170:8) <Cards>
function create_default_slot_31(ctx) {
	var t0, t1, t2, t3, t4, t5, t6, t7, current;

	var card0 = new Card({
		props: {
		target: "/guide/validators/callback",
		title: "callback",
		$$slots: { default: [create_default_slot_40] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card1 = new Card({
		props: {
		target: "/guide/validators/credit-card",
		title: "creditCard",
		$$slots: { default: [create_default_slot_39] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card2 = new Card({
		props: {
		target: "/guide/validators/date",
		title: "date",
		$$slots: { default: [create_default_slot_38] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card3 = new Card({
		props: {
		target: "/guide/validators/promise",
		title: "promise",
		$$slots: { default: [create_default_slot_37] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card4 = new Card({
		props: {
		target: "/guide/validators/remote",
		title: "remote",
		$$slots: { default: [create_default_slot_36] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card5 = new Card({
		props: {
		target: "/guide/validators/iban",
		title: "iban",
		$$slots: { default: [create_default_slot_35] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card6 = new Card({
		props: {
		target: "/guide/validators/id",
		title: "id",
		$$slots: { default: [create_default_slot_34] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card7 = new Card({
		props: {
		target: "/guide/validators/phone",
		title: "phone",
		$$slots: { default: [create_default_slot_33] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card8 = new Card({
		props: {
		target: "/guide/validators/vat",
		title: "vat",
		$$slots: { default: [create_default_slot_32] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			card0.$$.fragment.c();
			t0 = space();
			card1.$$.fragment.c();
			t1 = space();
			card2.$$.fragment.c();
			t2 = space();
			card3.$$.fragment.c();
			t3 = space();
			card4.$$.fragment.c();
			t4 = space();
			card5.$$.fragment.c();
			t5 = space();
			card6.$$.fragment.c();
			t6 = space();
			card7.$$.fragment.c();
			t7 = space();
			card8.$$.fragment.c();
		},

		l: function claim(nodes) {
			card0.$$.fragment.l(nodes);
			t0 = claim_text(nodes, "\n            ");
			card1.$$.fragment.l(nodes);
			t1 = claim_text(nodes, "\n            ");
			card2.$$.fragment.l(nodes);
			t2 = claim_text(nodes, "\n            ");
			card3.$$.fragment.l(nodes);
			t3 = claim_text(nodes, "\n            ");
			card4.$$.fragment.l(nodes);
			t4 = claim_text(nodes, "\n            ");
			card5.$$.fragment.l(nodes);
			t5 = claim_text(nodes, "\n            ");
			card6.$$.fragment.l(nodes);
			t6 = claim_text(nodes, "\n            ");
			card7.$$.fragment.l(nodes);
			t7 = claim_text(nodes, "\n            ");
			card8.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(card0, target, anchor);
			insert(target, t0, anchor);
			mount_component(card1, target, anchor);
			insert(target, t1, anchor);
			mount_component(card2, target, anchor);
			insert(target, t2, anchor);
			mount_component(card3, target, anchor);
			insert(target, t3, anchor);
			mount_component(card4, target, anchor);
			insert(target, t4, anchor);
			mount_component(card5, target, anchor);
			insert(target, t5, anchor);
			mount_component(card6, target, anchor);
			insert(target, t6, anchor);
			mount_component(card7, target, anchor);
			insert(target, t7, anchor);
			mount_component(card8, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var card0_changes = {};
			if (changed.$$scope) card0_changes.$$scope = { changed, ctx };
			card0.$set(card0_changes);

			var card1_changes = {};
			if (changed.$$scope) card1_changes.$$scope = { changed, ctx };
			card1.$set(card1_changes);

			var card2_changes = {};
			if (changed.$$scope) card2_changes.$$scope = { changed, ctx };
			card2.$set(card2_changes);

			var card3_changes = {};
			if (changed.$$scope) card3_changes.$$scope = { changed, ctx };
			card3.$set(card3_changes);

			var card4_changes = {};
			if (changed.$$scope) card4_changes.$$scope = { changed, ctx };
			card4.$set(card4_changes);

			var card5_changes = {};
			if (changed.$$scope) card5_changes.$$scope = { changed, ctx };
			card5.$set(card5_changes);

			var card6_changes = {};
			if (changed.$$scope) card6_changes.$$scope = { changed, ctx };
			card6.$set(card6_changes);

			var card7_changes = {};
			if (changed.$$scope) card7_changes.$$scope = { changed, ctx };
			card7.$set(card7_changes);

			var card8_changes = {};
			if (changed.$$scope) card8_changes.$$scope = { changed, ctx };
			card8.$set(card8_changes);
		},

		i: function intro(local) {
			if (current) return;
			card0.$$.fragment.i(local);

			card1.$$.fragment.i(local);

			card2.$$.fragment.i(local);

			card3.$$.fragment.i(local);

			card4.$$.fragment.i(local);

			card5.$$.fragment.i(local);

			card6.$$.fragment.i(local);

			card7.$$.fragment.i(local);

			card8.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			card0.$$.fragment.o(local);
			card1.$$.fragment.o(local);
			card2.$$.fragment.o(local);
			card3.$$.fragment.o(local);
			card4.$$.fragment.o(local);
			card5.$$.fragment.o(local);
			card6.$$.fragment.o(local);
			card7.$$.fragment.o(local);
			card8.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			card0.$destroy(detaching);

			if (detaching) {
				detach(t0);
			}

			card1.$destroy(detaching);

			if (detaching) {
				detach(t1);
			}

			card2.$destroy(detaching);

			if (detaching) {
				detach(t2);
			}

			card3.$destroy(detaching);

			if (detaching) {
				detach(t3);
			}

			card4.$destroy(detaching);

			if (detaching) {
				detach(t4);
			}

			card5.$destroy(detaching);

			if (detaching) {
				detach(t5);
			}

			card6.$destroy(detaching);

			if (detaching) {
				detach(t6);
			}

			card7.$destroy(detaching);

			if (detaching) {
				detach(t7);
			}

			card8.$destroy(detaching);
		}
	};
}

// (186:8) <Tabs titles={["Browser", "ES6 module"]}>
function create_default_slot_30(ctx) {
	var div0, t, div1, current;

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
const result = FormValidation.validators.creditCard().validate({
    value: '340653705597107',
    options: {
        message: 'The credit card number is not valid',
    },
});

// result.valid === true
// result.meta.type === 'AMERICAN_EXPRESS'
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import creditCard from 'formvalidation/dist/es6/validators/creditCard';

const result = creditCard().validate({
    value: '340653705597107',
    options: {
        message: 'The credit card number is not valid',
    },
});
// result.valid === true
// result.meta.type === 'AMERICAN_EXPRESS'
` },
		$$inline: true
	});

	return {
		c: function create() {
			div0 = element("div");
			samplecode0.$$.fragment.c();
			t = space();
			div1 = element("div");
			samplecode1.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", {}, false);
			var div0_nodes = children(div0);

			samplecode0.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach);
			t = claim_text(nodes, "\n            ");

			div1 = claim_element(nodes, "DIV", {}, false);
			var div1_nodes = children(div1);

			samplecode1.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			add_location(div0, file$3, 186, 12, 6924);
			add_location(div1, file$3, 199, 12, 7251);
		},

		m: function mount(target, anchor) {
			insert(target, div0, anchor);
			mount_component(samplecode0, div0, null);
			insert(target, t, anchor);
			insert(target, div1, anchor);
			mount_component(samplecode1, div1, null);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div0);
			}

			samplecode0.$destroy();

			if (detaching) {
				detach(t);
				detach(div1);
			}

			samplecode1.$destroy();
		}
	};
}

// (227:8) <Tabs titles={["Browser", "ES6 module"]}>
function create_default_slot_29(ctx) {
	var div0, t, div1, current;

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
FormValidation.formValidation(formElement, {
    fields: {
        ...
    },
    plugins: {
        trigger: new FormValidation.plugins.Trigger(),
        submit: new FormValidation.plugins.SubmitButton(),
        bootstrap: new FormValidation.plugins.Bootstrap(),
        icon: new FormValidation.plugins.Icon({
            valid: 'glyphicon glyphicon-ok',
            invalid: 'glyphicon glyphicon-remove',
            validating: 'glyphicon glyphicon-refresh',
        }),
    },
});
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
import formValidation from 'formvalidation/dist/es6/core/Core';

import Bootstrap from 'formvalidation/dist/es6/plugins/Bootstrap';
import Icon from 'formvalidation/dist/es6/plugins/Icon';
import SubmitButton from 'formvalidation/dist/es6/plugins/SubmitButton';
import Trigger from 'formvalidation/dist/es6/plugins/Trigger';

formValidation(formElement, {
    fields: {
        ...
    },
    plugins: {
        trigger: new Trigger(),
        submit: new SubmitButton(),
        bootstrap: new Bootstrap(),
        icon: new Icon({
            valid: 'glyphicon glyphicon-ok',
            invalid: 'glyphicon glyphicon-remove',
            validating: 'glyphicon glyphicon-refresh',
        }),
    },
});
` },
		$$inline: true
	});

	return {
		c: function create() {
			div0 = element("div");
			samplecode0.$$.fragment.c();
			t = space();
			div1 = element("div");
			samplecode1.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", {}, false);
			var div0_nodes = children(div0);

			samplecode0.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach);
			t = claim_text(nodes, "\n            ");

			div1 = claim_element(nodes, "DIV", {}, false);
			var div1_nodes = children(div1);

			samplecode1.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			add_location(div0, file$3, 227, 12, 8181);
			add_location(div1, file$3, 246, 12, 8750);
		},

		m: function mount(target, anchor) {
			insert(target, div0, anchor);
			mount_component(samplecode0, div0, null);
			insert(target, t, anchor);
			insert(target, div1, anchor);
			mount_component(samplecode1, div1, null);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div0);
			}

			samplecode0.$destroy();

			if (detaching) {
				detach(t);
				detach(div1);
			}

			samplecode1.$destroy();
		}
	};
}

// (279:12) <Card target="/guide/plugins/declarative" title="Declarative">
function create_default_slot_28(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Declaring validator options via HTML attributes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Declaring validator options via HTML attributes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (280:12) <Card target="/guide/plugins/mandatory-icon" title="MandatoryIcon">
function create_default_slot_27(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Show required icons for mandatory fields");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Show required icons for mandatory fields");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (281:12) <Card target="/guide/plugins/recaptcha" title="Recaptcha">
function create_default_slot_26(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Show and validate a Google reCAPTCHA v2");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Show and validate a Google reCAPTCHA v2");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (282:12) <Card target="/guide/plugins/start-end-date" title="StartEndDate">
function create_default_slot_25(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Validate start and end dates");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Validate start and end dates");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (283:12) <Card target="/guide/plugins/transformer" title="Transformer">
function create_default_slot_24(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Modify the field value before doing validation");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Modify the field value before doing validation");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (284:12) <Card target="/guide/plugins/wizard" title="Wizard">
function create_default_slot_23(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Support validating multiple steps form");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Support validating multiple steps form");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (278:8) <Cards>
function create_default_slot_22(ctx) {
	var t0, t1, t2, t3, t4, current;

	var card0 = new Card({
		props: {
		target: "/guide/plugins/declarative",
		title: "Declarative",
		$$slots: { default: [create_default_slot_28] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card1 = new Card({
		props: {
		target: "/guide/plugins/mandatory-icon",
		title: "MandatoryIcon",
		$$slots: { default: [create_default_slot_27] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card2 = new Card({
		props: {
		target: "/guide/plugins/recaptcha",
		title: "Recaptcha",
		$$slots: { default: [create_default_slot_26] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card3 = new Card({
		props: {
		target: "/guide/plugins/start-end-date",
		title: "StartEndDate",
		$$slots: { default: [create_default_slot_25] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card4 = new Card({
		props: {
		target: "/guide/plugins/transformer",
		title: "Transformer",
		$$slots: { default: [create_default_slot_24] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card5 = new Card({
		props: {
		target: "/guide/plugins/wizard",
		title: "Wizard",
		$$slots: { default: [create_default_slot_23] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			card0.$$.fragment.c();
			t0 = space();
			card1.$$.fragment.c();
			t1 = space();
			card2.$$.fragment.c();
			t2 = space();
			card3.$$.fragment.c();
			t3 = space();
			card4.$$.fragment.c();
			t4 = space();
			card5.$$.fragment.c();
		},

		l: function claim(nodes) {
			card0.$$.fragment.l(nodes);
			t0 = claim_text(nodes, "\n            ");
			card1.$$.fragment.l(nodes);
			t1 = claim_text(nodes, "\n            ");
			card2.$$.fragment.l(nodes);
			t2 = claim_text(nodes, "\n            ");
			card3.$$.fragment.l(nodes);
			t3 = claim_text(nodes, "\n            ");
			card4.$$.fragment.l(nodes);
			t4 = claim_text(nodes, "\n            ");
			card5.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(card0, target, anchor);
			insert(target, t0, anchor);
			mount_component(card1, target, anchor);
			insert(target, t1, anchor);
			mount_component(card2, target, anchor);
			insert(target, t2, anchor);
			mount_component(card3, target, anchor);
			insert(target, t3, anchor);
			mount_component(card4, target, anchor);
			insert(target, t4, anchor);
			mount_component(card5, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var card0_changes = {};
			if (changed.$$scope) card0_changes.$$scope = { changed, ctx };
			card0.$set(card0_changes);

			var card1_changes = {};
			if (changed.$$scope) card1_changes.$$scope = { changed, ctx };
			card1.$set(card1_changes);

			var card2_changes = {};
			if (changed.$$scope) card2_changes.$$scope = { changed, ctx };
			card2.$set(card2_changes);

			var card3_changes = {};
			if (changed.$$scope) card3_changes.$$scope = { changed, ctx };
			card3.$set(card3_changes);

			var card4_changes = {};
			if (changed.$$scope) card4_changes.$$scope = { changed, ctx };
			card4.$set(card4_changes);

			var card5_changes = {};
			if (changed.$$scope) card5_changes.$$scope = { changed, ctx };
			card5.$set(card5_changes);
		},

		i: function intro(local) {
			if (current) return;
			card0.$$.fragment.i(local);

			card1.$$.fragment.i(local);

			card2.$$.fragment.i(local);

			card3.$$.fragment.i(local);

			card4.$$.fragment.i(local);

			card5.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			card0.$$.fragment.o(local);
			card1.$$.fragment.o(local);
			card2.$$.fragment.o(local);
			card3.$$.fragment.o(local);
			card4.$$.fragment.o(local);
			card5.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			card0.$destroy(detaching);

			if (detaching) {
				detach(t0);
			}

			card1.$destroy(detaching);

			if (detaching) {
				detach(t1);
			}

			card2.$destroy(detaching);

			if (detaching) {
				detach(t2);
			}

			card3.$destroy(detaching);

			if (detaching) {
				detach(t3);
			}

			card4.$destroy(detaching);

			if (detaching) {
				detach(t4);
			}

			card5.$destroy(detaching);
		}
	};
}

// (306:12) <Card title="Customizable">
function create_default_slot_21(ctx) {
	var div, t0, t1, ul, li0, t2, t3, li1, t4, t5, li2, t6;

	return {
		c: function create() {
			div = element("div");
			t0 = text("You can adjust almost everything:");
			t1 = space();
			ul = element("ul");
			li0 = element("li");
			t2 = text("👌 The error icon position");
			t3 = space();
			li1 = element("li");
			t4 = text("👌 The location of error message");
			t5 = space();
			li2 = element("li");
			t6 = text("👌 Their colors when the field is valid or invalid");
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			t0 = claim_text(div_nodes, "You can adjust almost everything:");
			div_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n                ");

			ul = claim_element(nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t2 = claim_text(li0_nodes, "👌 The error icon position");
			li0_nodes.forEach(detach);
			t3 = claim_text(ul_nodes, "\n                    ");

			li1 = claim_element(ul_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t4 = claim_text(li1_nodes, "👌 The location of error message");
			li1_nodes.forEach(detach);
			t5 = claim_text(ul_nodes, "\n                    ");

			li2 = claim_element(ul_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t6 = claim_text(li2_nodes, "👌 Their colors when the field is valid or invalid");
			li2_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			div.className = "lh-copy";
			add_location(div, file$3, 306, 16, 11359);
			add_location(li0, file$3, 308, 20, 11494);
			add_location(li1, file$3, 309, 20, 11550);
			add_location(li2, file$3, 310, 20, 11612);
			ul.className = "list pa0 ma0 mt3 lh-copy";
			add_location(ul, file$3, 307, 16, 11436);
		},

		m: function mount(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			insert(target, t1, anchor);
			insert(target, ul, anchor);
			append(ul, li0);
			append(li0, t2);
			append(ul, t3);
			append(ul, li1);
			append(li1, t4);
			append(ul, t5);
			append(ul, li2);
			append(li2, t6);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div);
				detach(t1);
				detach(ul);
			}
		}
	};
}

// (314:12) <Card title="Flexible">
function create_default_slot_20(ctx) {
	var ul, li0, t0, t1, li1, t2, t3, li2, t4;

	return {
		c: function create() {
			ul = element("ul");
			li0 = element("li");
			t0 = text("👌 Support dynamic field");
			t1 = space();
			li1 = element("li");
			t2 = text("👌 The validator can be enabled or disabled on the fly");
			t3 = space();
			li2 = element("li");
			t4 = text("👌 Provide a lot of events that you can hook on");
			this.h();
		},

		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t0 = claim_text(li0_nodes, "👌 Support dynamic field");
			li0_nodes.forEach(detach);
			t1 = claim_text(ul_nodes, "\n                    ");

			li1 = claim_element(ul_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t2 = claim_text(li1_nodes, "👌 The validator can be enabled or disabled on the fly");
			li1_nodes.forEach(detach);
			t3 = claim_text(ul_nodes, "\n                    ");

			li2 = claim_element(ul_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t4 = claim_text(li2_nodes, "👌 Provide a lot of events that you can hook on");
			li2_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			add_location(li0, file$3, 315, 20, 11820);
			add_location(li1, file$3, 316, 20, 11874);
			add_location(li2, file$3, 317, 20, 11958);
			ul.className = "list pa0 ma0 lh-copy";
			add_location(ul, file$3, 314, 16, 11766);
		},

		m: function mount(target, anchor) {
			insert(target, ul, anchor);
			append(ul, li0);
			append(li0, t0);
			append(ul, t1);
			append(ul, li1);
			append(li1, t2);
			append(ul, t3);
			append(ul, li2);
			append(li2, t4);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(ul);
			}
		}
	};
}

// (321:12) <Card title="Localizable">
function create_default_slot_19(ctx) {
	var t;

	return {
		c: function create() {
			t = text("The default error messages of built-in validators are available in 39 language packages. \n                There is also a plugin to support switching between different locales easily.");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "The default error messages of built-in validators are available in 39 language packages. \n                There is also a plugin to support switching between different locales easily.");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (305:8) <Cards>
function create_default_slot_18(ctx) {
	var t0, t1, current;

	var card0 = new Card({
		props: {
		title: "Customizable",
		$$slots: { default: [create_default_slot_21] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card1 = new Card({
		props: {
		title: "Flexible",
		$$slots: { default: [create_default_slot_20] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card2 = new Card({
		props: {
		title: "Localizable",
		$$slots: { default: [create_default_slot_19] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			card0.$$.fragment.c();
			t0 = space();
			card1.$$.fragment.c();
			t1 = space();
			card2.$$.fragment.c();
		},

		l: function claim(nodes) {
			card0.$$.fragment.l(nodes);
			t0 = claim_text(nodes, "\n            ");
			card1.$$.fragment.l(nodes);
			t1 = claim_text(nodes, "\n            ");
			card2.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(card0, target, anchor);
			insert(target, t0, anchor);
			mount_component(card1, target, anchor);
			insert(target, t1, anchor);
			mount_component(card2, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var card0_changes = {};
			if (changed.$$scope) card0_changes.$$scope = { changed, ctx };
			card0.$set(card0_changes);

			var card1_changes = {};
			if (changed.$$scope) card1_changes.$$scope = { changed, ctx };
			card1.$set(card1_changes);

			var card2_changes = {};
			if (changed.$$scope) card2_changes.$$scope = { changed, ctx };
			card2.$set(card2_changes);
		},

		i: function intro(local) {
			if (current) return;
			card0.$$.fragment.i(local);

			card1.$$.fragment.i(local);

			card2.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			card0.$$.fragment.o(local);
			card1.$$.fragment.o(local);
			card2.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			card0.$destroy(detaching);

			if (detaching) {
				detach(t0);
			}

			card1.$destroy(detaching);

			if (detaching) {
				detach(t1);
			}

			card2.$destroy(detaching);
		}
	};
}

// (443:12) <Card title="Auto complete">
function create_default_slot_17(ctx) {
	var ul, li0, t0, t1, li1, t2;

	return {
		c: function create() {
			ul = element("ul");
			li0 = element("li");
			t0 = text("👉 autoComplete.js");
			t1 = space();
			li1 = element("li");
			t2 = text("👉 Typeahead");
			this.h();
		},

		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t0 = claim_text(li0_nodes, "👉 autoComplete.js");
			li0_nodes.forEach(detach);
			t1 = claim_text(ul_nodes, "\n                    ");

			li1 = claim_element(ul_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t2 = claim_text(li1_nodes, "👉 Typeahead");
			li1_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			add_location(li0, file$3, 444, 20, 17835);
			add_location(li1, file$3, 445, 20, 17883);
			ul.className = "list pa0 ma0 mt3 lh-copy";
			add_location(ul, file$3, 443, 16, 17777);
		},

		m: function mount(target, anchor) {
			insert(target, ul, anchor);
			append(ul, li0);
			append(li0, t0);
			append(ul, t1);
			append(ul, li1);
			append(li1, t2);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(ul);
			}
		}
	};
}

// (449:12) <Card title="Color pickers">
function create_default_slot_16(ctx) {
	var ul, li, t;

	return {
		c: function create() {
			ul = element("ul");
			li = element("li");
			t = text("👉 pickr");
			this.h();
		},

		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li = claim_element(ul_nodes, "LI", {}, false);
			var li_nodes = children(li);

			t = claim_text(li_nodes, "👉 pickr");
			li_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			add_location(li, file$3, 450, 20, 18058);
			ul.className = "list pa0 ma0 lh-copy";
			add_location(ul, file$3, 449, 16, 18004);
		},

		m: function mount(target, anchor) {
			insert(target, ul, anchor);
			append(ul, li);
			append(li, t);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(ul);
			}
		}
	};
}

// (454:12) <Card title="Date pickers">
function create_default_slot_15(ctx) {
	var ul, li0, t0, t1, li1, t2, t3, li2, t4, t5, li3, t6;

	return {
		c: function create() {
			ul = element("ul");
			li0 = element("li");
			t0 = text("👉 Bootstrap Datepicker");
			t1 = space();
			li1 = element("li");
			t2 = text("👉 flatpickr");
			t3 = space();
			li2 = element("li");
			t4 = text("👉 pickadate");
			t5 = space();
			li3 = element("li");
			t6 = text("👉 Pikaday");
			this.h();
		},

		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t0 = claim_text(li0_nodes, "👉 Bootstrap Datepicker");
			li0_nodes.forEach(detach);
			t1 = claim_text(ul_nodes, "\n                    ");

			li1 = claim_element(ul_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t2 = claim_text(li1_nodes, "👉 flatpickr");
			li1_nodes.forEach(detach);
			t3 = claim_text(ul_nodes, "\n                    ");

			li2 = claim_element(ul_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t4 = claim_text(li2_nodes, "👉 pickadate");
			li2_nodes.forEach(detach);
			t5 = claim_text(ul_nodes, "\n                    ");

			li3 = claim_element(ul_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t6 = claim_text(li3_nodes, "👉 Pikaday");
			li3_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			add_location(li0, file$3, 455, 20, 18228);
			add_location(li1, file$3, 456, 20, 18281);
			add_location(li2, file$3, 457, 20, 18323);
			add_location(li3, file$3, 458, 20, 18365);
			ul.className = "list pa0 ma0 lh-copy";
			add_location(ul, file$3, 454, 16, 18174);
		},

		m: function mount(target, anchor) {
			insert(target, ul, anchor);
			append(ul, li0);
			append(li0, t0);
			append(ul, t1);
			append(ul, li1);
			append(li1, t2);
			append(ul, t3);
			append(ul, li2);
			append(li2, t4);
			append(ul, t5);
			append(ul, li3);
			append(li3, t6);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(ul);
			}
		}
	};
}

// (462:12) <Card title="Editors">
function create_default_slot_14(ctx) {
	var ul, li0, t0, t1, li1, t2, t3, li2, t4;

	return {
		c: function create() {
			ul = element("ul");
			li0 = element("li");
			t0 = text("👉 CKEditor");
			t1 = space();
			li1 = element("li");
			t2 = text("👉 Summernote");
			t3 = space();
			li2 = element("li");
			t4 = text("👉 TinyMCE");
			this.h();
		},

		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t0 = claim_text(li0_nodes, "👉 CKEditor");
			li0_nodes.forEach(detach);
			t1 = claim_text(ul_nodes, "\n                    ");

			li1 = claim_element(ul_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t2 = claim_text(li1_nodes, "👉 Summernote");
			li1_nodes.forEach(detach);
			t3 = claim_text(ul_nodes, "\n                    ");

			li2 = claim_element(ul_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t4 = claim_text(li2_nodes, "👉 TinyMCE");
			li2_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			add_location(li0, file$3, 463, 20, 18532);
			add_location(li1, file$3, 464, 20, 18573);
			add_location(li2, file$3, 465, 20, 18616);
			ul.className = "list pa0 ma0 lh-copy";
			add_location(ul, file$3, 462, 16, 18478);
		},

		m: function mount(target, anchor) {
			insert(target, ul, anchor);
			append(ul, li0);
			append(li0, t0);
			append(ul, t1);
			append(ul, li1);
			append(li1, t2);
			append(ul, t3);
			append(ul, li2);
			append(li2, t4);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(ul);
			}
		}
	};
}

// (469:12) <Card title="Tags input">
function create_default_slot_13(ctx) {
	var ul, li0, t0, t1, li1, t2, t3, li2, t4, t5, li3, t6, t7, li4, t8;

	return {
		c: function create() {
			ul = element("ul");
			li0 = element("li");
			t0 = text("👉 Choices");
			t1 = space();
			li1 = element("li");
			t2 = text("👉 Chosen");
			t3 = space();
			li2 = element("li");
			t4 = text("👉 Select2");
			t5 = space();
			li3 = element("li");
			t6 = text("👉 Selectize");
			t7 = space();
			li4 = element("li");
			t8 = text("👉 tagify");
			this.h();
		},

		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t0 = claim_text(li0_nodes, "👉 Choices");
			li0_nodes.forEach(detach);
			t1 = claim_text(ul_nodes, "\n                    ");

			li1 = claim_element(ul_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t2 = claim_text(li1_nodes, "👉 Chosen");
			li1_nodes.forEach(detach);
			t3 = claim_text(ul_nodes, "\n                    ");

			li2 = claim_element(ul_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t4 = claim_text(li2_nodes, "👉 Select2");
			li2_nodes.forEach(detach);
			t5 = claim_text(ul_nodes, "\n                    ");

			li3 = claim_element(ul_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t6 = claim_text(li3_nodes, "👉 Selectize");
			li3_nodes.forEach(detach);
			t7 = claim_text(ul_nodes, "\n                    ");

			li4 = claim_element(ul_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			t8 = claim_text(li4_nodes, "👉 tagify");
			li4_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			add_location(li0, file$3, 470, 20, 18786);
			add_location(li1, file$3, 471, 20, 18826);
			add_location(li2, file$3, 472, 20, 18865);
			add_location(li3, file$3, 473, 20, 18905);
			add_location(li4, file$3, 474, 20, 18947);
			ul.className = "list pa0 ma0 lh-copy";
			add_location(ul, file$3, 469, 16, 18732);
		},

		m: function mount(target, anchor) {
			insert(target, ul, anchor);
			append(ul, li0);
			append(li0, t0);
			append(ul, t1);
			append(ul, li1);
			append(li1, t2);
			append(ul, t3);
			append(ul, li2);
			append(li2, t4);
			append(ul, t5);
			append(ul, li3);
			append(li3, t6);
			append(ul, t7);
			append(ul, li4);
			append(li4, t8);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(ul);
			}
		}
	};
}

// (442:8) <Cards>
function create_default_slot_12(ctx) {
	var t0, t1, t2, t3, current;

	var card0 = new Card({
		props: {
		title: "Auto complete",
		$$slots: { default: [create_default_slot_17] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card1 = new Card({
		props: {
		title: "Color pickers",
		$$slots: { default: [create_default_slot_16] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card2 = new Card({
		props: {
		title: "Date pickers",
		$$slots: { default: [create_default_slot_15] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card3 = new Card({
		props: {
		title: "Editors",
		$$slots: { default: [create_default_slot_14] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card4 = new Card({
		props: {
		title: "Tags input",
		$$slots: { default: [create_default_slot_13] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			card0.$$.fragment.c();
			t0 = space();
			card1.$$.fragment.c();
			t1 = space();
			card2.$$.fragment.c();
			t2 = space();
			card3.$$.fragment.c();
			t3 = space();
			card4.$$.fragment.c();
		},

		l: function claim(nodes) {
			card0.$$.fragment.l(nodes);
			t0 = claim_text(nodes, "\n            ");
			card1.$$.fragment.l(nodes);
			t1 = claim_text(nodes, "\n            ");
			card2.$$.fragment.l(nodes);
			t2 = claim_text(nodes, "\n            ");
			card3.$$.fragment.l(nodes);
			t3 = claim_text(nodes, "\n            ");
			card4.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(card0, target, anchor);
			insert(target, t0, anchor);
			mount_component(card1, target, anchor);
			insert(target, t1, anchor);
			mount_component(card2, target, anchor);
			insert(target, t2, anchor);
			mount_component(card3, target, anchor);
			insert(target, t3, anchor);
			mount_component(card4, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var card0_changes = {};
			if (changed.$$scope) card0_changes.$$scope = { changed, ctx };
			card0.$set(card0_changes);

			var card1_changes = {};
			if (changed.$$scope) card1_changes.$$scope = { changed, ctx };
			card1.$set(card1_changes);

			var card2_changes = {};
			if (changed.$$scope) card2_changes.$$scope = { changed, ctx };
			card2.$set(card2_changes);

			var card3_changes = {};
			if (changed.$$scope) card3_changes.$$scope = { changed, ctx };
			card3.$set(card3_changes);

			var card4_changes = {};
			if (changed.$$scope) card4_changes.$$scope = { changed, ctx };
			card4.$set(card4_changes);
		},

		i: function intro(local) {
			if (current) return;
			card0.$$.fragment.i(local);

			card1.$$.fragment.i(local);

			card2.$$.fragment.i(local);

			card3.$$.fragment.i(local);

			card4.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			card0.$$.fragment.o(local);
			card1.$$.fragment.o(local);
			card2.$$.fragment.o(local);
			card3.$$.fragment.o(local);
			card4.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			card0.$destroy(detaching);

			if (detaching) {
				detach(t0);
			}

			card1.$destroy(detaching);

			if (detaching) {
				detach(t1);
			}

			card2.$destroy(detaching);

			if (detaching) {
				detach(t2);
			}

			card3.$destroy(detaching);

			if (detaching) {
				detach(t3);
			}

			card4.$destroy(detaching);
		}
	};
}

// (526:12) <Testimonial user="CreativeTim" avatar="CreativeTim.jpg">
function create_default_slot_11(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Validation plugin for Bootstrap from @formvalidation. Give it a try, looks great!");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Validation plugin for Bootstrap from @formvalidation. Give it a try, looks great!");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (527:12) <Testimonial user="scokmen" avatar="scokmen.jpg">
function create_default_slot_10(ctx) {
	var t;

	return {
		c: function create() {
			t = text("You saved my day @formvalidation");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "You saved my day @formvalidation");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (528:12) <Testimonial user="CurtStaubach" avatar="CurtStaubach.jpeg">
function create_default_slot_9(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Be sure to check out Bootstrap Validator. It's the best I've found.");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Be sure to check out Bootstrap Validator. It's the best I've found.");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (532:12) <Testimonial user="Agarney" avatar="Agarney.jpg">
function create_default_slot_8(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Money well spent. A must have plug-in if you use Bootstrap regularly.");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Money well spent. A must have plug-in if you use Bootstrap regularly.");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (533:12) <Testimonial user="timkinnane" avatar="timkinnane.jpg">
function create_default_slot_7(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Just grabbed FormValidation license. It's perfect for #bootstrap projects. Very worth.");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Just grabbed FormValidation license. It's perfect for #bootstrap projects. Very worth.");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (534:12) <Testimonial user="RC_Programmers" avatar="RC_Programmers.jpeg">
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Buy a license for @formvalidation. It's best tool I ever used.");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Buy a license for @formvalidation. It's best tool I ever used.");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (538:12) <Testimonial user="sitesbyjoe" avatar="sitesbyjoe.jpeg">
function create_default_slot_5(ctx) {
	var t0, a, t1, t2;

	return {
		c: function create() {
			t0 = text("Just bought a copy of ");
			a = element("a");
			t1 = text("formvalidation.io");
			t2 = text(" - looks extremely well built and is designed to work with bootstrap!");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "Just bought a copy of ");

			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t1 = claim_text(a_nodes, "formvalidation.io");
			a_nodes.forEach(detach);
			t2 = claim_text(nodes, " - looks extremely well built and is designed to work with bootstrap!");
			this.h();
		},

		h: function hydrate() {
			a.href = "/";
			a.className = "blue dim link";
			add_location(a, file$3, 537, 90, 21930);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a, anchor);
			append(a, t1);
			insert(target, t2, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(a);
				detach(t2);
			}
		}
	};
}

// (539:12) <Testimonial user="barrylangdon1" avatar="barrylangdon1.jpg">
function create_default_slot_4(ctx) {
	var t0, a, t1, t2;

	return {
		c: function create() {
			t0 = text("Awesome jQuery plugin for form validation ");
			a = element("a");
			t1 = text("http://formvalidation.io");
			t2 = text(" @formvalidation #jquery #FormValidation.");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "Awesome jQuery plugin for form validation ");

			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t1 = claim_text(a_nodes, "http://formvalidation.io");
			a_nodes.forEach(detach);
			t2 = claim_text(nodes, " @formvalidation #jquery #FormValidation.");
			this.h();
		},

		h: function hydrate() {
			a.href = "/";
			a.className = "blue dim link";
			add_location(a, file$3, 538, 115, 22184);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a, anchor);
			append(a, t1);
			insert(target, t2, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(a);
				detach(t2);
			}
		}
	};
}

// (540:12) <Testimonial user="Mahdixco" avatar="Mahdixco.jpg">
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Wow, Its Very Awesome for Form Validation I Recommend use it <3 @formvalidation");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Wow, Its Very Awesome for Form Validation I Recommend use it <3 @formvalidation");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (544:12) <Testimonial user="imagineteamsol" avatar="imagineteamsol.png">
function create_default_slot_2(ctx) {
	var t0, a0, t1, t2, a1, t3, t4;

	return {
		c: function create() {
			t0 = text("Just had a fantastic development experience with @formvalidation using ");
			a0 = element("a");
			t1 = text("@twbootstrap");
			t2 = text(" and ");
			a1 = element("a");
			t3 = text("@jquery");
			t4 = text(". You're a champion!");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "Just had a fantastic development experience with @formvalidation using ");

			a0 = claim_element(nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t1 = claim_text(a0_nodes, "@twbootstrap");
			a0_nodes.forEach(detach);
			t2 = claim_text(nodes, " and ");

			a1 = claim_element(nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t3 = claim_text(a1_nodes, "@jquery");
			a1_nodes.forEach(detach);
			t4 = claim_text(nodes, ". You're a champion!");
			this.h();
		},

		h: function hydrate() {
			a0.href = "https://twitter.com/twbootstrap";
			a0.className = "blue dim link";
			add_location(a0, file$3, 543, 146, 22656);
			a1.href = "https://twitter.com/jquery";
			a1.className = "blue dim link";
			add_location(a1, file$3, 543, 231, 22741);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a0, anchor);
			append(a0, t1);
			insert(target, t2, anchor);
			insert(target, a1, anchor);
			append(a1, t3);
			insert(target, t4, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(a0);
				detach(t2);
				detach(a1);
				detach(t4);
			}
		}
	};
}

// (545:12) <Testimonial user="JonStanton" avatar="JonStanton.jpg">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Fantastic support from @formvalidation. Several emails back and forth and completely sorted within a couple of hours. #worthpraising");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Fantastic support from @formvalidation. Several emails back and forth and completely sorted within a couple of hours. #worthpraising");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (546:12) <Testimonial user="johnnydriesen" avatar="johnnydriesen.jpg">
function create_default_slot(ctx) {
	var t;

	return {
		c: function create() {
			t = text("AMAZING solution and very declarative source code. This is TOP support! Keep on doing the good work. I became a fan!");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "AMAZING solution and very declarative source code. This is TOP support! Keep on doing the good work. I became a fan!");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

function create_fragment$3(ctx) {
	var t0, div0, t1, section0, t2, div2, h1, t3, t4, h20, t5, t6, div1, span0, t7, t8_value = siteData.version, t8, t9, div4, div3, t10, div5, h3, t11, t12, span1, t13, t14, section1, div6, t15, h21, t16, t17, div11, div7, ul0, li0, t18, t19, li1, t20, t21, li2, t22, t23, li3, t24, span2, t25, t26, t27, div10, ul1, li4, img0, t28, div8, t29, t30, li5, img1, t31, div9, t32, t33, div16, div12, ul2, li6, t34, t35, li7, t36, t37, div15, ul3, li8, img2, t38, div13, t39, t40, li9, img3, t41, div14, t42, t43, div17, t44, section2, div18, t45, h22, t46, t47, ul4, li10, t48, t49, li11, t50, t51, li12, t52, span3, t53, t54, t55, div19, p0, span4, t56, t57, t58, t59, p1, t60, a0, t61, t62, t63, div20, t64, section3, div21, t65, h23, t66, t67, p2, t68, span5, t69, t70, t71, div22, t72, div23, p3, span6, t73, t74, t75, t76, section4, div24, t77, h24, t78, t79, ul5, li13, t80, t81, li14, t82, t83, li15, t84, t85, li16, t86, t87, p4, t88, t89, section5, div25, t90, section6, div26, t91, h25, t92, t93, p5, t94, span7, t95, t96, t97, div46, ul6, li17, a1, img4, t98, div27, t99, t100, li18, a2, img5, t101, div28, t102, t103, li19, a3, img6, t104, div29, t105, t106, li20, a4, img7, t107, div30, t108, t109, li21, a5, img8, t110, div31, t111, t112, li22, a6, img9, t113, div32, t114, t115, li23, a7, div33, t116, t117, div34, t118, t119, li24, a8, div35, t120, t121, div36, t122, t123, li25, a9, div37, t124, t125, div38, t126, t127, li26, a10, img10, t128, div39, t129, t130, li27, a11, img11, t131, div40, t132, t133, li28, a12, img12, t134, div41, t135, t136, li29, a13, div42, t137, t138, div43, t139, t140, li30, a14, img13, t141, div44, t142, t143, li31, a15, img14, t144, div45, t145, t146, p6, t147, t148, section7, div47, t149, h26, t150, t151, p7, t152, t153, p8, t154, span8, t155, t156, t157, div48, t158, section8, div57, div49, t159, h27, t160, t161, p9, t162, t163, div56, ul7, li32, img15, t164, div50, t165, t166, li33, img16, t167, div51, t168, t169, li34, img17, t170, div52, t171, t172, li35, img18, t173, div53, t174, t175, li36, img19, t176, div54, t177, t178, li37, img20, t179, div55, t180, t181, section9, div62, t182, h28, t183, t184, div58, t185, t186, t187, div59, t188, t189, t190, div60, t191, t192, t193, div61, t194, t195, t196, section10, current;

	var header = new Header({ $$inline: true });

	var tabs0 = new Tabs({
		props: {
		titles: ["<span class='white'>Demo</span>", "<span class='white'>Code</span>"],
		$$slots: { default: [create_default_slot_42] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var dotdotdot0 = new DotDotDot({ $$inline: true });

	var tabs1 = new Tabs({
		props: {
		titles: ["Unit tests", "End-to-end tests"],
		$$slots: { default: [create_default_slot_41] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var dotdotdot1 = new DotDotDot({ $$inline: true });

	var cards0 = new Cards({
		props: {
		$$slots: { default: [create_default_slot_31] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var tabs2 = new Tabs({
		props: {
		titles: ["Browser", "ES6 module"],
		$$slots: { default: [create_default_slot_30] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var dotdotdot2 = new DotDotDot({ $$inline: true });

	var tabs3 = new Tabs({
		props: {
		titles: ["Browser", "ES6 module"],
		$$slots: { default: [create_default_slot_29] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var cards1 = new Cards({
		props: {
		$$slots: { default: [create_default_slot_22] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var dotdotdot3 = new DotDotDot({ $$inline: true });

	var cards2 = new Cards({
		props: {
		$$slots: { default: [create_default_slot_18] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var dotdotdot4 = new DotDotDot({ $$inline: true });

	var dotdotdot5 = new DotDotDot({ $$inline: true });

	var cards3 = new Cards({
		props: {
		$$slots: { default: [create_default_slot_12] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var dotdotdot6 = new DotDotDot({ $$inline: true });

	var dotdotdot7 = new DotDotDot({ $$inline: true });

	var testimonial0 = new Testimonial({
		props: {
		user: "CreativeTim",
		avatar: "CreativeTim.jpg",
		$$slots: { default: [create_default_slot_11] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var testimonial1 = new Testimonial({
		props: {
		user: "scokmen",
		avatar: "scokmen.jpg",
		$$slots: { default: [create_default_slot_10] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var testimonial2 = new Testimonial({
		props: {
		user: "CurtStaubach",
		avatar: "CurtStaubach.jpeg",
		$$slots: { default: [create_default_slot_9] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var testimonial3 = new Testimonial({
		props: {
		user: "Agarney",
		avatar: "Agarney.jpg",
		$$slots: { default: [create_default_slot_8] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var testimonial4 = new Testimonial({
		props: {
		user: "timkinnane",
		avatar: "timkinnane.jpg",
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var testimonial5 = new Testimonial({
		props: {
		user: "RC_Programmers",
		avatar: "RC_Programmers.jpeg",
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var testimonial6 = new Testimonial({
		props: {
		user: "sitesbyjoe",
		avatar: "sitesbyjoe.jpeg",
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var testimonial7 = new Testimonial({
		props: {
		user: "barrylangdon1",
		avatar: "barrylangdon1.jpg",
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var testimonial8 = new Testimonial({
		props: {
		user: "Mahdixco",
		avatar: "Mahdixco.jpg",
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var testimonial9 = new Testimonial({
		props: {
		user: "imagineteamsol",
		avatar: "imagineteamsol.png",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var testimonial10 = new Testimonial({
		props: {
		user: "JonStanton",
		avatar: "JonStanton.jpg",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var testimonial11 = new Testimonial({
		props: {
		user: "johnnydriesen",
		avatar: "johnnydriesen.jpg",
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var footer = new Footer({ $$inline: true });

	return {
		c: function create() {
			t0 = space();
			div0 = element("div");
			t1 = space();
			section0 = element("section");
			header.$$.fragment.c();
			t2 = space();
			div2 = element("div");
			h1 = element("h1");
			t3 = text("all new FormValidation");
			t4 = space();
			h20 = element("h2");
			t5 = text("best validation library for JavaScript. zero dependencies.");
			t6 = space();
			div1 = element("div");
			span0 = element("span");
			t7 = text("v");
			t8 = text(t8_value);
			t9 = space();
			div4 = element("div");
			div3 = element("div");
			tabs0.$$.fragment.c();
			t10 = space();
			div5 = element("div");
			h3 = element("h3");
			t11 = text("explore more features");
			t12 = space();
			span1 = element("span");
			t13 = text("👇");
			t14 = space();
			section1 = element("section");
			div6 = element("div");
			dotdotdot0.$$.fragment.c();
			t15 = space();
			h21 = element("h2");
			t16 = text("Scalable, well tested code base");
			t17 = space();
			div11 = element("div");
			div7 = element("div");
			ul0 = element("ul");
			li0 = element("li");
			t18 = text("👍 Completely rewrite in ES6.");
			t19 = space();
			li1 = element("li");
			t20 = text("👍 Type safety. Entire code are made in TypeScript.");
			t21 = space();
			li2 = element("li");
			t22 = text("👍 High code quality via popular analysis tools such as TSLint.");
			t23 = space();
			li3 = element("li");
			t24 = text("👍 ");
			span2 = element("span");
			t25 = text("Zero dependencies");
			t26 = text(". No jQuery.");
			t27 = space();
			div10 = element("div");
			ul1 = element("ul");
			li4 = element("li");
			img0 = element("img");
			t28 = space();
			div8 = element("div");
			t29 = text("ES6");
			t30 = space();
			li5 = element("li");
			img1 = element("img");
			t31 = space();
			div9 = element("div");
			t32 = text("TypeScript");
			t33 = space();
			div16 = element("div");
			div12 = element("div");
			ul2 = element("ul");
			li6 = element("li");
			t34 = text("👌 All validators, algorithms, and APIs are tested carefully with +400 Mocha unit tests.");
			t35 = space();
			li7 = element("li");
			t36 = text("👌 Cover hundreds of end-to-end test cases against Selenium server with Nightwatch.js framework.");
			t37 = space();
			div15 = element("div");
			ul3 = element("ul");
			li8 = element("li");
			img2 = element("img");
			t38 = space();
			div13 = element("div");
			t39 = text("Mocha");
			t40 = space();
			li9 = element("li");
			img3 = element("img");
			t41 = space();
			div14 = element("div");
			t42 = text("Nightwatch");
			t43 = space();
			div17 = element("div");
			tabs1.$$.fragment.c();
			t44 = space();
			section2 = element("section");
			div18 = element("div");
			dotdotdot1.$$.fragment.c();
			t45 = space();
			h22 = element("h2");
			t46 = text("Rich set of validators");
			t47 = space();
			ul4 = element("ul");
			li10 = element("li");
			t48 = text("👍 Provide a rich set of validators to cover most various types of form field.");
			t49 = space();
			li11 = element("li");
			t50 = text("👍 Develop and reuse your own validator easily.");
			t51 = space();
			li12 = element("li");
			t52 = text("👍 Support ");
			span3 = element("span");
			t53 = text("sync and async validators");
			t54 = text(".");
			t55 = space();
			div19 = element("div");
			p0 = element("p");
			span4 = element("span");
			t56 = text("50 built-in validators");
			t57 = text(" and still counting. Here are some of them:");
			t58 = space();
			cards0.$$.fragment.c();
			t59 = space();
			p1 = element("p");
			t60 = text("All validators can be used independently. Inspried by functional programming paradigm, all built in validators are just functions. So you can use it in browser or with ES6 module, server side frameworks such as ");
			a0 = element("a");
			t61 = text("Express");
			t62 = text(":");
			t63 = space();
			div20 = element("div");
			tabs2.$$.fragment.c();
			t64 = space();
			section3 = element("section");
			div21 = element("div");
			dotdotdot2.$$.fragment.c();
			t65 = space();
			h23 = element("h2");
			t66 = text("Plugin architecture");
			t67 = space();
			p2 = element("p");
			t68 = text("The giant and old jQuery plugin doesn't exist anymore. With the new ");
			span5 = element("span");
			t69 = text("plugin based architectue");
			t70 = text(", the library has really small core. Everything else is built around as a plugin.");
			t71 = space();
			div22 = element("div");
			tabs3.$$.fragment.c();
			t72 = space();
			div23 = element("div");
			p3 = element("p");
			span6 = element("span");
			t73 = text("35 plugins");
			t74 = text(" and still counting. Here are some of them:");
			t75 = space();
			cards1.$$.fragment.c();
			t76 = space();
			section4 = element("section");
			div24 = element("div");
			dotdotdot3.$$.fragment.c();
			t77 = space();
			h24 = element("h2");
			t78 = text("Friendly UX");
			t79 = space();
			ul5 = element("ul");
			li13 = element("li");
			t80 = text("👍 Can it notify user while field is being validated?");
			t81 = space();
			li14 = element("li");
			t82 = text("👍 Can it stop performing remaining validators if there is a validator that the field does not pass?");
			t83 = space();
			li15 = element("li");
			t84 = text("👍 Can it perform the validation only when the field value exceed a given number of characters?");
			t85 = space();
			li16 = element("li");
			t86 = text("👍 Can it postpone the validation for a given number of seconds from the moment user stops fill in the field?");
			t87 = space();
			p4 = element("p");
			t88 = text("Yes! FormValidation provides a built in mechanism to support these requirements.");
			t89 = space();
			section5 = element("section");
			div25 = element("div");
			cards2.$$.fragment.c();
			t90 = space();
			section6 = element("section");
			div26 = element("div");
			dotdotdot4.$$.fragment.c();
			t91 = space();
			h25 = element("h2");
			t92 = text("Support any form, CSS framework");
			t93 = space();
			p5 = element("p");
			t94 = text("FormValidation is designed to support validating any form that uses or doesn't use with CSS framework. In addition to that, the library provides many built-in plugins which you can plug to ");
			span7 = element("span");
			t95 = text("use with popular CSS frameworks");
			t96 = text(":");
			t97 = space();
			div46 = element("div");
			ul6 = element("ul");
			li17 = element("li");
			a1 = element("a");
			img4 = element("img");
			t98 = space();
			div27 = element("div");
			t99 = text("Bootstrap 3");
			t100 = space();
			li18 = element("li");
			a2 = element("a");
			img5 = element("img");
			t101 = space();
			div28 = element("div");
			t102 = text("Bootstrap 4");
			t103 = space();
			li19 = element("li");
			a3 = element("a");
			img6 = element("img");
			t104 = space();
			div29 = element("div");
			t105 = text("Bulma");
			t106 = space();
			li20 = element("li");
			a4 = element("a");
			img7 = element("img");
			t107 = space();
			div30 = element("div");
			t108 = text("Foundation");
			t109 = space();
			li21 = element("li");
			a5 = element("a");
			img8 = element("img");
			t110 = space();
			div31 = element("div");
			t111 = text("Materialize CSS");
			t112 = space();
			li22 = element("li");
			a6 = element("a");
			img9 = element("img");
			t113 = space();
			div32 = element("div");
			t114 = text("milligram");
			t115 = space();
			li23 = element("li");
			a7 = element("a");
			div33 = element("div");
			t116 = text("m");
			t117 = space();
			div34 = element("div");
			t118 = text("mini.css");
			t119 = space();
			li24 = element("li");
			a8 = element("a");
			div35 = element("div");
			t120 = text("MUI");
			t121 = space();
			div36 = element("div");
			t122 = text("Mui CSS");
			t123 = space();
			li25 = element("li");
			a9 = element("a");
			div37 = element("div");
			t124 = text("P");
			t125 = space();
			div38 = element("div");
			t126 = text("Pure CSS");
			t127 = space();
			li26 = element("li");
			a10 = element("a");
			img10 = element("img");
			t128 = space();
			div39 = element("div");
			t129 = text("Semantic UI");
			t130 = space();
			li27 = element("li");
			a11 = element("a");
			img11 = element("img");
			t131 = space();
			div40 = element("div");
			t132 = text("Shoelace");
			t133 = space();
			li28 = element("li");
			a12 = element("a");
			img12 = element("img");
			t134 = space();
			div41 = element("div");
			t135 = text("Spectre");
			t136 = space();
			li29 = element("li");
			a13 = element("a");
			div42 = element("div");
			t137 = text("T");
			t138 = space();
			div43 = element("div");
			t139 = text("Tachyons");
			t140 = space();
			li30 = element("li");
			a14 = element("a");
			img13 = element("img");
			t141 = space();
			div44 = element("div");
			t142 = text("Turret CSS");
			t143 = space();
			li31 = element("li");
			a15 = element("a");
			img14 = element("img");
			t144 = space();
			div45 = element("div");
			t145 = text("UIKit");
			t146 = space();
			p6 = element("p");
			t147 = text("and more landing soon.");
			t148 = space();
			section7 = element("section");
			div47 = element("div");
			dotdotdot5.$$.fragment.c();
			t149 = space();
			h26 = element("h2");
			t150 = text("Integrate with UI libraries");
			t151 = space();
			p7 = element("p");
			t152 = text("FormValidation plays nicely with other libraries. It has useful APIs to integrate with another libraries.");
			t153 = space();
			p8 = element("p");
			t154 = text("By using the same principle, you can easily ");
			span8 = element("span");
			t155 = text("integrate it with any UI library");
			t156 = text(" out there. To name a few:");
			t157 = space();
			div48 = element("div");
			cards3.$$.fragment.c();
			t158 = space();
			section8 = element("section");
			div57 = element("div");
			div49 = element("div");
			dotdotdot6.$$.fragment.c();
			t159 = space();
			h27 = element("h2");
			t160 = text("Supported browsers");
			t161 = space();
			p9 = element("p");
			t162 = text("FormValidation works with the latest version of Chrome, Firefox, Safari, Opera, and Edge. Internet Explorer 11 is supported as well.");
			t163 = space();
			div56 = element("div");
			ul7 = element("ul");
			li32 = element("li");
			img15 = element("img");
			t164 = space();
			div50 = element("div");
			t165 = text("latest");
			t166 = space();
			li33 = element("li");
			img16 = element("img");
			t167 = space();
			div51 = element("div");
			t168 = text("latest");
			t169 = space();
			li34 = element("li");
			img17 = element("img");
			t170 = space();
			div52 = element("div");
			t171 = text("latest");
			t172 = space();
			li35 = element("li");
			img18 = element("img");
			t173 = space();
			div53 = element("div");
			t174 = text("latest");
			t175 = space();
			li36 = element("li");
			img19 = element("img");
			t176 = space();
			div54 = element("div");
			t177 = text("latest");
			t178 = space();
			li37 = element("li");
			img20 = element("img");
			t179 = space();
			div55 = element("div");
			t180 = text("11");
			t181 = space();
			section9 = element("section");
			div62 = element("div");
			dotdotdot7.$$.fragment.c();
			t182 = space();
			h28 = element("h2");
			t183 = text("Used by thousand developers and designers like you");
			t184 = space();
			div58 = element("div");
			testimonial0.$$.fragment.c();
			t185 = space();
			testimonial1.$$.fragment.c();
			t186 = space();
			testimonial2.$$.fragment.c();
			t187 = space();
			div59 = element("div");
			testimonial3.$$.fragment.c();
			t188 = space();
			testimonial4.$$.fragment.c();
			t189 = space();
			testimonial5.$$.fragment.c();
			t190 = space();
			div60 = element("div");
			testimonial6.$$.fragment.c();
			t191 = space();
			testimonial7.$$.fragment.c();
			t192 = space();
			testimonial8.$$.fragment.c();
			t193 = space();
			div61 = element("div");
			testimonial9.$$.fragment.c();
			t194 = space();
			testimonial10.$$.fragment.c();
			t195 = space();
			testimonial11.$$.fragment.c();
			t196 = space();
			section10 = element("section");
			footer.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "\n\n");

			div0 = claim_element(nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			div0_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n\n");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			header.$$.fragment.l(section0_nodes);
			t2 = claim_text(section0_nodes, "\n\n    ");

			div2 = claim_element(section0_nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			h1 = claim_element(div2_nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t3 = claim_text(h1_nodes, "all new FormValidation");
			h1_nodes.forEach(detach);
			t4 = claim_text(div2_nodes, "\n        ");

			h20 = claim_element(div2_nodes, "H2", { class: true }, false);
			var h20_nodes = children(h20);

			t5 = claim_text(h20_nodes, "best validation library for JavaScript. zero dependencies.");
			h20_nodes.forEach(detach);
			t6 = claim_text(div2_nodes, "\n        ");

			div1 = claim_element(div2_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			span0 = claim_element(div1_nodes, "SPAN", { class: true }, false);
			var span0_nodes = children(span0);

			t7 = claim_text(span0_nodes, "v");
			t8 = claim_text(span0_nodes, t8_value);
			span0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			t9 = claim_text(section0_nodes, "\n\n    ");

			div4 = claim_element(section0_nodes, "DIV", { class: true }, false);
			var div4_nodes = children(div4);

			div3 = claim_element(div4_nodes, "DIV", { class: true }, false);
			var div3_nodes = children(div3);

			tabs0.$$.fragment.l(div3_nodes);
			div3_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			t10 = claim_text(section0_nodes, "\n\n    ");

			div5 = claim_element(section0_nodes, "DIV", { class: true }, false);
			var div5_nodes = children(div5);

			h3 = claim_element(div5_nodes, "H3", { class: true }, false);
			var h3_nodes = children(h3);

			t11 = claim_text(h3_nodes, "explore more features");
			h3_nodes.forEach(detach);
			t12 = claim_text(div5_nodes, "\n        ");

			span1 = claim_element(div5_nodes, "SPAN", { class: true }, false);
			var span1_nodes = children(span1);

			t13 = claim_text(span1_nodes, "👇");
			span1_nodes.forEach(detach);
			div5_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t14 = claim_text(nodes, "\n\n");

			section1 = claim_element(nodes, "SECTION", { class: true, id: true }, false);
			var section1_nodes = children(section1);

			div6 = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div6_nodes = children(div6);

			dotdotdot0.$$.fragment.l(div6_nodes);
			t15 = claim_text(div6_nodes, "\n        ");

			h21 = claim_element(div6_nodes, "H2", { class: true }, false);
			var h21_nodes = children(h21);

			t16 = claim_text(h21_nodes, "Scalable, well tested code base");
			h21_nodes.forEach(detach);
			div6_nodes.forEach(detach);
			t17 = claim_text(section1_nodes, "\n\n    ");

			div11 = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div11_nodes = children(div11);

			div7 = claim_element(div11_nodes, "DIV", { class: true }, false);
			var div7_nodes = children(div7);

			ul0 = claim_element(div7_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t18 = claim_text(li0_nodes, "👍 Completely rewrite in ES6.");
			li0_nodes.forEach(detach);
			t19 = claim_text(ul0_nodes, "\n                ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t20 = claim_text(li1_nodes, "👍 Type safety. Entire code are made in TypeScript.");
			li1_nodes.forEach(detach);
			t21 = claim_text(ul0_nodes, "\n                ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t22 = claim_text(li2_nodes, "👍 High code quality via popular analysis tools such as TSLint.");
			li2_nodes.forEach(detach);
			t23 = claim_text(ul0_nodes, "\n                ");

			li3 = claim_element(ul0_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t24 = claim_text(li3_nodes, "👍 ");

			span2 = claim_element(li3_nodes, "SPAN", { class: true }, false);
			var span2_nodes = children(span2);

			t25 = claim_text(span2_nodes, "Zero dependencies");
			span2_nodes.forEach(detach);
			t26 = claim_text(li3_nodes, ". No jQuery.");
			li3_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			div7_nodes.forEach(detach);
			t27 = claim_text(div11_nodes, "\n        ");

			div10 = claim_element(div11_nodes, "DIV", { class: true }, false);
			var div10_nodes = children(div10);

			ul1 = claim_element(div10_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li4 = claim_element(ul1_nodes, "LI", { class: true }, false);
			var li4_nodes = children(li4);

			img0 = claim_element(li4_nodes, "IMG", { alt: true, class: true, src: true }, false);
			var img0_nodes = children(img0);

			img0_nodes.forEach(detach);
			t28 = claim_text(li4_nodes, "\n                    ");

			div8 = claim_element(li4_nodes, "DIV", {}, false);
			var div8_nodes = children(div8);

			t29 = claim_text(div8_nodes, "ES6");
			div8_nodes.forEach(detach);
			li4_nodes.forEach(detach);
			t30 = claim_text(ul1_nodes, "\n                ");

			li5 = claim_element(ul1_nodes, "LI", { class: true }, false);
			var li5_nodes = children(li5);

			img1 = claim_element(li5_nodes, "IMG", { alt: true, class: true, src: true }, false);
			var img1_nodes = children(img1);

			img1_nodes.forEach(detach);
			t31 = claim_text(li5_nodes, "\n                    ");

			div9 = claim_element(li5_nodes, "DIV", {}, false);
			var div9_nodes = children(div9);

			t32 = claim_text(div9_nodes, "TypeScript");
			div9_nodes.forEach(detach);
			li5_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			div10_nodes.forEach(detach);
			div11_nodes.forEach(detach);
			t33 = claim_text(section1_nodes, "\n\n    ");

			div16 = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div16_nodes = children(div16);

			div12 = claim_element(div16_nodes, "DIV", { class: true }, false);
			var div12_nodes = children(div12);

			ul2 = claim_element(div12_nodes, "UL", { class: true }, false);
			var ul2_nodes = children(ul2);

			li6 = claim_element(ul2_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			t34 = claim_text(li6_nodes, "👌 All validators, algorithms, and APIs are tested carefully with +400 Mocha unit tests.");
			li6_nodes.forEach(detach);
			t35 = claim_text(ul2_nodes, "\n                ");

			li7 = claim_element(ul2_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			t36 = claim_text(li7_nodes, "👌 Cover hundreds of end-to-end test cases against Selenium server with Nightwatch.js framework.");
			li7_nodes.forEach(detach);
			ul2_nodes.forEach(detach);
			div12_nodes.forEach(detach);
			t37 = claim_text(div16_nodes, "\n        ");

			div15 = claim_element(div16_nodes, "DIV", { class: true }, false);
			var div15_nodes = children(div15);

			ul3 = claim_element(div15_nodes, "UL", { class: true }, false);
			var ul3_nodes = children(ul3);

			li8 = claim_element(ul3_nodes, "LI", { class: true }, false);
			var li8_nodes = children(li8);

			img2 = claim_element(li8_nodes, "IMG", { alt: true, class: true, src: true }, false);
			var img2_nodes = children(img2);

			img2_nodes.forEach(detach);
			t38 = claim_text(li8_nodes, "\n                    ");

			div13 = claim_element(li8_nodes, "DIV", {}, false);
			var div13_nodes = children(div13);

			t39 = claim_text(div13_nodes, "Mocha");
			div13_nodes.forEach(detach);
			li8_nodes.forEach(detach);
			t40 = claim_text(ul3_nodes, "\n                ");

			li9 = claim_element(ul3_nodes, "LI", { class: true }, false);
			var li9_nodes = children(li9);

			img3 = claim_element(li9_nodes, "IMG", { alt: true, class: true, src: true }, false);
			var img3_nodes = children(img3);

			img3_nodes.forEach(detach);
			t41 = claim_text(li9_nodes, "\n                    ");

			div14 = claim_element(li9_nodes, "DIV", {}, false);
			var div14_nodes = children(div14);

			t42 = claim_text(div14_nodes, "Nightwatch");
			div14_nodes.forEach(detach);
			li9_nodes.forEach(detach);
			ul3_nodes.forEach(detach);
			div15_nodes.forEach(detach);
			div16_nodes.forEach(detach);
			t43 = claim_text(section1_nodes, "\n\n    ");

			div17 = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div17_nodes = children(div17);

			tabs1.$$.fragment.l(div17_nodes);
			div17_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t44 = claim_text(nodes, "\n\n");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			div18 = claim_element(section2_nodes, "DIV", { class: true }, false);
			var div18_nodes = children(div18);

			dotdotdot1.$$.fragment.l(div18_nodes);
			t45 = claim_text(div18_nodes, "\n        ");

			h22 = claim_element(div18_nodes, "H2", { class: true }, false);
			var h22_nodes = children(h22);

			t46 = claim_text(h22_nodes, "Rich set of validators");
			h22_nodes.forEach(detach);
			t47 = claim_text(div18_nodes, "\n        ");

			ul4 = claim_element(div18_nodes, "UL", { class: true }, false);
			var ul4_nodes = children(ul4);

			li10 = claim_element(ul4_nodes, "LI", {}, false);
			var li10_nodes = children(li10);

			t48 = claim_text(li10_nodes, "👍 Provide a rich set of validators to cover most various types of form field.");
			li10_nodes.forEach(detach);
			t49 = claim_text(ul4_nodes, "\n            ");

			li11 = claim_element(ul4_nodes, "LI", {}, false);
			var li11_nodes = children(li11);

			t50 = claim_text(li11_nodes, "👍 Develop and reuse your own validator easily.");
			li11_nodes.forEach(detach);
			t51 = claim_text(ul4_nodes, "\n            ");

			li12 = claim_element(ul4_nodes, "LI", {}, false);
			var li12_nodes = children(li12);

			t52 = claim_text(li12_nodes, "👍 Support ");

			span3 = claim_element(li12_nodes, "SPAN", { class: true }, false);
			var span3_nodes = children(span3);

			t53 = claim_text(span3_nodes, "sync and async validators");
			span3_nodes.forEach(detach);
			t54 = claim_text(li12_nodes, ".");
			li12_nodes.forEach(detach);
			ul4_nodes.forEach(detach);
			div18_nodes.forEach(detach);
			t55 = claim_text(section2_nodes, "\n\n    ");

			div19 = claim_element(section2_nodes, "DIV", { class: true }, false);
			var div19_nodes = children(div19);

			p0 = claim_element(div19_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			span4 = claim_element(p0_nodes, "SPAN", { class: true }, false);
			var span4_nodes = children(span4);

			t56 = claim_text(span4_nodes, "50 built-in validators");
			span4_nodes.forEach(detach);
			t57 = claim_text(p0_nodes, " and still counting. Here are some of them:");
			p0_nodes.forEach(detach);
			t58 = claim_text(div19_nodes, "\n        ");
			cards0.$$.fragment.l(div19_nodes);
			div19_nodes.forEach(detach);
			t59 = claim_text(section2_nodes, "\n\n    ");

			p1 = claim_element(section2_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t60 = claim_text(p1_nodes, "All validators can be used independently. Inspried by functional programming paradigm, all built in validators are just functions. So you can use it in browser or with ES6 module, server side frameworks such as ");

			a0 = claim_element(p1_nodes, "A", { class: true, href: true }, false);
			var a0_nodes = children(a0);

			t61 = claim_text(a0_nodes, "Express");
			a0_nodes.forEach(detach);
			t62 = claim_text(p1_nodes, ":");
			p1_nodes.forEach(detach);
			t63 = claim_text(section2_nodes, "\n\n    ");

			div20 = claim_element(section2_nodes, "DIV", { class: true }, false);
			var div20_nodes = children(div20);

			tabs2.$$.fragment.l(div20_nodes);
			div20_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			t64 = claim_text(nodes, "\n\n");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			div21 = claim_element(section3_nodes, "DIV", { class: true }, false);
			var div21_nodes = children(div21);

			dotdotdot2.$$.fragment.l(div21_nodes);
			t65 = claim_text(div21_nodes, "\n        ");

			h23 = claim_element(div21_nodes, "H2", { class: true }, false);
			var h23_nodes = children(h23);

			t66 = claim_text(h23_nodes, "Plugin architecture");
			h23_nodes.forEach(detach);
			t67 = claim_text(div21_nodes, "\n        ");

			p2 = claim_element(div21_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t68 = claim_text(p2_nodes, "The giant and old jQuery plugin doesn't exist anymore. With the new ");

			span5 = claim_element(p2_nodes, "SPAN", { class: true }, false);
			var span5_nodes = children(span5);

			t69 = claim_text(span5_nodes, "plugin based architectue");
			span5_nodes.forEach(detach);
			t70 = claim_text(p2_nodes, ", the library has really small core. Everything else is built around as a plugin.");
			p2_nodes.forEach(detach);
			div21_nodes.forEach(detach);
			t71 = claim_text(section3_nodes, "\n\n    ");

			div22 = claim_element(section3_nodes, "DIV", { class: true }, false);
			var div22_nodes = children(div22);

			tabs3.$$.fragment.l(div22_nodes);
			div22_nodes.forEach(detach);
			t72 = claim_text(section3_nodes, "\n\n    ");

			div23 = claim_element(section3_nodes, "DIV", { class: true }, false);
			var div23_nodes = children(div23);

			p3 = claim_element(div23_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			span6 = claim_element(p3_nodes, "SPAN", { class: true }, false);
			var span6_nodes = children(span6);

			t73 = claim_text(span6_nodes, "35 plugins");
			span6_nodes.forEach(detach);
			t74 = claim_text(p3_nodes, " and still counting. Here are some of them:");
			p3_nodes.forEach(detach);
			t75 = claim_text(div23_nodes, "\n        ");
			cards1.$$.fragment.l(div23_nodes);
			div23_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			t76 = claim_text(nodes, "\n\n");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			div24 = claim_element(section4_nodes, "DIV", { class: true }, false);
			var div24_nodes = children(div24);

			dotdotdot3.$$.fragment.l(div24_nodes);
			t77 = claim_text(div24_nodes, "\n        ");

			h24 = claim_element(div24_nodes, "H2", { class: true }, false);
			var h24_nodes = children(h24);

			t78 = claim_text(h24_nodes, "Friendly UX");
			h24_nodes.forEach(detach);
			t79 = claim_text(div24_nodes, "\n        ");

			ul5 = claim_element(div24_nodes, "UL", { class: true }, false);
			var ul5_nodes = children(ul5);

			li13 = claim_element(ul5_nodes, "LI", {}, false);
			var li13_nodes = children(li13);

			t80 = claim_text(li13_nodes, "👍 Can it notify user while field is being validated?");
			li13_nodes.forEach(detach);
			t81 = claim_text(ul5_nodes, "\n            ");

			li14 = claim_element(ul5_nodes, "LI", {}, false);
			var li14_nodes = children(li14);

			t82 = claim_text(li14_nodes, "👍 Can it stop performing remaining validators if there is a validator that the field does not pass?");
			li14_nodes.forEach(detach);
			t83 = claim_text(ul5_nodes, "\n            ");

			li15 = claim_element(ul5_nodes, "LI", {}, false);
			var li15_nodes = children(li15);

			t84 = claim_text(li15_nodes, "👍 Can it perform the validation only when the field value exceed a given number of characters?");
			li15_nodes.forEach(detach);
			t85 = claim_text(ul5_nodes, "\n            ");

			li16 = claim_element(ul5_nodes, "LI", {}, false);
			var li16_nodes = children(li16);

			t86 = claim_text(li16_nodes, "👍 Can it postpone the validation for a given number of seconds from the moment user stops fill in the field?");
			li16_nodes.forEach(detach);
			ul5_nodes.forEach(detach);
			t87 = claim_text(div24_nodes, "\n        ");

			p4 = claim_element(div24_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t88 = claim_text(p4_nodes, "Yes! FormValidation provides a built in mechanism to support these requirements.");
			p4_nodes.forEach(detach);
			div24_nodes.forEach(detach);
			section4_nodes.forEach(detach);
			t89 = claim_text(nodes, "\n\n");

			section5 = claim_element(nodes, "SECTION", { class: true }, false);
			var section5_nodes = children(section5);

			div25 = claim_element(section5_nodes, "DIV", { class: true }, false);
			var div25_nodes = children(div25);

			cards2.$$.fragment.l(div25_nodes);
			div25_nodes.forEach(detach);
			section5_nodes.forEach(detach);
			t90 = claim_text(nodes, "\n\n");

			section6 = claim_element(nodes, "SECTION", { class: true }, false);
			var section6_nodes = children(section6);

			div26 = claim_element(section6_nodes, "DIV", { class: true }, false);
			var div26_nodes = children(div26);

			dotdotdot4.$$.fragment.l(div26_nodes);
			t91 = claim_text(div26_nodes, "\n        ");

			h25 = claim_element(div26_nodes, "H2", { class: true }, false);
			var h25_nodes = children(h25);

			t92 = claim_text(h25_nodes, "Support any form, CSS framework");
			h25_nodes.forEach(detach);
			t93 = claim_text(div26_nodes, "\n        ");

			p5 = claim_element(div26_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t94 = claim_text(p5_nodes, "FormValidation is designed to support validating any form that uses or doesn't use with CSS framework. In addition to that, the library provides many built-in plugins which you can plug to ");

			span7 = claim_element(p5_nodes, "SPAN", { class: true }, false);
			var span7_nodes = children(span7);

			t95 = claim_text(span7_nodes, "use with popular CSS frameworks");
			span7_nodes.forEach(detach);
			t96 = claim_text(p5_nodes, ":");
			p5_nodes.forEach(detach);
			div26_nodes.forEach(detach);
			t97 = claim_text(section6_nodes, "\n\n    ");

			div46 = claim_element(section6_nodes, "DIV", { class: true }, false);
			var div46_nodes = children(div46);

			ul6 = claim_element(div46_nodes, "UL", { class: true }, false);
			var ul6_nodes = children(ul6);

			li17 = claim_element(ul6_nodes, "LI", { class: true }, false);
			var li17_nodes = children(li17);

			a1 = claim_element(li17_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			img4 = claim_element(a1_nodes, "IMG", { alt: true, class: true, src: true }, false);
			var img4_nodes = children(img4);

			img4_nodes.forEach(detach);
			t98 = claim_text(a1_nodes, "\n                    ");

			div27 = claim_element(a1_nodes, "DIV", {}, false);
			var div27_nodes = children(div27);

			t99 = claim_text(div27_nodes, "Bootstrap 3");
			div27_nodes.forEach(detach);
			a1_nodes.forEach(detach);
			li17_nodes.forEach(detach);
			t100 = claim_text(ul6_nodes, "\n            ");

			li18 = claim_element(ul6_nodes, "LI", { class: true }, false);
			var li18_nodes = children(li18);

			a2 = claim_element(li18_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			img5 = claim_element(a2_nodes, "IMG", { alt: true, class: true, src: true }, false);
			var img5_nodes = children(img5);

			img5_nodes.forEach(detach);
			t101 = claim_text(a2_nodes, "\n                    ");

			div28 = claim_element(a2_nodes, "DIV", {}, false);
			var div28_nodes = children(div28);

			t102 = claim_text(div28_nodes, "Bootstrap 4");
			div28_nodes.forEach(detach);
			a2_nodes.forEach(detach);
			li18_nodes.forEach(detach);
			t103 = claim_text(ul6_nodes, "\n            ");

			li19 = claim_element(ul6_nodes, "LI", { class: true }, false);
			var li19_nodes = children(li19);

			a3 = claim_element(li19_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			img6 = claim_element(a3_nodes, "IMG", { alt: true, class: true, src: true }, false);
			var img6_nodes = children(img6);

			img6_nodes.forEach(detach);
			t104 = claim_text(a3_nodes, "\n                    ");

			div29 = claim_element(a3_nodes, "DIV", {}, false);
			var div29_nodes = children(div29);

			t105 = claim_text(div29_nodes, "Bulma");
			div29_nodes.forEach(detach);
			a3_nodes.forEach(detach);
			li19_nodes.forEach(detach);
			t106 = claim_text(ul6_nodes, "\n            ");

			li20 = claim_element(ul6_nodes, "LI", { class: true }, false);
			var li20_nodes = children(li20);

			a4 = claim_element(li20_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			img7 = claim_element(a4_nodes, "IMG", { alt: true, class: true, src: true }, false);
			var img7_nodes = children(img7);

			img7_nodes.forEach(detach);
			t107 = claim_text(a4_nodes, "\n                    ");

			div30 = claim_element(a4_nodes, "DIV", {}, false);
			var div30_nodes = children(div30);

			t108 = claim_text(div30_nodes, "Foundation");
			div30_nodes.forEach(detach);
			a4_nodes.forEach(detach);
			li20_nodes.forEach(detach);
			t109 = claim_text(ul6_nodes, "\n            ");

			li21 = claim_element(ul6_nodes, "LI", { class: true }, false);
			var li21_nodes = children(li21);

			a5 = claim_element(li21_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			img8 = claim_element(a5_nodes, "IMG", { alt: true, class: true, src: true }, false);
			var img8_nodes = children(img8);

			img8_nodes.forEach(detach);
			t110 = claim_text(a5_nodes, "\n                    ");

			div31 = claim_element(a5_nodes, "DIV", {}, false);
			var div31_nodes = children(div31);

			t111 = claim_text(div31_nodes, "Materialize CSS");
			div31_nodes.forEach(detach);
			a5_nodes.forEach(detach);
			li21_nodes.forEach(detach);
			t112 = claim_text(ul6_nodes, "\n            ");

			li22 = claim_element(ul6_nodes, "LI", { class: true }, false);
			var li22_nodes = children(li22);

			a6 = claim_element(li22_nodes, "A", { href: true, class: true }, false);
			var a6_nodes = children(a6);

			img9 = claim_element(a6_nodes, "IMG", { alt: true, class: true, src: true }, false);
			var img9_nodes = children(img9);

			img9_nodes.forEach(detach);
			t113 = claim_text(a6_nodes, "\n                    ");

			div32 = claim_element(a6_nodes, "DIV", {}, false);
			var div32_nodes = children(div32);

			t114 = claim_text(div32_nodes, "milligram");
			div32_nodes.forEach(detach);
			a6_nodes.forEach(detach);
			li22_nodes.forEach(detach);
			t115 = claim_text(ul6_nodes, "\n            ");

			li23 = claim_element(ul6_nodes, "LI", { class: true }, false);
			var li23_nodes = children(li23);

			a7 = claim_element(li23_nodes, "A", { href: true, class: true }, false);
			var a7_nodes = children(a7);

			div33 = claim_element(a7_nodes, "DIV", { class: true }, false);
			var div33_nodes = children(div33);

			t116 = claim_text(div33_nodes, "m");
			div33_nodes.forEach(detach);
			t117 = claim_text(a7_nodes, "\n                    ");

			div34 = claim_element(a7_nodes, "DIV", {}, false);
			var div34_nodes = children(div34);

			t118 = claim_text(div34_nodes, "mini.css");
			div34_nodes.forEach(detach);
			a7_nodes.forEach(detach);
			li23_nodes.forEach(detach);
			t119 = claim_text(ul6_nodes, "\n            ");

			li24 = claim_element(ul6_nodes, "LI", { class: true }, false);
			var li24_nodes = children(li24);

			a8 = claim_element(li24_nodes, "A", { href: true, class: true }, false);
			var a8_nodes = children(a8);

			div35 = claim_element(a8_nodes, "DIV", { class: true }, false);
			var div35_nodes = children(div35);

			t120 = claim_text(div35_nodes, "MUI");
			div35_nodes.forEach(detach);
			t121 = claim_text(a8_nodes, "\n                    ");

			div36 = claim_element(a8_nodes, "DIV", {}, false);
			var div36_nodes = children(div36);

			t122 = claim_text(div36_nodes, "Mui CSS");
			div36_nodes.forEach(detach);
			a8_nodes.forEach(detach);
			li24_nodes.forEach(detach);
			t123 = claim_text(ul6_nodes, "\n            ");

			li25 = claim_element(ul6_nodes, "LI", { class: true }, false);
			var li25_nodes = children(li25);

			a9 = claim_element(li25_nodes, "A", { href: true, class: true }, false);
			var a9_nodes = children(a9);

			div37 = claim_element(a9_nodes, "DIV", { class: true }, false);
			var div37_nodes = children(div37);

			t124 = claim_text(div37_nodes, "P");
			div37_nodes.forEach(detach);
			t125 = claim_text(a9_nodes, "\n                    ");

			div38 = claim_element(a9_nodes, "DIV", {}, false);
			var div38_nodes = children(div38);

			t126 = claim_text(div38_nodes, "Pure CSS");
			div38_nodes.forEach(detach);
			a9_nodes.forEach(detach);
			li25_nodes.forEach(detach);
			t127 = claim_text(ul6_nodes, "\n            ");

			li26 = claim_element(ul6_nodes, "LI", { class: true }, false);
			var li26_nodes = children(li26);

			a10 = claim_element(li26_nodes, "A", { href: true, class: true }, false);
			var a10_nodes = children(a10);

			img10 = claim_element(a10_nodes, "IMG", { alt: true, class: true, src: true }, false);
			var img10_nodes = children(img10);

			img10_nodes.forEach(detach);
			t128 = claim_text(a10_nodes, "\n                    ");

			div39 = claim_element(a10_nodes, "DIV", {}, false);
			var div39_nodes = children(div39);

			t129 = claim_text(div39_nodes, "Semantic UI");
			div39_nodes.forEach(detach);
			a10_nodes.forEach(detach);
			li26_nodes.forEach(detach);
			t130 = claim_text(ul6_nodes, "\n            ");

			li27 = claim_element(ul6_nodes, "LI", { class: true }, false);
			var li27_nodes = children(li27);

			a11 = claim_element(li27_nodes, "A", { href: true, class: true }, false);
			var a11_nodes = children(a11);

			img11 = claim_element(a11_nodes, "IMG", { alt: true, class: true, src: true }, false);
			var img11_nodes = children(img11);

			img11_nodes.forEach(detach);
			t131 = claim_text(a11_nodes, "\n                    ");

			div40 = claim_element(a11_nodes, "DIV", {}, false);
			var div40_nodes = children(div40);

			t132 = claim_text(div40_nodes, "Shoelace");
			div40_nodes.forEach(detach);
			a11_nodes.forEach(detach);
			li27_nodes.forEach(detach);
			t133 = claim_text(ul6_nodes, "\n            ");

			li28 = claim_element(ul6_nodes, "LI", { class: true }, false);
			var li28_nodes = children(li28);

			a12 = claim_element(li28_nodes, "A", { href: true, class: true }, false);
			var a12_nodes = children(a12);

			img12 = claim_element(a12_nodes, "IMG", { alt: true, class: true, src: true }, false);
			var img12_nodes = children(img12);

			img12_nodes.forEach(detach);
			t134 = claim_text(a12_nodes, "\n                    ");

			div41 = claim_element(a12_nodes, "DIV", {}, false);
			var div41_nodes = children(div41);

			t135 = claim_text(div41_nodes, "Spectre");
			div41_nodes.forEach(detach);
			a12_nodes.forEach(detach);
			li28_nodes.forEach(detach);
			t136 = claim_text(ul6_nodes, "\n            ");

			li29 = claim_element(ul6_nodes, "LI", { class: true }, false);
			var li29_nodes = children(li29);

			a13 = claim_element(li29_nodes, "A", { href: true, class: true }, false);
			var a13_nodes = children(a13);

			div42 = claim_element(a13_nodes, "DIV", { class: true }, false);
			var div42_nodes = children(div42);

			t137 = claim_text(div42_nodes, "T");
			div42_nodes.forEach(detach);
			t138 = claim_text(a13_nodes, "\n                    ");

			div43 = claim_element(a13_nodes, "DIV", {}, false);
			var div43_nodes = children(div43);

			t139 = claim_text(div43_nodes, "Tachyons");
			div43_nodes.forEach(detach);
			a13_nodes.forEach(detach);
			li29_nodes.forEach(detach);
			t140 = claim_text(ul6_nodes, "\n            ");

			li30 = claim_element(ul6_nodes, "LI", { class: true }, false);
			var li30_nodes = children(li30);

			a14 = claim_element(li30_nodes, "A", { href: true, class: true }, false);
			var a14_nodes = children(a14);

			img13 = claim_element(a14_nodes, "IMG", { alt: true, class: true, src: true }, false);
			var img13_nodes = children(img13);

			img13_nodes.forEach(detach);
			t141 = claim_text(a14_nodes, "\n                    ");

			div44 = claim_element(a14_nodes, "DIV", {}, false);
			var div44_nodes = children(div44);

			t142 = claim_text(div44_nodes, "Turret CSS");
			div44_nodes.forEach(detach);
			a14_nodes.forEach(detach);
			li30_nodes.forEach(detach);
			t143 = claim_text(ul6_nodes, "\n            ");

			li31 = claim_element(ul6_nodes, "LI", { class: true }, false);
			var li31_nodes = children(li31);

			a15 = claim_element(li31_nodes, "A", { href: true, class: true }, false);
			var a15_nodes = children(a15);

			img14 = claim_element(a15_nodes, "IMG", { alt: true, class: true, src: true }, false);
			var img14_nodes = children(img14);

			img14_nodes.forEach(detach);
			t144 = claim_text(a15_nodes, "\n                    ");

			div45 = claim_element(a15_nodes, "DIV", {}, false);
			var div45_nodes = children(div45);

			t145 = claim_text(div45_nodes, "UIKit");
			div45_nodes.forEach(detach);
			a15_nodes.forEach(detach);
			li31_nodes.forEach(detach);
			ul6_nodes.forEach(detach);
			t146 = claim_text(div46_nodes, "\n        ");

			p6 = claim_element(div46_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t147 = claim_text(p6_nodes, "and more landing soon.");
			p6_nodes.forEach(detach);
			div46_nodes.forEach(detach);
			section6_nodes.forEach(detach);
			t148 = claim_text(nodes, "\n\n");

			section7 = claim_element(nodes, "SECTION", { class: true }, false);
			var section7_nodes = children(section7);

			div47 = claim_element(section7_nodes, "DIV", { class: true }, false);
			var div47_nodes = children(div47);

			dotdotdot5.$$.fragment.l(div47_nodes);
			t149 = claim_text(div47_nodes, "\n        ");

			h26 = claim_element(div47_nodes, "H2", { class: true }, false);
			var h26_nodes = children(h26);

			t150 = claim_text(h26_nodes, "Integrate with UI libraries");
			h26_nodes.forEach(detach);
			t151 = claim_text(div47_nodes, "\n        ");

			p7 = claim_element(div47_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t152 = claim_text(p7_nodes, "FormValidation plays nicely with other libraries. It has useful APIs to integrate with another libraries.");
			p7_nodes.forEach(detach);
			t153 = claim_text(div47_nodes, "\n        ");

			p8 = claim_element(div47_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t154 = claim_text(p8_nodes, "By using the same principle, you can easily ");

			span8 = claim_element(p8_nodes, "SPAN", { class: true }, false);
			var span8_nodes = children(span8);

			t155 = claim_text(span8_nodes, "integrate it with any UI library");
			span8_nodes.forEach(detach);
			t156 = claim_text(p8_nodes, " out there. To name a few:");
			p8_nodes.forEach(detach);
			div47_nodes.forEach(detach);
			t157 = claim_text(section7_nodes, "\n\n    ");

			div48 = claim_element(section7_nodes, "DIV", { class: true }, false);
			var div48_nodes = children(div48);

			cards3.$$.fragment.l(div48_nodes);
			div48_nodes.forEach(detach);
			section7_nodes.forEach(detach);
			t158 = claim_text(nodes, "\n\n");

			section8 = claim_element(nodes, "SECTION", { class: true }, false);
			var section8_nodes = children(section8);

			div57 = claim_element(section8_nodes, "DIV", { class: true }, false);
			var div57_nodes = children(div57);

			div49 = claim_element(div57_nodes, "DIV", { class: true }, false);
			var div49_nodes = children(div49);

			dotdotdot6.$$.fragment.l(div49_nodes);
			t159 = claim_text(div49_nodes, "\n            ");

			h27 = claim_element(div49_nodes, "H2", { class: true }, false);
			var h27_nodes = children(h27);

			t160 = claim_text(h27_nodes, "Supported browsers");
			h27_nodes.forEach(detach);
			t161 = claim_text(div49_nodes, "\n            ");

			p9 = claim_element(div49_nodes, "P", { class: true }, false);
			var p9_nodes = children(p9);

			t162 = claim_text(p9_nodes, "FormValidation works with the latest version of Chrome, Firefox, Safari, Opera, and Edge. Internet Explorer 11 is supported as well.");
			p9_nodes.forEach(detach);
			div49_nodes.forEach(detach);
			t163 = claim_text(div57_nodes, "\n        ");

			div56 = claim_element(div57_nodes, "DIV", { class: true }, false);
			var div56_nodes = children(div56);

			ul7 = claim_element(div56_nodes, "UL", { class: true }, false);
			var ul7_nodes = children(ul7);

			li32 = claim_element(ul7_nodes, "LI", { class: true }, false);
			var li32_nodes = children(li32);

			img15 = claim_element(li32_nodes, "IMG", { alt: true, class: true, src: true }, false);
			var img15_nodes = children(img15);

			img15_nodes.forEach(detach);
			t164 = claim_text(li32_nodes, "\n                    ");

			div50 = claim_element(li32_nodes, "DIV", {}, false);
			var div50_nodes = children(div50);

			t165 = claim_text(div50_nodes, "latest");
			div50_nodes.forEach(detach);
			li32_nodes.forEach(detach);
			t166 = claim_text(ul7_nodes, "\n                ");

			li33 = claim_element(ul7_nodes, "LI", { class: true }, false);
			var li33_nodes = children(li33);

			img16 = claim_element(li33_nodes, "IMG", { alt: true, class: true, src: true }, false);
			var img16_nodes = children(img16);

			img16_nodes.forEach(detach);
			t167 = claim_text(li33_nodes, "\n                    ");

			div51 = claim_element(li33_nodes, "DIV", {}, false);
			var div51_nodes = children(div51);

			t168 = claim_text(div51_nodes, "latest");
			div51_nodes.forEach(detach);
			li33_nodes.forEach(detach);
			t169 = claim_text(ul7_nodes, "\n                ");

			li34 = claim_element(ul7_nodes, "LI", { class: true }, false);
			var li34_nodes = children(li34);

			img17 = claim_element(li34_nodes, "IMG", { alt: true, class: true, src: true }, false);
			var img17_nodes = children(img17);

			img17_nodes.forEach(detach);
			t170 = claim_text(li34_nodes, "\n                    ");

			div52 = claim_element(li34_nodes, "DIV", {}, false);
			var div52_nodes = children(div52);

			t171 = claim_text(div52_nodes, "latest");
			div52_nodes.forEach(detach);
			li34_nodes.forEach(detach);
			t172 = claim_text(ul7_nodes, "\n                ");

			li35 = claim_element(ul7_nodes, "LI", { class: true }, false);
			var li35_nodes = children(li35);

			img18 = claim_element(li35_nodes, "IMG", { alt: true, class: true, src: true }, false);
			var img18_nodes = children(img18);

			img18_nodes.forEach(detach);
			t173 = claim_text(li35_nodes, "\n                    ");

			div53 = claim_element(li35_nodes, "DIV", {}, false);
			var div53_nodes = children(div53);

			t174 = claim_text(div53_nodes, "latest");
			div53_nodes.forEach(detach);
			li35_nodes.forEach(detach);
			t175 = claim_text(ul7_nodes, "\n                ");

			li36 = claim_element(ul7_nodes, "LI", { class: true }, false);
			var li36_nodes = children(li36);

			img19 = claim_element(li36_nodes, "IMG", { alt: true, class: true, src: true }, false);
			var img19_nodes = children(img19);

			img19_nodes.forEach(detach);
			t176 = claim_text(li36_nodes, "\n                    ");

			div54 = claim_element(li36_nodes, "DIV", {}, false);
			var div54_nodes = children(div54);

			t177 = claim_text(div54_nodes, "latest");
			div54_nodes.forEach(detach);
			li36_nodes.forEach(detach);
			t178 = claim_text(ul7_nodes, "\n                ");

			li37 = claim_element(ul7_nodes, "LI", { class: true }, false);
			var li37_nodes = children(li37);

			img20 = claim_element(li37_nodes, "IMG", { alt: true, class: true, src: true }, false);
			var img20_nodes = children(img20);

			img20_nodes.forEach(detach);
			t179 = claim_text(li37_nodes, "\n                    ");

			div55 = claim_element(li37_nodes, "DIV", {}, false);
			var div55_nodes = children(div55);

			t180 = claim_text(div55_nodes, "11");
			div55_nodes.forEach(detach);
			li37_nodes.forEach(detach);
			ul7_nodes.forEach(detach);
			div56_nodes.forEach(detach);
			div57_nodes.forEach(detach);
			section8_nodes.forEach(detach);
			t181 = claim_text(nodes, "\n\n");

			section9 = claim_element(nodes, "SECTION", { class: true }, false);
			var section9_nodes = children(section9);

			div62 = claim_element(section9_nodes, "DIV", { class: true }, false);
			var div62_nodes = children(div62);

			dotdotdot7.$$.fragment.l(div62_nodes);
			t182 = claim_text(div62_nodes, "\n        ");

			h28 = claim_element(div62_nodes, "H2", { class: true }, false);
			var h28_nodes = children(h28);

			t183 = claim_text(h28_nodes, "Used by thousand developers and designers like you");
			h28_nodes.forEach(detach);
			t184 = claim_text(div62_nodes, "\n\n        ");

			div58 = claim_element(div62_nodes, "DIV", { class: true }, false);
			var div58_nodes = children(div58);

			testimonial0.$$.fragment.l(div58_nodes);
			t185 = claim_text(div58_nodes, "\n            ");
			testimonial1.$$.fragment.l(div58_nodes);
			t186 = claim_text(div58_nodes, "\n            ");
			testimonial2.$$.fragment.l(div58_nodes);
			div58_nodes.forEach(detach);
			t187 = claim_text(div62_nodes, "\n\n        ");

			div59 = claim_element(div62_nodes, "DIV", { class: true }, false);
			var div59_nodes = children(div59);

			testimonial3.$$.fragment.l(div59_nodes);
			t188 = claim_text(div59_nodes, "\n            ");
			testimonial4.$$.fragment.l(div59_nodes);
			t189 = claim_text(div59_nodes, "\n            ");
			testimonial5.$$.fragment.l(div59_nodes);
			div59_nodes.forEach(detach);
			t190 = claim_text(div62_nodes, "\n\n        ");

			div60 = claim_element(div62_nodes, "DIV", { class: true }, false);
			var div60_nodes = children(div60);

			testimonial6.$$.fragment.l(div60_nodes);
			t191 = claim_text(div60_nodes, "\n            ");
			testimonial7.$$.fragment.l(div60_nodes);
			t192 = claim_text(div60_nodes, "\n            ");
			testimonial8.$$.fragment.l(div60_nodes);
			div60_nodes.forEach(detach);
			t193 = claim_text(div62_nodes, "\n\n        ");

			div61 = claim_element(div62_nodes, "DIV", { class: true }, false);
			var div61_nodes = children(div61);

			testimonial9.$$.fragment.l(div61_nodes);
			t194 = claim_text(div61_nodes, "\n            ");
			testimonial10.$$.fragment.l(div61_nodes);
			t195 = claim_text(div61_nodes, "\n            ");
			testimonial11.$$.fragment.l(div61_nodes);
			div61_nodes.forEach(detach);
			div62_nodes.forEach(detach);
			section9_nodes.forEach(detach);
			t196 = claim_text(nodes, "\n\n");

			section10 = claim_element(nodes, "SECTION", { class: true }, false);
			var section10_nodes = children(section10);

			footer.$$.fragment.l(section10_nodes);
			section10_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • The best validation library for JavaScript";
			div0.className = "absolute top-0 left-0 h-75 w-100 hero-bg bg-dark-blue svelte-1txy4qx";
			add_location(div0, file$3, 29, 0, 504);
			h1.className = "f1 fw9 lh-copy ma0 lh-title f-headline-l svelte-1txy4qx";
			add_location(h1, file$3, 35, 8, 694);
			h20.className = "f2 mv5";
			add_location(h20, file$3, 36, 8, 783);
			span0.className = "bg-gold br-pill pa2 near-black";
			add_location(span0, file$3, 37, 28, 894);
			div1.className = "f3 mv5";
			add_location(div1, file$3, 37, 8, 874);
			div2.className = "mw9 center tc pt6 pb5 relative near-white";
			add_location(div2, file$3, 34, 4, 630);
			div3.className = "relative";
			add_location(div3, file$3, 41, 8, 1027);
			div4.className = "w-100 center mw7";
			add_location(div4, file$3, 40, 4, 988);
			h3.className = "f3";
			add_location(h3, file$3, 52, 8, 1426);
			span1.className = "w3 h3 f1";
			add_location(span1, file$3, 53, 8, 1476);
			div5.className = "mt5 mw6 center tc";
			add_location(div5, file$3, 51, 4, 1386);
			section0.className = "w-100 vh-100";
			add_location(section0, file$3, 31, 0, 579);
			h21.className = "f1";
			add_location(h21, file$3, 60, 8, 1642);
			div6.className = "mw8 center";
			add_location(div6, file$3, 58, 4, 1587);
			add_location(li0, file$3, 66, 16, 1825);
			add_location(li1, file$3, 67, 16, 1880);
			add_location(li2, file$3, 68, 16, 1957);
			span2.className = "bg-gold pa1 br2 b";
			add_location(span2, file$3, 69, 23, 2053);
			add_location(li3, file$3, 69, 16, 2046);
			ul0.className = "list pa0 lh-copy";
			add_location(ul0, file$3, 65, 12, 1779);
			div7.className = "w-70";
			add_location(div7, file$3, 64, 8, 1748);
			img0.alt = "ES6";
			img0.className = "w3 h3 mb1";
			img0.src = "/branches/es6.svg";
			add_location(img0, file$3, 75, 20, 2301);
			add_location(div8, file$3, 76, 20, 2381);
			li4.className = "w-50 pa3 tc";
			add_location(li4, file$3, 74, 16, 2256);
			img1.alt = "TypeScript";
			img1.className = "w3 h3 mb1";
			img1.src = "/branches/typescript.svg";
			add_location(img1, file$3, 79, 20, 2479);
			add_location(div9, file$3, 80, 20, 2573);
			li5.className = "w-50 pa3 tc";
			add_location(li5, file$3, 78, 16, 2434);
			ul1.className = "list ma0 pa0 flex flex-wrap";
			add_location(ul1, file$3, 73, 12, 2199);
			div10.className = "w-30";
			add_location(div10, file$3, 72, 8, 2168);
			div11.className = "mw8 center flex";
			add_location(div11, file$3, 63, 4, 1710);
			add_location(li6, file$3, 89, 16, 2781);
			add_location(li7, file$3, 90, 16, 2895);
			ul2.className = "list pa0 lh-copy";
			add_location(ul2, file$3, 88, 12, 2735);
			div12.className = "w-70";
			add_location(div12, file$3, 87, 8, 2704);
			img2.alt = "Mocha";
			img2.className = "w3 h3 mb1";
			img2.src = "/branches/mocha.svg";
			add_location(img2, file$3, 96, 20, 3175);
			add_location(div13, file$3, 97, 20, 3259);
			li8.className = "w-50 pa3 tc";
			add_location(li8, file$3, 95, 16, 3130);
			img3.alt = "Nightwatch";
			img3.className = "w3 h3 mb1";
			img3.src = "/branches/nightwatch.svg";
			add_location(img3, file$3, 100, 20, 3359);
			add_location(div14, file$3, 101, 20, 3453);
			li9.className = "w-50 pa3 tc";
			add_location(li9, file$3, 99, 16, 3314);
			ul3.className = "list ma0 pa0 flex flex-wrap";
			add_location(ul3, file$3, 94, 12, 3073);
			div15.className = "w-30";
			add_location(div15, file$3, 93, 8, 3042);
			div16.className = "mw8 center flex";
			add_location(div16, file$3, 86, 4, 2666);
			div17.className = "mw7 center";
			add_location(div17, file$3, 107, 4, 3546);
			section1.className = "bt b--black-30 pv5";
			section1.id = "features";
			add_location(section1, file$3, 57, 0, 1532);
			h22.className = "f1";
			add_location(h22, file$3, 159, 8, 4969);
			add_location(li10, file$3, 161, 12, 5062);
			add_location(li11, file$3, 162, 12, 5162);
			span3.className = "bg-gold pa1 br2 b";
			add_location(span3, file$3, 163, 27, 5246);
			add_location(li12, file$3, 163, 12, 5231);
			ul4.className = "list pa0 lh-copy";
			add_location(ul4, file$3, 160, 8, 5020);
			div18.className = "mw8 center";
			add_location(div18, file$3, 157, 4, 4914);
			span4.className = "bg-gold pa1 br2 b";
			add_location(span4, file$3, 168, 26, 5398);
			p0.className = "pv3 tc";
			add_location(p0, file$3, 168, 8, 5380);
			div19.className = "mw7 center";
			add_location(div19, file$3, 167, 4, 5347);
			a0.className = "blue link";
			a0.href = "https://expressjs.com/";
			add_location(a0, file$3, 182, 249, 6753);
			p1.className = "mw8 center pv3 lh-copy";
			add_location(p1, file$3, 182, 4, 6508);
			div20.className = "mw7 center";
			add_location(div20, file$3, 184, 4, 6826);
			section2.className = "pv5";
			add_location(section2, file$3, 156, 0, 4888);
			h23.className = "f1";
			add_location(h23, file$3, 221, 8, 7779);
			span5.className = "bg-gold pa1 br2 b";
			add_location(span5, file$3, 222, 95, 7914);
			p2.className = "lh-copy";
			add_location(p2, file$3, 222, 8, 7827);
			div21.className = "mw8 center";
			add_location(div21, file$3, 219, 4, 7724);
			div22.className = "mw7 center";
			add_location(div22, file$3, 225, 4, 8091);
			span6.className = "bg-gold pa1 br2 b";
			add_location(span6, file$3, 276, 26, 9609);
			p3.className = "pv3 tc";
			add_location(p3, file$3, 276, 8, 9591);
			div23.className = "mw7 center";
			add_location(div23, file$3, 275, 4, 9558);
			section3.className = "pv5";
			add_location(section3, file$3, 218, 0, 7698);
			h24.className = "f1";
			add_location(h24, file$3, 291, 8, 10568);
			add_location(li13, file$3, 293, 12, 10654);
			add_location(li14, file$3, 294, 12, 10729);
			add_location(li15, file$3, 295, 12, 10851);
			add_location(li16, file$3, 296, 12, 10968);
			ul5.className = "list pa0 ma0 lh-copy";
			add_location(ul5, file$3, 292, 8, 10608);
			p4.className = "lh-copy";
			add_location(p4, file$3, 298, 8, 11109);
			div24.className = "mw8 center";
			add_location(div24, file$3, 289, 4, 10513);
			section4.className = "pv5";
			add_location(section4, file$3, 288, 0, 10487);
			div25.className = "mw8 center";
			add_location(div25, file$3, 303, 4, 11262);
			section5.className = "pb5";
			add_location(section5, file$3, 302, 0, 11236);
			h25.className = "f1";
			add_location(h25, file$3, 331, 8, 12437);
			span7.className = "bg-gold pa1 br2 b";
			add_location(span7, file$3, 332, 216, 12705);
			p5.className = "lh-copy";
			add_location(p5, file$3, 332, 8, 12497);
			div26.className = "mw8 center";
			add_location(div26, file$3, 329, 4, 12382);
			img4.alt = "Bootstrap 3";
			img4.className = "w3 h3 mb1";
			img4.src = "/branches/bootstrap.svg";
			add_location(img4, file$3, 339, 20, 13002);
			add_location(div27, file$3, 340, 20, 13096);
			a1.href = "/guide/plugins/bootstrap3";
			a1.className = "link";
			add_location(a1, file$3, 338, 16, 12932);
			li17.className = "w-20 pa3 tc";
			add_location(li17, file$3, 337, 12, 12891);
			img5.alt = "Bootstrap 4";
			img5.className = "w3 h3 mb1";
			img5.src = "/branches/bootstrap.svg";
			add_location(img5, file$3, 345, 20, 13280);
			add_location(div28, file$3, 346, 20, 13374);
			a2.href = "/guide/plugins/bootstrap";
			a2.className = "link";
			add_location(a2, file$3, 344, 16, 13211);
			li18.className = "w-20 pa3 tc";
			add_location(li18, file$3, 343, 12, 13170);
			img6.alt = "Bulma";
			img6.className = "w3 h3 mb1";
			img6.src = "/branches/bulma.svg";
			add_location(img6, file$3, 351, 20, 13554);
			add_location(div29, file$3, 352, 20, 13638);
			a3.href = "/guide/plugins/bulma";
			a3.className = "link";
			add_location(a3, file$3, 350, 16, 13489);
			li19.className = "w-20 pa3 tc";
			add_location(li19, file$3, 349, 12, 13448);
			img7.alt = "Foundation";
			img7.className = "w3 h3 mb1";
			img7.src = "/branches/foundation.svg";
			add_location(img7, file$3, 357, 20, 13817);
			add_location(div30, file$3, 358, 20, 13911);
			a4.href = "/guide/plugins/foundation";
			a4.className = "link";
			add_location(a4, file$3, 356, 16, 13747);
			li20.className = "w-20 pa3 tc";
			add_location(li20, file$3, 355, 12, 13706);
			img8.alt = "Materialize CSS";
			img8.className = "w3 h3 mb1";
			img8.src = "/branches/materialize.svg";
			add_location(img8, file$3, 363, 20, 14096);
			add_location(div31, file$3, 364, 20, 14196);
			a5.href = "/guide/plugins/materialize";
			a5.className = "link";
			add_location(a5, file$3, 362, 16, 14025);
			li21.className = "w-20 pa3 tc";
			add_location(li21, file$3, 361, 12, 13984);
			img9.alt = "milligram";
			img9.className = "w3 h3 mb1";
			img9.src = "/branches/milligram.svg";
			add_location(img9, file$3, 369, 20, 14384);
			add_location(div32, file$3, 370, 20, 14476);
			a6.href = "/guide/plugins/milligram";
			a6.className = "link";
			add_location(a6, file$3, 368, 16, 14315);
			li22.className = "w-20 pa3 tc";
			add_location(li22, file$3, 367, 12, 14274);
			div33.className = "w3 h3 flex items-center justify-center mb1 f1 white br2 logo-mini svelte-1txy4qx";
			add_location(div33, file$3, 375, 20, 14683);
			add_location(div34, file$3, 376, 20, 14790);
			a7.href = "/guide/plugins/mini";
			a7.className = "link flex flex-column items-center";
			add_location(a7, file$3, 374, 16, 14589);
			li23.className = "w-20 pa3 tc";
			add_location(li23, file$3, 373, 12, 14548);
			div35.className = "w3 h3 flex items-center justify-center br-pill mb1 f3 white logo-mui svelte-1txy4qx";
			add_location(div35, file$3, 381, 20, 14995);
			add_location(div36, file$3, 382, 20, 15107);
			a8.href = "/guide/plugins/mui";
			a8.className = "link flex flex-column items-center";
			add_location(a8, file$3, 380, 16, 14902);
			li24.className = "w-20 pa3 tc";
			add_location(li24, file$3, 379, 12, 14861);
			div37.className = "w3 h3 flex items-center justify-center mb1 f1 white br2 logo-pure svelte-1txy4qx";
			add_location(div37, file$3, 387, 20, 15312);
			add_location(div38, file$3, 388, 20, 15419);
			a9.href = "/guide/plugins/pure";
			a9.className = "link flex flex-column items-center";
			add_location(a9, file$3, 386, 16, 15218);
			li25.className = "w-20 pa3 tc";
			add_location(li25, file$3, 385, 12, 15177);
			img10.alt = "Semantic";
			img10.className = "w3 h3 mb1";
			img10.src = "/branches/semantic.svg";
			add_location(img10, file$3, 393, 20, 15599);
			add_location(div39, file$3, 394, 20, 15689);
			a10.href = "/guide/plugins/semantic";
			a10.className = "link";
			add_location(a10, file$3, 392, 16, 15531);
			li26.className = "w-20 pa3 tc";
			add_location(li26, file$3, 391, 12, 15490);
			img11.alt = "Shoelace";
			img11.className = "w3 h3 mb1";
			img11.src = "/branches/shoelace.svg";
			add_location(img11, file$3, 399, 20, 15872);
			add_location(div40, file$3, 400, 20, 15962);
			a11.href = "/guide/plugins/shoelace";
			a11.className = "link";
			add_location(a11, file$3, 398, 16, 15804);
			li27.className = "w-20 pa3 tc";
			add_location(li27, file$3, 397, 12, 15763);
			img12.alt = "Spectre";
			img12.className = "w3 h3 mb1";
			img12.src = "/branches/spectre.svg";
			add_location(img12, file$3, 405, 20, 16141);
			add_location(div41, file$3, 406, 20, 16229);
			a12.href = "/guide/plugins/spectre";
			a12.className = "link";
			add_location(a12, file$3, 404, 16, 16074);
			li28.className = "w-20 pa3 tc";
			add_location(li28, file$3, 403, 12, 16033);
			div42.className = "w3 h3 flex items-center justify-center mb1 f1 white br2 bg-blue";
			add_location(div42, file$3, 411, 20, 16438);
			add_location(div43, file$3, 412, 20, 16543);
			a13.href = "/guide/plugins/tachyons";
			a13.className = "link flex flex-column items-center";
			add_location(a13, file$3, 410, 16, 16340);
			li29.className = "w-20 pa3 tc";
			add_location(li29, file$3, 409, 12, 16299);
			img13.alt = "Turret CSS";
			img13.className = "w3 h3 mb1";
			img13.src = "/branches/turret.svg";
			add_location(img13, file$3, 417, 20, 16721);
			add_location(div44, file$3, 418, 20, 16811);
			a14.href = "/guide/plugins/turret";
			a14.className = "link";
			add_location(a14, file$3, 416, 16, 16655);
			li30.className = "w-20 pa3 tc";
			add_location(li30, file$3, 415, 12, 16614);
			img14.alt = "UIKit";
			img14.className = "w3 h3 mb1";
			img14.src = "/branches/uikit.svg";
			add_location(img14, file$3, 423, 20, 16990);
			add_location(div45, file$3, 424, 20, 17074);
			a15.href = "/guide/plugins/uikit";
			a15.className = "link";
			add_location(a15, file$3, 422, 16, 16925);
			li31.className = "w-20 pa3 tc";
			add_location(li31, file$3, 421, 12, 16884);
			ul6.className = "list pa0 flex flex-wrap";
			add_location(ul6, file$3, 336, 8, 12842);
			p6.className = "lh-copy tc";
			add_location(p6, file$3, 428, 8, 17152);
			div46.className = "mw7 center";
			add_location(div46, file$3, 335, 4, 12809);
			section6.className = "pv5";
			add_location(section6, file$3, 328, 0, 12356);
			h26.className = "f1";
			add_location(h26, file$3, 435, 8, 17305);
			p7.className = "lh-copy";
			add_location(p7, file$3, 436, 8, 17361);
			span8.className = "bg-gold pa1 br2 b";
			add_location(span8, file$3, 437, 71, 17561);
			p8.className = "lh-copy";
			add_location(p8, file$3, 437, 8, 17498);
			div47.className = "mw8 center";
			add_location(div47, file$3, 433, 4, 17250);
			div48.className = "mw7 center";
			add_location(div48, file$3, 440, 4, 17679);
			section7.className = "pv5";
			add_location(section7, file$3, 432, 0, 17224);
			h27.className = "f1";
			add_location(h27, file$3, 485, 12, 19169);
			p9.className = "lh-copy";
			add_location(p9, file$3, 486, 12, 19220);
			div49.className = "w-60";
			add_location(div49, file$3, 483, 8, 19112);
			img15.alt = "Chrome";
			img15.className = "w3 h3 mb1";
			img15.src = "/branches/chrome.svg";
			add_location(img15, file$3, 491, 20, 19524);
			add_location(div50, file$3, 492, 20, 19610);
			li32.className = "w-33 pa3 tc";
			add_location(li32, file$3, 490, 16, 19479);
			img16.alt = "Firefox";
			img16.className = "w3 h3 mb1";
			img16.src = "/branches/firefox.svg";
			add_location(img16, file$3, 495, 20, 19711);
			add_location(div51, file$3, 496, 20, 19799);
			li33.className = "w-33 pa3 tc";
			add_location(li33, file$3, 494, 16, 19666);
			img17.alt = "Safari";
			img17.className = "w3 h3 mb1";
			img17.src = "/branches/safari.svg";
			add_location(img17, file$3, 499, 20, 19900);
			add_location(div52, file$3, 500, 20, 19986);
			li34.className = "w-33 pa3 tc";
			add_location(li34, file$3, 498, 16, 19855);
			img18.alt = "Opera";
			img18.className = "w3 h3 mb1";
			img18.src = "/branches/opera.svg";
			add_location(img18, file$3, 503, 20, 20087);
			add_location(div53, file$3, 504, 20, 20171);
			li35.className = "w-33 pa3 tc";
			add_location(li35, file$3, 502, 16, 20042);
			img19.alt = "Edge";
			img19.className = "w3 h3 mb1";
			img19.src = "/branches/edge.svg";
			add_location(img19, file$3, 507, 20, 20272);
			add_location(div54, file$3, 508, 20, 20354);
			li36.className = "w-33 pa3 tc";
			add_location(li36, file$3, 506, 16, 20227);
			img20.alt = "Internet Explorer 11";
			img20.className = "w3 h3 mb1";
			img20.src = "/branches/ie.svg";
			add_location(img20, file$3, 511, 20, 20455);
			add_location(div55, file$3, 512, 20, 20551);
			li37.className = "w-33 pa3 tc";
			add_location(li37, file$3, 510, 16, 20410);
			ul7.className = "list flex flex-wrap";
			add_location(ul7, file$3, 489, 12, 19430);
			div56.className = "w-40";
			add_location(div56, file$3, 488, 8, 19399);
			div57.className = "mw8 center flex";
			add_location(div57, file$3, 482, 4, 19074);
			section8.className = "pv5";
			add_location(section8, file$3, 481, 0, 19048);
			h28.className = "f1 lh-copy";
			add_location(h28, file$3, 522, 8, 20739);
			div58.className = "cf ph2-ns";
			add_location(div58, file$3, 524, 8, 20827);
			div59.className = "cf ph2-ns";
			add_location(div59, file$3, 530, 8, 21302);
			div60.className = "cf ph2-ns";
			add_location(div60, file$3, 536, 8, 21816);
			div61.className = "cf ph2-ns";
			add_location(div61, file$3, 542, 8, 22486);
			div62.className = "mw8 center";
			add_location(div62, file$3, 520, 4, 20684);
			section9.className = "bt b--black-30 pv5";
			add_location(section9, file$3, 519, 0, 20643);
			section10.className = "bt b--black-30 pv5";
			add_location(section10, file$3, 550, 0, 23302);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, div0, anchor);
			insert(target, t1, anchor);
			insert(target, section0, anchor);
			mount_component(header, section0, null);
			append(section0, t2);
			append(section0, div2);
			append(div2, h1);
			append(h1, t3);
			append(div2, t4);
			append(div2, h20);
			append(h20, t5);
			append(div2, t6);
			append(div2, div1);
			append(div1, span0);
			append(span0, t7);
			append(span0, t8);
			append(section0, t9);
			append(section0, div4);
			append(div4, div3);
			mount_component(tabs0, div3, null);
			append(section0, t10);
			append(section0, div5);
			append(div5, h3);
			append(h3, t11);
			append(div5, t12);
			append(div5, span1);
			append(span1, t13);
			insert(target, t14, anchor);
			insert(target, section1, anchor);
			append(section1, div6);
			mount_component(dotdotdot0, div6, null);
			append(div6, t15);
			append(div6, h21);
			append(h21, t16);
			append(section1, t17);
			append(section1, div11);
			append(div11, div7);
			append(div7, ul0);
			append(ul0, li0);
			append(li0, t18);
			append(ul0, t19);
			append(ul0, li1);
			append(li1, t20);
			append(ul0, t21);
			append(ul0, li2);
			append(li2, t22);
			append(ul0, t23);
			append(ul0, li3);
			append(li3, t24);
			append(li3, span2);
			append(span2, t25);
			append(li3, t26);
			append(div11, t27);
			append(div11, div10);
			append(div10, ul1);
			append(ul1, li4);
			append(li4, img0);
			append(li4, t28);
			append(li4, div8);
			append(div8, t29);
			append(ul1, t30);
			append(ul1, li5);
			append(li5, img1);
			append(li5, t31);
			append(li5, div9);
			append(div9, t32);
			append(section1, t33);
			append(section1, div16);
			append(div16, div12);
			append(div12, ul2);
			append(ul2, li6);
			append(li6, t34);
			append(ul2, t35);
			append(ul2, li7);
			append(li7, t36);
			append(div16, t37);
			append(div16, div15);
			append(div15, ul3);
			append(ul3, li8);
			append(li8, img2);
			append(li8, t38);
			append(li8, div13);
			append(div13, t39);
			append(ul3, t40);
			append(ul3, li9);
			append(li9, img3);
			append(li9, t41);
			append(li9, div14);
			append(div14, t42);
			append(section1, t43);
			append(section1, div17);
			mount_component(tabs1, div17, null);
			insert(target, t44, anchor);
			insert(target, section2, anchor);
			append(section2, div18);
			mount_component(dotdotdot1, div18, null);
			append(div18, t45);
			append(div18, h22);
			append(h22, t46);
			append(div18, t47);
			append(div18, ul4);
			append(ul4, li10);
			append(li10, t48);
			append(ul4, t49);
			append(ul4, li11);
			append(li11, t50);
			append(ul4, t51);
			append(ul4, li12);
			append(li12, t52);
			append(li12, span3);
			append(span3, t53);
			append(li12, t54);
			append(section2, t55);
			append(section2, div19);
			append(div19, p0);
			append(p0, span4);
			append(span4, t56);
			append(p0, t57);
			append(div19, t58);
			mount_component(cards0, div19, null);
			append(section2, t59);
			append(section2, p1);
			append(p1, t60);
			append(p1, a0);
			append(a0, t61);
			append(p1, t62);
			append(section2, t63);
			append(section2, div20);
			mount_component(tabs2, div20, null);
			insert(target, t64, anchor);
			insert(target, section3, anchor);
			append(section3, div21);
			mount_component(dotdotdot2, div21, null);
			append(div21, t65);
			append(div21, h23);
			append(h23, t66);
			append(div21, t67);
			append(div21, p2);
			append(p2, t68);
			append(p2, span5);
			append(span5, t69);
			append(p2, t70);
			append(section3, t71);
			append(section3, div22);
			mount_component(tabs3, div22, null);
			append(section3, t72);
			append(section3, div23);
			append(div23, p3);
			append(p3, span6);
			append(span6, t73);
			append(p3, t74);
			append(div23, t75);
			mount_component(cards1, div23, null);
			insert(target, t76, anchor);
			insert(target, section4, anchor);
			append(section4, div24);
			mount_component(dotdotdot3, div24, null);
			append(div24, t77);
			append(div24, h24);
			append(h24, t78);
			append(div24, t79);
			append(div24, ul5);
			append(ul5, li13);
			append(li13, t80);
			append(ul5, t81);
			append(ul5, li14);
			append(li14, t82);
			append(ul5, t83);
			append(ul5, li15);
			append(li15, t84);
			append(ul5, t85);
			append(ul5, li16);
			append(li16, t86);
			append(div24, t87);
			append(div24, p4);
			append(p4, t88);
			insert(target, t89, anchor);
			insert(target, section5, anchor);
			append(section5, div25);
			mount_component(cards2, div25, null);
			insert(target, t90, anchor);
			insert(target, section6, anchor);
			append(section6, div26);
			mount_component(dotdotdot4, div26, null);
			append(div26, t91);
			append(div26, h25);
			append(h25, t92);
			append(div26, t93);
			append(div26, p5);
			append(p5, t94);
			append(p5, span7);
			append(span7, t95);
			append(p5, t96);
			append(section6, t97);
			append(section6, div46);
			append(div46, ul6);
			append(ul6, li17);
			append(li17, a1);
			append(a1, img4);
			append(a1, t98);
			append(a1, div27);
			append(div27, t99);
			append(ul6, t100);
			append(ul6, li18);
			append(li18, a2);
			append(a2, img5);
			append(a2, t101);
			append(a2, div28);
			append(div28, t102);
			append(ul6, t103);
			append(ul6, li19);
			append(li19, a3);
			append(a3, img6);
			append(a3, t104);
			append(a3, div29);
			append(div29, t105);
			append(ul6, t106);
			append(ul6, li20);
			append(li20, a4);
			append(a4, img7);
			append(a4, t107);
			append(a4, div30);
			append(div30, t108);
			append(ul6, t109);
			append(ul6, li21);
			append(li21, a5);
			append(a5, img8);
			append(a5, t110);
			append(a5, div31);
			append(div31, t111);
			append(ul6, t112);
			append(ul6, li22);
			append(li22, a6);
			append(a6, img9);
			append(a6, t113);
			append(a6, div32);
			append(div32, t114);
			append(ul6, t115);
			append(ul6, li23);
			append(li23, a7);
			append(a7, div33);
			append(div33, t116);
			append(a7, t117);
			append(a7, div34);
			append(div34, t118);
			append(ul6, t119);
			append(ul6, li24);
			append(li24, a8);
			append(a8, div35);
			append(div35, t120);
			append(a8, t121);
			append(a8, div36);
			append(div36, t122);
			append(ul6, t123);
			append(ul6, li25);
			append(li25, a9);
			append(a9, div37);
			append(div37, t124);
			append(a9, t125);
			append(a9, div38);
			append(div38, t126);
			append(ul6, t127);
			append(ul6, li26);
			append(li26, a10);
			append(a10, img10);
			append(a10, t128);
			append(a10, div39);
			append(div39, t129);
			append(ul6, t130);
			append(ul6, li27);
			append(li27, a11);
			append(a11, img11);
			append(a11, t131);
			append(a11, div40);
			append(div40, t132);
			append(ul6, t133);
			append(ul6, li28);
			append(li28, a12);
			append(a12, img12);
			append(a12, t134);
			append(a12, div41);
			append(div41, t135);
			append(ul6, t136);
			append(ul6, li29);
			append(li29, a13);
			append(a13, div42);
			append(div42, t137);
			append(a13, t138);
			append(a13, div43);
			append(div43, t139);
			append(ul6, t140);
			append(ul6, li30);
			append(li30, a14);
			append(a14, img13);
			append(a14, t141);
			append(a14, div44);
			append(div44, t142);
			append(ul6, t143);
			append(ul6, li31);
			append(li31, a15);
			append(a15, img14);
			append(a15, t144);
			append(a15, div45);
			append(div45, t145);
			append(div46, t146);
			append(div46, p6);
			append(p6, t147);
			insert(target, t148, anchor);
			insert(target, section7, anchor);
			append(section7, div47);
			mount_component(dotdotdot5, div47, null);
			append(div47, t149);
			append(div47, h26);
			append(h26, t150);
			append(div47, t151);
			append(div47, p7);
			append(p7, t152);
			append(div47, t153);
			append(div47, p8);
			append(p8, t154);
			append(p8, span8);
			append(span8, t155);
			append(p8, t156);
			append(section7, t157);
			append(section7, div48);
			mount_component(cards3, div48, null);
			insert(target, t158, anchor);
			insert(target, section8, anchor);
			append(section8, div57);
			append(div57, div49);
			mount_component(dotdotdot6, div49, null);
			append(div49, t159);
			append(div49, h27);
			append(h27, t160);
			append(div49, t161);
			append(div49, p9);
			append(p9, t162);
			append(div57, t163);
			append(div57, div56);
			append(div56, ul7);
			append(ul7, li32);
			append(li32, img15);
			append(li32, t164);
			append(li32, div50);
			append(div50, t165);
			append(ul7, t166);
			append(ul7, li33);
			append(li33, img16);
			append(li33, t167);
			append(li33, div51);
			append(div51, t168);
			append(ul7, t169);
			append(ul7, li34);
			append(li34, img17);
			append(li34, t170);
			append(li34, div52);
			append(div52, t171);
			append(ul7, t172);
			append(ul7, li35);
			append(li35, img18);
			append(li35, t173);
			append(li35, div53);
			append(div53, t174);
			append(ul7, t175);
			append(ul7, li36);
			append(li36, img19);
			append(li36, t176);
			append(li36, div54);
			append(div54, t177);
			append(ul7, t178);
			append(ul7, li37);
			append(li37, img20);
			append(li37, t179);
			append(li37, div55);
			append(div55, t180);
			insert(target, t181, anchor);
			insert(target, section9, anchor);
			append(section9, div62);
			mount_component(dotdotdot7, div62, null);
			append(div62, t182);
			append(div62, h28);
			append(h28, t183);
			append(div62, t184);
			append(div62, div58);
			mount_component(testimonial0, div58, null);
			append(div58, t185);
			mount_component(testimonial1, div58, null);
			append(div58, t186);
			mount_component(testimonial2, div58, null);
			append(div62, t187);
			append(div62, div59);
			mount_component(testimonial3, div59, null);
			append(div59, t188);
			mount_component(testimonial4, div59, null);
			append(div59, t189);
			mount_component(testimonial5, div59, null);
			append(div62, t190);
			append(div62, div60);
			mount_component(testimonial6, div60, null);
			append(div60, t191);
			mount_component(testimonial7, div60, null);
			append(div60, t192);
			mount_component(testimonial8, div60, null);
			append(div62, t193);
			append(div62, div61);
			mount_component(testimonial9, div61, null);
			append(div61, t194);
			mount_component(testimonial10, div61, null);
			append(div61, t195);
			mount_component(testimonial11, div61, null);
			insert(target, t196, anchor);
			insert(target, section10, anchor);
			mount_component(footer, section10, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var tabs0_changes = {};
			if (changed.$$scope) tabs0_changes.$$scope = { changed, ctx };
			tabs0.$set(tabs0_changes);

			var tabs1_changes = {};
			if (changed.$$scope) tabs1_changes.$$scope = { changed, ctx };
			tabs1.$set(tabs1_changes);

			var cards0_changes = {};
			if (changed.$$scope) cards0_changes.$$scope = { changed, ctx };
			cards0.$set(cards0_changes);

			var tabs2_changes = {};
			if (changed.$$scope) tabs2_changes.$$scope = { changed, ctx };
			tabs2.$set(tabs2_changes);

			var tabs3_changes = {};
			if (changed.$$scope) tabs3_changes.$$scope = { changed, ctx };
			tabs3.$set(tabs3_changes);

			var cards1_changes = {};
			if (changed.$$scope) cards1_changes.$$scope = { changed, ctx };
			cards1.$set(cards1_changes);

			var cards2_changes = {};
			if (changed.$$scope) cards2_changes.$$scope = { changed, ctx };
			cards2.$set(cards2_changes);

			var cards3_changes = {};
			if (changed.$$scope) cards3_changes.$$scope = { changed, ctx };
			cards3.$set(cards3_changes);

			var testimonial0_changes = {};
			if (changed.$$scope) testimonial0_changes.$$scope = { changed, ctx };
			testimonial0.$set(testimonial0_changes);

			var testimonial1_changes = {};
			if (changed.$$scope) testimonial1_changes.$$scope = { changed, ctx };
			testimonial1.$set(testimonial1_changes);

			var testimonial2_changes = {};
			if (changed.$$scope) testimonial2_changes.$$scope = { changed, ctx };
			testimonial2.$set(testimonial2_changes);

			var testimonial3_changes = {};
			if (changed.$$scope) testimonial3_changes.$$scope = { changed, ctx };
			testimonial3.$set(testimonial3_changes);

			var testimonial4_changes = {};
			if (changed.$$scope) testimonial4_changes.$$scope = { changed, ctx };
			testimonial4.$set(testimonial4_changes);

			var testimonial5_changes = {};
			if (changed.$$scope) testimonial5_changes.$$scope = { changed, ctx };
			testimonial5.$set(testimonial5_changes);

			var testimonial6_changes = {};
			if (changed.$$scope) testimonial6_changes.$$scope = { changed, ctx };
			testimonial6.$set(testimonial6_changes);

			var testimonial7_changes = {};
			if (changed.$$scope) testimonial7_changes.$$scope = { changed, ctx };
			testimonial7.$set(testimonial7_changes);

			var testimonial8_changes = {};
			if (changed.$$scope) testimonial8_changes.$$scope = { changed, ctx };
			testimonial8.$set(testimonial8_changes);

			var testimonial9_changes = {};
			if (changed.$$scope) testimonial9_changes.$$scope = { changed, ctx };
			testimonial9.$set(testimonial9_changes);

			var testimonial10_changes = {};
			if (changed.$$scope) testimonial10_changes.$$scope = { changed, ctx };
			testimonial10.$set(testimonial10_changes);

			var testimonial11_changes = {};
			if (changed.$$scope) testimonial11_changes.$$scope = { changed, ctx };
			testimonial11.$set(testimonial11_changes);
		},

		i: function intro(local) {
			if (current) return;
			header.$$.fragment.i(local);

			tabs0.$$.fragment.i(local);

			dotdotdot0.$$.fragment.i(local);

			tabs1.$$.fragment.i(local);

			dotdotdot1.$$.fragment.i(local);

			cards0.$$.fragment.i(local);

			tabs2.$$.fragment.i(local);

			dotdotdot2.$$.fragment.i(local);

			tabs3.$$.fragment.i(local);

			cards1.$$.fragment.i(local);

			dotdotdot3.$$.fragment.i(local);

			cards2.$$.fragment.i(local);

			dotdotdot4.$$.fragment.i(local);

			dotdotdot5.$$.fragment.i(local);

			cards3.$$.fragment.i(local);

			dotdotdot6.$$.fragment.i(local);

			dotdotdot7.$$.fragment.i(local);

			testimonial0.$$.fragment.i(local);

			testimonial1.$$.fragment.i(local);

			testimonial2.$$.fragment.i(local);

			testimonial3.$$.fragment.i(local);

			testimonial4.$$.fragment.i(local);

			testimonial5.$$.fragment.i(local);

			testimonial6.$$.fragment.i(local);

			testimonial7.$$.fragment.i(local);

			testimonial8.$$.fragment.i(local);

			testimonial9.$$.fragment.i(local);

			testimonial10.$$.fragment.i(local);

			testimonial11.$$.fragment.i(local);

			footer.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			header.$$.fragment.o(local);
			tabs0.$$.fragment.o(local);
			dotdotdot0.$$.fragment.o(local);
			tabs1.$$.fragment.o(local);
			dotdotdot1.$$.fragment.o(local);
			cards0.$$.fragment.o(local);
			tabs2.$$.fragment.o(local);
			dotdotdot2.$$.fragment.o(local);
			tabs3.$$.fragment.o(local);
			cards1.$$.fragment.o(local);
			dotdotdot3.$$.fragment.o(local);
			cards2.$$.fragment.o(local);
			dotdotdot4.$$.fragment.o(local);
			dotdotdot5.$$.fragment.o(local);
			cards3.$$.fragment.o(local);
			dotdotdot6.$$.fragment.o(local);
			dotdotdot7.$$.fragment.o(local);
			testimonial0.$$.fragment.o(local);
			testimonial1.$$.fragment.o(local);
			testimonial2.$$.fragment.o(local);
			testimonial3.$$.fragment.o(local);
			testimonial4.$$.fragment.o(local);
			testimonial5.$$.fragment.o(local);
			testimonial6.$$.fragment.o(local);
			testimonial7.$$.fragment.o(local);
			testimonial8.$$.fragment.o(local);
			testimonial9.$$.fragment.o(local);
			testimonial10.$$.fragment.o(local);
			testimonial11.$$.fragment.o(local);
			footer.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(div0);
				detach(t1);
				detach(section0);
			}

			header.$destroy();

			tabs0.$destroy();

			if (detaching) {
				detach(t14);
				detach(section1);
			}

			dotdotdot0.$destroy();

			tabs1.$destroy();

			if (detaching) {
				detach(t44);
				detach(section2);
			}

			dotdotdot1.$destroy();

			cards0.$destroy();

			tabs2.$destroy();

			if (detaching) {
				detach(t64);
				detach(section3);
			}

			dotdotdot2.$destroy();

			tabs3.$destroy();

			cards1.$destroy();

			if (detaching) {
				detach(t76);
				detach(section4);
			}

			dotdotdot3.$destroy();

			if (detaching) {
				detach(t89);
				detach(section5);
			}

			cards2.$destroy();

			if (detaching) {
				detach(t90);
				detach(section6);
			}

			dotdotdot4.$destroy();

			if (detaching) {
				detach(t148);
				detach(section7);
			}

			dotdotdot5.$destroy();

			cards3.$destroy();

			if (detaching) {
				detach(t158);
				detach(section8);
			}

			dotdotdot6.$destroy();

			if (detaching) {
				detach(t181);
				detach(section9);
			}

			dotdotdot7.$destroy();

			testimonial0.$destroy();

			testimonial1.$destroy();

			testimonial2.$destroy();

			testimonial3.$destroy();

			testimonial4.$destroy();

			testimonial5.$destroy();

			testimonial6.$destroy();

			testimonial7.$destroy();

			testimonial8.$destroy();

			testimonial9.$destroy();

			testimonial10.$destroy();

			testimonial11.$destroy();

			if (detaching) {
				detach(t196);
				detach(section10);
			}

			footer.$destroy();
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment$3, safe_not_equal, []);
	}
}

export default Index;

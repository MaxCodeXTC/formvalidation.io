import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';

/* src/routes/guide/validators/choice/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/validators/choice/index.svelte";

// (10:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (45:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Naming convention");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Naming convention");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (82:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (96:12) <PrevButton target="/guide/validators/callback">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("callback validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "callback validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (97:12) <NextButton target="/guide/validators/color">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("color validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "color validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, h3, t5, t6, p0, sup0, t7, t8, a0, t9, t10, t11, table0, tr0, th0, t12, t13, th1, t14, t15, th2, t16, t17, th3, t18, t19, tr1, td0, code0, t20, t21, td1, code1, t22, sup1, t23, t24, td2, t25, t26, td3, t27, t28, tr2, td4, code2, t29, t30, td5, code3, t31, t32, td6, t33, t34, td7, t35, t36, tr3, td8, code4, t37, sup2, t38, t39, td9, code5, t40, t41, code6, t42, t43, td10, t44, t45, td11, t46, t47, p1, t48, code7, t49, t50, code8, t51, t52, t53, p2, t54, code9, t55, t56, code10, t57, t58, t59, section1, t60, p3, t61, code11, t62, t63, t64, table1, tr4, th4, t65, t66, th5, t67, t68, th6, t69, t70, tr5, td12, t71, t72, td13, code12, t73, t74, td14, t75, tr6, td15, a1, t76, t77, td16, code13, t78, t79, td17, t80, section2, t81, p4, t82, t83, t84, t85, section3, div, t86, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<input type="checkbox" name="languages[]" />
<select name="editors[]" multiple="multiple">
    ...
</select>
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<input type="checkbox" name="languages" />
<select name="editors" multiple="multiple">
    ...
</select>
` },
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/validators/choice/basic",
		frameworks: ['bootstrap', 'tachyons']
	},
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Integrating with Select2',
        'Requiring all options to be selected',
    ] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/validators/callback",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/validators/color",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("choice validator");
			t1 = space();
			h2 = element("h2");
			t2 = text("Check if the number of checked boxes are less or more than a given number");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			h3 = element("h3");
			t5 = text("Using with form field");
			t6 = space();
			p0 = element("p");
			sup0 = element("sup");
			t7 = text("*");
			t8 = text(" presents a required option. The HTML attributes are used to set the validator options via the ");
			a0 = element("a");
			t9 = text("Declarative");
			t10 = text(" plugin");
			t11 = space();
			table0 = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t12 = text("Name");
			t13 = space();
			th1 = element("th");
			t14 = text("HTML attribute");
			t15 = space();
			th2 = element("th");
			t16 = text("Type");
			t17 = space();
			th3 = element("th");
			t18 = text("Description");
			t19 = space();
			tr1 = element("tr");
			td0 = element("td");
			code0 = element("code");
			t20 = text("max");
			t21 = space();
			td1 = element("td");
			code1 = element("code");
			t22 = text("data-fv-choice___max");
			sup1 = element("sup");
			t23 = text("*");
			t24 = space();
			td2 = element("td");
			t25 = text("Number");
			t26 = space();
			td3 = element("td");
			t27 = text("The maximum number of check boxes required to be checked");
			t28 = space();
			tr2 = element("tr");
			td4 = element("td");
			code2 = element("code");
			t29 = text("message");
			t30 = space();
			td5 = element("td");
			code3 = element("code");
			t31 = text("data-fv-choice___message");
			t32 = space();
			td6 = element("td");
			t33 = text("String");
			t34 = space();
			td7 = element("td");
			t35 = text("The error message");
			t36 = space();
			tr3 = element("tr");
			td8 = element("td");
			code4 = element("code");
			t37 = text("min");
			sup2 = element("sup");
			t38 = text("*");
			t39 = space();
			td9 = element("td");
			code5 = element("code");
			t40 = text("data-fv-choice___min");
			t41 = text(" or ");
			code6 = element("code");
			t42 = text("min");
			t43 = space();
			td10 = element("td");
			t44 = text("Number");
			t45 = space();
			td11 = element("td");
			t46 = text("The minimum number of check boxes required to be checked");
			t47 = space();
			p1 = element("p");
			t48 = text("At least one of ");
			code7 = element("code");
			t49 = text("min");
			t50 = text(" and ");
			code8 = element("code");
			t51 = text("max");
			t52 = text(" option is required.");
			t53 = space();
			p2 = element("p");
			t54 = text("The validator also supports the ");
			code9 = element("code");
			t55 = text("select");
			t56 = text(" element if the ");
			code10 = element("code");
			t57 = text("multiple=\"multiple\"");
			t58 = text(" attribute is set.");
			t59 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t60 = space();
			p3 = element("p");
			t61 = text("In order to get the correct submit data in the server side, you should pay attention on setting the ");
			code11 = element("code");
			t62 = text("name");
			t63 = text(" attribute of checkbox/select elements.");
			t64 = space();
			table1 = element("table");
			tr4 = element("tr");
			th4 = element("th");
			t65 = text("Server side");
			t66 = space();
			th5 = element("th");
			t67 = text("name attribute");
			t68 = space();
			th6 = element("th");
			t69 = text("Example");
			t70 = space();
			tr5 = element("tr");
			td12 = element("td");
			t71 = text("PHP");
			t72 = space();
			td13 = element("td");
			code12 = element("code");
			t73 = text("name[]");
			t74 = space();
			td14 = element("td");
			samplecode0.$$.fragment.c();
			t75 = space();
			tr6 = element("tr");
			td15 = element("td");
			a1 = element("a");
			t76 = text("Spring framework");
			t77 = space();
			td16 = element("td");
			code13 = element("code");
			t78 = text("name");
			t79 = space();
			td17 = element("td");
			samplecode1.$$.fragment.c();
			t80 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t81 = space();
			p4 = element("p");
			t82 = text("The following form asks a developer to choose 2-4 programming languages which he/she is good at:");
			t83 = space();
			demo.$$.fragment.c();
			t84 = space();
			examples.$$.fragment.c();
			t85 = space();
			section3 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t86 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "choice validator");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Check if the number of checked boxes are less or more than a given number");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n\n        ");

			h3 = claim_element(section0_nodes, "H3", {}, false);
			var h3_nodes = children(h3);

			t5 = claim_text(h3_nodes, "Using with form field");
			h3_nodes.forEach(detach);
			t6 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			sup0 = claim_element(p0_nodes, "SUP", {}, false);
			var sup0_nodes = children(sup0);

			t7 = claim_text(sup0_nodes, "*");
			sup0_nodes.forEach(detach);
			t8 = claim_text(p0_nodes, " presents a required option. The HTML attributes are used to set the validator options via the ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t9 = claim_text(a0_nodes, "Declarative");
			a0_nodes.forEach(detach);
			t10 = claim_text(p0_nodes, " plugin");
			p0_nodes.forEach(detach);
			t11 = claim_text(section0_nodes, "\n        ");

			table0 = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table0_nodes = children(table0);

			tr0 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t12 = claim_text(th0_nodes, "Name");
			th0_nodes.forEach(detach);
			t13 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t14 = claim_text(th1_nodes, "HTML attribute");
			th1_nodes.forEach(detach);
			t15 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t16 = claim_text(th2_nodes, "Type");
			th2_nodes.forEach(detach);
			t17 = claim_text(tr0_nodes, "\n                ");

			th3 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th3_nodes = children(th3);

			t18 = claim_text(th3_nodes, "Description");
			th3_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t19 = claim_text(table0_nodes, "\n            ");

			tr1 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code0 = claim_element(td0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t20 = claim_text(code0_nodes, "max");
			code0_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t21 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			code1 = claim_element(td1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t22 = claim_text(code1_nodes, "data-fv-choice___max");
			code1_nodes.forEach(detach);

			sup1 = claim_element(td1_nodes, "SUP", {}, false);
			var sup1_nodes = children(sup1);

			t23 = claim_text(sup1_nodes, "*");
			sup1_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			t24 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t25 = claim_text(td2_nodes, "Number");
			td2_nodes.forEach(detach);
			t26 = claim_text(tr1_nodes, "\n                ");

			td3 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			t27 = claim_text(td3_nodes, "The maximum number of check boxes required to be checked");
			td3_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t28 = claim_text(table0_nodes, "\n            ");

			tr2 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			code2 = claim_element(td4_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t29 = claim_text(code2_nodes, "message");
			code2_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t30 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			code3 = claim_element(td5_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t31 = claim_text(code3_nodes, "data-fv-choice___message");
			code3_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			t32 = claim_text(tr2_nodes, "\n                ");

			td6 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			t33 = claim_text(td6_nodes, "String");
			td6_nodes.forEach(detach);
			t34 = claim_text(tr2_nodes, "\n                ");

			td7 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			t35 = claim_text(td7_nodes, "The error message");
			td7_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t36 = claim_text(table0_nodes, "\n            ");

			tr3 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td8 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			code4 = claim_element(td8_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t37 = claim_text(code4_nodes, "min");
			code4_nodes.forEach(detach);

			sup2 = claim_element(td8_nodes, "SUP", {}, false);
			var sup2_nodes = children(sup2);

			t38 = claim_text(sup2_nodes, "*");
			sup2_nodes.forEach(detach);
			td8_nodes.forEach(detach);
			t39 = claim_text(tr3_nodes, "\n                ");

			td9 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			code5 = claim_element(td9_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t40 = claim_text(code5_nodes, "data-fv-choice___min");
			code5_nodes.forEach(detach);
			t41 = claim_text(td9_nodes, " or ");

			code6 = claim_element(td9_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t42 = claim_text(code6_nodes, "min");
			code6_nodes.forEach(detach);
			td9_nodes.forEach(detach);
			t43 = claim_text(tr3_nodes, "\n                ");

			td10 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td10_nodes = children(td10);

			t44 = claim_text(td10_nodes, "Number");
			td10_nodes.forEach(detach);
			t45 = claim_text(tr3_nodes, "\n                ");

			td11 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td11_nodes = children(td11);

			t46 = claim_text(td11_nodes, "The minimum number of check boxes required to be checked");
			td11_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			table0_nodes.forEach(detach);
			t47 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t48 = claim_text(p1_nodes, "At least one of ");

			code7 = claim_element(p1_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t49 = claim_text(code7_nodes, "min");
			code7_nodes.forEach(detach);
			t50 = claim_text(p1_nodes, " and ");

			code8 = claim_element(p1_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t51 = claim_text(code8_nodes, "max");
			code8_nodes.forEach(detach);
			t52 = claim_text(p1_nodes, " option is required.");
			p1_nodes.forEach(detach);
			t53 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t54 = claim_text(p2_nodes, "The validator also supports the ");

			code9 = claim_element(p2_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t55 = claim_text(code9_nodes, "select");
			code9_nodes.forEach(detach);
			t56 = claim_text(p2_nodes, " element if the ");

			code10 = claim_element(p2_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t57 = claim_text(code10_nodes, "multiple=\"multiple\"");
			code10_nodes.forEach(detach);
			t58 = claim_text(p2_nodes, " attribute is set.");
			p2_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t59 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t60 = claim_text(section1_nodes, "\n\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t61 = claim_text(p3_nodes, "In order to get the correct submit data in the server side, you should pay attention on setting the ");

			code11 = claim_element(p3_nodes, "CODE", {}, false);
			var code11_nodes = children(code11);

			t62 = claim_text(code11_nodes, "name");
			code11_nodes.forEach(detach);
			t63 = claim_text(p3_nodes, " attribute of checkbox/select elements.");
			p3_nodes.forEach(detach);
			t64 = claim_text(section1_nodes, "\n        ");

			table1 = claim_element(section1_nodes, "TABLE", { class: true }, false);
			var table1_nodes = children(table1);

			tr4 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			th4 = claim_element(tr4_nodes, "TH", { class: true }, false);
			var th4_nodes = children(th4);

			t65 = claim_text(th4_nodes, "Server side");
			th4_nodes.forEach(detach);
			t66 = claim_text(tr4_nodes, "\n                ");

			th5 = claim_element(tr4_nodes, "TH", { class: true }, false);
			var th5_nodes = children(th5);

			t67 = claim_text(th5_nodes, "name attribute");
			th5_nodes.forEach(detach);
			t68 = claim_text(tr4_nodes, "\n                ");

			th6 = claim_element(tr4_nodes, "TH", { class: true }, false);
			var th6_nodes = children(th6);

			t69 = claim_text(th6_nodes, "Example");
			th6_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			t70 = claim_text(table1_nodes, "\n            ");

			tr5 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr5_nodes = children(tr5);

			td12 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td12_nodes = children(td12);

			t71 = claim_text(td12_nodes, "PHP");
			td12_nodes.forEach(detach);
			t72 = claim_text(tr5_nodes, "\n                ");

			td13 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td13_nodes = children(td13);

			code12 = claim_element(td13_nodes, "CODE", {}, false);
			var code12_nodes = children(code12);

			t73 = claim_text(code12_nodes, "name[]");
			code12_nodes.forEach(detach);
			td13_nodes.forEach(detach);
			t74 = claim_text(tr5_nodes, "\n                ");

			td14 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td14_nodes = children(td14);

			samplecode0.$$.fragment.l(td14_nodes);
			td14_nodes.forEach(detach);
			tr5_nodes.forEach(detach);
			t75 = claim_text(table1_nodes, "\n            ");

			tr6 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr6_nodes = children(tr6);

			td15 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td15_nodes = children(td15);

			a1 = claim_element(td15_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t76 = claim_text(a1_nodes, "Spring framework");
			a1_nodes.forEach(detach);
			td15_nodes.forEach(detach);
			t77 = claim_text(tr6_nodes, "\n                ");

			td16 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td16_nodes = children(td16);

			code13 = claim_element(td16_nodes, "CODE", {}, false);
			var code13_nodes = children(code13);

			t78 = claim_text(code13_nodes, "name");
			code13_nodes.forEach(detach);
			td16_nodes.forEach(detach);
			t79 = claim_text(tr6_nodes, "\n                ");

			td17 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td17_nodes = children(td17);

			samplecode1.$$.fragment.l(td17_nodes);
			td17_nodes.forEach(detach);
			tr6_nodes.forEach(detach);
			table1_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t80 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t81 = claim_text(section2_nodes, "\n\n        ");

			p4 = claim_element(section2_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t82 = claim_text(p4_nodes, "The following form asks a developer to choose 2-4 programming languages which he/she is good at:");
			p4_nodes.forEach(detach);
			t83 = claim_text(section2_nodes, "\n\n        ");
			demo.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t84 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			t85 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			div = claim_element(section3_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t86 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 98);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 152);
			add_location(h3, file, 11, 8, 324);
			add_location(sup0, file, 12, 29, 384);
			a0.href = "/guide/plugins/declarative";
			a0.className = "blue dim link";
			add_location(a0, file, 12, 136, 491);
			p0.className = "lh-copy i";
			add_location(p0, file, 12, 8, 363);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 15, 16, 704);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 16, 16, 764);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 17, 16, 834);
			th3.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th3, file, 18, 16, 894);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 14, 12, 655);
			add_location(code0, file, 21, 36, 1044);
			td0.className = "pv2 ph3";
			add_location(td0, file, 21, 16, 1024);
			add_location(code1, file, 22, 36, 1102);
			add_location(sup1, file, 22, 69, 1135);
			td1.className = "pv2 ph3";
			add_location(td1, file, 22, 16, 1082);
			td2.className = "pv2 ph3";
			add_location(td2, file, 23, 16, 1169);
			td3.className = "pv2 ph3";
			add_location(td3, file, 24, 16, 1217);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 20, 12, 975);
			add_location(code2, file, 27, 36, 1398);
			td4.className = "pv2 ph3";
			add_location(td4, file, 27, 16, 1378);
			add_location(code3, file, 28, 36, 1460);
			td5.className = "pv2 ph3";
			add_location(td5, file, 28, 16, 1440);
			td6.className = "pv2 ph3";
			add_location(td6, file, 29, 16, 1519);
			td7.className = "pv2 ph3";
			add_location(td7, file, 30, 16, 1567);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 26, 12, 1329);
			add_location(code4, file, 33, 36, 1709);
			add_location(sup2, file, 33, 52, 1725);
			td8.className = "pv2 ph3";
			add_location(td8, file, 33, 16, 1689);
			add_location(code5, file, 34, 36, 1779);
			add_location(code6, file, 34, 73, 1816);
			td9.className = "pv2 ph3";
			add_location(td9, file, 34, 16, 1759);
			td10.className = "pv2 ph3";
			add_location(td10, file, 35, 16, 1854);
			td11.className = "pv2 ph3";
			add_location(td11, file, 36, 16, 1902);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 32, 12, 1640);
			table0.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table0, file, 13, 8, 585);
			add_location(code7, file, 39, 43, 2062);
			add_location(code8, file, 39, 64, 2083);
			p1.className = "lh-copy";
			add_location(p1, file, 39, 8, 2027);
			add_location(code9, file, 40, 59, 2183);
			add_location(code10, file, 40, 94, 2218);
			p2.className = "lh-copy";
			add_location(p2, file, 40, 8, 2132);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 258);
			add_location(code11, file, 46, 127, 2488);
			p3.className = "lh-copy";
			add_location(p3, file, 46, 8, 2369);
			th4.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th4, file, 49, 16, 2676);
			th5.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th5, file, 50, 16, 2743);
			th6.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th6, file, 51, 16, 2813);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 48, 12, 2627);
			td12.className = "pv2 ph3";
			add_location(td12, file, 54, 16, 2939);
			add_location(code12, file, 55, 36, 3004);
			td13.className = "pv2 ph3";
			add_location(td13, file, 55, 16, 2984);
			td14.className = "pv2 ph3";
			add_location(td14, file, 56, 16, 3045);
			tr5.className = "striped--light-gray";
			add_location(tr5, file, 53, 12, 2890);
			a1.href = "http://projects.spring.io/spring-framework";
			a1.className = "blue dim link";
			add_location(a1, file, 66, 36, 3334);
			td15.className = "pv2 ph3";
			add_location(td15, file, 66, 16, 3314);
			add_location(code13, file, 67, 36, 3471);
			td16.className = "pv2 ph3";
			add_location(td16, file, 67, 16, 3451);
			td17.className = "pv2 ph3";
			add_location(td17, file, 68, 16, 3510);
			tr6.className = "striped--light-gray";
			add_location(tr6, file, 65, 12, 3265);
			table1.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table1, file, 47, 8, 2557);
			section1.className = "mv5";
			add_location(section1, file, 43, 4, 2293);
			p4.className = "lh-copy";
			add_location(p4, file, 83, 8, 3823);
			section2.className = "mv5";
			add_location(section2, file, 80, 4, 3751);
			div.className = "flex";
			add_location(div, file, 94, 8, 4211);
			section3.className = "mv5";
			add_location(section3, file, 93, 4, 4181);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, h3);
			append(h3, t5);
			append(section0, t6);
			append(section0, p0);
			append(p0, sup0);
			append(sup0, t7);
			append(p0, t8);
			append(p0, a0);
			append(a0, t9);
			append(p0, t10);
			append(section0, t11);
			append(section0, table0);
			append(table0, tr0);
			append(tr0, th0);
			append(th0, t12);
			append(tr0, t13);
			append(tr0, th1);
			append(th1, t14);
			append(tr0, t15);
			append(tr0, th2);
			append(th2, t16);
			append(tr0, t17);
			append(tr0, th3);
			append(th3, t18);
			append(table0, t19);
			append(table0, tr1);
			append(tr1, td0);
			append(td0, code0);
			append(code0, t20);
			append(tr1, t21);
			append(tr1, td1);
			append(td1, code1);
			append(code1, t22);
			append(td1, sup1);
			append(sup1, t23);
			append(tr1, t24);
			append(tr1, td2);
			append(td2, t25);
			append(tr1, t26);
			append(tr1, td3);
			append(td3, t27);
			append(table0, t28);
			append(table0, tr2);
			append(tr2, td4);
			append(td4, code2);
			append(code2, t29);
			append(tr2, t30);
			append(tr2, td5);
			append(td5, code3);
			append(code3, t31);
			append(tr2, t32);
			append(tr2, td6);
			append(td6, t33);
			append(tr2, t34);
			append(tr2, td7);
			append(td7, t35);
			append(table0, t36);
			append(table0, tr3);
			append(tr3, td8);
			append(td8, code4);
			append(code4, t37);
			append(td8, sup2);
			append(sup2, t38);
			append(tr3, t39);
			append(tr3, td9);
			append(td9, code5);
			append(code5, t40);
			append(td9, t41);
			append(td9, code6);
			append(code6, t42);
			append(tr3, t43);
			append(tr3, td10);
			append(td10, t44);
			append(tr3, t45);
			append(tr3, td11);
			append(td11, t46);
			append(section0, t47);
			append(section0, p1);
			append(p1, t48);
			append(p1, code7);
			append(code7, t49);
			append(p1, t50);
			append(p1, code8);
			append(code8, t51);
			append(p1, t52);
			append(section0, t53);
			append(section0, p2);
			append(p2, t54);
			append(p2, code9);
			append(code9, t55);
			append(p2, t56);
			append(p2, code10);
			append(code10, t57);
			append(p2, t58);
			insert(target, t59, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t60);
			append(section1, p3);
			append(p3, t61);
			append(p3, code11);
			append(code11, t62);
			append(p3, t63);
			append(section1, t64);
			append(section1, table1);
			append(table1, tr4);
			append(tr4, th4);
			append(th4, t65);
			append(tr4, t66);
			append(tr4, th5);
			append(th5, t67);
			append(tr4, t68);
			append(tr4, th6);
			append(th6, t69);
			append(table1, t70);
			append(table1, tr5);
			append(tr5, td12);
			append(td12, t71);
			append(tr5, t72);
			append(tr5, td13);
			append(td13, code12);
			append(code12, t73);
			append(tr5, t74);
			append(tr5, td14);
			mount_component(samplecode0, td14, null);
			append(table1, t75);
			append(table1, tr6);
			append(tr6, td15);
			append(td15, a1);
			append(a1, t76);
			append(tr6, t77);
			append(tr6, td16);
			append(td16, code13);
			append(code13, t78);
			append(tr6, t79);
			append(tr6, td17);
			mount_component(samplecode1, td17, null);
			insert(target, t80, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t81);
			append(section2, p4);
			append(p4, t82);
			append(section2, t83);
			mount_component(demo, section2, null);
			insert(target, t84, anchor);
			mount_component(examples, target, anchor);
			insert(target, t85, anchor);
			insert(target, section3, anchor);
			append(section3, div);
			mount_component(prevbutton, div, null);
			append(div, t86);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			if (detaching) {
				detach(t59);
				detach(section1);
			}

			heading1.$destroy();

			samplecode0.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t80);
				detach(section2);
			}

			heading2.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t84);
			}

			examples.$destroy(detaching);

			if (detaching) {
				detach(t85);
				detach(section3);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • choice validator";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

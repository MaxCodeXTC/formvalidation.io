import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';

/* src/routes/guide/events/core.validator.validated/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/events/core.validator.validated/index.svelte";

// (26:12) <PrevButton target="/guide/events/core.validator.notvalidated">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("core.validator.notvalidated event");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "core.validator.notvalidated event");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (27:12) <NextButton target="/guide/events/core.validator.validating">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("core.validator.validating event");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "core.validator.validating event");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, p, t4, t5, ul, li0, code0, t6, t7, t8, li1, code1, t9, t10, t11, li2, code2, t12, t13, t14, li3, code3, t15, t16, t17, li4, code4, t18, t19, t20, t21, section1, div, t22, current;

	var examples = new Examples({
		props: { examples: [
        'Showing only one message each time',
    ] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/events/core.validator.notvalidated",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/events/core.validator.validating",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("core.validator.validated event");
			t1 = space();
			h2 = element("h2");
			t2 = text("Triggered after executing validation of particular validator on a field element");
			t3 = space();
			section0 = element("section");
			p = element("p");
			t4 = text("The event object contains the following properties");
			t5 = space();
			ul = element("ul");
			li0 = element("li");
			code0 = element("code");
			t6 = text("element");
			t7 = text(": HTMLElement — The field element which is being validated");
			t8 = space();
			li1 = element("li");
			code1 = element("code");
			t9 = text("elements");
			t10 = text(": HTMLElement[] — The field elements");
			t11 = space();
			li2 = element("li");
			code2 = element("code");
			t12 = text("field");
			t13 = text(": String — The field name");
			t14 = space();
			li3 = element("li");
			code3 = element("code");
			t15 = text("validator");
			t16 = text(": String — The validator name");
			t17 = space();
			li4 = element("li");
			code4 = element("code");
			t18 = text("result");
			t19 = text(": Object — The validation result. It can include other meta data");
			t20 = space();
			examples.$$.fragment.c();
			t21 = space();
			section1 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t22 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "core.validator.validated event");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Triggered after executing validation of particular validator on a field element");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			p = claim_element(section0_nodes, "P", { class: true }, false);
			var p_nodes = children(p);

			t4 = claim_text(p_nodes, "The event object contains the following properties");
			p_nodes.forEach(detach);
			t5 = claim_text(section0_nodes, "\n        ");

			ul = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			code0 = claim_element(li0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t6 = claim_text(code0_nodes, "element");
			code0_nodes.forEach(detach);
			t7 = claim_text(li0_nodes, ": HTMLElement — The field element which is being validated");
			li0_nodes.forEach(detach);
			t8 = claim_text(ul_nodes, "\n            ");

			li1 = claim_element(ul_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			code1 = claim_element(li1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t9 = claim_text(code1_nodes, "elements");
			code1_nodes.forEach(detach);
			t10 = claim_text(li1_nodes, ": HTMLElement[] — The field elements");
			li1_nodes.forEach(detach);
			t11 = claim_text(ul_nodes, "\n            ");

			li2 = claim_element(ul_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			code2 = claim_element(li2_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t12 = claim_text(code2_nodes, "field");
			code2_nodes.forEach(detach);
			t13 = claim_text(li2_nodes, ": String — The field name");
			li2_nodes.forEach(detach);
			t14 = claim_text(ul_nodes, "\n            ");

			li3 = claim_element(ul_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			code3 = claim_element(li3_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t15 = claim_text(code3_nodes, "validator");
			code3_nodes.forEach(detach);
			t16 = claim_text(li3_nodes, ": String — The validator name");
			li3_nodes.forEach(detach);
			t17 = claim_text(ul_nodes, "\n            ");

			li4 = claim_element(ul_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			code4 = claim_element(li4_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t18 = claim_text(code4_nodes, "result");
			code4_nodes.forEach(detach);
			t19 = claim_text(li4_nodes, ": Object — The validation result. It can include other meta data");
			li4_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t20 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			t21 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			div = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t22 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 112);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 180);
			p.className = "lh-copy";
			add_location(p, file, 9, 8, 322);
			add_location(code0, file, 11, 16, 449);
			add_location(li0, file, 11, 12, 445);
			add_location(code1, file, 12, 16, 549);
			add_location(li1, file, 12, 12, 545);
			add_location(code2, file, 13, 16, 628);
			add_location(li2, file, 13, 12, 624);
			add_location(code3, file, 14, 16, 693);
			add_location(li3, file, 14, 12, 689);
			add_location(code4, file, 15, 16, 766);
			add_location(li4, file, 15, 12, 762);
			ul.className = "ma0 pl3 lh-copy";
			add_location(ul, file, 10, 8, 404);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 292);
			div.className = "flex";
			add_location(div, file, 24, 8, 1002);
			section1.className = "mv5";
			add_location(section1, file, 23, 4, 972);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			append(section0, p);
			append(p, t4);
			append(section0, t5);
			append(section0, ul);
			append(ul, li0);
			append(li0, code0);
			append(code0, t6);
			append(li0, t7);
			append(ul, t8);
			append(ul, li1);
			append(li1, code1);
			append(code1, t9);
			append(li1, t10);
			append(ul, t11);
			append(ul, li2);
			append(li2, code2);
			append(code2, t12);
			append(li2, t13);
			append(ul, t14);
			append(ul, li3);
			append(li3, code3);
			append(code3, t15);
			append(li3, t16);
			append(ul, t17);
			append(ul, li4);
			append(li4, code4);
			append(code4, t18);
			append(li4, t19);
			insert(target, t20, anchor);
			mount_component(examples, target, anchor);
			insert(target, t21, anchor);
			insert(target, section1, anchor);
			append(section1, div);
			mount_component(prevbutton, div, null);
			append(div, t22);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			examples.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			examples.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
				detach(t20);
			}

			examples.$destroy(detaching);

			if (detaching) {
				detach(t21);
				detach(section1);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • core.validator.validated event";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

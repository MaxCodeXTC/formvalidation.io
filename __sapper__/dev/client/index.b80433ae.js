import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as ChangelogLayout } from './chunk.4a563e90.js';

/* src/routes/updates/v0.5.2/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/updates/v0.5.2/index.svelte";

// (10:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("New features");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "New features");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (30:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (37:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Improvements");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Improvements");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (57:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Bug fixes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Bug fixes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (74:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Upgrading from v0.5.x to v0.5.2");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Upgrading from v0.5.x to v0.5.2");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <ChangelogLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, ul0, li0, t5, code0, t6, t7, t8, li1, t9, t10, li2, t11, code1, t12, t13, code2, t14, t15, t16, li3, t17, t18, li4, t19, t20, li5, t21, t22, li6, t23, t24, li7, t25, t26, li8, t27, t28, li9, t29, t30, li10, t31, t32, li11, t33, t34, li12, t35, t36, li13, t37, t38, section1, t39, ul1, li14, t40, a0, t41, t42, t43, section2, t44, ul2, li15, t45, code3, t46, t47, a1, t48, t49, t50, li16, t51, a2, t52, t53, t54, li17, t55, code4, t56, t57, t58, li18, t59, code5, t60, t61, li19, t62, a3, t63, t64, code6, t65, t66, t67, li20, t68, a4, t69, t70, t71, li21, t72, a5, t73, t74, a6, t75, t76, t77, li22, t78, a7, t79, t80, t81, li23, t82, t83, li24, t84, t85, li25, t86, a8, t87, t88, t89, li26, t90, t91, li27, t92, code7, t93, t94, a9, t95, t96, t97, li28, t98, a10, t99, t100, t101, section3, t102, ul3, li29, t103, t104, li30, t105, a11, t106, t107, t108, li31, t109, t110, li32, t111, t112, li33, t113, t114, li34, t115, code8, t116, t117, li35, t118, a12, t119, t120, code9, t121, t122, li36, t123, t124, li37, t125, t126, li38, t127, a13, t128, t129, t130, li39, t131, t132, section4, t133, p0, t134, a14, t135, t136, t137, p1, t138, code10, t139, t140, a15, t141, t142, t143, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading4 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode = new SampleCode({
		props: { lang: "javascript", code: `
$(form).bootstrapValidator({
    fields: {
        username: {
            message: 'The username is not valid',
            validators: {
                // The validator will create an Ajax request
                // sending { username: 'its value' } to the back-end
                remote: {
                    message: 'The username is not available',
                    url: '/path/to/backend/',
                    type: 'GET'     // or 'POST'
                }
            }
        }
    }
});
` },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Version 0.5.2");
			t1 = space();
			h2 = element("h2");
			t2 = text("Released 25 September 2014");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			ul0 = element("ul");
			li0 = element("li");
			t5 = text("Add ");
			code0 = element("code");
			t6 = text("verbose");
			t7 = text(" option");
			t8 = space();
			li1 = element("li");
			t9 = text("Add blank validator");
			t10 = space();
			li2 = element("li");
			t11 = text("Add ");
			code1 = element("code");
			t12 = text("init");
			t13 = text(" and ");
			code2 = element("code");
			t14 = text("destroy");
			t15 = text(" methods to validator");
			t16 = space();
			li3 = element("li");
			t17 = text("Add Venezuelan VAT number (RIF) validator");
			t18 = space();
			li4 = element("li");
			t19 = text("Add China phone number validator");
			t20 = space();
			li5 = element("li");
			t21 = text("Add Venezuela phone number validator");
			t22 = space();
			li6 = element("li");
			t23 = text("Add Romania phone number validator");
			t24 = space();
			li7 = element("li");
			t25 = text("Add Romania postal code validator");
			t26 = space();
			li8 = element("li");
			t27 = text("Add Denmark phone number validator");
			t28 = space();
			li9 = element("li");
			t29 = text("Add Thailand phone number and ID validator");
			t30 = space();
			li10 = element("li");
			t31 = text("Add Chinese citizen ID validator>");
			t32 = space();
			li11 = element("li");
			t33 = text("Add Russia phone number validator");
			t34 = space();
			li12 = element("li");
			t35 = text("Add Russian postal code validator");
			t36 = space();
			li13 = element("li");
			t37 = text("Add Czech and Slovakia phone number and postal code validators");
			t38 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t39 = space();
			ul1 = element("ul");
			li14 = element("li");
			t40 = text("Change the default type of ");
			a0 = element("a");
			t41 = text("remote");
			t42 = text(" validator to GET");
			t43 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t44 = space();
			ul2 = element("ul");
			li15 = element("li");
			t45 = text("Add ");
			code3 = element("code");
			t46 = text("delay");
			t47 = text(" option to the ");
			a1 = element("a");
			t48 = text("remote");
			t49 = text(" validator");
			t50 = space();
			li16 = element("li");
			t51 = text("The ");
			a2 = element("a");
			t52 = text("different");
			t53 = text(" validator allows more than a 2-way comparison");
			t54 = space();
			li17 = element("li");
			t55 = text("The ");
			code4 = element("code");
			t56 = text("container");
			t57 = text(" option can be defined by a callback");
			t58 = space();
			li18 = element("li");
			t59 = text("Use CSS classes instead of inline styling to fix icons with ");
			code5 = element("code");
			t60 = text("input-group");
			t61 = space();
			li19 = element("li");
			t62 = text("The ");
			a3 = element("a");
			t63 = text("stringLength");
			t64 = text(" validator supports HTML 5 ");
			code6 = element("code");
			t65 = text("minlength");
			t66 = text(" attribute");
			t67 = space();
			li20 = element("li");
			t68 = text("The ");
			a4 = element("a");
			t69 = text("emailAddress");
			t70 = text(" validator accepts multiple email addresses");
			t71 = space();
			li21 = element("li");
			t72 = text("Reuse data returned by ");
			a5 = element("a");
			t73 = text("callback");
			t74 = text(", ");
			a6 = element("a");
			t75 = text("remote");
			t76 = text(", custom validators");
			t77 = space();
			li22 = element("li");
			t78 = text("The ");
			a7 = element("a");
			t79 = text("uri");
			t80 = text(" validator adds support for custom protocol");
			t81 = space();
			li23 = element("li");
			t82 = text("Support VAT number without prefixing by country code");
			t83 = space();
			li24 = element("li");
			t84 = text("Support latest Bootstrap when using tooltip/popover to show the message");
			t85 = space();
			li25 = element("li");
			t86 = text("Improve behaviour of the ");
			a8 = element("a");
			t87 = text("different");
			t88 = text(" validator");
			t89 = space();
			li26 = element("li");
			t90 = text("Add \"BootstrapValidator's JavaScript requires jQuery\" warning");
			t91 = space();
			li27 = element("li");
			t92 = text("Add ");
			code7 = element("code");
			t93 = text("minSize");
			t94 = text(" option for the ");
			a9 = element("a");
			t95 = text("file");
			t96 = text(" validator");
			t97 = space();
			li28 = element("li");
			t98 = text("Add ");
			a10 = element("a");
			t99 = text("phone");
			t100 = text(" number validator test suite");
			t101 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t102 = space();
			ul3 = element("ul");
			li29 = element("li");
			t103 = text("Tabs get red even form is valid");
			t104 = space();
			li30 = element("li");
			t105 = text("Fix the ");
			a11 = element("a");
			t106 = text("emailAddress");
			t107 = text(" issue which email@server is not valid email address");
			t108 = space();
			li31 = element("li");
			t109 = text("Keep disabled validators VALID");
			t110 = space();
			li32 = element("li");
			t111 = text("Fix the issue when adding field which does not exist but is already set in \"fields\" option");
			t112 = space();
			li33 = element("li");
			t113 = text("Fix the issue when removing the radio or checkbox field");
			t114 = space();
			li34 = element("li");
			t115 = text("The form is still submitted when clicking on submit button which is set ");
			code8 = element("code");
			t116 = text("onclick=\"return false;\"");
			t117 = space();
			li35 = element("li");
			t118 = text("Using ");
			a12 = element("a");
			t119 = text("notEmpty");
			t120 = text(" validator with ");
			code9 = element("code");
			t121 = text("type=\"number\"");
			t122 = space();
			li36 = element("li");
			t123 = text("The tooltip/popover isn't shown if there is disabled validator. The tooltip/popover is shown automatically when the field gets the focus");
			t124 = space();
			li37 = element("li");
			t125 = text("Can't validate ipv4 and ipv6 at the same time. Add ip validator test suite");
			t126 = space();
			li38 = element("li");
			t127 = text("Fix Russian ");
			a13 = element("a");
			t128 = text("VAT");
			t129 = text(" number validator");
			t130 = space();
			li39 = element("li");
			t131 = text("The form won't be validated if the submit button contains a HTML tag");
			t132 = space();
			section4 = element("section");
			heading4.$$.fragment.c();
			t133 = space();
			p0 = element("p");
			t134 = text("If you don't use the ");
			a14 = element("a");
			t135 = text("remote");
			t136 = text(" validator, just download v0.5.2 package and override the CSS/JS bundle.");
			t137 = space();
			p1 = element("p");
			t138 = text("Otherwise, please indicate the ");
			code10 = element("code");
			t139 = text("type");
			t140 = text(" option when using ");
			a15 = element("a");
			t141 = text("remote");
			t142 = text(" validator:");
			t143 = space();
			samplecode.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Version 0.5.2");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Released 25 September 2014");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			ul0 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t5 = claim_text(li0_nodes, "Add ");

			code0 = claim_element(li0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t6 = claim_text(code0_nodes, "verbose");
			code0_nodes.forEach(detach);
			t7 = claim_text(li0_nodes, " option");
			li0_nodes.forEach(detach);
			t8 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t9 = claim_text(li1_nodes, "Add blank validator");
			li1_nodes.forEach(detach);
			t10 = claim_text(ul0_nodes, "\n            ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t11 = claim_text(li2_nodes, "Add ");

			code1 = claim_element(li2_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t12 = claim_text(code1_nodes, "init");
			code1_nodes.forEach(detach);
			t13 = claim_text(li2_nodes, " and ");

			code2 = claim_element(li2_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t14 = claim_text(code2_nodes, "destroy");
			code2_nodes.forEach(detach);
			t15 = claim_text(li2_nodes, " methods to validator");
			li2_nodes.forEach(detach);
			t16 = claim_text(ul0_nodes, "\n            ");

			li3 = claim_element(ul0_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t17 = claim_text(li3_nodes, "Add Venezuelan VAT number (RIF) validator");
			li3_nodes.forEach(detach);
			t18 = claim_text(ul0_nodes, "\n            ");

			li4 = claim_element(ul0_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			t19 = claim_text(li4_nodes, "Add China phone number validator");
			li4_nodes.forEach(detach);
			t20 = claim_text(ul0_nodes, "\n            ");

			li5 = claim_element(ul0_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			t21 = claim_text(li5_nodes, "Add Venezuela phone number validator");
			li5_nodes.forEach(detach);
			t22 = claim_text(ul0_nodes, "\n            ");

			li6 = claim_element(ul0_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			t23 = claim_text(li6_nodes, "Add Romania phone number validator");
			li6_nodes.forEach(detach);
			t24 = claim_text(ul0_nodes, "\n            ");

			li7 = claim_element(ul0_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			t25 = claim_text(li7_nodes, "Add Romania postal code validator");
			li7_nodes.forEach(detach);
			t26 = claim_text(ul0_nodes, "\n            ");

			li8 = claim_element(ul0_nodes, "LI", {}, false);
			var li8_nodes = children(li8);

			t27 = claim_text(li8_nodes, "Add Denmark phone number validator");
			li8_nodes.forEach(detach);
			t28 = claim_text(ul0_nodes, "\n            ");

			li9 = claim_element(ul0_nodes, "LI", {}, false);
			var li9_nodes = children(li9);

			t29 = claim_text(li9_nodes, "Add Thailand phone number and ID validator");
			li9_nodes.forEach(detach);
			t30 = claim_text(ul0_nodes, "\n            ");

			li10 = claim_element(ul0_nodes, "LI", {}, false);
			var li10_nodes = children(li10);

			t31 = claim_text(li10_nodes, "Add Chinese citizen ID validator>");
			li10_nodes.forEach(detach);
			t32 = claim_text(ul0_nodes, "\n            ");

			li11 = claim_element(ul0_nodes, "LI", {}, false);
			var li11_nodes = children(li11);

			t33 = claim_text(li11_nodes, "Add Russia phone number validator");
			li11_nodes.forEach(detach);
			t34 = claim_text(ul0_nodes, "\n            ");

			li12 = claim_element(ul0_nodes, "LI", {}, false);
			var li12_nodes = children(li12);

			t35 = claim_text(li12_nodes, "Add Russian postal code validator");
			li12_nodes.forEach(detach);
			t36 = claim_text(ul0_nodes, "\n            ");

			li13 = claim_element(ul0_nodes, "LI", {}, false);
			var li13_nodes = children(li13);

			t37 = claim_text(li13_nodes, "Add Czech and Slovakia phone number and postal code validators");
			li13_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t38 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t39 = claim_text(section1_nodes, "\n        ");

			ul1 = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li14 = claim_element(ul1_nodes, "LI", {}, false);
			var li14_nodes = children(li14);

			t40 = claim_text(li14_nodes, "Change the default type of ");

			a0 = claim_element(li14_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t41 = claim_text(a0_nodes, "remote");
			a0_nodes.forEach(detach);
			t42 = claim_text(li14_nodes, " validator to GET");
			li14_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t43 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t44 = claim_text(section2_nodes, "\n        ");

			ul2 = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul2_nodes = children(ul2);

			li15 = claim_element(ul2_nodes, "LI", {}, false);
			var li15_nodes = children(li15);

			t45 = claim_text(li15_nodes, "Add ");

			code3 = claim_element(li15_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t46 = claim_text(code3_nodes, "delay");
			code3_nodes.forEach(detach);
			t47 = claim_text(li15_nodes, " option to the ");

			a1 = claim_element(li15_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t48 = claim_text(a1_nodes, "remote");
			a1_nodes.forEach(detach);
			t49 = claim_text(li15_nodes, " validator");
			li15_nodes.forEach(detach);
			t50 = claim_text(ul2_nodes, "\n            ");

			li16 = claim_element(ul2_nodes, "LI", {}, false);
			var li16_nodes = children(li16);

			t51 = claim_text(li16_nodes, "The ");

			a2 = claim_element(li16_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t52 = claim_text(a2_nodes, "different");
			a2_nodes.forEach(detach);
			t53 = claim_text(li16_nodes, " validator allows more than a 2-way comparison");
			li16_nodes.forEach(detach);
			t54 = claim_text(ul2_nodes, "\n            ");

			li17 = claim_element(ul2_nodes, "LI", {}, false);
			var li17_nodes = children(li17);

			t55 = claim_text(li17_nodes, "The ");

			code4 = claim_element(li17_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t56 = claim_text(code4_nodes, "container");
			code4_nodes.forEach(detach);
			t57 = claim_text(li17_nodes, " option can be defined by a callback");
			li17_nodes.forEach(detach);
			t58 = claim_text(ul2_nodes, "\n            ");

			li18 = claim_element(ul2_nodes, "LI", {}, false);
			var li18_nodes = children(li18);

			t59 = claim_text(li18_nodes, "Use CSS classes instead of inline styling to fix icons with ");

			code5 = claim_element(li18_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t60 = claim_text(code5_nodes, "input-group");
			code5_nodes.forEach(detach);
			li18_nodes.forEach(detach);
			t61 = claim_text(ul2_nodes, "\n            ");

			li19 = claim_element(ul2_nodes, "LI", {}, false);
			var li19_nodes = children(li19);

			t62 = claim_text(li19_nodes, "The ");

			a3 = claim_element(li19_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t63 = claim_text(a3_nodes, "stringLength");
			a3_nodes.forEach(detach);
			t64 = claim_text(li19_nodes, " validator supports HTML 5 ");

			code6 = claim_element(li19_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t65 = claim_text(code6_nodes, "minlength");
			code6_nodes.forEach(detach);
			t66 = claim_text(li19_nodes, " attribute");
			li19_nodes.forEach(detach);
			t67 = claim_text(ul2_nodes, "\n            ");

			li20 = claim_element(ul2_nodes, "LI", {}, false);
			var li20_nodes = children(li20);

			t68 = claim_text(li20_nodes, "The ");

			a4 = claim_element(li20_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t69 = claim_text(a4_nodes, "emailAddress");
			a4_nodes.forEach(detach);
			t70 = claim_text(li20_nodes, " validator accepts multiple email addresses");
			li20_nodes.forEach(detach);
			t71 = claim_text(ul2_nodes, "\n            ");

			li21 = claim_element(ul2_nodes, "LI", {}, false);
			var li21_nodes = children(li21);

			t72 = claim_text(li21_nodes, "Reuse data returned by ");

			a5 = claim_element(li21_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t73 = claim_text(a5_nodes, "callback");
			a5_nodes.forEach(detach);
			t74 = claim_text(li21_nodes, ", ");

			a6 = claim_element(li21_nodes, "A", { href: true, class: true }, false);
			var a6_nodes = children(a6);

			t75 = claim_text(a6_nodes, "remote");
			a6_nodes.forEach(detach);
			t76 = claim_text(li21_nodes, ", custom validators");
			li21_nodes.forEach(detach);
			t77 = claim_text(ul2_nodes, "\n            ");

			li22 = claim_element(ul2_nodes, "LI", {}, false);
			var li22_nodes = children(li22);

			t78 = claim_text(li22_nodes, "The ");

			a7 = claim_element(li22_nodes, "A", { href: true, class: true }, false);
			var a7_nodes = children(a7);

			t79 = claim_text(a7_nodes, "uri");
			a7_nodes.forEach(detach);
			t80 = claim_text(li22_nodes, " validator adds support for custom protocol");
			li22_nodes.forEach(detach);
			t81 = claim_text(ul2_nodes, "\n            ");

			li23 = claim_element(ul2_nodes, "LI", {}, false);
			var li23_nodes = children(li23);

			t82 = claim_text(li23_nodes, "Support VAT number without prefixing by country code");
			li23_nodes.forEach(detach);
			t83 = claim_text(ul2_nodes, "\n            ");

			li24 = claim_element(ul2_nodes, "LI", {}, false);
			var li24_nodes = children(li24);

			t84 = claim_text(li24_nodes, "Support latest Bootstrap when using tooltip/popover to show the message");
			li24_nodes.forEach(detach);
			t85 = claim_text(ul2_nodes, "\n            ");

			li25 = claim_element(ul2_nodes, "LI", {}, false);
			var li25_nodes = children(li25);

			t86 = claim_text(li25_nodes, "Improve behaviour of the ");

			a8 = claim_element(li25_nodes, "A", { href: true, class: true }, false);
			var a8_nodes = children(a8);

			t87 = claim_text(a8_nodes, "different");
			a8_nodes.forEach(detach);
			t88 = claim_text(li25_nodes, " validator");
			li25_nodes.forEach(detach);
			t89 = claim_text(ul2_nodes, "\n            ");

			li26 = claim_element(ul2_nodes, "LI", {}, false);
			var li26_nodes = children(li26);

			t90 = claim_text(li26_nodes, "Add \"BootstrapValidator's JavaScript requires jQuery\" warning");
			li26_nodes.forEach(detach);
			t91 = claim_text(ul2_nodes, "\n            ");

			li27 = claim_element(ul2_nodes, "LI", {}, false);
			var li27_nodes = children(li27);

			t92 = claim_text(li27_nodes, "Add ");

			code7 = claim_element(li27_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t93 = claim_text(code7_nodes, "minSize");
			code7_nodes.forEach(detach);
			t94 = claim_text(li27_nodes, " option for the ");

			a9 = claim_element(li27_nodes, "A", { href: true, class: true }, false);
			var a9_nodes = children(a9);

			t95 = claim_text(a9_nodes, "file");
			a9_nodes.forEach(detach);
			t96 = claim_text(li27_nodes, " validator");
			li27_nodes.forEach(detach);
			t97 = claim_text(ul2_nodes, "\n            ");

			li28 = claim_element(ul2_nodes, "LI", {}, false);
			var li28_nodes = children(li28);

			t98 = claim_text(li28_nodes, "Add ");

			a10 = claim_element(li28_nodes, "A", { href: true, class: true }, false);
			var a10_nodes = children(a10);

			t99 = claim_text(a10_nodes, "phone");
			a10_nodes.forEach(detach);
			t100 = claim_text(li28_nodes, " number validator test suite");
			li28_nodes.forEach(detach);
			ul2_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			t101 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t102 = claim_text(section3_nodes, "\n        ");

			ul3 = claim_element(section3_nodes, "UL", { class: true }, false);
			var ul3_nodes = children(ul3);

			li29 = claim_element(ul3_nodes, "LI", {}, false);
			var li29_nodes = children(li29);

			t103 = claim_text(li29_nodes, "Tabs get red even form is valid");
			li29_nodes.forEach(detach);
			t104 = claim_text(ul3_nodes, "\n            ");

			li30 = claim_element(ul3_nodes, "LI", {}, false);
			var li30_nodes = children(li30);

			t105 = claim_text(li30_nodes, "Fix the ");

			a11 = claim_element(li30_nodes, "A", { href: true, class: true }, false);
			var a11_nodes = children(a11);

			t106 = claim_text(a11_nodes, "emailAddress");
			a11_nodes.forEach(detach);
			t107 = claim_text(li30_nodes, " issue which email@server is not valid email address");
			li30_nodes.forEach(detach);
			t108 = claim_text(ul3_nodes, "\n            ");

			li31 = claim_element(ul3_nodes, "LI", {}, false);
			var li31_nodes = children(li31);

			t109 = claim_text(li31_nodes, "Keep disabled validators VALID");
			li31_nodes.forEach(detach);
			t110 = claim_text(ul3_nodes, "\n            ");

			li32 = claim_element(ul3_nodes, "LI", {}, false);
			var li32_nodes = children(li32);

			t111 = claim_text(li32_nodes, "Fix the issue when adding field which does not exist but is already set in \"fields\" option");
			li32_nodes.forEach(detach);
			t112 = claim_text(ul3_nodes, "\n            ");

			li33 = claim_element(ul3_nodes, "LI", {}, false);
			var li33_nodes = children(li33);

			t113 = claim_text(li33_nodes, "Fix the issue when removing the radio or checkbox field");
			li33_nodes.forEach(detach);
			t114 = claim_text(ul3_nodes, "\n            ");

			li34 = claim_element(ul3_nodes, "LI", {}, false);
			var li34_nodes = children(li34);

			t115 = claim_text(li34_nodes, "The form is still submitted when clicking on submit button which is set ");

			code8 = claim_element(li34_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t116 = claim_text(code8_nodes, "onclick=\"return false;\"");
			code8_nodes.forEach(detach);
			li34_nodes.forEach(detach);
			t117 = claim_text(ul3_nodes, "\n            ");

			li35 = claim_element(ul3_nodes, "LI", {}, false);
			var li35_nodes = children(li35);

			t118 = claim_text(li35_nodes, "Using ");

			a12 = claim_element(li35_nodes, "A", { href: true, class: true }, false);
			var a12_nodes = children(a12);

			t119 = claim_text(a12_nodes, "notEmpty");
			a12_nodes.forEach(detach);
			t120 = claim_text(li35_nodes, " validator with ");

			code9 = claim_element(li35_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t121 = claim_text(code9_nodes, "type=\"number\"");
			code9_nodes.forEach(detach);
			li35_nodes.forEach(detach);
			t122 = claim_text(ul3_nodes, "\n            ");

			li36 = claim_element(ul3_nodes, "LI", {}, false);
			var li36_nodes = children(li36);

			t123 = claim_text(li36_nodes, "The tooltip/popover isn't shown if there is disabled validator. The tooltip/popover is shown automatically when the field gets the focus");
			li36_nodes.forEach(detach);
			t124 = claim_text(ul3_nodes, "\n            ");

			li37 = claim_element(ul3_nodes, "LI", {}, false);
			var li37_nodes = children(li37);

			t125 = claim_text(li37_nodes, "Can't validate ipv4 and ipv6 at the same time. Add ip validator test suite");
			li37_nodes.forEach(detach);
			t126 = claim_text(ul3_nodes, "\n            ");

			li38 = claim_element(ul3_nodes, "LI", {}, false);
			var li38_nodes = children(li38);

			t127 = claim_text(li38_nodes, "Fix Russian ");

			a13 = claim_element(li38_nodes, "A", { href: true, class: true }, false);
			var a13_nodes = children(a13);

			t128 = claim_text(a13_nodes, "VAT");
			a13_nodes.forEach(detach);
			t129 = claim_text(li38_nodes, " number validator");
			li38_nodes.forEach(detach);
			t130 = claim_text(ul3_nodes, "\n            ");

			li39 = claim_element(ul3_nodes, "LI", {}, false);
			var li39_nodes = children(li39);

			t131 = claim_text(li39_nodes, "The form won't be validated if the submit button contains a HTML tag");
			li39_nodes.forEach(detach);
			ul3_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			t132 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			heading4.$$.fragment.l(section4_nodes);
			t133 = claim_text(section4_nodes, "\n        ");

			p0 = claim_element(section4_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t134 = claim_text(p0_nodes, "If you don't use the ");

			a14 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a14_nodes = children(a14);

			t135 = claim_text(a14_nodes, "remote");
			a14_nodes.forEach(detach);
			t136 = claim_text(p0_nodes, " validator, just download v0.5.2 package and override the CSS/JS bundle.");
			p0_nodes.forEach(detach);
			t137 = claim_text(section4_nodes, "\n        ");

			p1 = claim_element(section4_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t138 = claim_text(p1_nodes, "Otherwise, please indicate the ");

			code10 = claim_element(p1_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t139 = claim_text(code10_nodes, "type");
			code10_nodes.forEach(detach);
			t140 = claim_text(p1_nodes, " option when using ");

			a15 = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a15_nodes = children(a15);

			t141 = claim_text(a15_nodes, "remote");
			a15_nodes.forEach(detach);
			t142 = claim_text(p1_nodes, " validator:");
			p1_nodes.forEach(detach);
			t143 = claim_text(section4_nodes, "\n        ");
			samplecode.$$.fragment.l(section4_nodes);
			section4_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 92);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 143);
			add_location(code0, file, 11, 20, 325);
			add_location(li0, file, 11, 12, 317);
			add_location(li1, file, 12, 12, 370);
			add_location(code1, file, 13, 20, 419);
			add_location(code2, file, 13, 42, 441);
			add_location(li2, file, 13, 12, 411);
			add_location(li3, file, 14, 12, 500);
			add_location(li4, file, 15, 12, 563);
			add_location(li5, file, 16, 12, 617);
			add_location(li6, file, 17, 12, 675);
			add_location(li7, file, 18, 12, 731);
			add_location(li8, file, 19, 12, 786);
			add_location(li9, file, 20, 12, 842);
			add_location(li10, file, 21, 12, 906);
			add_location(li11, file, 22, 12, 961);
			add_location(li12, file, 23, 12, 1016);
			add_location(li13, file, 24, 12, 1071);
			ul0.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul0, file, 10, 8, 272);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 202);
			a0.href = "/guide/validators/remote";
			a0.className = "blue dim link";
			add_location(a0, file, 31, 43, 1318);
			add_location(li14, file, 31, 12, 1287);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 30, 8, 1242);
			section1.className = "mv5";
			add_location(section1, file, 28, 4, 1177);
			add_location(code3, file, 38, 20, 1565);
			a1.href = "/guide/validators/remote";
			a1.className = "blue dim link";
			add_location(a1, file, 38, 53, 1598);
			add_location(li15, file, 38, 12, 1557);
			a2.href = "/guide/validators/different";
			a2.className = "blue dim link";
			add_location(a2, file, 39, 20, 1701);
			add_location(li16, file, 39, 12, 1693);
			add_location(code4, file, 40, 20, 1846);
			add_location(li17, file, 40, 12, 1838);
			add_location(code5, file, 41, 76, 1986);
			add_location(li18, file, 41, 12, 1922);
			a3.href = "/guide/validators/string-length";
			a3.className = "blue dim link";
			add_location(a3, file, 42, 20, 2036);
			add_location(code6, file, 42, 127, 2143);
			add_location(li19, file, 42, 12, 2028);
			a4.href = "/guide/validators/email-address";
			a4.className = "blue dim link";
			add_location(a4, file, 43, 20, 2201);
			add_location(li20, file, 43, 12, 2193);
			a5.href = "/guide/validators/callback";
			a5.className = "blue dim link";
			add_location(a5, file, 44, 39, 2369);
			a6.href = "/guide/validators/remote";
			a6.className = "blue dim link";
			add_location(a6, file, 44, 112, 2442);
			add_location(li21, file, 44, 12, 2342);
			a7.href = "/guide/validators/uri";
			a7.className = "blue dim link";
			add_location(a7, file, 45, 20, 2554);
			add_location(li22, file, 45, 12, 2546);
			add_location(li23, file, 46, 12, 2676);
			add_location(li24, file, 47, 12, 2750);
			a8.href = "/guide/validators/different";
			a8.className = "blue dim link";
			add_location(a8, file, 48, 41, 2872);
			add_location(li25, file, 48, 12, 2843);
			add_location(li26, file, 49, 12, 2973);
			add_location(code7, file, 50, 20, 3064);
			a9.href = "/guide/validators/file";
			a9.className = "blue dim link";
			add_location(a9, file, 50, 56, 3100);
			add_location(li27, file, 50, 12, 3056);
			a10.href = "/guide/validators/phone";
			a10.className = "blue dim link";
			add_location(a10, file, 51, 20, 3199);
			add_location(li28, file, 51, 12, 3191);
			ul2.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul2, file, 37, 8, 1512);
			section2.className = "mv5";
			add_location(section2, file, 35, 4, 1442);
			add_location(li29, file, 58, 12, 3444);
			a11.href = "/guide/validators/email-address";
			a11.className = "blue dim link";
			add_location(a11, file, 59, 24, 3509);
			add_location(li30, file, 59, 12, 3497);
			add_location(li31, file, 60, 12, 3659);
			add_location(li32, file, 61, 12, 3711);
			add_location(li33, file, 62, 12, 3823);
			add_location(code8, file, 63, 88, 3976);
			add_location(li34, file, 63, 12, 3900);
			a12.href = "/guide/validators/not-empty";
			a12.className = "blue dim link";
			add_location(a12, file, 64, 22, 4040);
			add_location(code9, file, 64, 110, 4128);
			add_location(li35, file, 64, 12, 4030);
			add_location(li36, file, 65, 12, 4172);
			add_location(li37, file, 66, 12, 4330);
			a13.href = "/guide/validators/vat";
			a13.className = "blue dim link";
			add_location(a13, file, 67, 28, 4442);
			add_location(li38, file, 67, 12, 4426);
			add_location(li39, file, 68, 12, 4538);
			ul3.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul3, file, 57, 8, 3399);
			section3.className = "mv5";
			add_location(section3, file, 55, 4, 3332);
			a14.href = "/guide/validators/remote";
			a14.className = "blue dim link";
			add_location(a14, file, 74, 48, 4779);
			p0.className = "lh-copy";
			add_location(p0, file, 74, 8, 4739);
			add_location(code10, file, 75, 58, 4981);
			a15.href = "/guide/validators/remote";
			a15.className = "blue dim link";
			add_location(a15, file, 75, 94, 5017);
			p1.className = "lh-copy";
			add_location(p1, file, 75, 8, 4931);
			section4.className = "mv5";
			add_location(section4, file, 72, 4, 4650);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, ul0);
			append(ul0, li0);
			append(li0, t5);
			append(li0, code0);
			append(code0, t6);
			append(li0, t7);
			append(ul0, t8);
			append(ul0, li1);
			append(li1, t9);
			append(ul0, t10);
			append(ul0, li2);
			append(li2, t11);
			append(li2, code1);
			append(code1, t12);
			append(li2, t13);
			append(li2, code2);
			append(code2, t14);
			append(li2, t15);
			append(ul0, t16);
			append(ul0, li3);
			append(li3, t17);
			append(ul0, t18);
			append(ul0, li4);
			append(li4, t19);
			append(ul0, t20);
			append(ul0, li5);
			append(li5, t21);
			append(ul0, t22);
			append(ul0, li6);
			append(li6, t23);
			append(ul0, t24);
			append(ul0, li7);
			append(li7, t25);
			append(ul0, t26);
			append(ul0, li8);
			append(li8, t27);
			append(ul0, t28);
			append(ul0, li9);
			append(li9, t29);
			append(ul0, t30);
			append(ul0, li10);
			append(li10, t31);
			append(ul0, t32);
			append(ul0, li11);
			append(li11, t33);
			append(ul0, t34);
			append(ul0, li12);
			append(li12, t35);
			append(ul0, t36);
			append(ul0, li13);
			append(li13, t37);
			insert(target, t38, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t39);
			append(section1, ul1);
			append(ul1, li14);
			append(li14, t40);
			append(li14, a0);
			append(a0, t41);
			append(li14, t42);
			insert(target, t43, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t44);
			append(section2, ul2);
			append(ul2, li15);
			append(li15, t45);
			append(li15, code3);
			append(code3, t46);
			append(li15, t47);
			append(li15, a1);
			append(a1, t48);
			append(li15, t49);
			append(ul2, t50);
			append(ul2, li16);
			append(li16, t51);
			append(li16, a2);
			append(a2, t52);
			append(li16, t53);
			append(ul2, t54);
			append(ul2, li17);
			append(li17, t55);
			append(li17, code4);
			append(code4, t56);
			append(li17, t57);
			append(ul2, t58);
			append(ul2, li18);
			append(li18, t59);
			append(li18, code5);
			append(code5, t60);
			append(ul2, t61);
			append(ul2, li19);
			append(li19, t62);
			append(li19, a3);
			append(a3, t63);
			append(li19, t64);
			append(li19, code6);
			append(code6, t65);
			append(li19, t66);
			append(ul2, t67);
			append(ul2, li20);
			append(li20, t68);
			append(li20, a4);
			append(a4, t69);
			append(li20, t70);
			append(ul2, t71);
			append(ul2, li21);
			append(li21, t72);
			append(li21, a5);
			append(a5, t73);
			append(li21, t74);
			append(li21, a6);
			append(a6, t75);
			append(li21, t76);
			append(ul2, t77);
			append(ul2, li22);
			append(li22, t78);
			append(li22, a7);
			append(a7, t79);
			append(li22, t80);
			append(ul2, t81);
			append(ul2, li23);
			append(li23, t82);
			append(ul2, t83);
			append(ul2, li24);
			append(li24, t84);
			append(ul2, t85);
			append(ul2, li25);
			append(li25, t86);
			append(li25, a8);
			append(a8, t87);
			append(li25, t88);
			append(ul2, t89);
			append(ul2, li26);
			append(li26, t90);
			append(ul2, t91);
			append(ul2, li27);
			append(li27, t92);
			append(li27, code7);
			append(code7, t93);
			append(li27, t94);
			append(li27, a9);
			append(a9, t95);
			append(li27, t96);
			append(ul2, t97);
			append(ul2, li28);
			append(li28, t98);
			append(li28, a10);
			append(a10, t99);
			append(li28, t100);
			insert(target, t101, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t102);
			append(section3, ul3);
			append(ul3, li29);
			append(li29, t103);
			append(ul3, t104);
			append(ul3, li30);
			append(li30, t105);
			append(li30, a11);
			append(a11, t106);
			append(li30, t107);
			append(ul3, t108);
			append(ul3, li31);
			append(li31, t109);
			append(ul3, t110);
			append(ul3, li32);
			append(li32, t111);
			append(ul3, t112);
			append(ul3, li33);
			append(li33, t113);
			append(ul3, t114);
			append(ul3, li34);
			append(li34, t115);
			append(li34, code8);
			append(code8, t116);
			append(ul3, t117);
			append(ul3, li35);
			append(li35, t118);
			append(li35, a12);
			append(a12, t119);
			append(li35, t120);
			append(li35, code9);
			append(code9, t121);
			append(ul3, t122);
			append(ul3, li36);
			append(li36, t123);
			append(ul3, t124);
			append(ul3, li37);
			append(li37, t125);
			append(ul3, t126);
			append(ul3, li38);
			append(li38, t127);
			append(li38, a13);
			append(a13, t128);
			append(li38, t129);
			append(ul3, t130);
			append(ul3, li39);
			append(li39, t131);
			insert(target, t132, anchor);
			insert(target, section4, anchor);
			mount_component(heading4, section4, null);
			append(section4, t133);
			append(section4, p0);
			append(p0, t134);
			append(p0, a14);
			append(a14, t135);
			append(p0, t136);
			append(section4, t137);
			append(section4, p1);
			append(p1, t138);
			append(p1, code10);
			append(code10, t139);
			append(p1, t140);
			append(p1, a15);
			append(a15, t141);
			append(p1, t142);
			append(section4, t143);
			mount_component(samplecode, section4, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var heading4_changes = {};
			if (changed.$$scope) heading4_changes.$$scope = { changed, ctx };
			heading4.$set(heading4_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			heading4.$$.fragment.i(local);

			samplecode.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			heading4.$$.fragment.o(local);
			samplecode.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			if (detaching) {
				detach(t38);
				detach(section1);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t43);
				detach(section2);
			}

			heading2.$destroy();

			if (detaching) {
				detach(t101);
				detach(section3);
			}

			heading3.$destroy();

			if (detaching) {
				detach(t132);
				detach(section4);
			}

			heading4.$destroy();

			samplecode.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var changeloglayout = new ChangelogLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			changeloglayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			changeloglayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • v0.5.2";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(changeloglayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var changeloglayout_changes = {};
			if (changed.$$scope) changeloglayout_changes.$$scope = { changed, ctx };
			changeloglayout.$set(changeloglayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			changeloglayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			changeloglayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			changeloglayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

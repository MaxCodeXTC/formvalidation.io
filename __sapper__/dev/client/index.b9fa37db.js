import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';

/* src/routes/guide/validators/regexp/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/validators/regexp/index.svelte";

// (10:8) <Heading>
function create_default_slot_8(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (47:8) <Tip>
function create_default_slot_7(ctx) {
	var t0, a, t1, t2;

	return {
		c: function create() {
			t0 = text("Look at the ");
			a = element("a");
			t1 = text("Alias");
			t2 = text(" plugin if you want to have multiple regular expressions on the same field");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "Look at the ");

			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t1 = claim_text(a_nodes, "Alias");
			a_nodes.forEach(detach);
			t2 = claim_text(nodes, " plugin if you want to have multiple regular expressions on the same field");
			this.h();
		},

		h: function hydrate() {
			a.href = "/guide/plugins/alias";
			a.className = "blue dim link";
			add_location(a, file, 46, 25, 2300);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a, anchor);
			append(a, t1);
			insert(target, t2, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(a);
				detach(t2);
			}
		}
	};
}

// (91:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Useful patterns");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Useful patterns");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (137:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (143:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("HTML5 Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "HTML5 Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (149:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("ES6 Module Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "ES6 Module Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (184:12) <PrevButton target="/guide/validators/promise">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("promise validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "promise validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (185:12) <NextButton target="/guide/validators/remote">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("remote validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "remote validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, h30, t5, t6, p0, t7, a0, t8, t9, t10, table0, tr0, th0, t11, t12, th1, t13, t14, th2, t15, t16, th3, t17, t18, tr1, td0, code0, t19, t20, td1, code1, t21, t22, td2, t23, t24, td3, p1, t25, t26, ul0, li0, t27, t28, li1, t29, t30, li2, t31, t32, tr2, td4, code2, t33, t34, td5, code3, t35, t36, td6, t37, t38, td7, t39, t40, tr3, td8, code4, t41, sup, t42, t43, td9, code5, t44, t45, code6, t46, t47, td10, t48, t49, td11, t50, t51, t52, h31, t53, t54, t55, h32, t56, t57, p2, t58, t59, ol, li3, p3, t60, code7, t61, t62, code8, t63, t64, t65, p4, t66, code9, t67, t68_value = 5, t68, t69, code10, t70, t71, code11, t72, t73_value = 5, t73, t74, t75, t76, li7, p5, t77, t78, p6, t79, t80, ul1, li4, a1, t81, t82, li5, a2, t83, t84, li6, a3, t85, t86, section1, t87, p7, t88, t89, table1, tr4, th4, t90, t91, th5, t92, t93, tr5, td12, t94, a4, t95, t96, t97, td13, code12, t98, t99_value = 2, t99, t100, t101_value = 2, t101, t102, t103_value = 4, t103, t104, t105, tr6, td14, t106, t107, td15, ul2, li8, t108, code13, t109, t110, li9, t111, code14, t112, t113, tr7, td16, t114, t115, td17, ul3, li10, t116, code15, t117, t118, li11, t119, code16, t120, t121, tr8, td18, t122, t123, td19, ul4, li12, t124, code17, t125, t126, li13, t127, code18, t128, t129, li14, t130, code19, t131, t132, li15, t133, code20, t134, t135, li16, t136, code21, t137, t138, section2, t139, p8, t140, t141, t142, section3, t143, p9, t144, a5, t145, t146, code22, t147, t148, t149, t150, section4, t151, p10, t152, t153, t154, t155, section5, div, t156, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_8] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var tip = new Tip({
		props: {
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import regexp from 'formvalidation/dist/es6/validators/regexp';

const result = regexp().validate({
    value: ...,
    options: {
        flags: ...,
        message: ...,
        regexp: ...,
    },
});
/*
result is an object of
{
    valid: true or false,
    message: The error message
}
*/
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo0 = new Demo({
		props: {
		prefix: "/guide/validators/regexp/basic",
		frameworks: ['bootstrap', 'tachyons']
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/validators/regexp/html5",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading4 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import regexp from 'formvalidation/dist/es6/validators/regexp';

const res1 = regexp().validate({
    value: 'Ms',
    options: {
        regexp: /^[A-Z\s]+$/,
        message: 'The input is not valid',
    },
});
// res1.valid === false

const res2 = regexp().validate({
    value: 'form VALIDATION',
    options: {
        regexp: '^[A-Z\\s]+$',
        flags: 'i',
        message: 'The input is not valid',
    },
});
// res2.valid === true
` },
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Validating an avatar URL',
        'Validating social account URL',
    ] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/validators/promise",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/validators/remote",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("regexp validator");
			t1 = space();
			h2 = element("h2");
			t2 = text("Check if the value matches given JavaScript regular expression");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			h30 = element("h3");
			t5 = text("Using with form field");
			t6 = space();
			p0 = element("p");
			t7 = text("The HTML attributes are used to set the validator options via the ");
			a0 = element("a");
			t8 = text("Declarative");
			t9 = text(" plugin");
			t10 = space();
			table0 = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t11 = text("Name");
			t12 = space();
			th1 = element("th");
			t13 = text("HTML attribute");
			t14 = space();
			th2 = element("th");
			t15 = text("Type");
			t16 = space();
			th3 = element("th");
			t17 = text("Description");
			t18 = space();
			tr1 = element("tr");
			td0 = element("td");
			code0 = element("code");
			t19 = text("flags");
			t20 = space();
			td1 = element("td");
			code1 = element("code");
			t21 = text("data-fv-regexp___flags");
			t22 = space();
			td2 = element("td");
			t23 = text("String");
			t24 = space();
			td3 = element("td");
			p1 = element("p");
			t25 = text("If specified, flags can have any combination of JavaScript regular expression flags such as:");
			t26 = space();
			ul0 = element("ul");
			li0 = element("li");
			t27 = text("g: global match");
			t28 = space();
			li1 = element("li");
			t29 = text("i: ignore case");
			t30 = space();
			li2 = element("li");
			t31 = text("m: multiple line");
			t32 = space();
			tr2 = element("tr");
			td4 = element("td");
			code2 = element("code");
			t33 = text("message");
			t34 = space();
			td5 = element("td");
			code3 = element("code");
			t35 = text("data-fv-regexp___message");
			t36 = space();
			td6 = element("td");
			t37 = text("String");
			t38 = space();
			td7 = element("td");
			t39 = text("The error message");
			t40 = space();
			tr3 = element("tr");
			td8 = element("td");
			code4 = element("code");
			t41 = text("regexp");
			sup = element("sup");
			t42 = text("*");
			t43 = space();
			td9 = element("td");
			code5 = element("code");
			t44 = text("data-fv-regexp___regexp");
			t45 = text(" or ");
			code6 = element("code");
			t46 = text("pattern");
			t47 = space();
			td10 = element("td");
			t48 = text("String or RegExp");
			t49 = space();
			td11 = element("td");
			t50 = text("The JavaScript regular expression");
			t51 = space();
			tip.$$.fragment.c();
			t52 = space();
			h31 = element("h3");
			t53 = text("Using with ES6 module");
			t54 = space();
			samplecode0.$$.fragment.c();
			t55 = space();
			h32 = element("h3");
			t56 = text("Use a correct pattern");
			t57 = space();
			p2 = element("p");
			t58 = text("If the validator still pass when the field value doesn't match the pattern, please ensure you use a correct pattern. Here are some check lists:");
			t59 = space();
			ol = element("ol");
			li3 = element("li");
			p3 = element("p");
			t60 = text("Is the pattern wrapped between ");
			code7 = element("code");
			t61 = text("^");
			t62 = text(" and ");
			code8 = element("code");
			t63 = text("$");
			t64 = text("?");
			t65 = space();
			p4 = element("p");
			t66 = text("For example, if a field must be 5 digits number, then ");
			code9 = element("code");
			t67 = text("^\\d");
			t68 = text(t68_value);
			t69 = text(" (no ");
			code10 = element("code");
			t70 = text("$");
			t71 = text(" at the end) is wrong pattern. ");
			code11 = element("code");
			t72 = text("^\\d");
			t73 = text(t73_value);
			t74 = text("$");
			t75 = text(" is right one.");
			t76 = space();
			li7 = element("li");
			p5 = element("p");
			t77 = text("Does the pattern work with external services?");
			t78 = space();
			p6 = element("p");
			t79 = text("You can use the following services to test the regular expression:");
			t80 = space();
			ul1 = element("ul");
			li4 = element("li");
			a1 = element("a");
			t81 = text("regexr.com");
			t82 = space();
			li5 = element("li");
			a2 = element("a");
			t83 = text("regex101.com");
			t84 = space();
			li6 = element("li");
			a3 = element("a");
			t85 = text("regexpal.com");
			t86 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t87 = space();
			p7 = element("p");
			t88 = text("The following table collects some useful patterns:");
			t89 = space();
			table1 = element("table");
			tr4 = element("tr");
			th4 = element("th");
			t90 = text("Description");
			t91 = space();
			th5 = element("th");
			t92 = text("Pattern");
			t93 = space();
			tr5 = element("tr");
			td12 = element("td");
			t94 = text("SSN (");
			a4 = element("a");
			t95 = text("Social Security Numbers");
			t96 = text(")");
			t97 = space();
			td13 = element("td");
			code12 = element("code");
			t98 = text("^(?!000|666)(?:[0-6][0-9]");
			t99 = text(t99_value);
			t100 = text("|7(?:[0-6][0-9]|7[0-2]))-(?!00)[0-9]");
			t101 = text(t101_value);
			t102 = text("-(?!0000)[0-9]");
			t103 = text(t103_value);
			t104 = text("$");
			t105 = space();
			tr6 = element("tr");
			td14 = element("td");
			t106 = text("Traditional time in 12-hour format");
			t107 = space();
			td15 = element("td");
			ul2 = element("ul");
			li8 = element("li");
			t108 = text("without seconds (hh:mm): ");
			code13 = element("code");
			t109 = text("^(1[0-2]|0?[1-9]):([0-5]?[0-9])$");
			t110 = space();
			li9 = element("li");
			t111 = text("with seconds (hh:mm:ss): ");
			code14 = element("code");
			t112 = text("^(1[0-2]|0?[1-9]):([0-5]?[0-9]):([0-5]?[0-9])$");
			t113 = space();
			tr7 = element("tr");
			td16 = element("td");
			t114 = text("Traditional time in 24-hour format");
			t115 = space();
			td17 = element("td");
			ul3 = element("ul");
			li10 = element("li");
			t116 = text("without seconds (hh:mm): ");
			code15 = element("code");
			t117 = text("^(2[0-3]|[01]?[0-9]):([0-5]?[0-9])$");
			t118 = space();
			li11 = element("li");
			t119 = text("with seconds (hh:mm:ss): ");
			code16 = element("code");
			t120 = text("^(2[0-3]|[01]?[0-9]):([0-5]?[0-9]):([0-5]?[0-9])$");
			t121 = space();
			tr8 = element("tr");
			td18 = element("td");
			t122 = text("Numbers in a particular range");
			t123 = space();
			td19 = element("td");
			ul4 = element("ul");
			li12 = element("li");
			t124 = text("Range of 1-12 (hour, month): ");
			code17 = element("code");
			t125 = text("^(1[0-2]|[1-9])$");
			t126 = space();
			li13 = element("li");
			t127 = text("Range of 1-24 (hour): ");
			code18 = element("code");
			t128 = text("^(2[0-4]|1[0-9]|[1-9])$");
			t129 = space();
			li14 = element("li");
			t130 = text("Range of 0-59 (minute, second): ");
			code19 = element("code");
			t131 = text("^[1-5]?[0-9]$");
			t132 = space();
			li15 = element("li");
			t133 = text("Range of 1-31 (day of month): ");
			code20 = element("code");
			t134 = text("^(3[01]|[12][0-9]|[1-9])$");
			t135 = space();
			li16 = element("li");
			t136 = text("Range of 0-100 (percentage): ");
			code21 = element("code");
			t137 = text("^(100|[1-9]?[0-9])$");
			t138 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t139 = space();
			p8 = element("p");
			t140 = text("In the following form, user is asked to enter the full name which alphabetical characters and spaces only.");
			t141 = space();
			demo0.$$.fragment.c();
			t142 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t143 = space();
			p9 = element("p");
			t144 = text("When the ");
			a5 = element("a");
			t145 = text("Declarative");
			t146 = text(" plugin is used, the regexp validator will be turned on automatically if the input uses HTML 5 ");
			code22 = element("code");
			t147 = text("pattern");
			t148 = text(" attribute.");
			t149 = space();
			demo1.$$.fragment.c();
			t150 = space();
			section4 = element("section");
			heading4.$$.fragment.c();
			t151 = space();
			p10 = element("p");
			t152 = text("The following snippet shows how to use the regexp validator with ES6 module:");
			t153 = space();
			samplecode1.$$.fragment.c();
			t154 = space();
			examples.$$.fragment.c();
			t155 = space();
			section5 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t156 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "regexp validator");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Check if the value matches given JavaScript regular expression");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n\n        ");

			h30 = claim_element(section0_nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t5 = claim_text(h30_nodes, "Using with form field");
			h30_nodes.forEach(detach);
			t6 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t7 = claim_text(p0_nodes, "The HTML attributes are used to set the validator options via the ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t8 = claim_text(a0_nodes, "Declarative");
			a0_nodes.forEach(detach);
			t9 = claim_text(p0_nodes, " plugin");
			p0_nodes.forEach(detach);
			t10 = claim_text(section0_nodes, "\n        ");

			table0 = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table0_nodes = children(table0);

			tr0 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t11 = claim_text(th0_nodes, "Name");
			th0_nodes.forEach(detach);
			t12 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t13 = claim_text(th1_nodes, "HTML attribute");
			th1_nodes.forEach(detach);
			t14 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t15 = claim_text(th2_nodes, "Type");
			th2_nodes.forEach(detach);
			t16 = claim_text(tr0_nodes, "\n                ");

			th3 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th3_nodes = children(th3);

			t17 = claim_text(th3_nodes, "Description");
			th3_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t18 = claim_text(table0_nodes, "\n            ");

			tr1 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code0 = claim_element(td0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t19 = claim_text(code0_nodes, "flags");
			code0_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t20 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			code1 = claim_element(td1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t21 = claim_text(code1_nodes, "data-fv-regexp___flags");
			code1_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			t22 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t23 = claim_text(td2_nodes, "String");
			td2_nodes.forEach(detach);
			t24 = claim_text(tr1_nodes, "\n                ");

			td3 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			p1 = claim_element(td3_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t25 = claim_text(p1_nodes, "If specified, flags can have any combination of JavaScript regular expression flags such as:");
			p1_nodes.forEach(detach);
			t26 = claim_text(td3_nodes, "\n                    ");

			ul0 = claim_element(td3_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t27 = claim_text(li0_nodes, "g: global match");
			li0_nodes.forEach(detach);
			t28 = claim_text(ul0_nodes, "\n                        ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t29 = claim_text(li1_nodes, "i: ignore case");
			li1_nodes.forEach(detach);
			t30 = claim_text(ul0_nodes, "\n                        ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t31 = claim_text(li2_nodes, "m: multiple line");
			li2_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			td3_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t32 = claim_text(table0_nodes, "\n            ");

			tr2 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			code2 = claim_element(td4_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t33 = claim_text(code2_nodes, "message");
			code2_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t34 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			code3 = claim_element(td5_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t35 = claim_text(code3_nodes, "data-fv-regexp___message");
			code3_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			t36 = claim_text(tr2_nodes, "\n                ");

			td6 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			t37 = claim_text(td6_nodes, "String");
			td6_nodes.forEach(detach);
			t38 = claim_text(tr2_nodes, "\n                ");

			td7 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			t39 = claim_text(td7_nodes, "The error message");
			td7_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t40 = claim_text(table0_nodes, "\n            ");

			tr3 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td8 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			code4 = claim_element(td8_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t41 = claim_text(code4_nodes, "regexp");
			code4_nodes.forEach(detach);

			sup = claim_element(td8_nodes, "SUP", {}, false);
			var sup_nodes = children(sup);

			t42 = claim_text(sup_nodes, "*");
			sup_nodes.forEach(detach);
			td8_nodes.forEach(detach);
			t43 = claim_text(tr3_nodes, "\n                ");

			td9 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			code5 = claim_element(td9_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t44 = claim_text(code5_nodes, "data-fv-regexp___regexp");
			code5_nodes.forEach(detach);
			t45 = claim_text(td9_nodes, " or ");

			code6 = claim_element(td9_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t46 = claim_text(code6_nodes, "pattern");
			code6_nodes.forEach(detach);
			td9_nodes.forEach(detach);
			t47 = claim_text(tr3_nodes, "\n                ");

			td10 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td10_nodes = children(td10);

			t48 = claim_text(td10_nodes, "String or RegExp");
			td10_nodes.forEach(detach);
			t49 = claim_text(tr3_nodes, "\n                ");

			td11 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td11_nodes = children(td11);

			t50 = claim_text(td11_nodes, "The JavaScript regular expression");
			td11_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			table0_nodes.forEach(detach);
			t51 = claim_text(section0_nodes, "\n        ");
			tip.$$.fragment.l(section0_nodes);
			t52 = claim_text(section0_nodes, "\n\n        ");

			h31 = claim_element(section0_nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t53 = claim_text(h31_nodes, "Using with ES6 module");
			h31_nodes.forEach(detach);
			t54 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t55 = claim_text(section0_nodes, "\n        \n        ");

			h32 = claim_element(section0_nodes, "H3", {}, false);
			var h32_nodes = children(h32);

			t56 = claim_text(h32_nodes, "Use a correct pattern");
			h32_nodes.forEach(detach);
			t57 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t58 = claim_text(p2_nodes, "If the validator still pass when the field value doesn't match the pattern, please ensure you use a correct pattern. Here are some check lists:");
			p2_nodes.forEach(detach);
			t59 = claim_text(section0_nodes, "\n        ");

			ol = claim_element(section0_nodes, "OL", { class: true }, false);
			var ol_nodes = children(ol);

			li3 = claim_element(ol_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			p3 = claim_element(li3_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t60 = claim_text(p3_nodes, "Is the pattern wrapped between ");

			code7 = claim_element(p3_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t61 = claim_text(code7_nodes, "^");
			code7_nodes.forEach(detach);
			t62 = claim_text(p3_nodes, " and ");

			code8 = claim_element(p3_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t63 = claim_text(code8_nodes, "$");
			code8_nodes.forEach(detach);
			t64 = claim_text(p3_nodes, "?");
			p3_nodes.forEach(detach);
			t65 = claim_text(li3_nodes, "\n                ");

			p4 = claim_element(li3_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t66 = claim_text(p4_nodes, "For example, if a field must be 5 digits number, then ");

			code9 = claim_element(p4_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t67 = claim_text(code9_nodes, "^\\d");
			t68 = claim_text(code9_nodes, t68_value);
			code9_nodes.forEach(detach);
			t69 = claim_text(p4_nodes, " (no ");

			code10 = claim_element(p4_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t70 = claim_text(code10_nodes, "$");
			code10_nodes.forEach(detach);
			t71 = claim_text(p4_nodes, " at the end) is wrong pattern. ");

			code11 = claim_element(p4_nodes, "CODE", {}, false);
			var code11_nodes = children(code11);

			t72 = claim_text(code11_nodes, "^\\d");
			t73 = claim_text(code11_nodes, t73_value);
			t74 = claim_text(code11_nodes, "$");
			code11_nodes.forEach(detach);
			t75 = claim_text(p4_nodes, " is right one.");
			p4_nodes.forEach(detach);
			li3_nodes.forEach(detach);
			t76 = claim_text(ol_nodes, "\n            ");

			li7 = claim_element(ol_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			p5 = claim_element(li7_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t77 = claim_text(p5_nodes, "Does the pattern work with external services?");
			p5_nodes.forEach(detach);
			t78 = claim_text(li7_nodes, "\n                ");

			p6 = claim_element(li7_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t79 = claim_text(p6_nodes, "You can use the following services to test the regular expression:");
			p6_nodes.forEach(detach);
			t80 = claim_text(li7_nodes, "\n                ");

			ul1 = claim_element(li7_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li4 = claim_element(ul1_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			a1 = claim_element(li4_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t81 = claim_text(a1_nodes, "regexr.com");
			a1_nodes.forEach(detach);
			li4_nodes.forEach(detach);
			t82 = claim_text(ul1_nodes, "\n                    ");

			li5 = claim_element(ul1_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			a2 = claim_element(li5_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t83 = claim_text(a2_nodes, "regex101.com");
			a2_nodes.forEach(detach);
			li5_nodes.forEach(detach);
			t84 = claim_text(ul1_nodes, "\n                    ");

			li6 = claim_element(ul1_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			a3 = claim_element(li6_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t85 = claim_text(a3_nodes, "regexpal.com");
			a3_nodes.forEach(detach);
			li6_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			li7_nodes.forEach(detach);
			ol_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t86 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t87 = claim_text(section1_nodes, "\n        ");

			p7 = claim_element(section1_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t88 = claim_text(p7_nodes, "The following table collects some useful patterns:");
			p7_nodes.forEach(detach);
			t89 = claim_text(section1_nodes, "\n        \n        ");

			table1 = claim_element(section1_nodes, "TABLE", { class: true }, false);
			var table1_nodes = children(table1);

			tr4 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			th4 = claim_element(tr4_nodes, "TH", { class: true }, false);
			var th4_nodes = children(th4);

			t90 = claim_text(th4_nodes, "Description");
			th4_nodes.forEach(detach);
			t91 = claim_text(tr4_nodes, "\n                ");

			th5 = claim_element(tr4_nodes, "TH", { class: true }, false);
			var th5_nodes = children(th5);

			t92 = claim_text(th5_nodes, "Pattern");
			th5_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			t93 = claim_text(table1_nodes, "\n            ");

			tr5 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr5_nodes = children(tr5);

			td12 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td12_nodes = children(td12);

			t94 = claim_text(td12_nodes, "SSN (");

			a4 = claim_element(td12_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t95 = claim_text(a4_nodes, "Social Security Numbers");
			a4_nodes.forEach(detach);
			t96 = claim_text(td12_nodes, ")");
			td12_nodes.forEach(detach);
			t97 = claim_text(tr5_nodes, "\n                ");

			td13 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td13_nodes = children(td13);

			code12 = claim_element(td13_nodes, "CODE", {}, false);
			var code12_nodes = children(code12);

			t98 = claim_text(code12_nodes, "^(?!000|666)(?:[0-6][0-9]");
			t99 = claim_text(code12_nodes, t99_value);
			t100 = claim_text(code12_nodes, "|7(?:[0-6][0-9]|7[0-2]))-(?!00)[0-9]");
			t101 = claim_text(code12_nodes, t101_value);
			t102 = claim_text(code12_nodes, "-(?!0000)[0-9]");
			t103 = claim_text(code12_nodes, t103_value);
			t104 = claim_text(code12_nodes, "$");
			code12_nodes.forEach(detach);
			td13_nodes.forEach(detach);
			tr5_nodes.forEach(detach);
			t105 = claim_text(table1_nodes, "\n            ");

			tr6 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr6_nodes = children(tr6);

			td14 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td14_nodes = children(td14);

			t106 = claim_text(td14_nodes, "Traditional time in 12-hour format");
			td14_nodes.forEach(detach);
			t107 = claim_text(tr6_nodes, "\n                ");

			td15 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td15_nodes = children(td15);

			ul2 = claim_element(td15_nodes, "UL", { class: true }, false);
			var ul2_nodes = children(ul2);

			li8 = claim_element(ul2_nodes, "LI", {}, false);
			var li8_nodes = children(li8);

			t108 = claim_text(li8_nodes, "without seconds (hh:mm): ");

			code13 = claim_element(li8_nodes, "CODE", {}, false);
			var code13_nodes = children(code13);

			t109 = claim_text(code13_nodes, "^(1[0-2]|0?[1-9]):([0-5]?[0-9])$");
			code13_nodes.forEach(detach);
			li8_nodes.forEach(detach);
			t110 = claim_text(ul2_nodes, "\n                        ");

			li9 = claim_element(ul2_nodes, "LI", {}, false);
			var li9_nodes = children(li9);

			t111 = claim_text(li9_nodes, "with seconds (hh:mm:ss): ");

			code14 = claim_element(li9_nodes, "CODE", {}, false);
			var code14_nodes = children(code14);

			t112 = claim_text(code14_nodes, "^(1[0-2]|0?[1-9]):([0-5]?[0-9]):([0-5]?[0-9])$");
			code14_nodes.forEach(detach);
			li9_nodes.forEach(detach);
			ul2_nodes.forEach(detach);
			td15_nodes.forEach(detach);
			tr6_nodes.forEach(detach);
			t113 = claim_text(table1_nodes, "\n            ");

			tr7 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr7_nodes = children(tr7);

			td16 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td16_nodes = children(td16);

			t114 = claim_text(td16_nodes, "Traditional time in 24-hour format");
			td16_nodes.forEach(detach);
			t115 = claim_text(tr7_nodes, "\n                ");

			td17 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td17_nodes = children(td17);

			ul3 = claim_element(td17_nodes, "UL", { class: true }, false);
			var ul3_nodes = children(ul3);

			li10 = claim_element(ul3_nodes, "LI", {}, false);
			var li10_nodes = children(li10);

			t116 = claim_text(li10_nodes, "without seconds (hh:mm): ");

			code15 = claim_element(li10_nodes, "CODE", {}, false);
			var code15_nodes = children(code15);

			t117 = claim_text(code15_nodes, "^(2[0-3]|[01]?[0-9]):([0-5]?[0-9])$");
			code15_nodes.forEach(detach);
			li10_nodes.forEach(detach);
			t118 = claim_text(ul3_nodes, "\n                        ");

			li11 = claim_element(ul3_nodes, "LI", {}, false);
			var li11_nodes = children(li11);

			t119 = claim_text(li11_nodes, "with seconds (hh:mm:ss): ");

			code16 = claim_element(li11_nodes, "CODE", {}, false);
			var code16_nodes = children(code16);

			t120 = claim_text(code16_nodes, "^(2[0-3]|[01]?[0-9]):([0-5]?[0-9]):([0-5]?[0-9])$");
			code16_nodes.forEach(detach);
			li11_nodes.forEach(detach);
			ul3_nodes.forEach(detach);
			td17_nodes.forEach(detach);
			tr7_nodes.forEach(detach);
			t121 = claim_text(table1_nodes, "\n            ");

			tr8 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr8_nodes = children(tr8);

			td18 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td18_nodes = children(td18);

			t122 = claim_text(td18_nodes, "Numbers in a particular range");
			td18_nodes.forEach(detach);
			t123 = claim_text(tr8_nodes, "\n                ");

			td19 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td19_nodes = children(td19);

			ul4 = claim_element(td19_nodes, "UL", { class: true }, false);
			var ul4_nodes = children(ul4);

			li12 = claim_element(ul4_nodes, "LI", {}, false);
			var li12_nodes = children(li12);

			t124 = claim_text(li12_nodes, "Range of 1-12 (hour, month): ");

			code17 = claim_element(li12_nodes, "CODE", {}, false);
			var code17_nodes = children(code17);

			t125 = claim_text(code17_nodes, "^(1[0-2]|[1-9])$");
			code17_nodes.forEach(detach);
			li12_nodes.forEach(detach);
			t126 = claim_text(ul4_nodes, "\n                        ");

			li13 = claim_element(ul4_nodes, "LI", {}, false);
			var li13_nodes = children(li13);

			t127 = claim_text(li13_nodes, "Range of 1-24 (hour): ");

			code18 = claim_element(li13_nodes, "CODE", {}, false);
			var code18_nodes = children(code18);

			t128 = claim_text(code18_nodes, "^(2[0-4]|1[0-9]|[1-9])$");
			code18_nodes.forEach(detach);
			li13_nodes.forEach(detach);
			t129 = claim_text(ul4_nodes, "\n                        ");

			li14 = claim_element(ul4_nodes, "LI", {}, false);
			var li14_nodes = children(li14);

			t130 = claim_text(li14_nodes, "Range of 0-59 (minute, second): ");

			code19 = claim_element(li14_nodes, "CODE", {}, false);
			var code19_nodes = children(code19);

			t131 = claim_text(code19_nodes, "^[1-5]?[0-9]$");
			code19_nodes.forEach(detach);
			li14_nodes.forEach(detach);
			t132 = claim_text(ul4_nodes, "\n                        ");

			li15 = claim_element(ul4_nodes, "LI", {}, false);
			var li15_nodes = children(li15);

			t133 = claim_text(li15_nodes, "Range of 1-31 (day of month): ");

			code20 = claim_element(li15_nodes, "CODE", {}, false);
			var code20_nodes = children(code20);

			t134 = claim_text(code20_nodes, "^(3[01]|[12][0-9]|[1-9])$");
			code20_nodes.forEach(detach);
			li15_nodes.forEach(detach);
			t135 = claim_text(ul4_nodes, "\n                        ");

			li16 = claim_element(ul4_nodes, "LI", {}, false);
			var li16_nodes = children(li16);

			t136 = claim_text(li16_nodes, "Range of 0-100 (percentage): ");

			code21 = claim_element(li16_nodes, "CODE", {}, false);
			var code21_nodes = children(code21);

			t137 = claim_text(code21_nodes, "^(100|[1-9]?[0-9])$");
			code21_nodes.forEach(detach);
			li16_nodes.forEach(detach);
			ul4_nodes.forEach(detach);
			td19_nodes.forEach(detach);
			tr8_nodes.forEach(detach);
			table1_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t138 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t139 = claim_text(section2_nodes, "\n        ");

			p8 = claim_element(section2_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t140 = claim_text(p8_nodes, "In the following form, user is asked to enter the full name which alphabetical characters and spaces only.");
			p8_nodes.forEach(detach);
			t141 = claim_text(section2_nodes, "\n        ");
			demo0.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t142 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t143 = claim_text(section3_nodes, "\n        ");

			p9 = claim_element(section3_nodes, "P", { class: true }, false);
			var p9_nodes = children(p9);

			t144 = claim_text(p9_nodes, "When the ");

			a5 = claim_element(p9_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t145 = claim_text(a5_nodes, "Declarative");
			a5_nodes.forEach(detach);
			t146 = claim_text(p9_nodes, " plugin is used, the regexp validator will be turned on automatically if the input uses HTML 5 ");

			code22 = claim_element(p9_nodes, "CODE", {}, false);
			var code22_nodes = children(code22);

			t147 = claim_text(code22_nodes, "pattern");
			code22_nodes.forEach(detach);
			t148 = claim_text(p9_nodes, " attribute.");
			p9_nodes.forEach(detach);
			t149 = claim_text(section3_nodes, "\n        ");
			demo1.$$.fragment.l(section3_nodes);
			section3_nodes.forEach(detach);
			t150 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			heading4.$$.fragment.l(section4_nodes);
			t151 = claim_text(section4_nodes, "\n\n        ");

			p10 = claim_element(section4_nodes, "P", { class: true }, false);
			var p10_nodes = children(p10);

			t152 = claim_text(p10_nodes, "The following snippet shows how to use the regexp validator with ES6 module:");
			p10_nodes.forEach(detach);
			t153 = claim_text(section4_nodes, "\n");
			samplecode1.$$.fragment.l(section4_nodes);
			section4_nodes.forEach(detach);
			t154 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			t155 = claim_text(nodes, "\n\n    ");

			section5 = claim_element(nodes, "SECTION", { class: true }, false);
			var section5_nodes = children(section5);

			div = claim_element(section5_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t156 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section5_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 98);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 152);
			add_location(h30, file, 11, 8, 313);
			a0.href = "/guide/plugins/declarative";
			a0.className = "blue dim link";
			add_location(a0, file, 12, 95, 439);
			p0.className = "lh-copy i";
			add_location(p0, file, 12, 8, 352);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 15, 16, 652);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 16, 16, 712);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 17, 16, 782);
			th3.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th3, file, 18, 16, 842);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 14, 12, 603);
			add_location(code0, file, 21, 36, 992);
			td0.className = "pv2 ph3";
			add_location(td0, file, 21, 16, 972);
			add_location(code1, file, 22, 36, 1052);
			td1.className = "pv2 ph3";
			add_location(td1, file, 22, 16, 1032);
			td2.className = "pv2 ph3";
			add_location(td2, file, 23, 16, 1109);
			p1.className = "lh-copy";
			add_location(p1, file, 25, 20, 1198);
			add_location(li0, file, 27, 24, 1387);
			add_location(li1, file, 28, 24, 1436);
			add_location(li2, file, 29, 24, 1484);
			ul0.className = "ma0 pl3 lh-copy";
			add_location(ul0, file, 26, 20, 1334);
			td3.className = "pv2 ph3";
			add_location(td3, file, 24, 16, 1157);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 20, 12, 923);
			add_location(code2, file, 34, 36, 1657);
			td4.className = "pv2 ph3";
			add_location(td4, file, 34, 16, 1637);
			add_location(code3, file, 35, 36, 1719);
			td5.className = "pv2 ph3";
			add_location(td5, file, 35, 16, 1699);
			td6.className = "pv2 ph3";
			add_location(td6, file, 36, 16, 1778);
			td7.className = "pv2 ph3";
			add_location(td7, file, 37, 16, 1826);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 33, 12, 1588);
			add_location(code4, file, 40, 36, 1968);
			add_location(sup, file, 40, 55, 1987);
			td8.className = "pv2 ph3";
			add_location(td8, file, 40, 16, 1948);
			add_location(code5, file, 41, 36, 2041);
			add_location(code6, file, 41, 76, 2081);
			td9.className = "pv2 ph3";
			add_location(td9, file, 41, 16, 2021);
			td10.className = "pv2 ph3";
			add_location(td10, file, 42, 16, 2123);
			td11.className = "pv2 ph3";
			add_location(td11, file, 43, 16, 2181);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 39, 12, 1899);
			table0.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table0, file, 13, 8, 533);
			add_location(h31, file, 48, 8, 2452);
			add_location(h32, file, 70, 8, 2886);
			p2.className = "lh-copy";
			add_location(p2, file, 71, 8, 2925);
			add_location(code7, file, 74, 66, 3212);
			add_location(code8, file, 74, 85, 3231);
			p3.className = "lh-copy";
			add_location(p3, file, 74, 16, 3162);
			add_location(code9, file, 75, 89, 3340);
			add_location(code10, file, 75, 113, 3364);
			add_location(code11, file, 75, 158, 3409);
			p4.className = "lh-copy";
			add_location(p4, file, 75, 16, 3267);
			add_location(li3, file, 73, 12, 3141);
			p5.className = "lh-copy";
			add_location(p5, file, 78, 16, 3499);
			p6.className = "lh-copy";
			add_location(p6, file, 79, 16, 3584);
			a1.href = "http://regexr.com";
			a1.className = "blue dim link";
			add_location(a1, file, 81, 24, 3735);
			add_location(li4, file, 81, 20, 3731);
			a2.href = "http://regex101.com";
			a2.className = "blue dim link";
			add_location(a2, file, 82, 24, 3829);
			add_location(li5, file, 82, 20, 3825);
			a3.href = "http://regexpal.com";
			a3.className = "blue dim link";
			add_location(a3, file, 83, 24, 3927);
			add_location(li6, file, 83, 20, 3923);
			ul1.className = "ma0 pl3";
			add_location(ul1, file, 80, 16, 3690);
			add_location(li7, file, 77, 12, 3478);
			ol.className = "ma0 pl3 lh-copy";
			add_location(ol, file, 72, 8, 3100);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 247);
			p7.className = "lh-copy";
			add_location(p7, file, 91, 8, 4148);
			th4.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th4, file, 95, 16, 4362);
			th5.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th5, file, 96, 16, 4429);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 94, 12, 4313);
			a4.href = "https://en.wikipedia.org/wiki/Social_Security_number";
			a4.className = "blue dim link";
			add_location(a4, file, 99, 41, 4580);
			td12.className = "pv2 ph3";
			add_location(td12, file, 99, 16, 4555);
			add_location(code12, file, 100, 36, 4735);
			td13.className = "pv2 ph3";
			add_location(td13, file, 100, 16, 4715);
			tr5.className = "striped--light-gray";
			add_location(tr5, file, 98, 12, 4506);
			td14.className = "pv2 ph3";
			add_location(td14, file, 103, 16, 4918);
			add_location(code13, file, 106, 53, 5117);
			add_location(li8, file, 106, 24, 5088);
			add_location(code14, file, 107, 53, 5221);
			add_location(li9, file, 107, 24, 5192);
			ul2.className = "ma0 pl3 lh-copy";
			add_location(ul2, file, 105, 20, 5035);
			td15.className = "pv2 ph3";
			add_location(td15, file, 104, 16, 4994);
			tr6.className = "striped--light-gray";
			add_location(tr6, file, 102, 12, 4869);
			td16.className = "pv2 ph3";
			add_location(td16, file, 112, 16, 5413);
			add_location(code15, file, 115, 53, 5612);
			add_location(li10, file, 115, 24, 5583);
			add_location(code16, file, 116, 53, 5719);
			add_location(li11, file, 116, 24, 5690);
			ul3.className = "ma0 pl3 lh-copy";
			add_location(ul3, file, 114, 20, 5530);
			td17.className = "pv2 ph3";
			add_location(td17, file, 113, 16, 5489);
			tr7.className = "striped--light-gray";
			add_location(tr7, file, 111, 12, 5364);
			td18.className = "pv2 ph3";
			add_location(td18, file, 121, 16, 5914);
			add_location(code17, file, 124, 57, 6112);
			add_location(li12, file, 124, 24, 6079);
			add_location(code18, file, 125, 50, 6197);
			add_location(li13, file, 125, 24, 6171);
			add_location(code19, file, 126, 60, 6299);
			add_location(li14, file, 126, 24, 6263);
			add_location(code20, file, 127, 58, 6389);
			add_location(li15, file, 127, 24, 6355);
			add_location(code21, file, 128, 57, 6490);
			add_location(li16, file, 128, 24, 6457);
			ul4.className = "ma0 pl3 lh-copy";
			add_location(ul4, file, 123, 20, 6026);
			td19.className = "pv2 ph3";
			add_location(td19, file, 122, 16, 5985);
			tr8.className = "striped--light-gray";
			add_location(tr8, file, 120, 12, 5865);
			table1.className = "collapse ba br2 b--black-10 pv2 ph3 w-100 mb4";
			add_location(table1, file, 93, 8, 4239);
			section1.className = "mv5";
			add_location(section1, file, 89, 4, 4075);
			p8.className = "lh-copy";
			add_location(p8, file, 137, 8, 6702);
			section2.className = "mv5";
			add_location(section2, file, 135, 4, 6631);
			a5.href = "/guide/plugins/declarative";
			a5.className = "blue dim link";
			add_location(a5, file, 143, 36, 7047);
			add_location(code22, file, 143, 205, 7216);
			p9.className = "lh-copy";
			add_location(p9, file, 143, 8, 7019);
			section3.className = "mv5";
			add_location(section3, file, 141, 4, 6948);
			p10.className = "lh-copy";
			add_location(p10, file, 150, 8, 7432);
			section4.className = "mv5";
			add_location(section4, file, 147, 4, 7355);
			div.className = "flex";
			add_location(div, file, 182, 8, 8232);
			section5.className = "mv5";
			add_location(section5, file, 181, 4, 8202);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, h30);
			append(h30, t5);
			append(section0, t6);
			append(section0, p0);
			append(p0, t7);
			append(p0, a0);
			append(a0, t8);
			append(p0, t9);
			append(section0, t10);
			append(section0, table0);
			append(table0, tr0);
			append(tr0, th0);
			append(th0, t11);
			append(tr0, t12);
			append(tr0, th1);
			append(th1, t13);
			append(tr0, t14);
			append(tr0, th2);
			append(th2, t15);
			append(tr0, t16);
			append(tr0, th3);
			append(th3, t17);
			append(table0, t18);
			append(table0, tr1);
			append(tr1, td0);
			append(td0, code0);
			append(code0, t19);
			append(tr1, t20);
			append(tr1, td1);
			append(td1, code1);
			append(code1, t21);
			append(tr1, t22);
			append(tr1, td2);
			append(td2, t23);
			append(tr1, t24);
			append(tr1, td3);
			append(td3, p1);
			append(p1, t25);
			append(td3, t26);
			append(td3, ul0);
			append(ul0, li0);
			append(li0, t27);
			append(ul0, t28);
			append(ul0, li1);
			append(li1, t29);
			append(ul0, t30);
			append(ul0, li2);
			append(li2, t31);
			append(table0, t32);
			append(table0, tr2);
			append(tr2, td4);
			append(td4, code2);
			append(code2, t33);
			append(tr2, t34);
			append(tr2, td5);
			append(td5, code3);
			append(code3, t35);
			append(tr2, t36);
			append(tr2, td6);
			append(td6, t37);
			append(tr2, t38);
			append(tr2, td7);
			append(td7, t39);
			append(table0, t40);
			append(table0, tr3);
			append(tr3, td8);
			append(td8, code4);
			append(code4, t41);
			append(td8, sup);
			append(sup, t42);
			append(tr3, t43);
			append(tr3, td9);
			append(td9, code5);
			append(code5, t44);
			append(td9, t45);
			append(td9, code6);
			append(code6, t46);
			append(tr3, t47);
			append(tr3, td10);
			append(td10, t48);
			append(tr3, t49);
			append(tr3, td11);
			append(td11, t50);
			append(section0, t51);
			mount_component(tip, section0, null);
			append(section0, t52);
			append(section0, h31);
			append(h31, t53);
			append(section0, t54);
			mount_component(samplecode0, section0, null);
			append(section0, t55);
			append(section0, h32);
			append(h32, t56);
			append(section0, t57);
			append(section0, p2);
			append(p2, t58);
			append(section0, t59);
			append(section0, ol);
			append(ol, li3);
			append(li3, p3);
			append(p3, t60);
			append(p3, code7);
			append(code7, t61);
			append(p3, t62);
			append(p3, code8);
			append(code8, t63);
			append(p3, t64);
			append(li3, t65);
			append(li3, p4);
			append(p4, t66);
			append(p4, code9);
			append(code9, t67);
			append(code9, t68);
			append(p4, t69);
			append(p4, code10);
			append(code10, t70);
			append(p4, t71);
			append(p4, code11);
			append(code11, t72);
			append(code11, t73);
			append(code11, t74);
			append(p4, t75);
			append(ol, t76);
			append(ol, li7);
			append(li7, p5);
			append(p5, t77);
			append(li7, t78);
			append(li7, p6);
			append(p6, t79);
			append(li7, t80);
			append(li7, ul1);
			append(ul1, li4);
			append(li4, a1);
			append(a1, t81);
			append(ul1, t82);
			append(ul1, li5);
			append(li5, a2);
			append(a2, t83);
			append(ul1, t84);
			append(ul1, li6);
			append(li6, a3);
			append(a3, t85);
			insert(target, t86, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t87);
			append(section1, p7);
			append(p7, t88);
			append(section1, t89);
			append(section1, table1);
			append(table1, tr4);
			append(tr4, th4);
			append(th4, t90);
			append(tr4, t91);
			append(tr4, th5);
			append(th5, t92);
			append(table1, t93);
			append(table1, tr5);
			append(tr5, td12);
			append(td12, t94);
			append(td12, a4);
			append(a4, t95);
			append(td12, t96);
			append(tr5, t97);
			append(tr5, td13);
			append(td13, code12);
			append(code12, t98);
			append(code12, t99);
			append(code12, t100);
			append(code12, t101);
			append(code12, t102);
			append(code12, t103);
			append(code12, t104);
			append(table1, t105);
			append(table1, tr6);
			append(tr6, td14);
			append(td14, t106);
			append(tr6, t107);
			append(tr6, td15);
			append(td15, ul2);
			append(ul2, li8);
			append(li8, t108);
			append(li8, code13);
			append(code13, t109);
			append(ul2, t110);
			append(ul2, li9);
			append(li9, t111);
			append(li9, code14);
			append(code14, t112);
			append(table1, t113);
			append(table1, tr7);
			append(tr7, td16);
			append(td16, t114);
			append(tr7, t115);
			append(tr7, td17);
			append(td17, ul3);
			append(ul3, li10);
			append(li10, t116);
			append(li10, code15);
			append(code15, t117);
			append(ul3, t118);
			append(ul3, li11);
			append(li11, t119);
			append(li11, code16);
			append(code16, t120);
			append(table1, t121);
			append(table1, tr8);
			append(tr8, td18);
			append(td18, t122);
			append(tr8, t123);
			append(tr8, td19);
			append(td19, ul4);
			append(ul4, li12);
			append(li12, t124);
			append(li12, code17);
			append(code17, t125);
			append(ul4, t126);
			append(ul4, li13);
			append(li13, t127);
			append(li13, code18);
			append(code18, t128);
			append(ul4, t129);
			append(ul4, li14);
			append(li14, t130);
			append(li14, code19);
			append(code19, t131);
			append(ul4, t132);
			append(ul4, li15);
			append(li15, t133);
			append(li15, code20);
			append(code20, t134);
			append(ul4, t135);
			append(ul4, li16);
			append(li16, t136);
			append(li16, code21);
			append(code21, t137);
			insert(target, t138, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t139);
			append(section2, p8);
			append(p8, t140);
			append(section2, t141);
			mount_component(demo0, section2, null);
			insert(target, t142, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t143);
			append(section3, p9);
			append(p9, t144);
			append(p9, a5);
			append(a5, t145);
			append(p9, t146);
			append(p9, code22);
			append(code22, t147);
			append(p9, t148);
			append(section3, t149);
			mount_component(demo1, section3, null);
			insert(target, t150, anchor);
			insert(target, section4, anchor);
			mount_component(heading4, section4, null);
			append(section4, t151);
			append(section4, p10);
			append(p10, t152);
			append(section4, t153);
			mount_component(samplecode1, section4, null);
			insert(target, t154, anchor);
			mount_component(examples, target, anchor);
			insert(target, t155, anchor);
			insert(target, section5, anchor);
			append(section5, div);
			mount_component(prevbutton, div, null);
			append(div, t156);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var tip_changes = {};
			if (changed.$$scope) tip_changes.$$scope = { changed, ctx };
			tip.$set(tip_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var heading4_changes = {};
			if (changed.$$scope) heading4_changes.$$scope = { changed, ctx };
			heading4.$set(heading4_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			tip.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			demo0.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			heading4.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			tip.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			demo0.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			heading4.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			tip.$destroy();

			samplecode0.$destroy();

			if (detaching) {
				detach(t86);
				detach(section1);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t138);
				detach(section2);
			}

			heading2.$destroy();

			demo0.$destroy();

			if (detaching) {
				detach(t142);
				detach(section3);
			}

			heading3.$destroy();

			demo1.$destroy();

			if (detaching) {
				detach(t150);
				detach(section4);
			}

			heading4.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t154);
			}

			examples.$destroy(detaching);

			if (detaching) {
				detach(t155);
				detach(section5);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • regexp validator";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

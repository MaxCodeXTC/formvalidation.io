import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as ChangelogLayout } from './chunk.4a563e90.js';

/* src/routes/updates/v1.1.0/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/updates/v1.1.0/index.svelte";

// (20:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("New features");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "New features");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (45:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Improvements");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Improvements");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (57:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Bug fixes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Bug fixes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (67:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Upgrading to v1.1.0");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Upgrading to v1.1.0");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <ChangelogLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, p0, t4, t5, p1, t6, t7, ul0, li0, t8, a0, t9, t10, t11, li1, t12, a1, t13, t14, t15, p2, t16, t17, section1, t18, h30, t19, t20, p3, t21, t22, p4, t23, a2, t24, t25, t26, p5, t27, a3, t28, t29, t30, t31, h31, t32, t33, p6, t34, a4, t35, t36, t37, p7, t38, a5, t39, t40, t41, t42, h32, t43, t44, p8, t45, a6, t46, t47, a7, t48, t49, t50, t51, h33, t52, t53, p9, t54, a8, t55, t56, code0, t57, t58, t59, p10, t60, t61, t62, section2, t63, ul1, li2, t64, code1, t65, t66, code2, t67, t68, a9, t69, t70, t71, li3, t72, t73, li4, t74, code3, t75, t76, a10, t77, t78, t79, li5, t80, code4, t81, t82, a11, t83, t84, t85, li6, t86, a12, t87, t88, t89, li7, t90, a13, t91, t92, t93, section3, t94, ul2, li8, t95, a14, t96, t97, t98, li9, t99, a15, t100, t101, code5, t102, t103, t104, li10, t105, a16, t106, t107, a17, t108, t109, t110, li11, t111, a18, t112, t113, a19, t114, t115, t116, section4, t117, ul3, li12, t118, a20, t119, t120, t121, li13, t122, t123, section5, a21, t124, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo0 = new Demo({
		props: {
		prefix: "/guide/plugins/sequence/basic",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/examples/using-flatpickr-for-start-and-end-dates",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var demo2 = new Demo({
		props: {
		prefix: "/guide/plugins/recaptcha/invisible",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var demo3 = new Demo({
		props: {
		prefix: "/guide/examples/pending-validation-for-a-given-number-of-seconds",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Version v1.1.0");
			t1 = space();
			h2 = element("h2");
			t2 = text("Released 8 July 2018");
			t3 = space();
			section0 = element("section");
			p0 = element("p");
			t4 = text("This verion brings support for Internet Explorer 11 (because the previous version is compiled to ES6 compatible code which doesn't work in Internet Explorer 11).");
			t5 = space();
			p1 = element("p");
			t6 = text("It also adds new plugins to support better user experience such as:");
			t7 = space();
			ul0 = element("ul");
			li0 = element("li");
			t8 = text("Stop performing remaining validators if there is a validator that the field does not pass, via the ");
			a0 = element("a");
			t9 = text("Sequence");
			t10 = text(" plugin");
			t11 = space();
			li1 = element("li");
			t12 = text("Be able to postpone the validation for a given number of seconds from the moment user stops fill in the field via the ");
			a1 = element("a");
			t13 = text("Trigger");
			t14 = text(" plugin");
			t15 = space();
			p2 = element("p");
			t16 = text("For more details, take a look at the next sections.");
			t17 = space();
			section1 = element("section");
			heading0.$$.fragment.c();
			t18 = space();
			h30 = element("h3");
			t19 = text("New Sequence plugin");
			t20 = space();
			p3 = element("p");
			t21 = text("By default, all validators for given field will perform their jobs after each key stroke. In the previous version, there is no way for us to control the order of their executions.");
			t22 = space();
			p4 = element("p");
			t23 = text("The ");
			a2 = element("a");
			t24 = text("Sequence");
			t25 = text(" plugin allows us to pending the execution of a validator until all previous validators are pass.");
			t26 = space();
			p5 = element("p");
			t27 = text("In the following example, we use the ");
			a3 = element("a");
			t28 = text("remote");
			t29 = text(" validator, which is an expensive validator because it will hit the server and takes time to perform and returns the result to our user. \n            By putting it at the end of field validators, we only send a request to server to check if the username is taken if it passes all other validators.");
			t30 = space();
			demo0.$$.fragment.c();
			t31 = space();
			h31 = element("h3");
			t32 = text("New StartEndDate plugin");
			t33 = space();
			p6 = element("p");
			t34 = text("The ");
			a4 = element("a");
			t35 = text("StartEndDate");
			t36 = text(" plugin is very handly if you want to validate start and end dates. We can use it with or without a date picker library.");
			t37 = space();
			p7 = element("p");
			t38 = text("The example below uses the ");
			a5 = element("a");
			t39 = text("flatpickr");
			t40 = text(", a lightweight and powerful datetime picker.");
			t41 = space();
			demo1.$$.fragment.c();
			t42 = space();
			h32 = element("h3");
			t43 = text("Support invisible reCAPTCHA");
			t44 = space();
			p8 = element("p");
			t45 = text("The ");
			a6 = element("a");
			t46 = text("Recaptcha");
			t47 = text(" plugin now supports ");
			a7 = element("a");
			t48 = text("invisible reCAPTCHA");
			t49 = text(":");
			t50 = space();
			demo2.$$.fragment.c();
			t51 = space();
			h33 = element("h3");
			t52 = text("Improve Trigger plugin");
			t53 = space();
			p9 = element("p");
			t54 = text("The ");
			a8 = element("a");
			t55 = text("Trigger");
			t56 = text(" plugin adds a new ");
			code0 = element("code");
			t57 = text("delay");
			t58 = text(" option that supports pending validation for a given number of seconds after user stops filling in the field.");
			t59 = space();
			p10 = element("p");
			t60 = text("In the following form, the username field validations will be postponed for 3 seconds after user stops filling in the field. Other field will be validated instantly right after each key stroke.");
			t61 = space();
			demo3.$$.fragment.c();
			t62 = space();
			section2 = element("section");
			heading1.$$.fragment.c();
			t63 = space();
			ul1 = element("ul");
			li2 = element("li");
			t64 = text("The ");
			code1 = element("code");
			t65 = text("min");
			t66 = text(", ");
			code2 = element("code");
			t67 = text("max");
			t68 = text(" options in the ");
			a9 = element("a");
			t69 = text("date");
			t70 = text(" validator accept a function returning a Date object or a string");
			t71 = space();
			li3 = element("li");
			t72 = text("For each field, all validators are performed in a sequential order");
			t73 = space();
			li4 = element("li");
			t74 = text("Remove the ");
			code3 = element("code");
			t75 = text("timeout");
			t76 = text(" option in the ");
			a10 = element("a");
			t77 = text("Recaptcha");
			t78 = text(" plugin. The captcha expiration will be handled by the plugin automatically");
			t79 = space();
			li5 = element("li");
			t80 = text("Remove unused ");
			code4 = element("code");
			t81 = text("stoken");
			t82 = text(" option in the ");
			a11 = element("a");
			t83 = text("Recaptcha");
			t84 = text(" plugin");
			t85 = space();
			li6 = element("li");
			t86 = text("Add new option in the ");
			a12 = element("a");
			t87 = text("Recaptcha");
			t88 = text(" plugin to support back-end verification");
			t89 = space();
			li7 = element("li");
			t90 = text("Hide the clear field icon on Internet Explorer. So you will not see two icons when using with the ");
			a13 = element("a");
			t91 = text("Icon");
			t92 = text(" plugin");
			t93 = space();
			section3 = element("section");
			heading2.$$.fragment.c();
			t94 = space();
			ul2 = element("ul");
			li8 = element("li");
			t95 = text("The library is now compatible with Internet Explorer 11. Behind the scene, we use ");
			a14 = element("a");
			t96 = text("Babel");
			t97 = text(" to compile the ES6 code into ES5 compatible code");
			t98 = space();
			li9 = element("li");
			t99 = text("Fix an issue that the ");
			a15 = element("a");
			t100 = text("updateFieldStatus()");
			t101 = text(" method ignores the ");
			code5 = element("code");
			t102 = text("validator");
			t103 = text(" parameter when setting the field status");
			t104 = space();
			li10 = element("li");
			t105 = text("Fix an issue that the valid/invalid CSS classes aren't removed from field element when executing ");
			a16 = element("a");
			t106 = text("resetForm");
			t107 = text(", ");
			a17 = element("a");
			t108 = text("resetField");
			t109 = text(" methods");
			t110 = space();
			li11 = element("li");
			t111 = text("Fix an issue that the field element doesn't reset value when executing ");
			a18 = element("a");
			t112 = text("resetForm");
			t113 = text(", ");
			a19 = element("a");
			t114 = text("resetField");
			t115 = text(" methods");
			t116 = space();
			section4 = element("section");
			heading3.$$.fragment.c();
			t117 = space();
			ul3 = element("ul");
			li12 = element("li");
			t118 = text("From v0.8.1 and older versions: Follow the ");
			a20 = element("a");
			t119 = text("Upgrading to v1.0.0");
			t120 = text(" guide");
			t121 = space();
			li13 = element("li");
			t122 = text("From v1.0.0: Just download the new version and replace the old files in v1.0.0 with new files in v1.1.0.");
			t123 = space();
			section5 = element("section");
			a21 = element("a");
			t124 = text("Download v1.1.0");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Version v1.1.0");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Released 8 July 2018");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t4 = claim_text(p0_nodes, "This verion brings support for Internet Explorer 11 (because the previous version is compiled to ES6 compatible code which doesn't work in Internet Explorer 11).");
			p0_nodes.forEach(detach);
			t5 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t6 = claim_text(p1_nodes, "It also adds new plugins to support better user experience such as:");
			p1_nodes.forEach(detach);
			t7 = claim_text(section0_nodes, "\n        ");

			ul0 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t8 = claim_text(li0_nodes, "Stop performing remaining validators if there is a validator that the field does not pass, via the ");

			a0 = claim_element(li0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t9 = claim_text(a0_nodes, "Sequence");
			a0_nodes.forEach(detach);
			t10 = claim_text(li0_nodes, " plugin");
			li0_nodes.forEach(detach);
			t11 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t12 = claim_text(li1_nodes, "Be able to postpone the validation for a given number of seconds from the moment user stops fill in the field via the ");

			a1 = claim_element(li1_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t13 = claim_text(a1_nodes, "Trigger");
			a1_nodes.forEach(detach);
			t14 = claim_text(li1_nodes, " plugin");
			li1_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			t15 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t16 = claim_text(p2_nodes, "For more details, take a look at the next sections.");
			p2_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t17 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading0.$$.fragment.l(section1_nodes);
			t18 = claim_text(section1_nodes, "\n\n        ");

			h30 = claim_element(section1_nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t19 = claim_text(h30_nodes, "New Sequence plugin");
			h30_nodes.forEach(detach);
			t20 = claim_text(section1_nodes, "\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t21 = claim_text(p3_nodes, "By default, all validators for given field will perform their jobs after each key stroke. In the previous version, there is no way for us to control the order of their executions.");
			p3_nodes.forEach(detach);
			t22 = claim_text(section1_nodes, "\n        ");

			p4 = claim_element(section1_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t23 = claim_text(p4_nodes, "The ");

			a2 = claim_element(p4_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t24 = claim_text(a2_nodes, "Sequence");
			a2_nodes.forEach(detach);
			t25 = claim_text(p4_nodes, " plugin allows us to pending the execution of a validator until all previous validators are pass.");
			p4_nodes.forEach(detach);
			t26 = claim_text(section1_nodes, "\n        ");

			p5 = claim_element(section1_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t27 = claim_text(p5_nodes, "In the following example, we use the ");

			a3 = claim_element(p5_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t28 = claim_text(a3_nodes, "remote");
			a3_nodes.forEach(detach);
			t29 = claim_text(p5_nodes, " validator, which is an expensive validator because it will hit the server and takes time to perform and returns the result to our user. \n            By putting it at the end of field validators, we only send a request to server to check if the username is taken if it passes all other validators.");
			p5_nodes.forEach(detach);
			t30 = claim_text(section1_nodes, "\n        ");
			demo0.$$.fragment.l(section1_nodes);
			t31 = claim_text(section1_nodes, "\n\n        ");

			h31 = claim_element(section1_nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t32 = claim_text(h31_nodes, "New StartEndDate plugin");
			h31_nodes.forEach(detach);
			t33 = claim_text(section1_nodes, "\n        ");

			p6 = claim_element(section1_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t34 = claim_text(p6_nodes, "The ");

			a4 = claim_element(p6_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t35 = claim_text(a4_nodes, "StartEndDate");
			a4_nodes.forEach(detach);
			t36 = claim_text(p6_nodes, " plugin is very handly if you want to validate start and end dates. We can use it with or without a date picker library.");
			p6_nodes.forEach(detach);
			t37 = claim_text(section1_nodes, "\n        ");

			p7 = claim_element(section1_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t38 = claim_text(p7_nodes, "The example below uses the ");

			a5 = claim_element(p7_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t39 = claim_text(a5_nodes, "flatpickr");
			a5_nodes.forEach(detach);
			t40 = claim_text(p7_nodes, ", a lightweight and powerful datetime picker.");
			p7_nodes.forEach(detach);
			t41 = claim_text(section1_nodes, "\n        ");
			demo1.$$.fragment.l(section1_nodes);
			t42 = claim_text(section1_nodes, "\n\n        ");

			h32 = claim_element(section1_nodes, "H3", {}, false);
			var h32_nodes = children(h32);

			t43 = claim_text(h32_nodes, "Support invisible reCAPTCHA");
			h32_nodes.forEach(detach);
			t44 = claim_text(section1_nodes, "\n        ");

			p8 = claim_element(section1_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t45 = claim_text(p8_nodes, "The ");

			a6 = claim_element(p8_nodes, "A", { href: true, class: true }, false);
			var a6_nodes = children(a6);

			t46 = claim_text(a6_nodes, "Recaptcha");
			a6_nodes.forEach(detach);
			t47 = claim_text(p8_nodes, " plugin now supports ");

			a7 = claim_element(p8_nodes, "A", { href: true, class: true }, false);
			var a7_nodes = children(a7);

			t48 = claim_text(a7_nodes, "invisible reCAPTCHA");
			a7_nodes.forEach(detach);
			t49 = claim_text(p8_nodes, ":");
			p8_nodes.forEach(detach);
			t50 = claim_text(section1_nodes, "\n        ");
			demo2.$$.fragment.l(section1_nodes);
			t51 = claim_text(section1_nodes, "\n\n        ");

			h33 = claim_element(section1_nodes, "H3", {}, false);
			var h33_nodes = children(h33);

			t52 = claim_text(h33_nodes, "Improve Trigger plugin");
			h33_nodes.forEach(detach);
			t53 = claim_text(section1_nodes, "\n        ");

			p9 = claim_element(section1_nodes, "P", { class: true }, false);
			var p9_nodes = children(p9);

			t54 = claim_text(p9_nodes, "The ");

			a8 = claim_element(p9_nodes, "A", { href: true, class: true }, false);
			var a8_nodes = children(a8);

			t55 = claim_text(a8_nodes, "Trigger");
			a8_nodes.forEach(detach);
			t56 = claim_text(p9_nodes, " plugin adds a new ");

			code0 = claim_element(p9_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t57 = claim_text(code0_nodes, "delay");
			code0_nodes.forEach(detach);
			t58 = claim_text(p9_nodes, " option that supports pending validation for a given number of seconds after user stops filling in the field.");
			p9_nodes.forEach(detach);
			t59 = claim_text(section1_nodes, "\n        ");

			p10 = claim_element(section1_nodes, "P", { class: true }, false);
			var p10_nodes = children(p10);

			t60 = claim_text(p10_nodes, "In the following form, the username field validations will be postponed for 3 seconds after user stops filling in the field. Other field will be validated instantly right after each key stroke.");
			p10_nodes.forEach(detach);
			t61 = claim_text(section1_nodes, "\n        ");
			demo3.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t62 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading1.$$.fragment.l(section2_nodes);
			t63 = claim_text(section2_nodes, "\n        ");

			ul1 = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li2 = claim_element(ul1_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t64 = claim_text(li2_nodes, "The ");

			code1 = claim_element(li2_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t65 = claim_text(code1_nodes, "min");
			code1_nodes.forEach(detach);
			t66 = claim_text(li2_nodes, ", ");

			code2 = claim_element(li2_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t67 = claim_text(code2_nodes, "max");
			code2_nodes.forEach(detach);
			t68 = claim_text(li2_nodes, " options in the ");

			a9 = claim_element(li2_nodes, "A", { href: true, class: true }, false);
			var a9_nodes = children(a9);

			t69 = claim_text(a9_nodes, "date");
			a9_nodes.forEach(detach);
			t70 = claim_text(li2_nodes, " validator accept a function returning a Date object or a string");
			li2_nodes.forEach(detach);
			t71 = claim_text(ul1_nodes, "\n            ");

			li3 = claim_element(ul1_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t72 = claim_text(li3_nodes, "For each field, all validators are performed in a sequential order");
			li3_nodes.forEach(detach);
			t73 = claim_text(ul1_nodes, "\n            ");

			li4 = claim_element(ul1_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			t74 = claim_text(li4_nodes, "Remove the ");

			code3 = claim_element(li4_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t75 = claim_text(code3_nodes, "timeout");
			code3_nodes.forEach(detach);
			t76 = claim_text(li4_nodes, " option in the ");

			a10 = claim_element(li4_nodes, "A", { href: true, class: true }, false);
			var a10_nodes = children(a10);

			t77 = claim_text(a10_nodes, "Recaptcha");
			a10_nodes.forEach(detach);
			t78 = claim_text(li4_nodes, " plugin. The captcha expiration will be handled by the plugin automatically");
			li4_nodes.forEach(detach);
			t79 = claim_text(ul1_nodes, "\n            ");

			li5 = claim_element(ul1_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			t80 = claim_text(li5_nodes, "Remove unused ");

			code4 = claim_element(li5_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t81 = claim_text(code4_nodes, "stoken");
			code4_nodes.forEach(detach);
			t82 = claim_text(li5_nodes, " option in the ");

			a11 = claim_element(li5_nodes, "A", { href: true, class: true }, false);
			var a11_nodes = children(a11);

			t83 = claim_text(a11_nodes, "Recaptcha");
			a11_nodes.forEach(detach);
			t84 = claim_text(li5_nodes, " plugin");
			li5_nodes.forEach(detach);
			t85 = claim_text(ul1_nodes, "\n            ");

			li6 = claim_element(ul1_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			t86 = claim_text(li6_nodes, "Add new option in the ");

			a12 = claim_element(li6_nodes, "A", { href: true, class: true }, false);
			var a12_nodes = children(a12);

			t87 = claim_text(a12_nodes, "Recaptcha");
			a12_nodes.forEach(detach);
			t88 = claim_text(li6_nodes, " plugin to support back-end verification");
			li6_nodes.forEach(detach);
			t89 = claim_text(ul1_nodes, "\n            ");

			li7 = claim_element(ul1_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			t90 = claim_text(li7_nodes, "Hide the clear field icon on Internet Explorer. So you will not see two icons when using with the ");

			a13 = claim_element(li7_nodes, "A", { href: true, class: true }, false);
			var a13_nodes = children(a13);

			t91 = claim_text(a13_nodes, "Icon");
			a13_nodes.forEach(detach);
			t92 = claim_text(li7_nodes, " plugin");
			li7_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			t93 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading2.$$.fragment.l(section3_nodes);
			t94 = claim_text(section3_nodes, "\n        ");

			ul2 = claim_element(section3_nodes, "UL", { class: true }, false);
			var ul2_nodes = children(ul2);

			li8 = claim_element(ul2_nodes, "LI", {}, false);
			var li8_nodes = children(li8);

			t95 = claim_text(li8_nodes, "The library is now compatible with Internet Explorer 11. Behind the scene, we use ");

			a14 = claim_element(li8_nodes, "A", { href: true, class: true }, false);
			var a14_nodes = children(a14);

			t96 = claim_text(a14_nodes, "Babel");
			a14_nodes.forEach(detach);
			t97 = claim_text(li8_nodes, " to compile the ES6 code into ES5 compatible code");
			li8_nodes.forEach(detach);
			t98 = claim_text(ul2_nodes, "\n            ");

			li9 = claim_element(ul2_nodes, "LI", {}, false);
			var li9_nodes = children(li9);

			t99 = claim_text(li9_nodes, "Fix an issue that the ");

			a15 = claim_element(li9_nodes, "A", { href: true, class: true }, false);
			var a15_nodes = children(a15);

			t100 = claim_text(a15_nodes, "updateFieldStatus()");
			a15_nodes.forEach(detach);
			t101 = claim_text(li9_nodes, " method ignores the ");

			code5 = claim_element(li9_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t102 = claim_text(code5_nodes, "validator");
			code5_nodes.forEach(detach);
			t103 = claim_text(li9_nodes, " parameter when setting the field status");
			li9_nodes.forEach(detach);
			t104 = claim_text(ul2_nodes, "\n            ");

			li10 = claim_element(ul2_nodes, "LI", {}, false);
			var li10_nodes = children(li10);

			t105 = claim_text(li10_nodes, "Fix an issue that the valid/invalid CSS classes aren't removed from field element when executing ");

			a16 = claim_element(li10_nodes, "A", { href: true }, false);
			var a16_nodes = children(a16);

			t106 = claim_text(a16_nodes, "resetForm");
			a16_nodes.forEach(detach);
			t107 = claim_text(li10_nodes, ", ");

			a17 = claim_element(li10_nodes, "A", { href: true, class: true }, false);
			var a17_nodes = children(a17);

			t108 = claim_text(a17_nodes, "resetField");
			a17_nodes.forEach(detach);
			t109 = claim_text(li10_nodes, " methods");
			li10_nodes.forEach(detach);
			t110 = claim_text(ul2_nodes, "\n            ");

			li11 = claim_element(ul2_nodes, "LI", {}, false);
			var li11_nodes = children(li11);

			t111 = claim_text(li11_nodes, "Fix an issue that the field element doesn't reset value when executing ");

			a18 = claim_element(li11_nodes, "A", { href: true }, false);
			var a18_nodes = children(a18);

			t112 = claim_text(a18_nodes, "resetForm");
			a18_nodes.forEach(detach);
			t113 = claim_text(li11_nodes, ", ");

			a19 = claim_element(li11_nodes, "A", { href: true, class: true }, false);
			var a19_nodes = children(a19);

			t114 = claim_text(a19_nodes, "resetField");
			a19_nodes.forEach(detach);
			t115 = claim_text(li11_nodes, " methods");
			li11_nodes.forEach(detach);
			ul2_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			t116 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			heading3.$$.fragment.l(section4_nodes);
			t117 = claim_text(section4_nodes, "\n        ");

			ul3 = claim_element(section4_nodes, "UL", { class: true }, false);
			var ul3_nodes = children(ul3);

			li12 = claim_element(ul3_nodes, "LI", {}, false);
			var li12_nodes = children(li12);

			t118 = claim_text(li12_nodes, "From v0.8.1 and older versions: Follow the ");

			a20 = claim_element(li12_nodes, "A", { href: true, class: true }, false);
			var a20_nodes = children(a20);

			t119 = claim_text(a20_nodes, "Upgrading to v1.0.0");
			a20_nodes.forEach(detach);
			t120 = claim_text(li12_nodes, " guide");
			li12_nodes.forEach(detach);
			t121 = claim_text(ul3_nodes, "\n            ");

			li13 = claim_element(ul3_nodes, "LI", {}, false);
			var li13_nodes = children(li13);

			t122 = claim_text(li13_nodes, "From v1.0.0: Just download the new version and replace the old files in v1.0.0 with new files in v1.1.0.");
			li13_nodes.forEach(detach);
			ul3_nodes.forEach(detach);
			section4_nodes.forEach(detach);
			t123 = claim_text(nodes, "\n\n    ");

			section5 = claim_element(nodes, "SECTION", { class: true }, false);
			var section5_nodes = children(section5);

			a21 = claim_element(section5_nodes, "A", { href: true, class: true, title: true }, false);
			var a21_nodes = children(a21);

			t124 = claim_text(a21_nodes, "Download v1.1.0");
			a21_nodes.forEach(detach);
			section5_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 92);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 144);
			p0.className = "lh-copy";
			add_location(p0, file, 9, 8, 227);
			p1.className = "lh-copy";
			add_location(p1, file, 10, 8, 420);
			a0.href = "/guide/plugins/sequence";
			a0.className = "blue dim link";
			add_location(a0, file, 12, 115, 667);
			add_location(li0, file, 12, 12, 564);
			a1.href = "/guide/plugins/trigger";
			a1.className = "blue dim link";
			add_location(a1, file, 13, 134, 882);
			add_location(li1, file, 13, 12, 760);
			ul0.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul0, file, 11, 8, 519);
			p2.className = "lh-copy";
			add_location(p2, file, 15, 8, 983);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 197);
			add_location(h30, file, 21, 8, 1149);
			p3.className = "lh-copy";
			add_location(p3, file, 22, 8, 1186);
			a2.href = "/guide/plugins/sequence";
			a2.className = "blue dim link";
			add_location(a2, file, 23, 31, 1420);
			p4.className = "lh-copy";
			add_location(p4, file, 23, 8, 1397);
			a3.href = "/guide/validators/remote";
			a3.className = "blue dim link";
			add_location(a3, file, 24, 64, 1654);
			p5.className = "lh-copy";
			add_location(p5, file, 24, 8, 1598);
			add_location(h31, file, 28, 8, 2114);
			a4.href = "/guide/plugins/start-end-date";
			a4.className = "blue dim link";
			add_location(a4, file, 29, 31, 2178);
			p6.className = "lh-copy";
			add_location(p6, file, 29, 8, 2155);
			a5.href = "https://flatpickr.js.org";
			a5.className = "blue dim link";
			add_location(a5, file, 30, 54, 2435);
			p7.className = "lh-copy";
			add_location(p7, file, 30, 8, 2389);
			add_location(h32, file, 33, 8, 2672);
			a6.href = "/guide/plugins/recaptcha";
			a6.className = "blue dim link";
			add_location(a6, file, 34, 31, 2740);
			a7.href = "https://developers.google.com/recaptcha/docs/invisible";
			a7.className = "blue dim link";
			add_location(a7, file, 34, 122, 2831);
			p8.className = "lh-copy";
			add_location(p8, file, 34, 8, 2717);
			add_location(h33, file, 37, 8, 3043);
			a8.href = "/guide/plugins/trigger";
			a8.className = "blue dim link";
			add_location(a8, file, 38, 31, 3106);
			add_location(code0, file, 38, 116, 3191);
			p9.className = "lh-copy";
			add_location(p9, file, 38, 8, 3083);
			p10.className = "lh-copy";
			add_location(p10, file, 39, 8, 3331);
			section1.className = "mv5";
			add_location(section1, file, 18, 4, 1078);
			add_location(code1, file, 46, 20, 3808);
			add_location(code2, file, 46, 38, 3826);
			a9.href = "/guide/validators/date";
			a9.className = "blue dim link";
			add_location(a9, file, 46, 70, 3858);
			add_location(li2, file, 46, 12, 3800);
			add_location(li3, file, 47, 12, 4003);
			add_location(code3, file, 48, 27, 4106);
			a10.href = "/guide/plugins/recaptcha";
			a10.className = "blue dim link";
			add_location(a10, file, 48, 62, 4141);
			add_location(li4, file, 48, 12, 4091);
			add_location(code4, file, 49, 30, 4322);
			a11.href = "/guide/plugins/recaptcha";
			a11.className = "blue dim link";
			add_location(a11, file, 49, 64, 4356);
			add_location(li5, file, 49, 12, 4304);
			a12.href = "/guide/plugins/recaptcha";
			a12.className = "blue dim link";
			add_location(a12, file, 50, 38, 4477);
			add_location(li6, file, 50, 12, 4451);
			a13.href = "/guide/plugins/icon";
			a13.className = "blue dim link";
			add_location(a13, file, 51, 114, 4707);
			add_location(li7, file, 51, 12, 4605);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 45, 8, 3755);
			section2.className = "mv5";
			add_location(section2, file, 43, 4, 3685);
			a14.href = "https://babeljs.io";
			a14.className = "blue dim link";
			add_location(a14, file, 58, 98, 5012);
			add_location(li8, file, 58, 12, 4926);
			a15.href = "/guide/api/update-field-status";
			a15.className = "blue dim link";
			add_location(a15, file, 59, 38, 5165);
			add_location(code5, file, 59, 144, 5271);
			add_location(li9, file, 59, 12, 5139);
			a16.href = "/guide/api/reset-form/";
			add_location(a16, file, 60, 113, 5452);
			a17.href = "/guide/api/reset-field";
			a17.className = "blue dim link";
			add_location(a17, file, 60, 161, 5500);
			add_location(li10, file, 60, 12, 5351);
			a18.href = "/guide/api/reset-form/";
			add_location(a18, file, 61, 87, 5670);
			a19.href = "/guide/api/reset-field";
			a19.className = "blue dim link";
			add_location(a19, file, 61, 135, 5718);
			add_location(li11, file, 61, 12, 5595);
			ul2.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul2, file, 57, 8, 4881);
			section3.className = "mv5";
			add_location(section3, file, 55, 4, 4814);
			a20.href = "/updates/v1.0.0/#upgrading-to-v1-0-0";
			a20.className = "blue dim link";
			add_location(a20, file, 68, 59, 6004);
			add_location(li12, file, 68, 12, 5957);
			add_location(li13, file, 69, 12, 6120);
			ul3.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul3, file, 67, 8, 5912);
			section4.className = "mv5";
			add_location(section4, file, 65, 4, 5835);
			a21.href = "/download";
			a21.className = "f6 f5-ns fw6 dib ba b--black-20 bg-blue white ph3 ph4-ns pv2 pv3-ns br2 grow no-underline";
			a21.title = "Download";
			add_location(a21, file, 74, 8, 6301);
			section5.className = "tc mv5";
			add_location(section5, file, 73, 4, 6268);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			append(section0, p0);
			append(p0, t4);
			append(section0, t5);
			append(section0, p1);
			append(p1, t6);
			append(section0, t7);
			append(section0, ul0);
			append(ul0, li0);
			append(li0, t8);
			append(li0, a0);
			append(a0, t9);
			append(li0, t10);
			append(ul0, t11);
			append(ul0, li1);
			append(li1, t12);
			append(li1, a1);
			append(a1, t13);
			append(li1, t14);
			append(section0, t15);
			append(section0, p2);
			append(p2, t16);
			insert(target, t17, anchor);
			insert(target, section1, anchor);
			mount_component(heading0, section1, null);
			append(section1, t18);
			append(section1, h30);
			append(h30, t19);
			append(section1, t20);
			append(section1, p3);
			append(p3, t21);
			append(section1, t22);
			append(section1, p4);
			append(p4, t23);
			append(p4, a2);
			append(a2, t24);
			append(p4, t25);
			append(section1, t26);
			append(section1, p5);
			append(p5, t27);
			append(p5, a3);
			append(a3, t28);
			append(p5, t29);
			append(section1, t30);
			mount_component(demo0, section1, null);
			append(section1, t31);
			append(section1, h31);
			append(h31, t32);
			append(section1, t33);
			append(section1, p6);
			append(p6, t34);
			append(p6, a4);
			append(a4, t35);
			append(p6, t36);
			append(section1, t37);
			append(section1, p7);
			append(p7, t38);
			append(p7, a5);
			append(a5, t39);
			append(p7, t40);
			append(section1, t41);
			mount_component(demo1, section1, null);
			append(section1, t42);
			append(section1, h32);
			append(h32, t43);
			append(section1, t44);
			append(section1, p8);
			append(p8, t45);
			append(p8, a6);
			append(a6, t46);
			append(p8, t47);
			append(p8, a7);
			append(a7, t48);
			append(p8, t49);
			append(section1, t50);
			mount_component(demo2, section1, null);
			append(section1, t51);
			append(section1, h33);
			append(h33, t52);
			append(section1, t53);
			append(section1, p9);
			append(p9, t54);
			append(p9, a8);
			append(a8, t55);
			append(p9, t56);
			append(p9, code0);
			append(code0, t57);
			append(p9, t58);
			append(section1, t59);
			append(section1, p10);
			append(p10, t60);
			append(section1, t61);
			mount_component(demo3, section1, null);
			insert(target, t62, anchor);
			insert(target, section2, anchor);
			mount_component(heading1, section2, null);
			append(section2, t63);
			append(section2, ul1);
			append(ul1, li2);
			append(li2, t64);
			append(li2, code1);
			append(code1, t65);
			append(li2, t66);
			append(li2, code2);
			append(code2, t67);
			append(li2, t68);
			append(li2, a9);
			append(a9, t69);
			append(li2, t70);
			append(ul1, t71);
			append(ul1, li3);
			append(li3, t72);
			append(ul1, t73);
			append(ul1, li4);
			append(li4, t74);
			append(li4, code3);
			append(code3, t75);
			append(li4, t76);
			append(li4, a10);
			append(a10, t77);
			append(li4, t78);
			append(ul1, t79);
			append(ul1, li5);
			append(li5, t80);
			append(li5, code4);
			append(code4, t81);
			append(li5, t82);
			append(li5, a11);
			append(a11, t83);
			append(li5, t84);
			append(ul1, t85);
			append(ul1, li6);
			append(li6, t86);
			append(li6, a12);
			append(a12, t87);
			append(li6, t88);
			append(ul1, t89);
			append(ul1, li7);
			append(li7, t90);
			append(li7, a13);
			append(a13, t91);
			append(li7, t92);
			insert(target, t93, anchor);
			insert(target, section3, anchor);
			mount_component(heading2, section3, null);
			append(section3, t94);
			append(section3, ul2);
			append(ul2, li8);
			append(li8, t95);
			append(li8, a14);
			append(a14, t96);
			append(li8, t97);
			append(ul2, t98);
			append(ul2, li9);
			append(li9, t99);
			append(li9, a15);
			append(a15, t100);
			append(li9, t101);
			append(li9, code5);
			append(code5, t102);
			append(li9, t103);
			append(ul2, t104);
			append(ul2, li10);
			append(li10, t105);
			append(li10, a16);
			append(a16, t106);
			append(li10, t107);
			append(li10, a17);
			append(a17, t108);
			append(li10, t109);
			append(ul2, t110);
			append(ul2, li11);
			append(li11, t111);
			append(li11, a18);
			append(a18, t112);
			append(li11, t113);
			append(li11, a19);
			append(a19, t114);
			append(li11, t115);
			insert(target, t116, anchor);
			insert(target, section4, anchor);
			mount_component(heading3, section4, null);
			append(section4, t117);
			append(section4, ul3);
			append(ul3, li12);
			append(li12, t118);
			append(li12, a20);
			append(a20, t119);
			append(li12, t120);
			append(ul3, t121);
			append(ul3, li13);
			append(li13, t122);
			insert(target, t123, anchor);
			insert(target, section5, anchor);
			append(section5, a21);
			append(a21, t124);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			demo0.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			demo2.$$.fragment.i(local);

			demo3.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			demo0.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			demo2.$$.fragment.o(local);
			demo3.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
				detach(t17);
				detach(section1);
			}

			heading0.$destroy();

			demo0.$destroy();

			demo1.$destroy();

			demo2.$destroy();

			demo3.$destroy();

			if (detaching) {
				detach(t62);
				detach(section2);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t93);
				detach(section3);
			}

			heading2.$destroy();

			if (detaching) {
				detach(t116);
				detach(section4);
			}

			heading3.$destroy();

			if (detaching) {
				detach(t123);
				detach(section5);
			}
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var changeloglayout = new ChangelogLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			changeloglayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			changeloglayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • v1.1.0";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(changeloglayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var changeloglayout_changes = {};
			if (changed.$$scope) changeloglayout_changes.$$scope = { changed, ctx };
			changeloglayout.$set(changeloglayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			changeloglayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			changeloglayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			changeloglayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

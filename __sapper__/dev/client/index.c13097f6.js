import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';

/* src/routes/guide/plugins/recaptcha/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/plugins/recaptcha/index.svelte";

// (9:4) <Tip>
function create_default_slot_9(ctx) {
	var t0, a, t1, t2;

	return {
		c: function create() {
			t0 = text("Use the ");
			a = element("a");
			t1 = text("Recaptcha3");
			t2 = text(" plugin if you are using Google reCAPTCHA v3");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "Use the ");

			a = claim_element(nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t1 = claim_text(a_nodes, "Recaptcha3");
			a_nodes.forEach(detach);
			t2 = claim_text(nodes, " plugin if you are using Google reCAPTCHA v3");
			this.h();
		},

		h: function hydrate() {
			a.href = "/guide/plugins/recaptcha3";
			a.className = "blue dim link";
			add_location(a, file, 8, 17, 239);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a, anchor);
			append(a, t1);
			insert(target, t2, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(a);
				detach(t2);
			}
		}
	};
}

// (12:8) <Heading>
function create_default_slot_8(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Usage");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Usage");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (61:8) <Heading>
function create_default_slot_7(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (134:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("reCAPTCHA widget");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "reCAPTCHA widget");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (140:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Invisible reCAPTCHA");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Invisible reCAPTCHA");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (146:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Back-end verification");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Back-end verification");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (213:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changelog");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changelog");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (232:12) <PrevButton target="/guide/plugins/pure">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Pure plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Pure plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (233:12) <NextButton target="/guide/plugins/recaptcha3">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Recaptcha3 plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Recaptcha3 plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, t4, section0, t5, p0, t6, a0, t7, t8, t9, p1, t10, t11, t12, p2, t13, code0, t14, t15, t16, section1, t17, table, tr0, th0, t18, t19, th1, t20, t21, th2, t22, t23, tr1, td0, code1, t24, t25, td1, t26, t27, td2, t28, t29, tr2, td3, code2, t30, t31, td4, t32, t33, td5, p3, t34, t35, ul0, li0, code3, t36, t37, t38, li1, code4, t39, t40, li2, code5, t41, t42, p4, t43, code6, t44, t45, a1, t46, t47, tr3, td6, code7, t48, t49, sup0, t50, t51, td7, t52, t53, td8, t54, t55, tr4, td9, code8, t56, t57, td10, t58, t59, td11, t60, a2, t61, t62, t63, tr5, td12, code9, t64, t65, sup1, t66, t67, td13, t68, t69, td14, t70, t71, tr6, td15, code10, t72, t73, sup2, t74, t75, td16, t76, t77, td17, t78, t79, tr7, td18, code11, t80, t81, td19, t82, t83, td20, p5, t84, t85, ul1, li3, code12, t86, t87, t88, li4, code13, t89, t90, li5, code14, t91, t92, p6, t93, a3, t94, t95, a4, t96, t97, t98, tr8, td21, code15, t99, t100, td22, t101, t102, td23, p7, t103, t104, ul2, li6, code16, t105, t106, t107, li7, code17, t108, t109, section2, t110, p8, t111, a5, t112, t113, t114, t115, section3, t116, p9, t117, a6, t118, t119, code18, t120, t121, t122, t123, section4, t124, p10, t125, t126, p11, t127, code19, t128, t129, t130, t131, p12, t132, code20, t133, t134, a7, t135, t136, t137, p13, t138, t139, t140, p14, t141, t142, t143, section5, t144, ul4, li8, t145, t146, li9, t147, t148, li14, t149, ul3, li10, t150, code21, t151, t152, t153, li11, t154, code22, t155, t156, t157, li12, t158, code23, t159, t160, t161, li13, t162, a8, t163, t164, li15, t165, t166, section6, div, t167, current;

	var tip = new Tip({
		props: {
		$$slots: { default: [create_default_slot_9] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_8] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="demoForm" method="POST">
        ...

        <!-- Prepare a container to show the captcha -->
        <div id="captchaContainer"></div>
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>    
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/plugins/Recaptcha.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                ...,
                recaptcha: new FormValidation.plugins.Recaptcha({
                    element: 'captchaContainer',
                    language: ...,
                    message: ...,
                    siteKey: ...,
                    theme: ...,
                }),
            },
        }
    );
});
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo0 = new Demo({
		props: {
		prefix: "/guide/plugins/recaptcha/widget",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/plugins/recaptcha/invisible",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading4 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
FormValidation.formValidation(
    document.getElementById('demoForm'),
    {
        fields: {
            ...
        },
        plugins: {
            ...
            recaptcha: new FormValidation.plugins.Recaptcha({
                backendVerificationUrl: '/path/to/your/back-end/',
            }),
        },
    }
);
` },
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "javascript", code: `
{
    "success": "true"
}
// or
{
    "success": "false"
}
` },
		$$inline: true
	});

	var samplecode3 = new SampleCode({
		props: { lang: "php", code: `
&lt;?php
// Replace it with your reCAPTCHA secret key
$secretKey = '...';

// See https://developers.google.com/recaptcha/docs/verify#api-request
$fields = array(
    'secret'   => $secretKey,
    'response' => $_POST['g-recaptcha-response']
);

$postVars = '';
$sep = '';
foreach ($fields as $key => $value) {
    $postVars .= $sep . urlencode($key) . '=' . urlencode($value);
    $sep = '&';
}

$ch = curl_init();

curl_setopt($ch,CURLOPT_URL, 'https://www.google.com/recaptcha/api/siteverify');
curl_setopt($ch,CURLOPT_POST, count($fields));
curl_setopt($ch,CURLOPT_POSTFIELDS, $postVars);
curl_setopt($ch,CURLOPT_RETURNTRANSFER, true);

$result = curl_exec($ch);

curl_close($ch);

header('Content-Type: application/json');
echo $result;
` },
		$$inline: true
	});

	var heading5 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/plugins/pure",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/plugins/recaptcha3",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Recaptcha plugin");
			t1 = space();
			h2 = element("h2");
			t2 = text("Shows and validates a Google reCAPTCHA v2");
			t3 = space();
			tip.$$.fragment.c();
			t4 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t5 = space();
			p0 = element("p");
			t6 = text("To use it, you need to register a site and secret keys at ");
			a0 = element("a");
			t7 = text("https://www.google.com/recaptcha/admin");
			t8 = text(".");
			t9 = space();
			p1 = element("p");
			t10 = text("The following piece of code is the starting point to use the Recaptcha plugin:");
			t11 = space();
			samplecode0.$$.fragment.c();
			t12 = space();
			p2 = element("p");
			t13 = text("The sample code above assumes that the FormValidation files are placed inside the ");
			code0 = element("code");
			t14 = text("vendors");
			t15 = text(" directory. You might need to change the path depending on where you place them on the server.");
			t16 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t17 = space();
			table = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t18 = text("Option");
			t19 = space();
			th1 = element("th");
			t20 = text("Type");
			t21 = space();
			th2 = element("th");
			t22 = text("Description");
			t23 = space();
			tr1 = element("tr");
			td0 = element("td");
			code1 = element("code");
			t24 = text("backendVerificationUrl");
			t25 = space();
			td1 = element("td");
			t26 = text("String");
			t27 = space();
			td2 = element("td");
			t28 = text("The URL of your back-end that verifies the captcha via reCAPTCHA API");
			t29 = space();
			tr2 = element("tr");
			td3 = element("td");
			code2 = element("code");
			t30 = text("badge");
			t31 = space();
			td4 = element("td");
			t32 = text("String");
			t33 = space();
			td5 = element("td");
			p3 = element("p");
			t34 = text("The position of invisible reCAPTCHA. It can be one of");
			t35 = space();
			ul0 = element("ul");
			li0 = element("li");
			code3 = element("code");
			t36 = text("bottomright");
			t37 = text(" (the default value)");
			t38 = space();
			li1 = element("li");
			code4 = element("code");
			t39 = text("bottomleft");
			t40 = space();
			li2 = element("li");
			code5 = element("code");
			t41 = text("inline");
			t42 = space();
			p4 = element("p");
			t43 = text("Use this option along with ");
			code6 = element("code");
			t44 = text("size: 'invisible'");
			t45 = text(" for ");
			a1 = element("a");
			t46 = text("invisible reCAPTCHA");
			t47 = space();
			tr3 = element("tr");
			td6 = element("td");
			code7 = element("code");
			t48 = text("element");
			t49 = space();
			sup0 = element("sup");
			t50 = text("*");
			t51 = space();
			td7 = element("td");
			t52 = text("String");
			t53 = space();
			td8 = element("td");
			t54 = text("The ID of element showing the captcha");
			t55 = space();
			tr4 = element("tr");
			td9 = element("td");
			code8 = element("code");
			t56 = text("language");
			t57 = space();
			td10 = element("td");
			t58 = text("String");
			t59 = space();
			td11 = element("td");
			t60 = text("The ");
			a2 = element("a");
			t61 = text("language code");
			t62 = text(" defined by reCAPTCHA");
			t63 = space();
			tr5 = element("tr");
			td12 = element("td");
			code9 = element("code");
			t64 = text("message");
			t65 = space();
			sup1 = element("sup");
			t66 = text("*");
			t67 = space();
			td13 = element("td");
			t68 = text("String");
			t69 = space();
			td14 = element("td");
			t70 = text("The invalid message that will be shown in case the captcha is not valid");
			t71 = space();
			tr6 = element("tr");
			td15 = element("td");
			code10 = element("code");
			t72 = text("siteKey");
			t73 = space();
			sup2 = element("sup");
			t74 = text("*");
			t75 = space();
			td16 = element("td");
			t76 = text("String");
			t77 = space();
			td17 = element("td");
			t78 = text("The site key provided by Google");
			t79 = space();
			tr7 = element("tr");
			td18 = element("td");
			code11 = element("code");
			t80 = text("size");
			t81 = space();
			td19 = element("td");
			t82 = text("String");
			t83 = space();
			td20 = element("td");
			p5 = element("p");
			t84 = text("The size of reCAPTCHA widget. It can be one of");
			t85 = space();
			ul1 = element("ul");
			li3 = element("li");
			code12 = element("code");
			t86 = text("normal");
			t87 = text(" (the default value)");
			t88 = space();
			li4 = element("li");
			code13 = element("code");
			t89 = text("compact");
			t90 = space();
			li5 = element("li");
			code14 = element("code");
			t91 = text("invisible");
			t92 = space();
			p6 = element("p");
			t93 = text("The first two options are available for the ");
			a3 = element("a");
			t94 = text("reCAPTCHA widget");
			t95 = text(". The last one has to be used if you want to use ");
			a4 = element("a");
			t96 = text("invisible reCAPTCHA");
			t97 = text(".");
			t98 = space();
			tr8 = element("tr");
			td21 = element("td");
			code15 = element("code");
			t99 = text("theme");
			t100 = space();
			td22 = element("td");
			t101 = text("String");
			t102 = space();
			td23 = element("td");
			p7 = element("p");
			t103 = text("The theme name provided by Google. It can be one of");
			t104 = space();
			ul2 = element("ul");
			li6 = element("li");
			code16 = element("code");
			t105 = text("light");
			t106 = text(" (the default value)");
			t107 = space();
			li7 = element("li");
			code17 = element("code");
			t108 = text("dark");
			t109 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t110 = space();
			p8 = element("p");
			t111 = text("The following form shows a ");
			a5 = element("a");
			t112 = text("reCAPTCHA widget");
			t113 = text(".");
			t114 = space();
			demo0.$$.fragment.c();
			t115 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t116 = space();
			p9 = element("p");
			t117 = text("The following form shows an ");
			a6 = element("a");
			t118 = text("invisible reCAPTCHA");
			t119 = text(". In order to use it properly, remember to set the ");
			code18 = element("code");
			t120 = text("size: 'invisible'");
			t121 = text(" option.");
			t122 = space();
			demo1.$$.fragment.c();
			t123 = space();
			section4 = element("section");
			heading4.$$.fragment.c();
			t124 = space();
			p10 = element("p");
			t125 = text("If you want to take more steps of checking if the visitor on your site isn't a robot, then let's verify the captcha on the back-end side.");
			t126 = space();
			p11 = element("p");
			t127 = text("You need to point the ");
			code19 = element("code");
			t128 = text("backendVerificationUrl");
			t129 = text(" option to your back-end URL:");
			t130 = space();
			samplecode1.$$.fragment.c();
			t131 = space();
			p12 = element("p");
			t132 = text("When that option is enabled, the plugin will send an Ajax request with the value for ");
			code20 = element("code");
			t133 = text("g-recaptcha-response");
			t134 = text(" parameter. With the value of captcha and the reCAPTCHA secret key, you can connect to\n            ");
			a7 = element("a");
			t135 = text("reCAPTCGA verification URL");
			t136 = text(" to verify the captcha.");
			t137 = space();
			p13 = element("p");
			t138 = text("In order to inform user in case the captcha is valid or invalid, the back-end has to return a JSON encoded version of");
			t139 = space();
			samplecode2.$$.fragment.c();
			t140 = space();
			p14 = element("p");
			t141 = text("The following code demonstrates how to do it in PHP, but you can do it with your favorite language.");
			t142 = space();
			samplecode3.$$.fragment.c();
			t143 = space();
			section5 = element("section");
			heading5.$$.fragment.c();
			t144 = space();
			ul4 = element("ul");
			li8 = element("li");
			t145 = text("v1.5.0: Hide the icon for the invisible reCAPTCHA.");
			t146 = space();
			li9 = element("li");
			t147 = text("v1.4.0: In the previous version, the Recaptcha plugin doesn't hide the error message and error icon when user click the captcha checkbox.\n                The error icon disappears when the captcha is expired. This version fixes that.");
			t148 = space();
			li14 = element("li");
			t149 = text("v1.1.0:\n                ");
			ul3 = element("ul");
			li10 = element("li");
			t150 = text("Removed the ");
			code21 = element("code");
			t151 = text("timeout");
			t152 = text(" option. The captcha expiration will be handled by the plugin automatically");
			t153 = space();
			li11 = element("li");
			t154 = text("Removed unused ");
			code22 = element("code");
			t155 = text("stoken");
			t156 = text(" option");
			t157 = space();
			li12 = element("li");
			t158 = text("Added ");
			code23 = element("code");
			t159 = text("backendVerificationUrl");
			t160 = text(" option to support back-end verification");
			t161 = space();
			li13 = element("li");
			t162 = text("Supported ");
			a8 = element("a");
			t163 = text("invisible reCAPTCHA");
			t164 = space();
			li15 = element("li");
			t165 = text("v1.0.0: First release");
			t166 = space();
			section6 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t167 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Recaptcha plugin");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Shows and validates a Google reCAPTCHA v2");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");
			tip.$$.fragment.l(nodes);
			t4 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t5 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t6 = claim_text(p0_nodes, "To use it, you need to register a site and secret keys at ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t7 = claim_text(a0_nodes, "https://www.google.com/recaptcha/admin");
			a0_nodes.forEach(detach);
			t8 = claim_text(p0_nodes, ".");
			p0_nodes.forEach(detach);
			t9 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t10 = claim_text(p1_nodes, "The following piece of code is the starting point to use the Recaptcha plugin:");
			p1_nodes.forEach(detach);
			t11 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t12 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t13 = claim_text(p2_nodes, "The sample code above assumes that the FormValidation files are placed inside the ");

			code0 = claim_element(p2_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t14 = claim_text(code0_nodes, "vendors");
			code0_nodes.forEach(detach);
			t15 = claim_text(p2_nodes, " directory. You might need to change the path depending on where you place them on the server.");
			p2_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t16 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t17 = claim_text(section1_nodes, "\n        ");

			table = claim_element(section1_nodes, "TABLE", { class: true }, false);
			var table_nodes = children(table);

			tr0 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t18 = claim_text(th0_nodes, "Option");
			th0_nodes.forEach(detach);
			t19 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t20 = claim_text(th1_nodes, "Type");
			th1_nodes.forEach(detach);
			t21 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t22 = claim_text(th2_nodes, "Description");
			th2_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t23 = claim_text(table_nodes, "\n            ");

			tr1 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code1 = claim_element(td0_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t24 = claim_text(code1_nodes, "backendVerificationUrl");
			code1_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t25 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			t26 = claim_text(td1_nodes, "String");
			td1_nodes.forEach(detach);
			t27 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t28 = claim_text(td2_nodes, "The URL of your back-end that verifies the captcha via reCAPTCHA API");
			td2_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t29 = claim_text(table_nodes, "\n            ");

			tr2 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td3 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			code2 = claim_element(td3_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t30 = claim_text(code2_nodes, "badge");
			code2_nodes.forEach(detach);
			td3_nodes.forEach(detach);
			t31 = claim_text(tr2_nodes, "\n                ");

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			t32 = claim_text(td4_nodes, "String");
			td4_nodes.forEach(detach);
			t33 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			p3 = claim_element(td5_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t34 = claim_text(p3_nodes, "The position of invisible reCAPTCHA. It can be one of");
			p3_nodes.forEach(detach);
			t35 = claim_text(td5_nodes, "\n                    ");

			ul0 = claim_element(td5_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			code3 = claim_element(li0_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t36 = claim_text(code3_nodes, "bottomright");
			code3_nodes.forEach(detach);
			t37 = claim_text(li0_nodes, " (the default value)");
			li0_nodes.forEach(detach);
			t38 = claim_text(ul0_nodes, "\n                        ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			code4 = claim_element(li1_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t39 = claim_text(code4_nodes, "bottomleft");
			code4_nodes.forEach(detach);
			li1_nodes.forEach(detach);
			t40 = claim_text(ul0_nodes, "\n                        ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			code5 = claim_element(li2_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t41 = claim_text(code5_nodes, "inline");
			code5_nodes.forEach(detach);
			li2_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			t42 = claim_text(td5_nodes, "\n                    ");

			p4 = claim_element(td5_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t43 = claim_text(p4_nodes, "Use this option along with ");

			code6 = claim_element(p4_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t44 = claim_text(code6_nodes, "size: 'invisible'");
			code6_nodes.forEach(detach);
			t45 = claim_text(p4_nodes, " for ");

			a1 = claim_element(p4_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t46 = claim_text(a1_nodes, "invisible reCAPTCHA");
			a1_nodes.forEach(detach);
			p4_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t47 = claim_text(table_nodes, "\n            ");

			tr3 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td6 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			code7 = claim_element(td6_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t48 = claim_text(code7_nodes, "element");
			code7_nodes.forEach(detach);
			t49 = claim_text(td6_nodes, " ");

			sup0 = claim_element(td6_nodes, "SUP", {}, false);
			var sup0_nodes = children(sup0);

			t50 = claim_text(sup0_nodes, "*");
			sup0_nodes.forEach(detach);
			td6_nodes.forEach(detach);
			t51 = claim_text(tr3_nodes, "\n                ");

			td7 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			t52 = claim_text(td7_nodes, "String");
			td7_nodes.forEach(detach);
			t53 = claim_text(tr3_nodes, "\n                ");

			td8 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			t54 = claim_text(td8_nodes, "The ID of element showing the captcha");
			td8_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			t55 = claim_text(table_nodes, "\n            ");

			tr4 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			td9 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			code8 = claim_element(td9_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t56 = claim_text(code8_nodes, "language");
			code8_nodes.forEach(detach);
			td9_nodes.forEach(detach);
			t57 = claim_text(tr4_nodes, "\n                ");

			td10 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td10_nodes = children(td10);

			t58 = claim_text(td10_nodes, "String");
			td10_nodes.forEach(detach);
			t59 = claim_text(tr4_nodes, "\n                ");

			td11 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td11_nodes = children(td11);

			t60 = claim_text(td11_nodes, "The ");

			a2 = claim_element(td11_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t61 = claim_text(a2_nodes, "language code");
			a2_nodes.forEach(detach);
			t62 = claim_text(td11_nodes, " defined by reCAPTCHA");
			td11_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			t63 = claim_text(table_nodes, "\n            ");

			tr5 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr5_nodes = children(tr5);

			td12 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td12_nodes = children(td12);

			code9 = claim_element(td12_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t64 = claim_text(code9_nodes, "message");
			code9_nodes.forEach(detach);
			t65 = claim_text(td12_nodes, " ");

			sup1 = claim_element(td12_nodes, "SUP", {}, false);
			var sup1_nodes = children(sup1);

			t66 = claim_text(sup1_nodes, "*");
			sup1_nodes.forEach(detach);
			td12_nodes.forEach(detach);
			t67 = claim_text(tr5_nodes, "\n                ");

			td13 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td13_nodes = children(td13);

			t68 = claim_text(td13_nodes, "String");
			td13_nodes.forEach(detach);
			t69 = claim_text(tr5_nodes, "\n                ");

			td14 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td14_nodes = children(td14);

			t70 = claim_text(td14_nodes, "The invalid message that will be shown in case the captcha is not valid");
			td14_nodes.forEach(detach);
			tr5_nodes.forEach(detach);
			t71 = claim_text(table_nodes, "\n            ");

			tr6 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr6_nodes = children(tr6);

			td15 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td15_nodes = children(td15);

			code10 = claim_element(td15_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t72 = claim_text(code10_nodes, "siteKey");
			code10_nodes.forEach(detach);
			t73 = claim_text(td15_nodes, " ");

			sup2 = claim_element(td15_nodes, "SUP", {}, false);
			var sup2_nodes = children(sup2);

			t74 = claim_text(sup2_nodes, "*");
			sup2_nodes.forEach(detach);
			td15_nodes.forEach(detach);
			t75 = claim_text(tr6_nodes, "\n                ");

			td16 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td16_nodes = children(td16);

			t76 = claim_text(td16_nodes, "String");
			td16_nodes.forEach(detach);
			t77 = claim_text(tr6_nodes, "\n                ");

			td17 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td17_nodes = children(td17);

			t78 = claim_text(td17_nodes, "The site key provided by Google");
			td17_nodes.forEach(detach);
			tr6_nodes.forEach(detach);
			t79 = claim_text(table_nodes, "\n            ");

			tr7 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr7_nodes = children(tr7);

			td18 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td18_nodes = children(td18);

			code11 = claim_element(td18_nodes, "CODE", {}, false);
			var code11_nodes = children(code11);

			t80 = claim_text(code11_nodes, "size");
			code11_nodes.forEach(detach);
			td18_nodes.forEach(detach);
			t81 = claim_text(tr7_nodes, "\n                ");

			td19 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td19_nodes = children(td19);

			t82 = claim_text(td19_nodes, "String");
			td19_nodes.forEach(detach);
			t83 = claim_text(tr7_nodes, "\n                ");

			td20 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td20_nodes = children(td20);

			p5 = claim_element(td20_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t84 = claim_text(p5_nodes, "The size of reCAPTCHA widget. It can be one of");
			p5_nodes.forEach(detach);
			t85 = claim_text(td20_nodes, "\n                    ");

			ul1 = claim_element(td20_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li3 = claim_element(ul1_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			code12 = claim_element(li3_nodes, "CODE", {}, false);
			var code12_nodes = children(code12);

			t86 = claim_text(code12_nodes, "normal");
			code12_nodes.forEach(detach);
			t87 = claim_text(li3_nodes, " (the default value)");
			li3_nodes.forEach(detach);
			t88 = claim_text(ul1_nodes, "\n                        ");

			li4 = claim_element(ul1_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			code13 = claim_element(li4_nodes, "CODE", {}, false);
			var code13_nodes = children(code13);

			t89 = claim_text(code13_nodes, "compact");
			code13_nodes.forEach(detach);
			li4_nodes.forEach(detach);
			t90 = claim_text(ul1_nodes, "\n                        ");

			li5 = claim_element(ul1_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			code14 = claim_element(li5_nodes, "CODE", {}, false);
			var code14_nodes = children(code14);

			t91 = claim_text(code14_nodes, "invisible");
			code14_nodes.forEach(detach);
			li5_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			t92 = claim_text(td20_nodes, "\n                    ");

			p6 = claim_element(td20_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t93 = claim_text(p6_nodes, "The first two options are available for the ");

			a3 = claim_element(p6_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t94 = claim_text(a3_nodes, "reCAPTCHA widget");
			a3_nodes.forEach(detach);
			t95 = claim_text(p6_nodes, ". The last one has to be used if you want to use ");

			a4 = claim_element(p6_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t96 = claim_text(a4_nodes, "invisible reCAPTCHA");
			a4_nodes.forEach(detach);
			t97 = claim_text(p6_nodes, ".");
			p6_nodes.forEach(detach);
			td20_nodes.forEach(detach);
			tr7_nodes.forEach(detach);
			t98 = claim_text(table_nodes, "\n            ");

			tr8 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr8_nodes = children(tr8);

			td21 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td21_nodes = children(td21);

			code15 = claim_element(td21_nodes, "CODE", {}, false);
			var code15_nodes = children(code15);

			t99 = claim_text(code15_nodes, "theme");
			code15_nodes.forEach(detach);
			td21_nodes.forEach(detach);
			t100 = claim_text(tr8_nodes, "\n                ");

			td22 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td22_nodes = children(td22);

			t101 = claim_text(td22_nodes, "String");
			td22_nodes.forEach(detach);
			t102 = claim_text(tr8_nodes, "\n                ");

			td23 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td23_nodes = children(td23);

			p7 = claim_element(td23_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t103 = claim_text(p7_nodes, "The theme name provided by Google. It can be one of");
			p7_nodes.forEach(detach);
			t104 = claim_text(td23_nodes, "\n                    ");

			ul2 = claim_element(td23_nodes, "UL", { class: true }, false);
			var ul2_nodes = children(ul2);

			li6 = claim_element(ul2_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			code16 = claim_element(li6_nodes, "CODE", {}, false);
			var code16_nodes = children(code16);

			t105 = claim_text(code16_nodes, "light");
			code16_nodes.forEach(detach);
			t106 = claim_text(li6_nodes, " (the default value)");
			li6_nodes.forEach(detach);
			t107 = claim_text(ul2_nodes, "\n                        ");

			li7 = claim_element(ul2_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			code17 = claim_element(li7_nodes, "CODE", {}, false);
			var code17_nodes = children(code17);

			t108 = claim_text(code17_nodes, "dark");
			code17_nodes.forEach(detach);
			li7_nodes.forEach(detach);
			ul2_nodes.forEach(detach);
			td23_nodes.forEach(detach);
			tr8_nodes.forEach(detach);
			table_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t109 = claim_text(nodes, "\n    \n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t110 = claim_text(section2_nodes, "\n        ");

			p8 = claim_element(section2_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t111 = claim_text(p8_nodes, "The following form shows a ");

			a5 = claim_element(p8_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t112 = claim_text(a5_nodes, "reCAPTCHA widget");
			a5_nodes.forEach(detach);
			t113 = claim_text(p8_nodes, ".");
			p8_nodes.forEach(detach);
			t114 = claim_text(section2_nodes, "\n        ");
			demo0.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t115 = claim_text(nodes, "\n    \n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t116 = claim_text(section3_nodes, "\n        ");

			p9 = claim_element(section3_nodes, "P", { class: true }, false);
			var p9_nodes = children(p9);

			t117 = claim_text(p9_nodes, "The following form shows an ");

			a6 = claim_element(p9_nodes, "A", { href: true, class: true }, false);
			var a6_nodes = children(a6);

			t118 = claim_text(a6_nodes, "invisible reCAPTCHA");
			a6_nodes.forEach(detach);
			t119 = claim_text(p9_nodes, ". In order to use it properly, remember to set the ");

			code18 = claim_element(p9_nodes, "CODE", {}, false);
			var code18_nodes = children(code18);

			t120 = claim_text(code18_nodes, "size: 'invisible'");
			code18_nodes.forEach(detach);
			t121 = claim_text(p9_nodes, " option.");
			p9_nodes.forEach(detach);
			t122 = claim_text(section3_nodes, "\n        ");
			demo1.$$.fragment.l(section3_nodes);
			section3_nodes.forEach(detach);
			t123 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			heading4.$$.fragment.l(section4_nodes);
			t124 = claim_text(section4_nodes, "\n        ");

			p10 = claim_element(section4_nodes, "P", { class: true }, false);
			var p10_nodes = children(p10);

			t125 = claim_text(p10_nodes, "If you want to take more steps of checking if the visitor on your site isn't a robot, then let's verify the captcha on the back-end side.");
			p10_nodes.forEach(detach);
			t126 = claim_text(section4_nodes, "\n        ");

			p11 = claim_element(section4_nodes, "P", { class: true }, false);
			var p11_nodes = children(p11);

			t127 = claim_text(p11_nodes, "You need to point the ");

			code19 = claim_element(p11_nodes, "CODE", {}, false);
			var code19_nodes = children(code19);

			t128 = claim_text(code19_nodes, "backendVerificationUrl");
			code19_nodes.forEach(detach);
			t129 = claim_text(p11_nodes, " option to your back-end URL:");
			p11_nodes.forEach(detach);
			t130 = claim_text(section4_nodes, "\n");
			samplecode1.$$.fragment.l(section4_nodes);
			t131 = claim_text(section4_nodes, "\n        ");

			p12 = claim_element(section4_nodes, "P", { class: true }, false);
			var p12_nodes = children(p12);

			t132 = claim_text(p12_nodes, "When that option is enabled, the plugin will send an Ajax request with the value for ");

			code20 = claim_element(p12_nodes, "CODE", {}, false);
			var code20_nodes = children(code20);

			t133 = claim_text(code20_nodes, "g-recaptcha-response");
			code20_nodes.forEach(detach);
			t134 = claim_text(p12_nodes, " parameter. With the value of captcha and the reCAPTCHA secret key, you can connect to\n            ");

			a7 = claim_element(p12_nodes, "A", { href: true, class: true }, false);
			var a7_nodes = children(a7);

			t135 = claim_text(a7_nodes, "reCAPTCGA verification URL");
			a7_nodes.forEach(detach);
			t136 = claim_text(p12_nodes, " to verify the captcha.");
			p12_nodes.forEach(detach);
			t137 = claim_text(section4_nodes, "\n        ");

			p13 = claim_element(section4_nodes, "P", { class: true }, false);
			var p13_nodes = children(p13);

			t138 = claim_text(p13_nodes, "In order to inform user in case the captcha is valid or invalid, the back-end has to return a JSON encoded version of");
			p13_nodes.forEach(detach);
			t139 = claim_text(section4_nodes, "\n");
			samplecode2.$$.fragment.l(section4_nodes);
			t140 = claim_text(section4_nodes, "\n        ");

			p14 = claim_element(section4_nodes, "P", { class: true }, false);
			var p14_nodes = children(p14);

			t141 = claim_text(p14_nodes, "The following code demonstrates how to do it in PHP, but you can do it with your favorite language.");
			p14_nodes.forEach(detach);
			t142 = claim_text(section4_nodes, "\n");
			samplecode3.$$.fragment.l(section4_nodes);
			section4_nodes.forEach(detach);
			t143 = claim_text(nodes, "\n    \n    ");

			section5 = claim_element(nodes, "SECTION", { class: true }, false);
			var section5_nodes = children(section5);

			heading5.$$.fragment.l(section5_nodes);
			t144 = claim_text(section5_nodes, "\n        ");

			ul4 = claim_element(section5_nodes, "UL", { class: true }, false);
			var ul4_nodes = children(ul4);

			li8 = claim_element(ul4_nodes, "LI", {}, false);
			var li8_nodes = children(li8);

			t145 = claim_text(li8_nodes, "v1.5.0: Hide the icon for the invisible reCAPTCHA.");
			li8_nodes.forEach(detach);
			t146 = claim_text(ul4_nodes, "\n            ");

			li9 = claim_element(ul4_nodes, "LI", {}, false);
			var li9_nodes = children(li9);

			t147 = claim_text(li9_nodes, "v1.4.0: In the previous version, the Recaptcha plugin doesn't hide the error message and error icon when user click the captcha checkbox.\n                The error icon disappears when the captcha is expired. This version fixes that.");
			li9_nodes.forEach(detach);
			t148 = claim_text(ul4_nodes, "\n            ");

			li14 = claim_element(ul4_nodes, "LI", {}, false);
			var li14_nodes = children(li14);

			t149 = claim_text(li14_nodes, "v1.1.0:\n                ");

			ul3 = claim_element(li14_nodes, "UL", { class: true }, false);
			var ul3_nodes = children(ul3);

			li10 = claim_element(ul3_nodes, "LI", {}, false);
			var li10_nodes = children(li10);

			t150 = claim_text(li10_nodes, "Removed the ");

			code21 = claim_element(li10_nodes, "CODE", {}, false);
			var code21_nodes = children(code21);

			t151 = claim_text(code21_nodes, "timeout");
			code21_nodes.forEach(detach);
			t152 = claim_text(li10_nodes, " option. The captcha expiration will be handled by the plugin automatically");
			li10_nodes.forEach(detach);
			t153 = claim_text(ul3_nodes, "\n                    ");

			li11 = claim_element(ul3_nodes, "LI", {}, false);
			var li11_nodes = children(li11);

			t154 = claim_text(li11_nodes, "Removed unused ");

			code22 = claim_element(li11_nodes, "CODE", {}, false);
			var code22_nodes = children(code22);

			t155 = claim_text(code22_nodes, "stoken");
			code22_nodes.forEach(detach);
			t156 = claim_text(li11_nodes, " option");
			li11_nodes.forEach(detach);
			t157 = claim_text(ul3_nodes, "\n                    ");

			li12 = claim_element(ul3_nodes, "LI", {}, false);
			var li12_nodes = children(li12);

			t158 = claim_text(li12_nodes, "Added ");

			code23 = claim_element(li12_nodes, "CODE", {}, false);
			var code23_nodes = children(code23);

			t159 = claim_text(code23_nodes, "backendVerificationUrl");
			code23_nodes.forEach(detach);
			t160 = claim_text(li12_nodes, " option to support back-end verification");
			li12_nodes.forEach(detach);
			t161 = claim_text(ul3_nodes, "\n                    ");

			li13 = claim_element(ul3_nodes, "LI", {}, false);
			var li13_nodes = children(li13);

			t162 = claim_text(li13_nodes, "Supported ");

			a8 = claim_element(li13_nodes, "A", { href: true, class: true }, false);
			var a8_nodes = children(a8);

			t163 = claim_text(a8_nodes, "invisible reCAPTCHA");
			a8_nodes.forEach(detach);
			li13_nodes.forEach(detach);
			ul3_nodes.forEach(detach);
			li14_nodes.forEach(detach);
			t164 = claim_text(ul4_nodes, "\n            ");

			li15 = claim_element(ul4_nodes, "LI", {}, false);
			var li15_nodes = children(li15);

			t165 = claim_text(li15_nodes, "v1.0.0: First release");
			li15_nodes.forEach(detach);
			ul4_nodes.forEach(detach);
			section5_nodes.forEach(detach);
			t166 = claim_text(nodes, "\n\n    ");

			section6 = claim_element(nodes, "SECTION", { class: true }, false);
			var section6_nodes = children(section6);

			div = claim_element(section6_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t167 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section6_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 98);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 152);
			a0.href = "https://www.google.com/recaptcha/admin";
			a0.className = "blue dim link";
			add_location(a0, file, 12, 85, 507);
			p0.className = "lh-copy";
			add_location(p0, file, 12, 8, 430);
			p1.className = "lh-copy";
			add_location(p1, file, 13, 8, 634);
			add_location(code0, file, 56, 109, 2054);
			p2.className = "lh-copy";
			add_location(p2, file, 56, 8, 1953);
			section0.className = "mv5";
			add_location(section0, file, 10, 4, 367);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 63, 16, 2377);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 64, 16, 2439);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 65, 16, 2499);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 62, 12, 2328);
			add_location(code1, file, 68, 36, 2649);
			td0.className = "pv2 ph3";
			add_location(td0, file, 68, 16, 2629);
			td1.className = "pv2 ph3";
			add_location(td1, file, 69, 16, 2706);
			td2.className = "pv2 ph3 lh-copy";
			add_location(td2, file, 70, 16, 2754);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 67, 12, 2580);
			add_location(code2, file, 73, 36, 2955);
			td3.className = "pv2 ph3";
			add_location(td3, file, 73, 16, 2935);
			td4.className = "pv2 ph3";
			add_location(td4, file, 74, 16, 2995);
			p3.className = "lh-copy";
			add_location(p3, file, 76, 20, 3084);
			add_location(code3, file, 78, 28, 3238);
			add_location(li0, file, 78, 24, 3234);
			add_location(code4, file, 79, 28, 3316);
			add_location(li1, file, 79, 24, 3312);
			add_location(code5, file, 80, 28, 3373);
			add_location(li2, file, 80, 24, 3369);
			ul0.className = "ma0 pl3 lh-copy";
			add_location(ul0, file, 77, 20, 3181);
			add_location(code6, file, 82, 66, 3490);
			a1.href = "/guide/plugins/recaptcha/#invisible-re-captcha";
			a1.className = "blue dim link";
			add_location(a1, file, 82, 101, 3525);
			p4.className = "lh-copy";
			add_location(p4, file, 82, 20, 3444);
			td5.className = "pv2 ph3";
			add_location(td5, file, 75, 16, 3043);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 72, 12, 2886);
			add_location(code7, file, 86, 36, 3753);
			add_location(sup0, file, 86, 57, 3774);
			td6.className = "pv2 ph3";
			add_location(td6, file, 86, 16, 3733);
			td7.className = "pv2 ph3";
			add_location(td7, file, 87, 16, 3808);
			td8.className = "pv2 ph3";
			add_location(td8, file, 88, 16, 3856);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 85, 12, 3684);
			add_location(code8, file, 91, 36, 4018);
			td9.className = "pv2 ph3";
			add_location(td9, file, 91, 16, 3998);
			td10.className = "pv2 ph3";
			add_location(td10, file, 92, 16, 4061);
			a2.href = "https://developers.google.com/recaptcha/docs/language";
			a2.className = "blue dim link";
			add_location(a2, file, 93, 48, 4141);
			td11.className = "pv2 ph3 lh-copy";
			add_location(td11, file, 93, 16, 4109);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 90, 12, 3949);
			add_location(code9, file, 96, 36, 4370);
			add_location(sup1, file, 96, 57, 4391);
			td12.className = "pv2 ph3";
			add_location(td12, file, 96, 16, 4350);
			td13.className = "pv2 ph3";
			add_location(td13, file, 97, 16, 4425);
			td14.className = "pv2 ph3 lh-copy";
			add_location(td14, file, 98, 16, 4473);
			tr5.className = "striped--light-gray";
			add_location(tr5, file, 95, 12, 4301);
			add_location(code10, file, 101, 36, 4677);
			add_location(sup2, file, 101, 57, 4698);
			td15.className = "pv2 ph3";
			add_location(td15, file, 101, 16, 4657);
			td16.className = "pv2 ph3";
			add_location(td16, file, 102, 16, 4732);
			td17.className = "pv2 ph3";
			add_location(td17, file, 103, 16, 4780);
			tr6.className = "striped--light-gray";
			add_location(tr6, file, 100, 12, 4608);
			add_location(code11, file, 106, 36, 4936);
			td18.className = "pv2 ph3";
			add_location(td18, file, 106, 16, 4916);
			td19.className = "pv2 ph3";
			add_location(td19, file, 107, 16, 4975);
			p5.className = "lh-copy";
			add_location(p5, file, 109, 20, 5064);
			add_location(code12, file, 111, 28, 5211);
			add_location(li3, file, 111, 24, 5207);
			add_location(code13, file, 112, 28, 5284);
			add_location(li4, file, 112, 24, 5280);
			add_location(code14, file, 113, 28, 5338);
			add_location(li5, file, 113, 24, 5334);
			ul1.className = "ma0 pl3 lh-copy";
			add_location(ul1, file, 110, 20, 5154);
			a3.href = "/guide/plugins/recaptcha/#re-captcha-widget";
			a3.className = "blue dim link";
			add_location(a3, file, 115, 83, 5475);
			a4.href = "/guide/plugins/recaptcha/#invisible-re-captcha";
			a4.className = "blue dim link";
			add_location(a4, file, 115, 228, 5620);
			p6.className = "lh-copy";
			add_location(p6, file, 115, 20, 5412);
			td20.className = "pv2 ph3";
			add_location(td20, file, 108, 16, 5023);
			tr7.className = "striped--light-gray";
			add_location(tr7, file, 105, 12, 4867);
			add_location(code15, file, 119, 36, 5849);
			td21.className = "pv2 ph3";
			add_location(td21, file, 119, 16, 5829);
			td22.className = "pv2 ph3";
			add_location(td22, file, 120, 16, 5889);
			p7.className = "lh-copy";
			add_location(p7, file, 122, 20, 5978);
			add_location(code16, file, 124, 28, 6130);
			add_location(li6, file, 124, 24, 6126);
			add_location(code17, file, 125, 28, 6202);
			add_location(li7, file, 125, 24, 6198);
			ul2.className = "ma0 pl3 lh-copy";
			add_location(ul2, file, 123, 20, 6073);
			td23.className = "pv2 ph3";
			add_location(td23, file, 121, 16, 5937);
			tr8.className = "striped--light-gray";
			add_location(tr8, file, 118, 12, 5780);
			table.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table, file, 61, 8, 2258);
			section1.className = "mv5";
			add_location(section1, file, 59, 4, 2193);
			a5.href = "https://developers.google.com/recaptcha/docs/display";
			a5.className = "blue dim link";
			add_location(a5, file, 134, 54, 6452);
			p8.className = "lh-copy";
			add_location(p8, file, 134, 8, 6406);
			section2.className = "mv5";
			add_location(section2, file, 132, 4, 6332);
			a6.href = "https://developers.google.com/recaptcha/docs/invisible";
			a6.className = "blue dim link";
			add_location(a6, file, 140, 55, 6795);
			add_location(code18, file, 140, 216, 6956);
			p9.className = "lh-copy";
			add_location(p9, file, 140, 8, 6748);
			section3.className = "mv5";
			add_location(section3, file, 138, 4, 6671);
			p10.className = "lh-copy";
			add_location(p10, file, 146, 8, 7185);
			add_location(code19, file, 147, 49, 7395);
			p11.className = "lh-copy";
			add_location(p11, file, 147, 8, 7354);
			add_location(code20, file, 164, 112, 7943);
			a7.href = "https://developers.google.com/recaptcha/docs/verify#api-request";
			a7.className = "blue dim link";
			add_location(a7, file, 165, 12, 8075);
			p12.className = "lh-copy";
			add_location(p12, file, 164, 8, 7839);
			p13.className = "lh-copy";
			add_location(p13, file, 166, 8, 8237);
			p14.className = "lh-copy";
			add_location(p14, file, 176, 8, 8489);
			section4.className = "mv5";
			add_location(section4, file, 144, 4, 7106);
			add_location(li8, file, 214, 12, 9527);
			add_location(li9, file, 215, 12, 9599);
			add_location(code21, file, 219, 36, 9951);
			add_location(li10, file, 219, 20, 9935);
			add_location(code22, file, 220, 39, 10091);
			add_location(li11, file, 220, 20, 10072);
			add_location(code23, file, 221, 30, 10153);
			add_location(li12, file, 221, 20, 10143);
			a8.href = "https://developers.google.com/recaptcha/docs/invisible";
			a8.className = "blue dim link";
			add_location(a8, file, 222, 34, 10268);
			add_location(li13, file, 222, 20, 10254);
			ul3.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul3, file, 218, 16, 9882);
			add_location(li14, file, 217, 12, 9854);
			add_location(li15, file, 225, 12, 10436);
			ul4.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul4, file, 213, 8, 9482);
			section5.className = "mv5";
			add_location(section5, file, 211, 4, 9415);
			div.className = "flex";
			add_location(div, file, 230, 8, 10531);
			section6.className = "mv5";
			add_location(section6, file, 229, 4, 10501);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			mount_component(tip, target, anchor);
			insert(target, t4, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t5);
			append(section0, p0);
			append(p0, t6);
			append(p0, a0);
			append(a0, t7);
			append(p0, t8);
			append(section0, t9);
			append(section0, p1);
			append(p1, t10);
			append(section0, t11);
			mount_component(samplecode0, section0, null);
			append(section0, t12);
			append(section0, p2);
			append(p2, t13);
			append(p2, code0);
			append(code0, t14);
			append(p2, t15);
			insert(target, t16, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t17);
			append(section1, table);
			append(table, tr0);
			append(tr0, th0);
			append(th0, t18);
			append(tr0, t19);
			append(tr0, th1);
			append(th1, t20);
			append(tr0, t21);
			append(tr0, th2);
			append(th2, t22);
			append(table, t23);
			append(table, tr1);
			append(tr1, td0);
			append(td0, code1);
			append(code1, t24);
			append(tr1, t25);
			append(tr1, td1);
			append(td1, t26);
			append(tr1, t27);
			append(tr1, td2);
			append(td2, t28);
			append(table, t29);
			append(table, tr2);
			append(tr2, td3);
			append(td3, code2);
			append(code2, t30);
			append(tr2, t31);
			append(tr2, td4);
			append(td4, t32);
			append(tr2, t33);
			append(tr2, td5);
			append(td5, p3);
			append(p3, t34);
			append(td5, t35);
			append(td5, ul0);
			append(ul0, li0);
			append(li0, code3);
			append(code3, t36);
			append(li0, t37);
			append(ul0, t38);
			append(ul0, li1);
			append(li1, code4);
			append(code4, t39);
			append(ul0, t40);
			append(ul0, li2);
			append(li2, code5);
			append(code5, t41);
			append(td5, t42);
			append(td5, p4);
			append(p4, t43);
			append(p4, code6);
			append(code6, t44);
			append(p4, t45);
			append(p4, a1);
			append(a1, t46);
			append(table, t47);
			append(table, tr3);
			append(tr3, td6);
			append(td6, code7);
			append(code7, t48);
			append(td6, t49);
			append(td6, sup0);
			append(sup0, t50);
			append(tr3, t51);
			append(tr3, td7);
			append(td7, t52);
			append(tr3, t53);
			append(tr3, td8);
			append(td8, t54);
			append(table, t55);
			append(table, tr4);
			append(tr4, td9);
			append(td9, code8);
			append(code8, t56);
			append(tr4, t57);
			append(tr4, td10);
			append(td10, t58);
			append(tr4, t59);
			append(tr4, td11);
			append(td11, t60);
			append(td11, a2);
			append(a2, t61);
			append(td11, t62);
			append(table, t63);
			append(table, tr5);
			append(tr5, td12);
			append(td12, code9);
			append(code9, t64);
			append(td12, t65);
			append(td12, sup1);
			append(sup1, t66);
			append(tr5, t67);
			append(tr5, td13);
			append(td13, t68);
			append(tr5, t69);
			append(tr5, td14);
			append(td14, t70);
			append(table, t71);
			append(table, tr6);
			append(tr6, td15);
			append(td15, code10);
			append(code10, t72);
			append(td15, t73);
			append(td15, sup2);
			append(sup2, t74);
			append(tr6, t75);
			append(tr6, td16);
			append(td16, t76);
			append(tr6, t77);
			append(tr6, td17);
			append(td17, t78);
			append(table, t79);
			append(table, tr7);
			append(tr7, td18);
			append(td18, code11);
			append(code11, t80);
			append(tr7, t81);
			append(tr7, td19);
			append(td19, t82);
			append(tr7, t83);
			append(tr7, td20);
			append(td20, p5);
			append(p5, t84);
			append(td20, t85);
			append(td20, ul1);
			append(ul1, li3);
			append(li3, code12);
			append(code12, t86);
			append(li3, t87);
			append(ul1, t88);
			append(ul1, li4);
			append(li4, code13);
			append(code13, t89);
			append(ul1, t90);
			append(ul1, li5);
			append(li5, code14);
			append(code14, t91);
			append(td20, t92);
			append(td20, p6);
			append(p6, t93);
			append(p6, a3);
			append(a3, t94);
			append(p6, t95);
			append(p6, a4);
			append(a4, t96);
			append(p6, t97);
			append(table, t98);
			append(table, tr8);
			append(tr8, td21);
			append(td21, code15);
			append(code15, t99);
			append(tr8, t100);
			append(tr8, td22);
			append(td22, t101);
			append(tr8, t102);
			append(tr8, td23);
			append(td23, p7);
			append(p7, t103);
			append(td23, t104);
			append(td23, ul2);
			append(ul2, li6);
			append(li6, code16);
			append(code16, t105);
			append(li6, t106);
			append(ul2, t107);
			append(ul2, li7);
			append(li7, code17);
			append(code17, t108);
			insert(target, t109, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t110);
			append(section2, p8);
			append(p8, t111);
			append(p8, a5);
			append(a5, t112);
			append(p8, t113);
			append(section2, t114);
			mount_component(demo0, section2, null);
			insert(target, t115, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t116);
			append(section3, p9);
			append(p9, t117);
			append(p9, a6);
			append(a6, t118);
			append(p9, t119);
			append(p9, code18);
			append(code18, t120);
			append(p9, t121);
			append(section3, t122);
			mount_component(demo1, section3, null);
			insert(target, t123, anchor);
			insert(target, section4, anchor);
			mount_component(heading4, section4, null);
			append(section4, t124);
			append(section4, p10);
			append(p10, t125);
			append(section4, t126);
			append(section4, p11);
			append(p11, t127);
			append(p11, code19);
			append(code19, t128);
			append(p11, t129);
			append(section4, t130);
			mount_component(samplecode1, section4, null);
			append(section4, t131);
			append(section4, p12);
			append(p12, t132);
			append(p12, code20);
			append(code20, t133);
			append(p12, t134);
			append(p12, a7);
			append(a7, t135);
			append(p12, t136);
			append(section4, t137);
			append(section4, p13);
			append(p13, t138);
			append(section4, t139);
			mount_component(samplecode2, section4, null);
			append(section4, t140);
			append(section4, p14);
			append(p14, t141);
			append(section4, t142);
			mount_component(samplecode3, section4, null);
			insert(target, t143, anchor);
			insert(target, section5, anchor);
			mount_component(heading5, section5, null);
			append(section5, t144);
			append(section5, ul4);
			append(ul4, li8);
			append(li8, t145);
			append(ul4, t146);
			append(ul4, li9);
			append(li9, t147);
			append(ul4, t148);
			append(ul4, li14);
			append(li14, t149);
			append(li14, ul3);
			append(ul3, li10);
			append(li10, t150);
			append(li10, code21);
			append(code21, t151);
			append(li10, t152);
			append(ul3, t153);
			append(ul3, li11);
			append(li11, t154);
			append(li11, code22);
			append(code22, t155);
			append(li11, t156);
			append(ul3, t157);
			append(ul3, li12);
			append(li12, t158);
			append(li12, code23);
			append(code23, t159);
			append(li12, t160);
			append(ul3, t161);
			append(ul3, li13);
			append(li13, t162);
			append(li13, a8);
			append(a8, t163);
			append(ul4, t164);
			append(ul4, li15);
			append(li15, t165);
			insert(target, t166, anchor);
			insert(target, section6, anchor);
			append(section6, div);
			mount_component(prevbutton, div, null);
			append(div, t167);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var tip_changes = {};
			if (changed.$$scope) tip_changes.$$scope = { changed, ctx };
			tip.$set(tip_changes);

			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var heading4_changes = {};
			if (changed.$$scope) heading4_changes.$$scope = { changed, ctx };
			heading4.$set(heading4_changes);

			var heading5_changes = {};
			if (changed.$$scope) heading5_changes.$$scope = { changed, ctx };
			heading5.$set(heading5_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			tip.$$.fragment.i(local);

			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			demo0.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			heading4.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			samplecode3.$$.fragment.i(local);

			heading5.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			tip.$$.fragment.o(local);
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			demo0.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			heading4.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			samplecode3.$$.fragment.o(local);
			heading5.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
			}

			tip.$destroy(detaching);

			if (detaching) {
				detach(t4);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			if (detaching) {
				detach(t16);
				detach(section1);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t109);
				detach(section2);
			}

			heading2.$destroy();

			demo0.$destroy();

			if (detaching) {
				detach(t115);
				detach(section3);
			}

			heading3.$destroy();

			demo1.$destroy();

			if (detaching) {
				detach(t123);
				detach(section4);
			}

			heading4.$destroy();

			samplecode1.$destroy();

			samplecode2.$destroy();

			samplecode3.$destroy();

			if (detaching) {
				detach(t143);
				detach(section5);
			}

			heading5.$destroy();

			if (detaching) {
				detach(t166);
				detach(section6);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Recaptcha plugin";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';

/* src/routes/guide/api/set-locale/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/api/set-locale/index.svelte";

// (52:12) <PrevButton target="/guide/api/revalidate-field">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("revalidateField() method");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "revalidateField() method");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (53:12) <NextButton target="/guide/api/update-element-status">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("updateElementStatus() method");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "updateElementStatus() method");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, div0, t4, p0, sup0, t5, t6, t7, ul, li0, code0, t8, t9, sup1, t10, t11, t12, li1, code1, t13, t14, sup2, t15, t16, t17, p1, t18, a, t19, t20, t21, p2, t22, code2, t23, t24, t25, t26, section1, div1, t27, current;

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `setLocale(locale: String, localization: Object): Core` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>

<!--
You can include many language packages as you want. Their order don't matter
as you ensure that they are loaded after FormValidation(.min).js
-->
<script-tag src="/vendors/formvalidation/dist/js/locales/en_US.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/locales/fr_FR.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/locales/vi_VN.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    const fv = FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            ...
        }
    );

    // Access the English translation package
    const englishTranslation = FormValidation.locales.en_US;

    // Switch error messages to English
    fv.setLocale('en_US', englishTranslation);
});
</script-tag>
` },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/api/revalidate-field",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/api/update-element-status",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("setLocale()");
			t1 = space();
			h2 = element("h2");
			t2 = text("Set the locale and the localization data");
			t3 = space();
			section0 = element("section");
			div0 = element("div");
			samplecode0.$$.fragment.c();
			t4 = space();
			p0 = element("p");
			sup0 = element("sup");
			t5 = text("*");
			t6 = text(" presents a required parameter");
			t7 = space();
			ul = element("ul");
			li0 = element("li");
			code0 = element("code");
			t8 = text("locale");
			t9 = space();
			sup1 = element("sup");
			t10 = text("*");
			t11 = text(" — The locale in the format of countrycode_LANGUAGECODE. en_US, de_DE, fr_FR, vi_VN, for example");
			t12 = space();
			li1 = element("li");
			code1 = element("code");
			t13 = text("localization");
			t14 = space();
			sup2 = element("sup");
			t15 = text("*");
			t16 = text(" — An object containing the translation of all validators");
			t17 = space();
			p1 = element("p");
			t18 = text("This method is useful when you want to switch to another locale. See the ");
			a = element("a");
			t19 = text("L10n");
			t20 = text(" plugin for an example.");
			t21 = space();
			p2 = element("p");
			t22 = text("You can access the translation directly from the packages located in the ");
			code2 = element("code");
			t23 = text("dist/js/locates");
			t24 = text(" folder:");
			t25 = space();
			samplecode1.$$.fragment.c();
			t26 = space();
			section1 = element("section");
			div1 = element("div");
			prevbutton.$$.fragment.c();
			t27 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "setLocale()");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Set the locale and the localization data");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			div0 = claim_element(section0_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			samplecode0.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach);
			t4 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			sup0 = claim_element(p0_nodes, "SUP", {}, false);
			var sup0_nodes = children(sup0);

			t5 = claim_text(sup0_nodes, "*");
			sup0_nodes.forEach(detach);
			t6 = claim_text(p0_nodes, " presents a required parameter");
			p0_nodes.forEach(detach);
			t7 = claim_text(section0_nodes, "\n        ");

			ul = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li0_nodes = children(li0);

			code0 = claim_element(li0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t8 = claim_text(code0_nodes, "locale");
			code0_nodes.forEach(detach);
			t9 = claim_text(li0_nodes, " ");

			sup1 = claim_element(li0_nodes, "SUP", {}, false);
			var sup1_nodes = children(sup1);

			t10 = claim_text(sup1_nodes, "*");
			sup1_nodes.forEach(detach);
			t11 = claim_text(li0_nodes, " — The locale in the format of countrycode_LANGUAGECODE. en_US, de_DE, fr_FR, vi_VN, for example");
			li0_nodes.forEach(detach);
			t12 = claim_text(ul_nodes, "\n            ");

			li1 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li1_nodes = children(li1);

			code1 = claim_element(li1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t13 = claim_text(code1_nodes, "localization");
			code1_nodes.forEach(detach);
			t14 = claim_text(li1_nodes, " ");

			sup2 = claim_element(li1_nodes, "SUP", {}, false);
			var sup2_nodes = children(sup2);

			t15 = claim_text(sup2_nodes, "*");
			sup2_nodes.forEach(detach);
			t16 = claim_text(li1_nodes, " — An object containing the translation of all validators");
			li1_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			t17 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t18 = claim_text(p1_nodes, "This method is useful when you want to switch to another locale. See the ");

			a = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t19 = claim_text(a_nodes, "L10n");
			a_nodes.forEach(detach);
			t20 = claim_text(p1_nodes, " plugin for an example.");
			p1_nodes.forEach(detach);
			t21 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t22 = claim_text(p2_nodes, "You can access the translation directly from the packages located in the ");

			code2 = claim_element(p2_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t23 = claim_text(code2_nodes, "dist/js/locates");
			code2_nodes.forEach(detach);
			t24 = claim_text(p2_nodes, " folder:");
			p2_nodes.forEach(detach);
			t25 = claim_text(section0_nodes, "\n");
			samplecode1.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t26 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			div1 = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			prevbutton.$$.fragment.l(div1_nodes);
			t27 = claim_text(div1_nodes, "\n            ");
			nextbutton.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 100);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 149);
			div0.className = "mb3";
			add_location(div0, file, 9, 8, 252);
			add_location(sup0, file, 12, 29, 422);
			p0.className = "lh-copy i";
			add_location(p0, file, 12, 8, 401);
			add_location(code0, file, 14, 32, 530);
			add_location(sup1, file, 14, 52, 550);
			li0.className = "lh-copy";
			add_location(li0, file, 14, 12, 510);
			add_location(code1, file, 15, 32, 696);
			add_location(sup2, file, 15, 58, 722);
			li1.className = "lh-copy";
			add_location(li1, file, 15, 12, 676);
			ul.className = "ma0 pl3";
			add_location(ul, file, 13, 8, 477);
			a.href = "/guide/plugins/l10n";
			a.className = "blue dim link";
			add_location(a, file, 17, 100, 911);
			p1.className = "lh-copy";
			add_location(p1, file, 17, 8, 819);
			add_location(code2, file, 18, 100, 1099);
			p2.className = "lh-copy";
			add_location(p2, file, 18, 8, 1007);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 222);
			div1.className = "flex";
			add_location(div1, file, 50, 8, 2143);
			section1.className = "mv5";
			add_location(section1, file, 49, 4, 2113);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			append(section0, div0);
			mount_component(samplecode0, div0, null);
			append(section0, t4);
			append(section0, p0);
			append(p0, sup0);
			append(sup0, t5);
			append(p0, t6);
			append(section0, t7);
			append(section0, ul);
			append(ul, li0);
			append(li0, code0);
			append(code0, t8);
			append(li0, t9);
			append(li0, sup1);
			append(sup1, t10);
			append(li0, t11);
			append(ul, t12);
			append(ul, li1);
			append(li1, code1);
			append(code1, t13);
			append(li1, t14);
			append(li1, sup2);
			append(sup2, t15);
			append(li1, t16);
			append(section0, t17);
			append(section0, p1);
			append(p1, t18);
			append(p1, a);
			append(a, t19);
			append(p1, t20);
			append(section0, t21);
			append(section0, p2);
			append(p2, t22);
			append(p2, code2);
			append(code2, t23);
			append(p2, t24);
			append(section0, t25);
			mount_component(samplecode1, section0, null);
			insert(target, t26, anchor);
			insert(target, section1, anchor);
			append(section1, div1);
			mount_component(prevbutton, div1, null);
			append(div1, t27);
			mount_component(nextbutton, div1, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			samplecode0.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t26);
				detach(section1);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • setLocale() method";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

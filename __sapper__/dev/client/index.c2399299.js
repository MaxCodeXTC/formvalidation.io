import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';

/* src/routes/guide/examples/using-material-design-icons/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/using-material-design-icons/index.svelte";

// (34:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Defining icon content by CSS");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Defining icon content by CSS");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (65:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Triggering the event");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Triggering the event");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section0, p0, t2, a0, t3, t4, a1, t5, t6, t7, p1, t8, t9, table, tr0, th0, t10, t11, th1, t12, t13, tr1, td0, t14, t15, td1, code0, t16, t17, tr2, td2, t18, t19, td3, code1, t20, t21, tr3, td4, t22, t23, td5, code2, t24, t25, p2, t26, t27, p3, t28, t29, section1, t30, p4, t31, code3, t32, t33, t34, t35, p5, t36, t37, div0, t38, t39, section2, t40, p6, t41, code4, t42, t43, span, t44, t45, t46, div1, t47, t48, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "css", code: `
.material-icons.valid-icon:after {
    content: 'check';
    font-size: 24px;
}
.material-icons.invalid-icon:after {
    content: 'clear';
    font-size: 24px;
}
.material-icons.validating-icon:after {
    content: 'graphic_eq';
    font-size: 24px;
}
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
icon: new FormValidation.plugins.Icon({
    valid: 'material-icons valid-icon',
    invalid: 'material-icons invalid-icon',
    validating: 'material-icons validating-icon',
}),
` },
		$$inline: true
	});

	var demo0 = new Demo({
		props: {
		prefix: "/guide/examples/using-material-design-icons/material-design",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "javascript", code: `
FormValidation
    .formValidation(document.getElementById('demoForm'), {
        plugins: {
            icon: new FormValidation.plugins.Icon({
                valid: 'material-icons icon-valid',
                invalid: 'material-icons icon-invalid',
                validating: 'material-icons icon-validating',
            }),
        },
    })
    .on('plugins.icon.set', function(e) {
        if (e.iconElement) {
            switch (e.status) {
                case 'Validating':
                    e.iconElement.innerHTML = 'graphic_eq';
                    break;

                case 'Invalid':
                    e.iconElement.innerHTML = 'clear';
                    break;

                case 'Valid':
                    e.iconElement.innerHTML = 'check';
                    break;

                default:
                    e.iconElement.innerHTML = '';
                    break;
            }
        }     
    });
` },
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/examples/using-material-design-icons/material-design-event",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Adjusting icon position',
        'Showing icons in custom area',
        'Using FontAwesome icons',
        'Using Glyphicons icons',
        'Using Material Design icons',
        'Using Semantic UI framework icons',
        'Using Spectre framework icons',
        'Using SVG icons',
    ] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Using Material Design icons");
			t1 = space();
			section0 = element("section");
			p0 = element("p");
			t2 = text("If you are a fan of using Google's ");
			a0 = element("a");
			t3 = text("material design");
			t4 = text(", then you might prefer to use ");
			a1 = element("a");
			t5 = text("its icons set");
			t6 = text(".");
			t7 = space();
			p1 = element("p");
			t8 = text("It's up to you to choose suitable icons from Google material design icons for the feedback icons. The following table is just an example of three icons taken from the set:");
			t9 = space();
			table = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t10 = text("Field status");
			t11 = space();
			th1 = element("th");
			t12 = text("Icon");
			t13 = space();
			tr1 = element("tr");
			td0 = element("td");
			t14 = text("Valid");
			t15 = space();
			td1 = element("td");
			code0 = element("code");
			t16 = text("<i class=\"material-icons\">check</i>");
			t17 = space();
			tr2 = element("tr");
			td2 = element("td");
			t18 = text("Invalid");
			t19 = space();
			td3 = element("td");
			code1 = element("code");
			t20 = text("<i class=\"material-icons\">clear</i>");
			t21 = space();
			tr3 = element("tr");
			td4 = element("td");
			t22 = text("Being validated");
			t23 = space();
			td5 = element("td");
			code2 = element("code");
			t24 = text("<i class=\"material-icons\">graphic_eq</i>");
			t25 = space();
			p2 = element("p");
			t26 = text("As you see, each Google material design icon uses pre-defined content instead of a different CSS class. Meanwhile, the Icon's plugin options only accept CSS classes that are added to the icon based on the field validity.");
			t27 = space();
			p3 = element("p");
			t28 = text("The next section introduces two approaches to solve this problem.");
			t29 = space();
			section1 = element("section");
			heading0.$$.fragment.c();
			t30 = space();
			p4 = element("p");
			t31 = text("By using the ");
			code3 = element("code");
			t32 = text(":after");
			t33 = text(" CSS selector, we can indicated content of icons as following:");
			t34 = space();
			samplecode0.$$.fragment.c();
			t35 = space();
			p5 = element("p");
			t36 = text("Lastly, you just set the icons for each status of field:");
			t37 = space();
			div0 = element("div");
			samplecode1.$$.fragment.c();
			t38 = space();
			demo0.$$.fragment.c();
			t39 = space();
			section2 = element("section");
			heading1.$$.fragment.c();
			t40 = space();
			p6 = element("p");
			t41 = text("In order to update the content of icon based on the field validity status, we can trigger the event ");
			code4 = element("code");
			t42 = text("plugins.icon.set");
			t43 = text(" as mentioned in the ");
			span = element("span");
			t44 = text("Using SVG icons");
			t45 = text(" section above.");
			t46 = space();
			div1 = element("div");
			samplecode2.$$.fragment.c();
			t47 = space();
			demo1.$$.fragment.c();
			t48 = space();
			examples.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Using Material Design icons");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    \n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "If you are a fan of using Google's ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t3 = claim_text(a0_nodes, "material design");
			a0_nodes.forEach(detach);
			t4 = claim_text(p0_nodes, ", then you might prefer to use ");

			a1 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t5 = claim_text(a1_nodes, "its icons set");
			a1_nodes.forEach(detach);
			t6 = claim_text(p0_nodes, ".");
			p0_nodes.forEach(detach);
			t7 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t8 = claim_text(p1_nodes, "It's up to you to choose suitable icons from Google material design icons for the feedback icons. The following table is just an example of three icons taken from the set:");
			p1_nodes.forEach(detach);
			t9 = claim_text(section0_nodes, "\n        ");

			table = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table_nodes = children(table);

			tr0 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t10 = claim_text(th0_nodes, "Field status");
			th0_nodes.forEach(detach);
			t11 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t12 = claim_text(th1_nodes, "Icon");
			th1_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t13 = claim_text(table_nodes, "\n            ");

			tr1 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			t14 = claim_text(td0_nodes, "Valid");
			td0_nodes.forEach(detach);
			t15 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			code0 = claim_element(td1_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t16 = claim_text(code0_nodes, "<i class=\"material-icons\">check</i>");
			code0_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t17 = claim_text(table_nodes, "\n            ");

			tr2 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td2 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t18 = claim_text(td2_nodes, "Invalid");
			td2_nodes.forEach(detach);
			t19 = claim_text(tr2_nodes, "\n                ");

			td3 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			code1 = claim_element(td3_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t20 = claim_text(code1_nodes, "<i class=\"material-icons\">clear</i>");
			code1_nodes.forEach(detach);
			td3_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t21 = claim_text(table_nodes, "\n            ");

			tr3 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td4 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			t22 = claim_text(td4_nodes, "Being validated");
			td4_nodes.forEach(detach);
			t23 = claim_text(tr3_nodes, "\n                ");

			td5 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			code2 = claim_element(td5_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t24 = claim_text(code2_nodes, "<i class=\"material-icons\">graphic_eq</i>");
			code2_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			table_nodes.forEach(detach);
			t25 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t26 = claim_text(p2_nodes, "As you see, each Google material design icon uses pre-defined content instead of a different CSS class. Meanwhile, the Icon's plugin options only accept CSS classes that are added to the icon based on the field validity.");
			p2_nodes.forEach(detach);
			t27 = claim_text(section0_nodes, "\n        ");

			p3 = claim_element(section0_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t28 = claim_text(p3_nodes, "The next section introduces two approaches to solve this problem.");
			p3_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t29 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading0.$$.fragment.l(section1_nodes);
			t30 = claim_text(section1_nodes, "\n\n        ");

			p4 = claim_element(section1_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t31 = claim_text(p4_nodes, "By using the ");

			code3 = claim_element(p4_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t32 = claim_text(code3_nodes, ":after");
			code3_nodes.forEach(detach);
			t33 = claim_text(p4_nodes, " CSS selector, we can indicated content of icons as following:");
			p4_nodes.forEach(detach);
			t34 = claim_text(section1_nodes, "\n");
			samplecode0.$$.fragment.l(section1_nodes);
			t35 = claim_text(section1_nodes, "\n        ");

			p5 = claim_element(section1_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t36 = claim_text(p5_nodes, "Lastly, you just set the icons for each status of field:");
			p5_nodes.forEach(detach);
			t37 = claim_text(section1_nodes, "\n        ");

			div0 = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			samplecode1.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach);
			t38 = claim_text(section1_nodes, "\n        ");
			demo0.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t39 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading1.$$.fragment.l(section2_nodes);
			t40 = claim_text(section2_nodes, "\n\n        ");

			p6 = claim_element(section2_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t41 = claim_text(p6_nodes, "In order to update the content of icon based on the field validity status, we can trigger the event ");

			code4 = claim_element(p6_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t42 = claim_text(code4_nodes, "plugins.icon.set");
			code4_nodes.forEach(detach);
			t43 = claim_text(p6_nodes, " as mentioned in the ");

			span = claim_element(p6_nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t44 = claim_text(span_nodes, "Using SVG icons");
			span_nodes.forEach(detach);
			t45 = claim_text(p6_nodes, " section above.");
			p6_nodes.forEach(detach);
			t46 = claim_text(section2_nodes, "\n        ");

			div1 = claim_element(section2_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			samplecode2.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach);
			t47 = claim_text(section2_nodes, "\n        ");
			demo1.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t48 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 109);
			a0.href = "https://material.io";
			a0.className = "blue dim link";
			add_location(a0, file, 8, 62, 258);
			a1.href = "https://material.io/tools/icons";
			a1.className = "blue dim link";
			add_location(a1, file, 8, 164, 360);
			p0.className = "lh-copy";
			add_location(p0, file, 8, 8, 204);
			p1.className = "lh-copy";
			add_location(p1, file, 9, 8, 455);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 12, 16, 777);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 13, 16, 845);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 11, 12, 728);
			td0.className = "pv2 ph3";
			add_location(td0, file, 16, 16, 968);
			add_location(code0, file, 17, 36, 1035);
			td1.className = "pv2 ph3";
			add_location(td1, file, 17, 16, 1015);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 15, 12, 919);
			td2.className = "pv2 ph3";
			add_location(td2, file, 20, 16, 1180);
			add_location(code1, file, 21, 36, 1249);
			td3.className = "pv2 ph3";
			add_location(td3, file, 21, 16, 1229);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 19, 12, 1131);
			td4.className = "pv2 ph3";
			add_location(td4, file, 24, 16, 1394);
			add_location(code2, file, 25, 36, 1471);
			td5.className = "pv2 ph3";
			add_location(td5, file, 25, 16, 1451);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 23, 12, 1345);
			table.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table, file, 10, 8, 658);
			p2.className = "lh-copy";
			add_location(p2, file, 28, 8, 1585);
			p3.className = "lh-copy";
			add_location(p3, file, 29, 8, 1837);
			section0.className = "mv5";
			add_location(section0, file, 7, 4, 174);
			add_location(code3, file, 35, 40, 2065);
			p4.className = "lh-copy";
			add_location(p4, file, 35, 8, 2033);
			p5.className = "lh-copy";
			add_location(p5, file, 50, 8, 2448);
			div0.className = "mb4";
			add_location(div0, file, 51, 8, 2536);
			section1.className = "mv5";
			add_location(section1, file, 32, 4, 1946);
			add_location(code4, file, 66, 127, 3121);
			span.className = "i";
			add_location(span, file, 66, 177, 3171);
			p6.className = "lh-copy";
			add_location(p6, file, 66, 8, 3002);
			div1.className = "mb4";
			add_location(div1, file, 67, 8, 3237);
			section2.className = "mv5";
			add_location(section2, file, 63, 4, 2923);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section0, anchor);
			append(section0, p0);
			append(p0, t2);
			append(p0, a0);
			append(a0, t3);
			append(p0, t4);
			append(p0, a1);
			append(a1, t5);
			append(p0, t6);
			append(section0, t7);
			append(section0, p1);
			append(p1, t8);
			append(section0, t9);
			append(section0, table);
			append(table, tr0);
			append(tr0, th0);
			append(th0, t10);
			append(tr0, t11);
			append(tr0, th1);
			append(th1, t12);
			append(table, t13);
			append(table, tr1);
			append(tr1, td0);
			append(td0, t14);
			append(tr1, t15);
			append(tr1, td1);
			append(td1, code0);
			append(code0, t16);
			append(table, t17);
			append(table, tr2);
			append(tr2, td2);
			append(td2, t18);
			append(tr2, t19);
			append(tr2, td3);
			append(td3, code1);
			append(code1, t20);
			append(table, t21);
			append(table, tr3);
			append(tr3, td4);
			append(td4, t22);
			append(tr3, t23);
			append(tr3, td5);
			append(td5, code2);
			append(code2, t24);
			append(section0, t25);
			append(section0, p2);
			append(p2, t26);
			append(section0, t27);
			append(section0, p3);
			append(p3, t28);
			insert(target, t29, anchor);
			insert(target, section1, anchor);
			mount_component(heading0, section1, null);
			append(section1, t30);
			append(section1, p4);
			append(p4, t31);
			append(p4, code3);
			append(code3, t32);
			append(p4, t33);
			append(section1, t34);
			mount_component(samplecode0, section1, null);
			append(section1, t35);
			append(section1, p5);
			append(p5, t36);
			append(section1, t37);
			append(section1, div0);
			mount_component(samplecode1, div0, null);
			append(section1, t38);
			mount_component(demo0, section1, null);
			insert(target, t39, anchor);
			insert(target, section2, anchor);
			mount_component(heading1, section2, null);
			append(section2, t40);
			append(section2, p6);
			append(p6, t41);
			append(p6, code4);
			append(code4, t42);
			append(p6, t43);
			append(p6, span);
			append(span, t44);
			append(p6, t45);
			append(section2, t46);
			append(section2, div1);
			mount_component(samplecode2, div1, null);
			append(section2, t47);
			mount_component(demo1, section2, null);
			insert(target, t48, anchor);
			mount_component(examples, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			demo0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			demo0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section0);
				detach(t29);
				detach(section1);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			samplecode1.$destroy();

			demo0.$destroy();

			if (detaching) {
				detach(t39);
				detach(section2);
			}

			heading1.$destroy();

			samplecode2.$destroy();

			demo1.$destroy();

			if (detaching) {
				detach(t48);
			}

			examples.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Using Material Design icons";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, r as noop } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';

/* src/routes/guide/examples/enabling-submit-button-only-when-all-fields-are-valid/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/enabling-submit-button-only-when-all-fields-are-valid/index.svelte";

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section, p0, t2, a0, t3, t4, t5, p1, t6, code, t7, t8, a1, t9, t10, t11, div, t12, t13, current;

	var samplecode = new SampleCode({
		props: { lang: "javascript", code: `
document.addEventListener('DOMContentLoaded', function(e) {
    const demoForm = document.getElementById('demoForm'); 

    // Get the submit button element
    const submitButton = demoForm.querySelector('[type="submit"]');

    FormValidation.formValidation(
        demoForm,
        {
            fields: {
                ...
            },
            plugins: {
                fieldStatus: new FormValidation.plugins.FieldStatus({
                    onStatusChanged: function(areFieldsValid) {
                        areFieldsValid
                            // Enable the submit button
                            // so user has a chance to submit the form again
                            ? submitButton.removeAttribute('disabled')
                            // Disable the submit button
                            : submitButton.setAttribute('disabled', 'disabled'); 
                    }
                }),
                ...
            },
        }
    );
});
` },
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/examples/enabling-submit-button-only-when-all-fields-are-valid",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Enabling submit button only when all fields are valid',
        'Getting notified while field is being validated',
        'Pending validation for a given number of seconds',
        'Performing validation if field value exceed given number of characters',
    ] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Enabling submit button only when all fields are valid");
			t1 = space();
			section = element("section");
			p0 = element("p");
			t2 = text("The following example will disable the ");
			a0 = element("a");
			t3 = text("Submit button");
			t4 = text(" as long as there is at least one invalid field. In case all of fields are valid, the button will be enabled.");
			t5 = space();
			p1 = element("p");
			t6 = text("We can archive it by using the ");
			code = element("code");
			t7 = text("onStatusChanged");
			t8 = text(" option provided by the ");
			a1 = element("a");
			t9 = text("FieldStatus plugin");
			t10 = text(".");
			t11 = space();
			div = element("div");
			samplecode.$$.fragment.c();
			t12 = space();
			demo.$$.fragment.c();
			t13 = space();
			examples.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Enabling submit button only when all fields are valid");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    \n    ");

			section = claim_element(nodes, "SECTION", { class: true }, false);
			var section_nodes = children(section);

			p0 = claim_element(section_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "The following example will disable the ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t3 = claim_text(a0_nodes, "Submit button");
			a0_nodes.forEach(detach);
			t4 = claim_text(p0_nodes, " as long as there is at least one invalid field. In case all of fields are valid, the button will be enabled.");
			p0_nodes.forEach(detach);
			t5 = claim_text(section_nodes, "\n        ");

			p1 = claim_element(section_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t6 = claim_text(p1_nodes, "We can archive it by using the ");

			code = claim_element(p1_nodes, "CODE", {}, false);
			var code_nodes = children(code);

			t7 = claim_text(code_nodes, "onStatusChanged");
			code_nodes.forEach(detach);
			t8 = claim_text(p1_nodes, " option provided by the ");

			a1 = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t9 = claim_text(a1_nodes, "FieldStatus plugin");
			a1_nodes.forEach(detach);
			t10 = claim_text(p1_nodes, ".");
			p1_nodes.forEach(detach);
			t11 = claim_text(section_nodes, "\n        ");

			div = claim_element(section_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			samplecode.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			t12 = claim_text(section_nodes, "\n        ");
			demo.$$.fragment.l(section_nodes);
			section_nodes.forEach(detach);
			t13 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 135);
			a0.href = "/guide/plugins/submit-button";
			a0.className = "blue dim link";
			add_location(a0, file, 8, 66, 314);
			p0.className = "lh-copy";
			add_location(p0, file, 8, 8, 256);
			add_location(code, file, 9, 58, 564);
			a1.href = "/guide/plugins/field-status";
			a1.className = "blue dim link";
			add_location(a1, file, 9, 110, 616);
			p1.className = "lh-copy";
			add_location(p1, file, 9, 8, 514);
			div.className = "mb4";
			add_location(div, file, 10, 8, 712);
			section.className = "mv5";
			add_location(section, file, 7, 4, 226);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section, anchor);
			append(section, p0);
			append(p0, t2);
			append(p0, a0);
			append(a0, t3);
			append(p0, t4);
			append(section, t5);
			append(section, p1);
			append(p1, t6);
			append(p1, code);
			append(code, t7);
			append(p1, t8);
			append(p1, a1);
			append(a1, t9);
			append(p1, t10);
			append(section, t11);
			append(section, div);
			mount_component(samplecode, div, null);
			append(section, t12);
			mount_component(demo, section, null);
			insert(target, t13, anchor);
			mount_component(examples, target, anchor);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			samplecode.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section);
			}

			samplecode.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t13);
			}

			examples.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation â€¢ Enabling submit button only when all fields are valid";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, r as noop } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';

/* src/routes/guide/examples/requiring-all-options-to-be-selected/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/requiring-all-options-to-be-selected/index.svelte";

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section, p, t2, a, t3, t4, t5, div, t6, t7, current;

	var samplecode = new SampleCode({
		props: { lang: "html", code: `
<form id="demoForm" method="POST">
    <input class="mr2" type="checkbox" name="agreements[]" value="terms" /> I have read and agree to the Terms
    <input class="mr2" type="checkbox" name="agreements[]" value="privacy-policy" />  I accept the Privacy Policy
    ...
</form>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(document.getElementById('demoForm'), {
        fields: {
            'agreements[]': {
                validators: {
                    choice: {
                        min: 2,
                        max: 2,
                        message: 'Please check all agreements to continue'
                    }
                }
            },
        },
        plugins: {
            ...
        },
    });
});    
</script-tag>
` },
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/examples/requiring-all-options-to-be-selected",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['choice'] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Requiring all options to be selected");
			t1 = space();
			section = element("section");
			p = element("p");
			t2 = text("This example uses the ");
			a = element("a");
			t3 = text("choice");
			t4 = text(" validator to ask user to accept all the terms and conditions in order to continue.");
			t5 = space();
			div = element("div");
			samplecode.$$.fragment.c();
			t6 = space();
			demo.$$.fragment.c();
			t7 = space();
			relatedvalidators.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Requiring all options to be selected");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    \n    ");

			section = claim_element(nodes, "SECTION", { class: true }, false);
			var section_nodes = children(section);

			p = claim_element(section_nodes, "P", { class: true }, false);
			var p_nodes = children(p);

			t2 = claim_text(p_nodes, "This example uses the ");

			a = claim_element(p_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t3 = claim_text(a_nodes, "choice");
			a_nodes.forEach(detach);
			t4 = claim_text(p_nodes, " validator to ask user to accept all the terms and conditions in order to continue.");
			p_nodes.forEach(detach);
			t5 = claim_text(section_nodes, "\n        ");

			div = claim_element(section_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			samplecode.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			t6 = claim_text(section_nodes, "\n\n        ");
			demo.$$.fragment.l(section_nodes);
			section_nodes.forEach(detach);
			t7 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 118);
			a.href = "/guide/validators/choice";
			a.className = "blue dim link";
			add_location(a, file, 8, 49, 263);
			p.className = "lh-copy";
			add_location(p, file, 8, 8, 222);
			div.className = "mb4";
			add_location(div, file, 9, 8, 426);
			section.className = "mv5";
			add_location(section, file, 7, 4, 192);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section, anchor);
			append(section, p);
			append(p, t2);
			append(p, a);
			append(a, t3);
			append(p, t4);
			append(section, t5);
			append(section, div);
			mount_component(samplecode, div, null);
			append(section, t6);
			mount_component(demo, section, null);
			insert(target, t7, anchor);
			mount_component(relatedvalidators, target, anchor);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			samplecode.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section);
			}

			samplecode.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t7);
			}

			relatedvalidators.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation â€¢ Requiring all options to be selected";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

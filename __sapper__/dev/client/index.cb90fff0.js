import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';

/* src/routes/guide/examples/creating-a-custom-validator/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/creating-a-custom-validator/index.svelte";

// (9:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Writing new validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Writing new validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (96:8) <Tip>
function create_default_slot_5(ctx) {
	var t0, code, t1, t2;

	return {
		c: function create() {
			t0 = text("To see how built-in validators are developed, you can look at their sources located inside the ");
			code = element("code");
			t1 = text("src/js/validators");
			t2 = text(" folder");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "To see how built-in validators are developed, you can look at their sources located inside the ");

			code = claim_element(nodes, "CODE", {}, false);
			var code_nodes = children(code);

			t1 = claim_text(code_nodes, "src/js/validators");
			code_nodes.forEach(detach);
			t2 = claim_text(nodes, " folder");
			this.h();
		},

		h: function hydrate() {
			add_location(code, file, 95, 108, 3169);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, code, anchor);
			append(code, t1);
			insert(target, t2, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(code);
				detach(t2);
			}
		}
	};
}

// (100:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Registering custom validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Registering custom validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (169:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Adding custom message");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Adding custom message");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (249:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Adding meta data");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Adding meta data");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (377:8) <Tip>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Try to enter simple passwords such as 123456, abcdef, abc123 to see how they are treated");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Try to enter simple passwords such as 123456, abcdef, abc123 to see how they are treated");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section0, t2, p0, t3, t4, t5, p1, t6, t7, ul, li0, t8, t9, li1, t10, t11, li2, t12, t13, li3, t14, t15, p2, t16, t17, t18, t19, section1, t20, p3, t21, t22, h30, t23, code0, t24, t25, t26, t27, p4, t28, code1, t29, t30, code2, t31, t32, t33, p5, t34, code3, t35, t36, a0, t37, t38, t39, t40, h31, t41, a1, t42, t43, t44, p6, t45, code4, t46, t47, t48, t49, section2, t50, p7, t51, code5, t52, t53, code6, t54, t55, t56, p8, t57, t58, t59, p9, t60, t61, t62, p10, t63, t64, t65, section3, t66, p11, t67, t68, p12, t69, a2, t70, t71, t72, p13, t73, a3, t74, t75, t76, p14, t77, a4, t78, t79, t80, t81, p15, code7, t82, t83, t84, table, tr0, th0, t85, t86, th1, t87, t88, tr1, td0, t89, t90, td1, t91, t92, tr2, td2, t93, t94, td3, t95, t96, tr3, td4, t97, t98, td5, t99, t100, tr4, td6, t101, t102, td7, t103, t104, tr5, td8, t105, t106, td9, t107, t108, p16, t109, t110, t111, p17, t112, t113, p18, t114, a5, t115, t116, t117, t118, p19, t119, a6, t120, t121, t122, t123, p20, t124, t125, t126, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
const customValidator = function() {
    return {
        validate: function(input) {
            // input.element presents the field element
            // input.elements presents all field elements
            // input.field is the field name
            // input.value is the field value
            // input.options is the validator options

            // Has to return an object
            return {
                // Required property
                // valid: true indicates that the field passes your custom validator
                // valid: false, otherwise.
                valid: ...,
                
                // Optional: include a custom error message
                message: ...,

                // Optional: include a meta data that can be used by the library later
                meta: {
                    key: value,
                    ...
                },
            };
        },
    };
};
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
const strongPassword = function() {
    return {
        validate: function(input) {
            const value = input.value;
            if (value === '') {
                return {
                    valid: true,
                };
            }

            // Check the password strength
            if (value.length < 8) {
                return {
                    valid: false,
                };
            }

            // The password does not contain any uppercase character
            if (value === value.toLowerCase()) {
                return {
                    valid: false,
                };
            }

            // The password does not contain any uppercase character
            if (value === value.toUpperCase()) {
                return {
                    valid: false,
                };
            }

            // The password does not contain any digit
            if (value.search(/[0-9]/) < 0) {
                return {
                    valid: false,
                };
            }

            return {
                valid: true,
            };
        },
    };
};
` },
		$$inline: true
	});

	var tip0 = new Tip({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "javascript", code: `
const strongPassword = function() {
    ...
};

// Register the validator
FormValidation.validators.checkPassword = strongPassword;

// Use new validator
FormValidation.formValidation(
    document.getElementById('demoForm'),
    {
        fields: {
            pwd: {
                validators: {
                    notEmpty: {
                        message: 'The password is required and cannot be empty'
                    },
                    // checkPassword is name of new validator
                    checkPassword: {
                        message: 'The password is too weak'
                    },
                }
            }
        },
    }
);
` },
		$$inline: true
	});

	var demo0 = new Demo({
		props: {
		prefix: "/guide/examples/creating-a-custom-validator/validators-namespace",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var samplecode3 = new SampleCode({
		props: { lang: "javascript", code: `
const strongPassword = function() {
    ...
};

// Use new validator
FormValidation
    .formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                pwd: {
                    validators: {
                        notEmpty: {
                            message: 'The password is required and cannot be empty'
                        },
                        // checkPassword is name of new validator
                        checkPassword: {
                            message: 'The password is too weak'
                        },
                    }
                }
            },
        }
    )
    // Register the validator
    .registerValidator('checkPassword', strongPassword);
` },
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode4 = new SampleCode({
		props: { lang: "javascript", code: `
const customValidator = function() {
    return {
        validate: function(input) {
            // ... Do your logic checking
            if (...) {
                return {
                    valid: true,    // or false
                    message: 'The error message',
                };
            }

            return {
                valid: false,       // or true
                message: 'Other error message',
            };
        },
    };
};
` },
		$$inline: true
	});

	var samplecode5 = new SampleCode({
		props: { lang: "javascript", code: `
const strongPassword = function() {
    return {
        validate: function(input) {
            const value = input.value;
            if (value === '') {
                return {
                    valid: true,
                };
            }

            // Check the password strength
            if (value.length < 8) {
                return {
                    valid: false,
                    message: 'The password must be more than 8 characters long',
                };
            }

            // The password does not contain any uppercase character
            if (value === value.toLowerCase()) {
                return {
                    valid: false,
                    message: 'The password must contain at least one upper case character',
                };
            }

            // The password does not contain any uppercase character
            if (value === value.toUpperCase()) {
                return {
                    valid: false,
                    message: 'The password must contain at least one lower case character',
                };
            }

            // The password does not contain any digit
            if (value.search(/[0-9]/) < 0) {
                return {
                    valid: false,
                    message: 'The password must contain at least one digit',
                };
            }

            return {
                valid: true,
            };
        },
    };
};
` },
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/examples/creating-a-custom-validator/dynamic-message",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode6 = new SampleCode({
		props: { lang: "javascript", code: `
const result = zxcvbn(password);

// The password strength score. See the following table for available values
result.score

// Explain why the password is weak. "This is a top-10 common password", for example
result.feedback.warning
` },
		$$inline: true
	});

	var samplecode7 = new SampleCode({
		props: {
		lang: "javascript",
		code: `
const strongPassword = function() {
    return {
        validate: function(input) {
            // input.value is the field value
            // input.options are the validator options

            const value = input.value;
            if (value === '') {
                return {
                    valid: true,
                };
            }

            const result = zxcvbn(value);
            const score = result.score;
            const message = result.feedback.warning || 'The password is weak';

            // By default, the password is treat as invalid if the score is smaller than 3
            // We allow user to change this number via options.minimalScore
            const minimalScore = input.options && input.options.minimalScore
                                ? input.options.minimalScore
                                : 3;

            if (score < minimalScore) {
                return {
                    valid: false,
                    // Yeah, this will be set as error message
                    message: message,
                    meta: {
                        // This meta data will be used later
                        score: score,
                    },
                }
            }
        },
    };
};
`
	},
		$$inline: true
	});

	var samplecode8 = new SampleCode({
		props: { lang: "html", code: `
<input type="password" class="form-control" name="pwd" autocomplete="off" />
                    
<!-- The progress bar is hidden initially -->
<div class="progress mt-2" id="progressBar" style="opacity: 0;">
    <div class="progress-bar progress-bar-striped progress-bar-animate" style="width: 100%"></div>
</div>
` },
		$$inline: true
	});

	var samplecode9 = new SampleCode({
		props: {
		lang: "javascript",
		code: `
FormValidation
    .formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                ...
            },
        }
    )
    .registerValidator('checkPassword', strongPassword)
    .on('core.validator.validated', function(e) {
        if (e.field === 'pwd' && e.validator === 'checkPassword') {
            const progressBar = document.getElementById('progressBar');

            if (e.result.meta) {
                // Get the score which is a number between 0 and 4
                const score = e.result.meta.score;
                
                // Update the width of progress bar
                const width = (score === 0) ? '1%' : score * 25 + '%';
                progressBar.style.opacity = 1;
                progressBar.style.width = width;
            } else {
                progressBar.style.opacity = 0;
                progressBar.style.width = '0%';
            }
        }
    });
`
	},
		$$inline: true
	});

	var tip1 = new Tip({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo2 = new Demo({
		props: {
		prefix: "/guide/examples/creating-a-custom-validator/meta-data",
		frameworks: ['bootstrap']
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Creating a custom validator");
			t1 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t2 = space();
			p0 = element("p");
			t3 = text("A validator has to follow the syntax:");
			t4 = space();
			samplecode0.$$.fragment.c();
			t5 = space();
			p1 = element("p");
			t6 = text("The following example illustrates how to develop a simple validator which validates a password. The validator will treat a password as valid, if it satisfies all the conditions below:");
			t7 = space();
			ul = element("ul");
			li0 = element("li");
			t8 = text("Must be more than 8 characters long");
			t9 = space();
			li1 = element("li");
			t10 = text("Must contain at least one upper case character");
			t11 = space();
			li2 = element("li");
			t12 = text("Must contain at least one lower case character");
			t13 = space();
			li3 = element("li");
			t14 = text("Must contain at least one digit");
			t15 = space();
			p2 = element("p");
			t16 = text("In fact, you can add more conditions to make a secure password.");
			t17 = space();
			samplecode1.$$.fragment.c();
			t18 = space();
			tip0.$$.fragment.c();
			t19 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t20 = space();
			p3 = element("p");
			t21 = text("There are two ways to reuse a custom validator.");
			t22 = space();
			h30 = element("h3");
			t23 = text("Adding to ");
			code0 = element("code");
			t24 = text("FormValidation.validators");
			t25 = text(" namespace");
			t26 = space();
			samplecode2.$$.fragment.c();
			t27 = space();
			p4 = element("p");
			t28 = text("We register a new validator named ");
			code1 = element("code");
			t29 = text("checkPassword");
			t30 = text(" which is implemented by the ");
			code2 = element("code");
			t31 = text("strongPassword");
			t32 = text(" function.");
			t33 = space();
			p5 = element("p");
			t34 = text("Since the validators are distinct by the names, the new validator name (");
			code3 = element("code");
			t35 = text("checkPassword");
			t36 = text(", in the example above) has to be different with ");
			a0 = element("a");
			t37 = text("built-in validators");
			t38 = text(".");
			t39 = space();
			demo0.$$.fragment.c();
			t40 = space();
			h31 = element("h3");
			t41 = text("Using the ");
			a1 = element("a");
			t42 = text("registerValidator()");
			t43 = text(" method");
			t44 = space();
			p6 = element("p");
			t45 = text("This approach should be used when the ");
			code4 = element("code");
			t46 = text("FormValidation");
			t47 = text(" namespace doesn't exist. For example, when the library is used with ES6 module.");
			t48 = space();
			samplecode3.$$.fragment.c();
			t49 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t50 = space();
			p7 = element("p");
			t51 = text("Basically, the custom validator above works fine. It returns ");
			code5 = element("code");
			t52 = text("false");
			t53 = text(" if the password doesn't satisfy any of conditions we define. The limitation here is that the user don't know\n            which condition the password doesn't pass. It informs the same ");
			code6 = element("code");
			t54 = text("The password is too weak");
			t55 = text(" message all the times.");
			t56 = space();
			p8 = element("p");
			t57 = text("To improve that, we can set a dynamic error message in custom validator:");
			t58 = space();
			samplecode4.$$.fragment.c();
			t59 = space();
			p9 = element("p");
			t60 = text("Our password checker now indicates the reason for a weak password:");
			t61 = space();
			samplecode5.$$.fragment.c();
			t62 = space();
			p10 = element("p");
			t63 = text("Now, the form shows exactly condition that we want the password to satisfy.");
			t64 = space();
			demo1.$$.fragment.c();
			t65 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t66 = space();
			p11 = element("p");
			t67 = text("The rules used in example above are too simple and can't cover most popular cases of weak password. For example, it doesn't check the simple password such as 123456, abcdef, .etc.");
			t68 = space();
			p12 = element("p");
			t69 = text("In this section, we will use the awesome Dropbox's ");
			a2 = element("a");
			t70 = text("zxcvbn");
			t71 = text(" library to\n            build a password strength meter.");
			t72 = space();
			p13 = element("p");
			t73 = text("For anyone who haven't known about zxcvbn library, it's a password strength estimator inspired by password crackers developed by Dropbox. \n            It can recognize and weighs 30k common passwords. For more information about this library, you can refer to ");
			a3 = element("a");
			t74 = text("its official page");
			t75 = text(".");
			t76 = space();
			p14 = element("p");
			t77 = text("It's quite easy to ");
			a4 = element("a");
			t78 = text("use it");
			t79 = text(" to see how strong a given password is:");
			t80 = space();
			samplecode6.$$.fragment.c();
			t81 = space();
			p15 = element("p");
			code7 = element("code");
			t82 = text("score");
			t83 = text(" is an integer number between 0 and 4 that indicates the strength level:");
			t84 = space();
			table = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t85 = text("Score");
			t86 = space();
			th1 = element("th");
			t87 = text("Description");
			t88 = space();
			tr1 = element("tr");
			td0 = element("td");
			t89 = text("0");
			t90 = space();
			td1 = element("td");
			t91 = text("Too guessable: risky password");
			t92 = space();
			tr2 = element("tr");
			td2 = element("td");
			t93 = text("1");
			t94 = space();
			td3 = element("td");
			t95 = text("Very guessable: protection from throttled online attacks");
			t96 = space();
			tr3 = element("tr");
			td4 = element("td");
			t97 = text("2");
			t98 = space();
			td5 = element("td");
			t99 = text("Somewhat guessable: protection from unthrottled online attacks");
			t100 = space();
			tr4 = element("tr");
			td6 = element("td");
			t101 = text("3");
			t102 = space();
			td7 = element("td");
			t103 = text("Safely unguessable: moderate protection from offline slow-hash scenario");
			t104 = space();
			tr5 = element("tr");
			td8 = element("td");
			t105 = text("4");
			t106 = space();
			td9 = element("td");
			t107 = text("Very unguessable: strong protection from offline slow-hash scenario");
			t108 = space();
			p16 = element("p");
			t109 = text("Our custom validator will use zxcvbn and include score in its validation result:");
			t110 = space();
			samplecode7.$$.fragment.c();
			t111 = space();
			p17 = element("p");
			t112 = text("Next, we will use the score which is inclued the meta data of validation result to show up a password strength meter.");
			t113 = space();
			p18 = element("p");
			t114 = text("Bootstrap's ");
			a5 = element("a");
			t115 = text("progress");
			t116 = text(" is used to simply demo the functionality.");
			t117 = space();
			samplecode8.$$.fragment.c();
			t118 = space();
			p19 = element("p");
			t119 = text("We handle the ");
			a6 = element("a");
			t120 = text("core.validator.validated");
			t121 = text(" event to update the progress bar:");
			t122 = space();
			samplecode9.$$.fragment.c();
			t123 = space();
			p20 = element("p");
			t124 = text("Lastly, for a full working demonstration, you can play with the following form:");
			t125 = space();
			tip1.$$.fragment.c();
			t126 = space();
			demo2.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Creating a custom validator");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    \n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t2 = claim_text(section0_nodes, "\n\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t3 = claim_text(p0_nodes, "A validator has to follow the syntax:");
			p0_nodes.forEach(detach);
			t4 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t5 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t6 = claim_text(p1_nodes, "The following example illustrates how to develop a simple validator which validates a password. The validator will treat a password as valid, if it satisfies all the conditions below:");
			p1_nodes.forEach(detach);
			t7 = claim_text(section0_nodes, "\n        ");

			ul = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t8 = claim_text(li0_nodes, "Must be more than 8 characters long");
			li0_nodes.forEach(detach);
			t9 = claim_text(ul_nodes, "\n            ");

			li1 = claim_element(ul_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t10 = claim_text(li1_nodes, "Must contain at least one upper case character");
			li1_nodes.forEach(detach);
			t11 = claim_text(ul_nodes, "\n            ");

			li2 = claim_element(ul_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t12 = claim_text(li2_nodes, "Must contain at least one lower case character");
			li2_nodes.forEach(detach);
			t13 = claim_text(ul_nodes, "\n            ");

			li3 = claim_element(ul_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t14 = claim_text(li3_nodes, "Must contain at least one digit");
			li3_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			t15 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t16 = claim_text(p2_nodes, "In fact, you can add more conditions to make a secure password.");
			p2_nodes.forEach(detach);
			t17 = claim_text(section0_nodes, "\n");
			samplecode1.$$.fragment.l(section0_nodes);
			t18 = claim_text(section0_nodes, "\n        ");
			tip0.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t19 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t20 = claim_text(section1_nodes, "\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t21 = claim_text(p3_nodes, "There are two ways to reuse a custom validator.");
			p3_nodes.forEach(detach);
			t22 = claim_text(section1_nodes, "\n\n        ");

			h30 = claim_element(section1_nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t23 = claim_text(h30_nodes, "Adding to ");

			code0 = claim_element(h30_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t24 = claim_text(code0_nodes, "FormValidation.validators");
			code0_nodes.forEach(detach);
			t25 = claim_text(h30_nodes, " namespace");
			h30_nodes.forEach(detach);
			t26 = claim_text(section1_nodes, "\n");
			samplecode2.$$.fragment.l(section1_nodes);
			t27 = claim_text(section1_nodes, "\n        ");

			p4 = claim_element(section1_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t28 = claim_text(p4_nodes, "We register a new validator named ");

			code1 = claim_element(p4_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t29 = claim_text(code1_nodes, "checkPassword");
			code1_nodes.forEach(detach);
			t30 = claim_text(p4_nodes, " which is implemented by the ");

			code2 = claim_element(p4_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t31 = claim_text(code2_nodes, "strongPassword");
			code2_nodes.forEach(detach);
			t32 = claim_text(p4_nodes, " function.");
			p4_nodes.forEach(detach);
			t33 = claim_text(section1_nodes, "\n        ");

			p5 = claim_element(section1_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t34 = claim_text(p5_nodes, "Since the validators are distinct by the names, the new validator name (");

			code3 = claim_element(p5_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t35 = claim_text(code3_nodes, "checkPassword");
			code3_nodes.forEach(detach);
			t36 = claim_text(p5_nodes, ", in the example above) has to be different with ");

			a0 = claim_element(p5_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t37 = claim_text(a0_nodes, "built-in validators");
			a0_nodes.forEach(detach);
			t38 = claim_text(p5_nodes, ".");
			p5_nodes.forEach(detach);
			t39 = claim_text(section1_nodes, "\n        ");
			demo0.$$.fragment.l(section1_nodes);
			t40 = claim_text(section1_nodes, "\n\n        ");

			h31 = claim_element(section1_nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t41 = claim_text(h31_nodes, "Using the ");

			a1 = claim_element(h31_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t42 = claim_text(a1_nodes, "registerValidator()");
			a1_nodes.forEach(detach);
			t43 = claim_text(h31_nodes, " method");
			h31_nodes.forEach(detach);
			t44 = claim_text(section1_nodes, "\n        ");

			p6 = claim_element(section1_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t45 = claim_text(p6_nodes, "This approach should be used when the ");

			code4 = claim_element(p6_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t46 = claim_text(code4_nodes, "FormValidation");
			code4_nodes.forEach(detach);
			t47 = claim_text(p6_nodes, " namespace doesn't exist. For example, when the library is used with ES6 module.");
			p6_nodes.forEach(detach);
			t48 = claim_text(section1_nodes, "\n");
			samplecode3.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t49 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t50 = claim_text(section2_nodes, "\n        ");

			p7 = claim_element(section2_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t51 = claim_text(p7_nodes, "Basically, the custom validator above works fine. It returns ");

			code5 = claim_element(p7_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t52 = claim_text(code5_nodes, "false");
			code5_nodes.forEach(detach);
			t53 = claim_text(p7_nodes, " if the password doesn't satisfy any of conditions we define. The limitation here is that the user don't know\n            which condition the password doesn't pass. It informs the same ");

			code6 = claim_element(p7_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t54 = claim_text(code6_nodes, "The password is too weak");
			code6_nodes.forEach(detach);
			t55 = claim_text(p7_nodes, " message all the times.");
			p7_nodes.forEach(detach);
			t56 = claim_text(section2_nodes, "\n        ");

			p8 = claim_element(section2_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t57 = claim_text(p8_nodes, "To improve that, we can set a dynamic error message in custom validator:");
			p8_nodes.forEach(detach);
			t58 = claim_text(section2_nodes, "\n");
			samplecode4.$$.fragment.l(section2_nodes);
			t59 = claim_text(section2_nodes, "\n        ");

			p9 = claim_element(section2_nodes, "P", { class: true }, false);
			var p9_nodes = children(p9);

			t60 = claim_text(p9_nodes, "Our password checker now indicates the reason for a weak password:");
			p9_nodes.forEach(detach);
			t61 = claim_text(section2_nodes, "\n");
			samplecode5.$$.fragment.l(section2_nodes);
			t62 = claim_text(section2_nodes, "\n        ");

			p10 = claim_element(section2_nodes, "P", { class: true }, false);
			var p10_nodes = children(p10);

			t63 = claim_text(p10_nodes, "Now, the form shows exactly condition that we want the password to satisfy.");
			p10_nodes.forEach(detach);
			t64 = claim_text(section2_nodes, "\n        ");
			demo1.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t65 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t66 = claim_text(section3_nodes, "\n        ");

			p11 = claim_element(section3_nodes, "P", { class: true }, false);
			var p11_nodes = children(p11);

			t67 = claim_text(p11_nodes, "The rules used in example above are too simple and can't cover most popular cases of weak password. For example, it doesn't check the simple password such as 123456, abcdef, .etc.");
			p11_nodes.forEach(detach);
			t68 = claim_text(section3_nodes, "\n        ");

			p12 = claim_element(section3_nodes, "P", { class: true }, false);
			var p12_nodes = children(p12);

			t69 = claim_text(p12_nodes, "In this section, we will use the awesome Dropbox's ");

			a2 = claim_element(p12_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t70 = claim_text(a2_nodes, "zxcvbn");
			a2_nodes.forEach(detach);
			t71 = claim_text(p12_nodes, " library to\n            build a password strength meter.");
			p12_nodes.forEach(detach);
			t72 = claim_text(section3_nodes, "\n        ");

			p13 = claim_element(section3_nodes, "P", { class: true }, false);
			var p13_nodes = children(p13);

			t73 = claim_text(p13_nodes, "For anyone who haven't known about zxcvbn library, it's a password strength estimator inspired by password crackers developed by Dropbox. \n            It can recognize and weighs 30k common passwords. For more information about this library, you can refer to ");

			a3 = claim_element(p13_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t74 = claim_text(a3_nodes, "its official page");
			a3_nodes.forEach(detach);
			t75 = claim_text(p13_nodes, ".");
			p13_nodes.forEach(detach);
			t76 = claim_text(section3_nodes, "\n        ");

			p14 = claim_element(section3_nodes, "P", { class: true }, false);
			var p14_nodes = children(p14);

			t77 = claim_text(p14_nodes, "It's quite easy to ");

			a4 = claim_element(p14_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t78 = claim_text(a4_nodes, "use it");
			a4_nodes.forEach(detach);
			t79 = claim_text(p14_nodes, " to see how strong a given password is:");
			p14_nodes.forEach(detach);
			t80 = claim_text(section3_nodes, "\n");
			samplecode6.$$.fragment.l(section3_nodes);
			t81 = claim_text(section3_nodes, "\n        ");

			p15 = claim_element(section3_nodes, "P", { class: true }, false);
			var p15_nodes = children(p15);

			code7 = claim_element(p15_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t82 = claim_text(code7_nodes, "score");
			code7_nodes.forEach(detach);
			t83 = claim_text(p15_nodes, " is an integer number between 0 and 4 that indicates the strength level:");
			p15_nodes.forEach(detach);
			t84 = claim_text(section3_nodes, "\n        ");

			table = claim_element(section3_nodes, "TABLE", { class: true }, false);
			var table_nodes = children(table);

			tr0 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t85 = claim_text(th0_nodes, "Score");
			th0_nodes.forEach(detach);
			t86 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t87 = claim_text(th1_nodes, "Description");
			th1_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t88 = claim_text(table_nodes, "\n            ");

			tr1 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			t89 = claim_text(td0_nodes, "0");
			td0_nodes.forEach(detach);
			t90 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			t91 = claim_text(td1_nodes, "Too guessable: risky password");
			td1_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t92 = claim_text(table_nodes, "\n            ");

			tr2 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td2 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t93 = claim_text(td2_nodes, "1");
			td2_nodes.forEach(detach);
			t94 = claim_text(tr2_nodes, "\n                ");

			td3 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			t95 = claim_text(td3_nodes, "Very guessable: protection from throttled online attacks");
			td3_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t96 = claim_text(table_nodes, "\n            ");

			tr3 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td4 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			t97 = claim_text(td4_nodes, "2");
			td4_nodes.forEach(detach);
			t98 = claim_text(tr3_nodes, "\n                ");

			td5 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			t99 = claim_text(td5_nodes, "Somewhat guessable: protection from unthrottled online attacks");
			td5_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			t100 = claim_text(table_nodes, "\n            ");

			tr4 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			td6 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			t101 = claim_text(td6_nodes, "3");
			td6_nodes.forEach(detach);
			t102 = claim_text(tr4_nodes, "\n                ");

			td7 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			t103 = claim_text(td7_nodes, "Safely unguessable: moderate protection from offline slow-hash scenario");
			td7_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			t104 = claim_text(table_nodes, "\n            ");

			tr5 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr5_nodes = children(tr5);

			td8 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			t105 = claim_text(td8_nodes, "4");
			td8_nodes.forEach(detach);
			t106 = claim_text(tr5_nodes, "\n                ");

			td9 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			t107 = claim_text(td9_nodes, "Very unguessable: strong protection from offline slow-hash scenario");
			td9_nodes.forEach(detach);
			tr5_nodes.forEach(detach);
			table_nodes.forEach(detach);
			t108 = claim_text(section3_nodes, "\n        ");

			p16 = claim_element(section3_nodes, "P", { class: true }, false);
			var p16_nodes = children(p16);

			t109 = claim_text(p16_nodes, "Our custom validator will use zxcvbn and include score in its validation result:");
			p16_nodes.forEach(detach);
			t110 = claim_text(section3_nodes, "\n");
			samplecode7.$$.fragment.l(section3_nodes);
			t111 = claim_text(section3_nodes, "\n        ");

			p17 = claim_element(section3_nodes, "P", { class: true }, false);
			var p17_nodes = children(p17);

			t112 = claim_text(p17_nodes, "Next, we will use the score which is inclued the meta data of validation result to show up a password strength meter.");
			p17_nodes.forEach(detach);
			t113 = claim_text(section3_nodes, "\n        ");

			p18 = claim_element(section3_nodes, "P", { class: true }, false);
			var p18_nodes = children(p18);

			t114 = claim_text(p18_nodes, "Bootstrap's ");

			a5 = claim_element(p18_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t115 = claim_text(a5_nodes, "progress");
			a5_nodes.forEach(detach);
			t116 = claim_text(p18_nodes, " is used to simply demo the functionality.");
			p18_nodes.forEach(detach);
			t117 = claim_text(section3_nodes, "\n");
			samplecode8.$$.fragment.l(section3_nodes);
			t118 = claim_text(section3_nodes, "\n        ");

			p19 = claim_element(section3_nodes, "P", { class: true }, false);
			var p19_nodes = children(p19);

			t119 = claim_text(p19_nodes, "We handle the ");

			a6 = claim_element(p19_nodes, "A", { href: true, class: true }, false);
			var a6_nodes = children(a6);

			t120 = claim_text(a6_nodes, "core.validator.validated");
			a6_nodes.forEach(detach);
			t121 = claim_text(p19_nodes, " event to update the progress bar:");
			p19_nodes.forEach(detach);
			t122 = claim_text(section3_nodes, "\n");
			samplecode9.$$.fragment.l(section3_nodes);
			t123 = claim_text(section3_nodes, "\n        ");

			p20 = claim_element(section3_nodes, "P", { class: true }, false);
			var p20_nodes = children(p20);

			t124 = claim_text(p20_nodes, "Lastly, for a full working demonstration, you can play with the following form:");
			p20_nodes.forEach(detach);
			t125 = claim_text(section3_nodes, "\n        ");
			tip1.$$.fragment.l(section3_nodes);
			t126 = claim_text(section3_nodes, "\n        ");
			demo2.$$.fragment.l(section3_nodes);
			section3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 109);
			p0.className = "lh-copy";
			add_location(p0, file, 10, 8, 254);
			p1.className = "lh-copy";
			add_location(p1, file, 41, 8, 1297);
			add_location(li0, file, 43, 12, 1553);
			add_location(li1, file, 44, 12, 1610);
			add_location(li2, file, 45, 12, 1678);
			add_location(li3, file, 46, 12, 1746);
			ul.className = "ma0 pl3 lh-copy";
			add_location(ul, file, 42, 8, 1512);
			p2.className = "lh-copy";
			add_location(p2, file, 48, 8, 1809);
			section0.className = "mv5";
			add_location(section0, file, 7, 4, 174);
			p3.className = "lh-copy";
			add_location(p3, file, 100, 8, 3319);
			add_location(code0, file, 102, 22, 3413);
			add_location(h30, file, 102, 8, 3399);
			add_location(code1, file, 131, 61, 4240);
			add_location(code2, file, 131, 116, 4295);
			p4.className = "lh-copy";
			add_location(p4, file, 131, 8, 4187);
			add_location(code3, file, 132, 99, 4436);
			a0.href = "/guide/validators";
			a0.className = "blue dim link";
			add_location(a0, file, 132, 174, 4511);
			p5.className = "lh-copy";
			add_location(p5, file, 132, 8, 4345);
			a1.href = "/guide/api/register-validator";
			a1.className = "blue dim link";
			add_location(a1, file, 135, 22, 4730);
			add_location(h31, file, 135, 8, 4716);
			add_location(code4, file, 136, 65, 4893);
			p6.className = "lh-copy";
			add_location(p6, file, 136, 8, 4836);
			section1.className = "mv5";
			add_location(section1, file, 98, 4, 3233);
			add_location(code5, file, 169, 88, 5970);
			add_location(code6, file, 170, 75, 6173);
			p7.className = "lh-copy";
			add_location(p7, file, 169, 8, 5890);
			p8.className = "lh-copy";
			add_location(p8, file, 171, 8, 6246);
			p9.className = "lh-copy";
			add_location(p9, file, 192, 8, 6854);
			p10.className = "lh-copy";
			add_location(p10, file, 243, 8, 8459);
			section2.className = "mv5";
			add_location(section2, file, 167, 4, 5811);
			p11.className = "lh-copy";
			add_location(p11, file, 249, 8, 8764);
			a2.href = "https://github.com/dropbox/zxcvbn";
			a2.className = "blue dim link";
			add_location(a2, file, 250, 78, 9045);
			p12.className = "lh-copy";
			add_location(p12, file, 250, 8, 8975);
			a3.href = "https://github.com/dropbox/zxcvbn";
			a3.className = "blue dim link";
			add_location(a3, file, 253, 120, 9468);
			p13.className = "lh-copy";
			add_location(p13, file, 252, 8, 9190);
			a4.href = "https://github.com/dropbox/zxcvbn#usage";
			a4.className = "blue dim link";
			add_location(a4, file, 254, 46, 9607);
			p14.className = "lh-copy";
			add_location(p14, file, 254, 8, 9569);
			add_location(code7, file, 264, 27, 10038);
			p15.className = "lh-copy";
			add_location(p15, file, 264, 8, 10019);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 267, 16, 10260);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 268, 16, 10321);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 266, 12, 10211);
			td0.className = "pv2 ph3";
			add_location(td0, file, 271, 16, 10451);
			td1.className = "pv2 ph3";
			add_location(td1, file, 272, 16, 10494);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 270, 12, 10402);
			td2.className = "pv2 ph3";
			add_location(td2, file, 275, 16, 10628);
			td3.className = "pv2 ph3";
			add_location(td3, file, 276, 16, 10671);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 274, 12, 10579);
			td4.className = "pv2 ph3";
			add_location(td4, file, 279, 16, 10832);
			td5.className = "pv2 ph3";
			add_location(td5, file, 280, 16, 10875);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 278, 12, 10783);
			td6.className = "pv2 ph3";
			add_location(td6, file, 283, 16, 11042);
			td7.className = "pv2 ph3";
			add_location(td7, file, 284, 16, 11085);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 282, 12, 10993);
			td8.className = "pv2 ph3";
			add_location(td8, file, 287, 16, 11261);
			td9.className = "pv2 ph3";
			add_location(td9, file, 288, 16, 11304);
			tr5.className = "striped--light-gray";
			add_location(tr5, file, 286, 12, 11212);
			table.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table, file, 265, 8, 10141);
			p16.className = "lh-copy";
			add_location(p16, file, 291, 8, 11440);
			p17.className = "lh-copy";
			add_location(p17, file, 331, 8, 12854);
			a5.href = "http://getbootstrap.com/docs/4.1/components/progress";
			a5.className = "blue dim link";
			add_location(a5, file, 332, 39, 13034);
			p18.className = "lh-copy";
			add_location(p18, file, 332, 8, 13003);
			a6.href = "/guide/events/core.validator.validated";
			a6.className = "blue dim link";
			add_location(a6, file, 341, 41, 13572);
			p19.className = "lh-copy";
			add_location(p19, file, 341, 8, 13539);
			p20.className = "lh-copy";
			add_location(p20, file, 375, 8, 14766);
			section3.className = "mv5";
			add_location(section3, file, 247, 4, 8690);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t2);
			append(section0, p0);
			append(p0, t3);
			append(section0, t4);
			mount_component(samplecode0, section0, null);
			append(section0, t5);
			append(section0, p1);
			append(p1, t6);
			append(section0, t7);
			append(section0, ul);
			append(ul, li0);
			append(li0, t8);
			append(ul, t9);
			append(ul, li1);
			append(li1, t10);
			append(ul, t11);
			append(ul, li2);
			append(li2, t12);
			append(ul, t13);
			append(ul, li3);
			append(li3, t14);
			append(section0, t15);
			append(section0, p2);
			append(p2, t16);
			append(section0, t17);
			mount_component(samplecode1, section0, null);
			append(section0, t18);
			mount_component(tip0, section0, null);
			insert(target, t19, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t20);
			append(section1, p3);
			append(p3, t21);
			append(section1, t22);
			append(section1, h30);
			append(h30, t23);
			append(h30, code0);
			append(code0, t24);
			append(h30, t25);
			append(section1, t26);
			mount_component(samplecode2, section1, null);
			append(section1, t27);
			append(section1, p4);
			append(p4, t28);
			append(p4, code1);
			append(code1, t29);
			append(p4, t30);
			append(p4, code2);
			append(code2, t31);
			append(p4, t32);
			append(section1, t33);
			append(section1, p5);
			append(p5, t34);
			append(p5, code3);
			append(code3, t35);
			append(p5, t36);
			append(p5, a0);
			append(a0, t37);
			append(p5, t38);
			append(section1, t39);
			mount_component(demo0, section1, null);
			append(section1, t40);
			append(section1, h31);
			append(h31, t41);
			append(h31, a1);
			append(a1, t42);
			append(h31, t43);
			append(section1, t44);
			append(section1, p6);
			append(p6, t45);
			append(p6, code4);
			append(code4, t46);
			append(p6, t47);
			append(section1, t48);
			mount_component(samplecode3, section1, null);
			insert(target, t49, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t50);
			append(section2, p7);
			append(p7, t51);
			append(p7, code5);
			append(code5, t52);
			append(p7, t53);
			append(p7, code6);
			append(code6, t54);
			append(p7, t55);
			append(section2, t56);
			append(section2, p8);
			append(p8, t57);
			append(section2, t58);
			mount_component(samplecode4, section2, null);
			append(section2, t59);
			append(section2, p9);
			append(p9, t60);
			append(section2, t61);
			mount_component(samplecode5, section2, null);
			append(section2, t62);
			append(section2, p10);
			append(p10, t63);
			append(section2, t64);
			mount_component(demo1, section2, null);
			insert(target, t65, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t66);
			append(section3, p11);
			append(p11, t67);
			append(section3, t68);
			append(section3, p12);
			append(p12, t69);
			append(p12, a2);
			append(a2, t70);
			append(p12, t71);
			append(section3, t72);
			append(section3, p13);
			append(p13, t73);
			append(p13, a3);
			append(a3, t74);
			append(p13, t75);
			append(section3, t76);
			append(section3, p14);
			append(p14, t77);
			append(p14, a4);
			append(a4, t78);
			append(p14, t79);
			append(section3, t80);
			mount_component(samplecode6, section3, null);
			append(section3, t81);
			append(section3, p15);
			append(p15, code7);
			append(code7, t82);
			append(p15, t83);
			append(section3, t84);
			append(section3, table);
			append(table, tr0);
			append(tr0, th0);
			append(th0, t85);
			append(tr0, t86);
			append(tr0, th1);
			append(th1, t87);
			append(table, t88);
			append(table, tr1);
			append(tr1, td0);
			append(td0, t89);
			append(tr1, t90);
			append(tr1, td1);
			append(td1, t91);
			append(table, t92);
			append(table, tr2);
			append(tr2, td2);
			append(td2, t93);
			append(tr2, t94);
			append(tr2, td3);
			append(td3, t95);
			append(table, t96);
			append(table, tr3);
			append(tr3, td4);
			append(td4, t97);
			append(tr3, t98);
			append(tr3, td5);
			append(td5, t99);
			append(table, t100);
			append(table, tr4);
			append(tr4, td6);
			append(td6, t101);
			append(tr4, t102);
			append(tr4, td7);
			append(td7, t103);
			append(table, t104);
			append(table, tr5);
			append(tr5, td8);
			append(td8, t105);
			append(tr5, t106);
			append(tr5, td9);
			append(td9, t107);
			append(section3, t108);
			append(section3, p16);
			append(p16, t109);
			append(section3, t110);
			mount_component(samplecode7, section3, null);
			append(section3, t111);
			append(section3, p17);
			append(p17, t112);
			append(section3, t113);
			append(section3, p18);
			append(p18, t114);
			append(p18, a5);
			append(a5, t115);
			append(p18, t116);
			append(section3, t117);
			mount_component(samplecode8, section3, null);
			append(section3, t118);
			append(section3, p19);
			append(p19, t119);
			append(p19, a6);
			append(a6, t120);
			append(p19, t121);
			append(section3, t122);
			mount_component(samplecode9, section3, null);
			append(section3, t123);
			append(section3, p20);
			append(p20, t124);
			append(section3, t125);
			mount_component(tip1, section3, null);
			append(section3, t126);
			mount_component(demo2, section3, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var tip0_changes = {};
			if (changed.$$scope) tip0_changes.$$scope = { changed, ctx };
			tip0.$set(tip0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var tip1_changes = {};
			if (changed.$$scope) tip1_changes.$$scope = { changed, ctx };
			tip1.$set(tip1_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			tip0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			demo0.$$.fragment.i(local);

			samplecode3.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			samplecode4.$$.fragment.i(local);

			samplecode5.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			samplecode6.$$.fragment.i(local);

			samplecode7.$$.fragment.i(local);

			samplecode8.$$.fragment.i(local);

			samplecode9.$$.fragment.i(local);

			tip1.$$.fragment.i(local);

			demo2.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			tip0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			demo0.$$.fragment.o(local);
			samplecode3.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			samplecode4.$$.fragment.o(local);
			samplecode5.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			samplecode6.$$.fragment.o(local);
			samplecode7.$$.fragment.o(local);
			samplecode8.$$.fragment.o(local);
			samplecode9.$$.fragment.o(local);
			tip1.$$.fragment.o(local);
			demo2.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			samplecode1.$destroy();

			tip0.$destroy();

			if (detaching) {
				detach(t19);
				detach(section1);
			}

			heading1.$destroy();

			samplecode2.$destroy();

			demo0.$destroy();

			samplecode3.$destroy();

			if (detaching) {
				detach(t49);
				detach(section2);
			}

			heading2.$destroy();

			samplecode4.$destroy();

			samplecode5.$destroy();

			demo1.$destroy();

			if (detaching) {
				detach(t65);
				detach(section3);
			}

			heading3.$destroy();

			samplecode6.$destroy();

			samplecode7.$destroy();

			samplecode8.$destroy();

			samplecode9.$destroy();

			tip1.$destroy();

			demo2.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Creating a custom validator";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

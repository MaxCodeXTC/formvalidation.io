import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';

/* src/routes/guide/api/revalidate-field/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/api/revalidate-field/index.svelte";

// (40:12) <PrevButton target="/guide/api/reset-form">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("resetForm() method");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "resetForm() method");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (41:12) <NextButton target="/guide/api/set-locale">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("setLocale() method");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "setLocale() method");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, div0, t4, p0, sup0, t5, t6, t7, ul, li, code, t8, t9, sup1, t10, t11, t12, p1, t13, t14, p2, t15, t16, t17, p3, t18, a, t19, t20, t21, t22, section1, div1, t23, current;

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `revalidateField(field: String): Promise` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
fv
    .revalidateField('userName')
    .then(function(status) {
        // status can be one of the following value
        // 'NotValidated' or FormValidation.Status.NotValidated: The field is not yet validated
        // 'Valid' or FormValidation.Status.Valid: The field is valid
        // 'Invalid' or FormValidation.Status.Invalid: The field is invalid
        ...
    });
` },
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Terms and conditions agreement validation',
        'Validating multiple inputs as one',
    ] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/api/reset-form",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/api/set-locale",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("revalidateField()");
			t1 = space();
			h2 = element("h2");
			t2 = text("Revalidate a particular field");
			t3 = space();
			section0 = element("section");
			div0 = element("div");
			samplecode0.$$.fragment.c();
			t4 = space();
			p0 = element("p");
			sup0 = element("sup");
			t5 = text("*");
			t6 = text(" presents a required parameter");
			t7 = space();
			ul = element("ul");
			li = element("li");
			code = element("code");
			t8 = text("field");
			t9 = space();
			sup1 = element("sup");
			t10 = text("*");
			t11 = text(" — The field name");
			t12 = space();
			p1 = element("p");
			t13 = text("This method is useful when the field value is effected by third parties (for example, attach another UI library to the field).");
			t14 = space();
			p2 = element("p");
			t15 = text("Since there isn't an automatic way for FormValidation to know when the field value is modified in those cases, we need to revalidate the field manually.");
			t16 = space();
			samplecode1.$$.fragment.c();
			t17 = space();
			p3 = element("p");
			t18 = text("Look at the ");
			a = element("a");
			t19 = text("Integration");
			t20 = text(" page to see more examples.");
			t21 = space();
			examples.$$.fragment.c();
			t22 = space();
			section1 = element("section");
			div1 = element("div");
			prevbutton.$$.fragment.c();
			t23 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "revalidateField()");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Revalidate a particular field");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			div0 = claim_element(section0_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			samplecode0.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach);
			t4 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			sup0 = claim_element(p0_nodes, "SUP", {}, false);
			var sup0_nodes = children(sup0);

			t5 = claim_text(sup0_nodes, "*");
			sup0_nodes.forEach(detach);
			t6 = claim_text(p0_nodes, " presents a required parameter");
			p0_nodes.forEach(detach);
			t7 = claim_text(section0_nodes, "\n        ");

			ul = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li = claim_element(ul_nodes, "LI", {}, false);
			var li_nodes = children(li);

			code = claim_element(li_nodes, "CODE", {}, false);
			var code_nodes = children(code);

			t8 = claim_text(code_nodes, "field");
			code_nodes.forEach(detach);
			t9 = claim_text(li_nodes, " ");

			sup1 = claim_element(li_nodes, "SUP", {}, false);
			var sup1_nodes = children(sup1);

			t10 = claim_text(sup1_nodes, "*");
			sup1_nodes.forEach(detach);
			t11 = claim_text(li_nodes, " — The field name");
			li_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			t12 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t13 = claim_text(p1_nodes, "This method is useful when the field value is effected by third parties (for example, attach another UI library to the field).");
			p1_nodes.forEach(detach);
			t14 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t15 = claim_text(p2_nodes, "Since there isn't an automatic way for FormValidation to know when the field value is modified in those cases, we need to revalidate the field manually.");
			p2_nodes.forEach(detach);
			t16 = claim_text(section0_nodes, "\n");
			samplecode1.$$.fragment.l(section0_nodes);
			t17 = claim_text(section0_nodes, "\n        ");

			p3 = claim_element(section0_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t18 = claim_text(p3_nodes, "Look at the ");

			a = claim_element(p3_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t19 = claim_text(a_nodes, "Integration");
			a_nodes.forEach(detach);
			t20 = claim_text(p3_nodes, " page to see more examples.");
			p3_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t21 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			t22 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			div1 = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			prevbutton.$$.fragment.l(div1_nodes);
			t23 = claim_text(div1_nodes, "\n            ");
			nextbutton.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 106);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 161);
			div0.className = "mb3";
			add_location(div0, file, 9, 8, 253);
			add_location(sup0, file, 12, 29, 409);
			p0.className = "lh-copy i";
			add_location(p0, file, 12, 8, 388);
			add_location(code, file, 14, 16, 509);
			add_location(sup1, file, 14, 35, 528);
			add_location(li, file, 14, 12, 505);
			ul.className = "ma0 pl3 lh-copy";
			add_location(ul, file, 13, 8, 464);
			p1.className = "lh-copy";
			add_location(p1, file, 16, 8, 585);
			p2.className = "lh-copy";
			add_location(p2, file, 17, 8, 743);
			a.href = "/guide/examples/integrating-with-3rd-party-libraries";
			a.className = "blue dim link";
			add_location(a, file, 29, 39, 1381);
			p3.className = "lh-copy";
			add_location(p3, file, 29, 8, 1350);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 223);
			div1.className = "flex";
			add_location(div1, file, 38, 8, 1698);
			section1.className = "mv5";
			add_location(section1, file, 37, 4, 1668);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			append(section0, div0);
			mount_component(samplecode0, div0, null);
			append(section0, t4);
			append(section0, p0);
			append(p0, sup0);
			append(sup0, t5);
			append(p0, t6);
			append(section0, t7);
			append(section0, ul);
			append(ul, li);
			append(li, code);
			append(code, t8);
			append(li, t9);
			append(li, sup1);
			append(sup1, t10);
			append(li, t11);
			append(section0, t12);
			append(section0, p1);
			append(p1, t13);
			append(section0, t14);
			append(section0, p2);
			append(p2, t15);
			append(section0, t16);
			mount_component(samplecode1, section0, null);
			append(section0, t17);
			append(section0, p3);
			append(p3, t18);
			append(p3, a);
			append(a, t19);
			append(p3, t20);
			insert(target, t21, anchor);
			mount_component(examples, target, anchor);
			insert(target, t22, anchor);
			insert(target, section1, anchor);
			append(section1, div1);
			mount_component(prevbutton, div1, null);
			append(div1, t23);
			mount_component(nextbutton, div1, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			samplecode0.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t21);
			}

			examples.$destroy(detaching);

			if (detaching) {
				detach(t22);
				detach(section1);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • revalidateField() method";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';

/* src/routes/guide/plugins/turret/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/plugins/turret/index.svelte";

// (10:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Usage");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Usage");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (51:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Stacked form");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Stacked form");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (65:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changelog");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changelog");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (74:12) <PrevButton target="/guide/plugins/trigger">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Trigger plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Trigger plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (75:12) <NextButton target="/guide/plugins/uikit">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Uikit plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Uikit plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, a, t3, t4, t5, section0, t6, p0, t7, t8, t9, p1, t10, code0, t11, t12, t13, p2, t14, t15, section1, t16, p3, t17, code1, t18, t19, code2, t20, t21, t22, div0, t23, t24, section2, t25, ul, li0, t26, t27, li1, t28, t29, section3, div1, t30, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bigfishtv-turret/5.1.3/turretcss.min.css">
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="demoForm" method="POST">
        ...
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>    
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/plugins/Turret.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                turret: new FormValidation.plugins.Turret(),
                ...
            },
        }
    );
});
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<form class="fv-stacked-form">
    <!-- The fields go here -->
    ...
</form>
` },
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/plugins/turret/stacked-form",
		frameworks: ['turret']
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/plugins/trigger",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/plugins/uikit",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Turret plugin");
			t1 = space();
			h2 = element("h2");
			t2 = text("Integrate with ");
			a = element("a");
			t3 = text("turretcss");
			t4 = text(" framework. Support turretcss v5.1.3");
			t5 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t6 = space();
			p0 = element("p");
			t7 = text("The following piece of code is the starting point to validate the form made in turretcss:");
			t8 = space();
			samplecode0.$$.fragment.c();
			t9 = space();
			p1 = element("p");
			t10 = text("The sample code above assumes that the FormValidation files are placed inside the ");
			code0 = element("code");
			t11 = text("vendors");
			t12 = text(" directory. You might need to change the path depending on where you place them on the server.");
			t13 = space();
			p2 = element("p");
			t14 = text("The next sections list out some examples of various forms made with turretcss.");
			t15 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t16 = space();
			p3 = element("p");
			t17 = text("You need to add the ");
			code1 = element("code");
			t18 = text("fv-stacked-form");
			t19 = text(" class to the ");
			code2 = element("code");
			t20 = text("form");
			t21 = text(" element such as:");
			t22 = space();
			div0 = element("div");
			samplecode1.$$.fragment.c();
			t23 = space();
			demo.$$.fragment.c();
			t24 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t25 = space();
			ul = element("ul");
			li0 = element("li");
			t26 = text("v1.4.0: Support Turret CSS v5.1.3.");
			t27 = space();
			li1 = element("li");
			t28 = text("v1.2.0: First release. It means that the Turret plugin requires FormValidation v1.2.0 or newer.");
			t29 = space();
			section3 = element("section");
			div1 = element("div");
			prevbutton.$$.fragment.c();
			t30 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Turret plugin");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Integrate with ");

			a = claim_element(h2_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t3 = claim_text(a_nodes, "turretcss");
			a_nodes.forEach(detach);
			t4 = claim_text(h2_nodes, " framework. Support turretcss v5.1.3");
			h2_nodes.forEach(detach);
			t5 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t6 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t7 = claim_text(p0_nodes, "The following piece of code is the starting point to validate the form made in turretcss:");
			p0_nodes.forEach(detach);
			t8 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t9 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t10 = claim_text(p1_nodes, "The sample code above assumes that the FormValidation files are placed inside the ");

			code0 = claim_element(p1_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t11 = claim_text(code0_nodes, "vendors");
			code0_nodes.forEach(detach);
			t12 = claim_text(p1_nodes, " directory. You might need to change the path depending on where you place them on the server.");
			p1_nodes.forEach(detach);
			t13 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t14 = claim_text(p2_nodes, "The next sections list out some examples of various forms made with turretcss.");
			p2_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t15 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t16 = claim_text(section1_nodes, "\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t17 = claim_text(p3_nodes, "You need to add the ");

			code1 = claim_element(p3_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t18 = claim_text(code1_nodes, "fv-stacked-form");
			code1_nodes.forEach(detach);
			t19 = claim_text(p3_nodes, " class to the ");

			code2 = claim_element(p3_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t20 = claim_text(code2_nodes, "form");
			code2_nodes.forEach(detach);
			t21 = claim_text(p3_nodes, " element such as:");
			p3_nodes.forEach(detach);
			t22 = claim_text(section1_nodes, "\n        ");

			div0 = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			samplecode1.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach);
			t23 = claim_text(section1_nodes, " \n        ");
			demo.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t24 = claim_text(nodes, "\n    \n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t25 = claim_text(section2_nodes, "\n        ");

			ul = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t26 = claim_text(li0_nodes, "v1.4.0: Support Turret CSS v5.1.3.");
			li0_nodes.forEach(detach);
			t27 = claim_text(ul_nodes, "\n            ");

			li1 = claim_element(ul_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t28 = claim_text(li1_nodes, "v1.2.0: First release. It means that the Turret plugin requires FormValidation v1.2.0 or newer.");
			li1_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			t29 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			div1 = claim_element(section3_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			prevbutton.$$.fragment.l(div1_nodes);
			t30 = claim_text(div1_nodes, "\n            ");
			nextbutton.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 95);
			a.href = "https://turretcss.com";
			a.className = "blue dim link";
			add_location(a, file, 6, 49, 191);
			h2.className = "f4 fw4 tc lh-copy";
			add_location(h2, file, 6, 4, 146);
			p0.className = "lh-copy";
			add_location(p0, file, 10, 8, 368);
			add_location(code0, file, 45, 109, 1605);
			p1.className = "lh-copy";
			add_location(p1, file, 45, 8, 1504);
			p2.className = "lh-copy";
			add_location(p2, file, 46, 8, 1732);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 305);
			add_location(code1, file, 51, 47, 1963);
			add_location(code2, file, 51, 89, 2005);
			p3.className = "lh-copy";
			add_location(p3, file, 51, 8, 1924);
			div0.className = "mb4";
			add_location(div0, file, 52, 8, 2052);
			section1.className = "mv5";
			add_location(section1, file, 49, 4, 1854);
			add_location(li0, file, 66, 12, 2436);
			add_location(li1, file, 67, 12, 2492);
			ul.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul, file, 65, 8, 2391);
			section2.className = "mv5";
			add_location(section2, file, 63, 4, 2324);
			div1.className = "flex";
			add_location(div1, file, 72, 8, 2661);
			section3.className = "mv5";
			add_location(section3, file, 71, 4, 2631);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			append(h2, a);
			append(a, t3);
			append(h2, t4);
			insert(target, t5, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t6);
			append(section0, p0);
			append(p0, t7);
			append(section0, t8);
			mount_component(samplecode0, section0, null);
			append(section0, t9);
			append(section0, p1);
			append(p1, t10);
			append(p1, code0);
			append(code0, t11);
			append(p1, t12);
			append(section0, t13);
			append(section0, p2);
			append(p2, t14);
			insert(target, t15, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t16);
			append(section1, p3);
			append(p3, t17);
			append(p3, code1);
			append(code1, t18);
			append(p3, t19);
			append(p3, code2);
			append(code2, t20);
			append(p3, t21);
			append(section1, t22);
			append(section1, div0);
			mount_component(samplecode1, div0, null);
			append(section1, t23);
			mount_component(demo, section1, null);
			insert(target, t24, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t25);
			append(section2, ul);
			append(ul, li0);
			append(li0, t26);
			append(ul, t27);
			append(ul, li1);
			append(li1, t28);
			insert(target, t29, anchor);
			insert(target, section3, anchor);
			append(section3, div1);
			mount_component(prevbutton, div1, null);
			append(div1, t30);
			mount_component(nextbutton, div1, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t5);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			if (detaching) {
				detach(t15);
				detach(section1);
			}

			heading1.$destroy();

			samplecode1.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t24);
				detach(section2);
			}

			heading2.$destroy();

			if (detaching) {
				detach(t29);
				detach(section3);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Turret plugin";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

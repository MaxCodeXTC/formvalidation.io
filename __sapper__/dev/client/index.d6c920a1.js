import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as ChangelogLayout } from './chunk.4a563e90.js';

/* src/routes/updates/v0.4.5/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/updates/v0.4.5/index.svelte";

// (10:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("New features");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "New features");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (24:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Improvements");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Improvements");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (33:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Bug fixes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Bug fixes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <ChangelogLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, ul0, li0, t5, code0, t6, t7, a0, t8, t9, a1, t10, t11, a2, t12, t13, t14, li1, i0, t15, a3, t16, t17, t18, li2, i1, t19, code1, t20, t21, t22, li3, t23, code2, t24, t25, a4, t26, t27, li4, t28, a5, t29, t30, li5, t31, a6, t32, t33, li6, t34, a7, t35, t36, li7, t37, a8, t38, t39, section1, t40, ul1, li8, t41, a9, t42, t43, t44, li9, t45, code3, t46, t47, code4, t48, t49, code5, t50, t51, li10, t52, t53, section2, t54, ul2, li11, t55, t56, li12, t57, t58, li13, t59, t60, li14, t61, t62, li15, t63, a10, t64, t65, t66, li16, t67, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Version 0.4.5");
			t1 = space();
			h2 = element("h2");
			t2 = text("Released 15 May 2014");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			ul0 = element("ul");
			li0 = element("li");
			t5 = text("Add ");
			code0 = element("code");
			t6 = text("$.fn.bootstrapValidator.helpers.date");
			t7 = text(" for validating a date, re-used in ");
			a0 = element("a");
			t8 = text("date");
			t9 = text(", ");
			a1 = element("a");
			t10 = text("id");
			t11 = text(", ");
			a2 = element("a");
			t12 = text("vat");
			t13 = text(" validators");
			t14 = space();
			li1 = element("li");
			i0 = element("i");
			t15 = text(" Add ");
			a3 = element("a");
			t16 = text("id validator");
			t17 = text(", support 25 countries");
			t18 = space();
			li2 = element("li");
			i1 = element("i");
			t19 = text(" Add ");
			code1 = element("code");
			t20 = text("threshold");
			t21 = text(" option");
			t22 = space();
			li3 = element("li");
			t23 = text("Add ");
			code2 = element("code");
			t24 = text("separator");
			t25 = text(" option to the ");
			a4 = element("a");
			t26 = text("numeric validator");
			t27 = space();
			li4 = element("li");
			t28 = text("Add ");
			a5 = element("a");
			t29 = text("isin (International Securities Identification Number) validator");
			t30 = space();
			li5 = element("li");
			t31 = text("Add ");
			a6 = element("a");
			t32 = text("rtn (Routing transit number) validator");
			t33 = space();
			li6 = element("li");
			t34 = text("Add ");
			a7 = element("a");
			t35 = text("cusip (North American Securities) validator");
			t36 = space();
			li7 = element("li");
			t37 = text("Add ");
			a8 = element("a");
			t38 = text("sedol (Stock Exchange Daily Official List) validator");
			t39 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t40 = space();
			ul1 = element("ul");
			li8 = element("li");
			t41 = text("The ");
			a9 = element("a");
			t42 = text("zipCode validator");
			t43 = text(" adds support for Italian, Dutch postcodes");
			t44 = space();
			li9 = element("li");
			t45 = text("Change default ");
			code3 = element("code");
			t46 = text("submitButtons");
			t47 = text(" to ");
			code4 = element("code");
			t48 = text("[type=\"submit\"]");
			t49 = text(" to support ");
			code5 = element("code");
			t50 = text("input type=\"submit\"");
			t51 = space();
			li10 = element("li");
			t52 = text("The cvv validator should support spaces in credit card");
			t53 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t54 = space();
			ul2 = element("ul");
			li11 = element("li");
			t55 = text("Fix the issue that the hidden fields generated by other plugins might not be validated");
			t56 = space();
			li12 = element("li");
			t57 = text("When parsing options from HTML attributes, don't add the field which hasn't validators");
			t58 = space();
			li13 = element("li");
			t59 = text("Fix the conflict issue with MooTools");
			t60 = space();
			li14 = element("li");
			t61 = text("The submit buttons are not sent");
			t62 = space();
			li15 = element("li");
			t63 = text("The ");
			a10 = element("a");
			t64 = text("iban validator");
			t65 = text(" does not work on IE8");
			t66 = space();
			li16 = element("li");
			t67 = text("Plugin method invocation don't work");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Version 0.4.5");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Released 15 May 2014");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			ul0 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t5 = claim_text(li0_nodes, "Add ");

			code0 = claim_element(li0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t6 = claim_text(code0_nodes, "$.fn.bootstrapValidator.helpers.date");
			code0_nodes.forEach(detach);
			t7 = claim_text(li0_nodes, " for validating a date, re-used in ");

			a0 = claim_element(li0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t8 = claim_text(a0_nodes, "date");
			a0_nodes.forEach(detach);
			t9 = claim_text(li0_nodes, ", ");

			a1 = claim_element(li0_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t10 = claim_text(a1_nodes, "id");
			a1_nodes.forEach(detach);
			t11 = claim_text(li0_nodes, ", ");

			a2 = claim_element(li0_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t12 = claim_text(a2_nodes, "vat");
			a2_nodes.forEach(detach);
			t13 = claim_text(li0_nodes, " validators");
			li0_nodes.forEach(detach);
			t14 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			i0 = claim_element(li1_nodes, "I", { class: true }, false);
			var i0_nodes = children(i0);

			i0_nodes.forEach(detach);
			t15 = claim_text(li1_nodes, " Add ");

			a3 = claim_element(li1_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t16 = claim_text(a3_nodes, "id validator");
			a3_nodes.forEach(detach);
			t17 = claim_text(li1_nodes, ", support 25 countries");
			li1_nodes.forEach(detach);
			t18 = claim_text(ul0_nodes, "\n            ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			i1 = claim_element(li2_nodes, "I", { class: true }, false);
			var i1_nodes = children(i1);

			i1_nodes.forEach(detach);
			t19 = claim_text(li2_nodes, " Add ");

			code1 = claim_element(li2_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t20 = claim_text(code1_nodes, "threshold");
			code1_nodes.forEach(detach);
			t21 = claim_text(li2_nodes, " option");
			li2_nodes.forEach(detach);
			t22 = claim_text(ul0_nodes, "\n            ");

			li3 = claim_element(ul0_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t23 = claim_text(li3_nodes, "Add ");

			code2 = claim_element(li3_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t24 = claim_text(code2_nodes, "separator");
			code2_nodes.forEach(detach);
			t25 = claim_text(li3_nodes, " option to the ");

			a4 = claim_element(li3_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t26 = claim_text(a4_nodes, "numeric validator");
			a4_nodes.forEach(detach);
			li3_nodes.forEach(detach);
			t27 = claim_text(ul0_nodes, "\n            ");

			li4 = claim_element(ul0_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			t28 = claim_text(li4_nodes, "Add ");

			a5 = claim_element(li4_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t29 = claim_text(a5_nodes, "isin (International Securities Identification Number) validator");
			a5_nodes.forEach(detach);
			li4_nodes.forEach(detach);
			t30 = claim_text(ul0_nodes, "\n            ");

			li5 = claim_element(ul0_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			t31 = claim_text(li5_nodes, "Add ");

			a6 = claim_element(li5_nodes, "A", { href: true, class: true }, false);
			var a6_nodes = children(a6);

			t32 = claim_text(a6_nodes, "rtn (Routing transit number) validator");
			a6_nodes.forEach(detach);
			li5_nodes.forEach(detach);
			t33 = claim_text(ul0_nodes, "\n            ");

			li6 = claim_element(ul0_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			t34 = claim_text(li6_nodes, "Add ");

			a7 = claim_element(li6_nodes, "A", { href: true, class: true }, false);
			var a7_nodes = children(a7);

			t35 = claim_text(a7_nodes, "cusip (North American Securities) validator");
			a7_nodes.forEach(detach);
			li6_nodes.forEach(detach);
			t36 = claim_text(ul0_nodes, "\n            ");

			li7 = claim_element(ul0_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			t37 = claim_text(li7_nodes, "Add ");

			a8 = claim_element(li7_nodes, "A", { href: true, class: true }, false);
			var a8_nodes = children(a8);

			t38 = claim_text(a8_nodes, "sedol (Stock Exchange Daily Official List) validator");
			a8_nodes.forEach(detach);
			li7_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t39 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t40 = claim_text(section1_nodes, "\n        ");

			ul1 = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li8 = claim_element(ul1_nodes, "LI", {}, false);
			var li8_nodes = children(li8);

			t41 = claim_text(li8_nodes, "The ");

			a9 = claim_element(li8_nodes, "A", { href: true, class: true }, false);
			var a9_nodes = children(a9);

			t42 = claim_text(a9_nodes, "zipCode validator");
			a9_nodes.forEach(detach);
			t43 = claim_text(li8_nodes, " adds support for Italian, Dutch postcodes");
			li8_nodes.forEach(detach);
			t44 = claim_text(ul1_nodes, "\n            ");

			li9 = claim_element(ul1_nodes, "LI", {}, false);
			var li9_nodes = children(li9);

			t45 = claim_text(li9_nodes, "Change default ");

			code3 = claim_element(li9_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t46 = claim_text(code3_nodes, "submitButtons");
			code3_nodes.forEach(detach);
			t47 = claim_text(li9_nodes, " to ");

			code4 = claim_element(li9_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t48 = claim_text(code4_nodes, "[type=\"submit\"]");
			code4_nodes.forEach(detach);
			t49 = claim_text(li9_nodes, " to support ");

			code5 = claim_element(li9_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t50 = claim_text(code5_nodes, "input type=\"submit\"");
			code5_nodes.forEach(detach);
			li9_nodes.forEach(detach);
			t51 = claim_text(ul1_nodes, "\n            ");

			li10 = claim_element(ul1_nodes, "LI", {}, false);
			var li10_nodes = children(li10);

			t52 = claim_text(li10_nodes, "The cvv validator should support spaces in credit card");
			li10_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t53 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t54 = claim_text(section2_nodes, "\n        ");

			ul2 = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul2_nodes = children(ul2);

			li11 = claim_element(ul2_nodes, "LI", {}, false);
			var li11_nodes = children(li11);

			t55 = claim_text(li11_nodes, "Fix the issue that the hidden fields generated by other plugins might not be validated");
			li11_nodes.forEach(detach);
			t56 = claim_text(ul2_nodes, "\n            ");

			li12 = claim_element(ul2_nodes, "LI", {}, false);
			var li12_nodes = children(li12);

			t57 = claim_text(li12_nodes, "When parsing options from HTML attributes, don't add the field which hasn't validators");
			li12_nodes.forEach(detach);
			t58 = claim_text(ul2_nodes, "\n            ");

			li13 = claim_element(ul2_nodes, "LI", {}, false);
			var li13_nodes = children(li13);

			t59 = claim_text(li13_nodes, "Fix the conflict issue with MooTools");
			li13_nodes.forEach(detach);
			t60 = claim_text(ul2_nodes, "\n            ");

			li14 = claim_element(ul2_nodes, "LI", {}, false);
			var li14_nodes = children(li14);

			t61 = claim_text(li14_nodes, "The submit buttons are not sent");
			li14_nodes.forEach(detach);
			t62 = claim_text(ul2_nodes, "\n            ");

			li15 = claim_element(ul2_nodes, "LI", {}, false);
			var li15_nodes = children(li15);

			t63 = claim_text(li15_nodes, "The ");

			a10 = claim_element(li15_nodes, "A", { href: true, class: true }, false);
			var a10_nodes = children(a10);

			t64 = claim_text(a10_nodes, "iban validator");
			a10_nodes.forEach(detach);
			t65 = claim_text(li15_nodes, " does not work on IE8");
			li15_nodes.forEach(detach);
			t66 = claim_text(ul2_nodes, "\n            ");

			li16 = claim_element(ul2_nodes, "LI", {}, false);
			var li16_nodes = children(li16);

			t67 = claim_text(li16_nodes, "Plugin method invocation don't work");
			li16_nodes.forEach(detach);
			ul2_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 92);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 143);
			add_location(code0, file, 11, 20, 319);
			a0.href = "/guide/validators/date";
			a0.className = "blue dim link";
			add_location(a0, file, 11, 104, 403);
			a1.href = "/guide/validators/id";
			a1.className = "blue dim link";
			add_location(a1, file, 11, 169, 468);
			a2.href = "/guide/validators/vat";
			a2.className = "blue dim link";
			add_location(a2, file, 11, 230, 529);
			add_location(li0, file, 11, 12, 311);
			i0.className = "fa fa-star";
			add_location(i0, file, 12, 16, 623);
			a3.href = "/guide/validators/id";
			a3.className = "blue dim link";
			add_location(a3, file, 12, 47, 654);
			add_location(li1, file, 12, 12, 619);
			i1.className = "fa fa-star";
			add_location(i1, file, 13, 16, 767);
			add_location(code1, file, 13, 47, 798);
			add_location(li2, file, 13, 12, 763);
			add_location(code2, file, 14, 20, 853);
			a4.href = "/guide/validators/numeric";
			a4.className = "blue dim link";
			add_location(a4, file, 14, 57, 890);
			add_location(li3, file, 14, 12, 845);
			a5.href = "/guide/validators/isin";
			a5.className = "blue dim link";
			add_location(a5, file, 15, 20, 995);
			add_location(li4, file, 15, 12, 987);
			a6.href = "/guide/validators/rtn";
			a6.className = "blue dim link";
			add_location(a6, file, 16, 20, 1143);
			add_location(li5, file, 16, 12, 1135);
			a7.href = "/guide/validators/cusip";
			a7.className = "blue dim link";
			add_location(a7, file, 17, 20, 1265);
			add_location(li6, file, 17, 12, 1257);
			a8.href = "/guide/validators/sedol";
			a8.className = "blue dim link";
			add_location(a8, file, 18, 20, 1394);
			add_location(li7, file, 18, 12, 1386);
			ul0.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul0, file, 10, 8, 266);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 196);
			a9.href = "/guide/validators/zip-code";
			a9.className = "blue dim link";
			add_location(a9, file, 25, 20, 1669);
			add_location(li8, file, 25, 12, 1661);
			add_location(code3, file, 26, 31, 1828);
			add_location(code4, file, 26, 61, 1858);
			add_location(code5, file, 26, 101, 1898);
			add_location(li9, file, 26, 12, 1809);
			add_location(li10, file, 27, 12, 1948);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 24, 8, 1616);
			section1.className = "mv5";
			add_location(section1, file, 22, 4, 1546);
			add_location(li11, file, 34, 12, 2158);
			add_location(li12, file, 35, 12, 2266);
			add_location(li13, file, 36, 12, 2374);
			add_location(li14, file, 37, 12, 2432);
			a10.href = "/guide/validators/iban";
			a10.className = "blue dim link";
			add_location(a10, file, 38, 20, 2493);
			add_location(li15, file, 38, 12, 2485);
			add_location(li16, file, 39, 12, 2605);
			ul2.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul2, file, 33, 8, 2113);
			section2.className = "mv5";
			add_location(section2, file, 31, 4, 2046);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, ul0);
			append(ul0, li0);
			append(li0, t5);
			append(li0, code0);
			append(code0, t6);
			append(li0, t7);
			append(li0, a0);
			append(a0, t8);
			append(li0, t9);
			append(li0, a1);
			append(a1, t10);
			append(li0, t11);
			append(li0, a2);
			append(a2, t12);
			append(li0, t13);
			append(ul0, t14);
			append(ul0, li1);
			append(li1, i0);
			append(li1, t15);
			append(li1, a3);
			append(a3, t16);
			append(li1, t17);
			append(ul0, t18);
			append(ul0, li2);
			append(li2, i1);
			append(li2, t19);
			append(li2, code1);
			append(code1, t20);
			append(li2, t21);
			append(ul0, t22);
			append(ul0, li3);
			append(li3, t23);
			append(li3, code2);
			append(code2, t24);
			append(li3, t25);
			append(li3, a4);
			append(a4, t26);
			append(ul0, t27);
			append(ul0, li4);
			append(li4, t28);
			append(li4, a5);
			append(a5, t29);
			append(ul0, t30);
			append(ul0, li5);
			append(li5, t31);
			append(li5, a6);
			append(a6, t32);
			append(ul0, t33);
			append(ul0, li6);
			append(li6, t34);
			append(li6, a7);
			append(a7, t35);
			append(ul0, t36);
			append(ul0, li7);
			append(li7, t37);
			append(li7, a8);
			append(a8, t38);
			insert(target, t39, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t40);
			append(section1, ul1);
			append(ul1, li8);
			append(li8, t41);
			append(li8, a9);
			append(a9, t42);
			append(li8, t43);
			append(ul1, t44);
			append(ul1, li9);
			append(li9, t45);
			append(li9, code3);
			append(code3, t46);
			append(li9, t47);
			append(li9, code4);
			append(code4, t48);
			append(li9, t49);
			append(li9, code5);
			append(code5, t50);
			append(ul1, t51);
			append(ul1, li10);
			append(li10, t52);
			insert(target, t53, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t54);
			append(section2, ul2);
			append(ul2, li11);
			append(li11, t55);
			append(ul2, t56);
			append(ul2, li12);
			append(li12, t57);
			append(ul2, t58);
			append(ul2, li13);
			append(li13, t59);
			append(ul2, t60);
			append(ul2, li14);
			append(li14, t61);
			append(ul2, t62);
			append(ul2, li15);
			append(li15, t63);
			append(li15, a10);
			append(a10, t64);
			append(li15, t65);
			append(ul2, t66);
			append(ul2, li16);
			append(li16, t67);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			if (detaching) {
				detach(t39);
				detach(section1);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t53);
				detach(section2);
			}

			heading2.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var changeloglayout = new ChangelogLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			changeloglayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			changeloglayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • v0.4.5";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(changeloglayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var changeloglayout_changes = {};
			if (changed.$$scope) changeloglayout_changes.$$scope = { changed, ctx };
			changeloglayout.$set(changeloglayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			changeloglayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			changeloglayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			changeloglayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

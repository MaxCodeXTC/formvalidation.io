import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';

/* src/routes/guide/plugins/mailgun/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/plugins/mailgun/index.svelte";

// (10:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Usage");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Usage");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (63:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (94:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (204:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changelog");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changelog");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (214:12) <PrevButton target="/guide/plugins/l10n">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("L10n plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "L10n plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (215:12) <NextButton target="/guide/plugins/mandatory-icon">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("MandatoryIcon plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "MandatoryIcon plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, p0, a0, t5, t6, a1, t7, t8, t9, ul0, li0, t10, t11, li1, t12, t13, li2, t14, t15, li3, t16, t17, li4, t18, t19, p1, t20, a2, t21, t22, t23, p2, t24, t25, t26, p3, t27, code0, t28, t29, t30, section1, t31, table0, tr0, th0, t32, t33, th1, t34, t35, th2, t36, t37, tr1, td0, code1, t38, t39, sup0, t40, t41, td1, t42, t43, td2, t44, t45, tr2, td3, code2, t46, t47, sup1, t48, t49, td4, t50, t51, td5, t52, t53, tr3, td6, code3, t54, t55, sup2, t56, t57, td7, t58, t59, td8, t60, t61, tr4, td9, code4, t62, t63, td10, t64, t65, td11, t66, code5, t67, t68, section2, t69, p4, t70, t71, table1, tr5, th3, t72, t73, th4, t74, t75, tr6, td12, t76, t77, td13, t78, t79, tr7, td14, t80, t81, td15, t82, t83, tr8, td16, t84, t85, td17, t86, t87, tr9, td18, t88, t89, td19, t90, t91, tr10, td20, t92, t93, td21, t94, t95, tr11, td22, t96, t97, td23, t98, t99, p5, t100, a3, t101, t102, t103, t104, section3, t105, ul1, li5, t106, t107, t108, section4, div, t109, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="demoForm" method="POST">
        ...
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>    
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/plugins/Mailgun.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                ...,
                mailgun: new FormValidation.plugins.Mailgun({
                    apiKey: ...,
                    field: ...,
                    message: ...,
                    suggestion: ...,
                }),
            },
        }
    );
});
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link-tag rel="stylesheet" href="https://unpkg.com/tachyons@4.10.0/css/tachyons.min.css">
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="demoForm" method="POST">
        <div class="cf mb2">
            <div class="fl w-100">
                <div class="fl w-25 pa2">Email address</div>
                <div class="fl w-40">
                    <input type="text" class="input-reset ba b--black-20 pa2 mb2 db w-100" name="email" />
                </div>
            </div>
        </div>

        <div class="cf mb2">
            <div class="fl w-100">
                <div class="fl w-25 pa2"></div>
                <div class="fl w-50">
                    <button type="submit" class="ba b--black-20 bg-blue white ph3 pv2 br2">Submit</button>
                </div>
            </div>
        </div>
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>    
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/plugins/Tachyons.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/plugins/Mailgun.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                email: {
                    validators: {
                        notEmpty: {
                            message: 'The email address is required'
                        },
                        emailAddress: {
                            message: 'The input is not a valid email address'
                        },
                    }
                },
            },
            plugins: {
                trigger: new FormValidation.plugins.Trigger(),
                tachyons: new FormValidation.plugins.Tachyons(),
                submitButton: new FormValidation.plugins.SubmitButton(),
                icon: new FormValidation.plugins.Icon({
                    valid: 'fa fa-check',
                    invalid: 'fa fa-times',
                    validating: 'fa fa-refresh',
                }),
                mailgun: new FormValidation.plugins.Mailgun({
                    // Put your Mailgun public API key here
                    apiKey: '...',
                    field: 'email',
                    message: 'The email address is not valid',
                    suggestion: true,
                }),
            },
        }
    );
});
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['promise', 'remote'] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/plugins/l10n",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/plugins/mandatory-icon",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Mailgun plugin");
			t1 = space();
			h2 = element("h2");
			t2 = text("Validate an email address by using Mailgun API");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			p0 = element("p");
			a0 = element("a");
			t5 = text("Mailgun");
			t6 = text(" is one of most popular email services. It also provides free API to ");
			a1 = element("a");
			t7 = text("validate an email address");
			t8 = text(" based on:");
			t9 = space();
			ul0 = element("ul");
			li0 = element("li");
			t10 = text("Mailbox detection");
			t11 = space();
			li1 = element("li");
			t12 = text("Syntax checks (RFC defined grammar)");
			t13 = space();
			li2 = element("li");
			t14 = text("DNS validation");
			t15 = space();
			li3 = element("li");
			t16 = text("Spell checks");
			t17 = space();
			li4 = element("li");
			t18 = text("Email Service Provider (ESP) specific local-part grammar (if available)");
			t19 = space();
			p1 = element("p");
			t20 = text("To use it, you need to ");
			a2 = element("a");
			t21 = text("sign up");
			t22 = text(" for a Mailgun account and get a free API key.");
			t23 = space();
			p2 = element("p");
			t24 = text("The following piece of code is the starting point to use the Mailgun plugin:");
			t25 = space();
			samplecode0.$$.fragment.c();
			t26 = space();
			p3 = element("p");
			t27 = text("The sample code above assumes that the FormValidation files are placed inside the ");
			code0 = element("code");
			t28 = text("vendors");
			t29 = text(" directory. You might need to change the path depending on where you place them on the server.");
			t30 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t31 = space();
			table0 = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t32 = text("Option");
			t33 = space();
			th1 = element("th");
			t34 = text("Type");
			t35 = space();
			th2 = element("th");
			t36 = text("Description");
			t37 = space();
			tr1 = element("tr");
			td0 = element("td");
			code1 = element("code");
			t38 = text("apiKey");
			t39 = space();
			sup0 = element("sup");
			t40 = text("*");
			t41 = space();
			td1 = element("td");
			t42 = text("String");
			t43 = space();
			td2 = element("td");
			t44 = text("The API key provided by Mailgun");
			t45 = space();
			tr2 = element("tr");
			td3 = element("td");
			code2 = element("code");
			t46 = text("field");
			t47 = space();
			sup1 = element("sup");
			t48 = text("*");
			t49 = space();
			td4 = element("td");
			t50 = text("String");
			t51 = space();
			td5 = element("td");
			t52 = text("The field name that will be validated");
			t53 = space();
			tr3 = element("tr");
			td6 = element("td");
			code3 = element("code");
			t54 = text("message");
			t55 = space();
			sup2 = element("sup");
			t56 = text("*");
			t57 = space();
			td7 = element("td");
			t58 = text("String");
			t59 = space();
			td8 = element("td");
			t60 = text("Error message indicates the input is not valid");
			t61 = space();
			tr4 = element("tr");
			td9 = element("td");
			code4 = element("code");
			t62 = text("suggestion");
			t63 = space();
			td10 = element("td");
			t64 = text("Boolean");
			t65 = space();
			td11 = element("td");
			t66 = text("Show suggestion if the email is not valid. By default, it is set to ");
			code5 = element("code");
			t67 = text("false");
			t68 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t69 = space();
			p4 = element("p");
			t70 = text("You can use the following sample email addresses to test with your app.");
			t71 = space();
			table1 = element("table");
			tr5 = element("tr");
			th3 = element("th");
			t72 = text("Description");
			t73 = space();
			th4 = element("th");
			t74 = text("Sample");
			t75 = space();
			tr6 = element("tr");
			td12 = element("td");
			t76 = text("Does not meet Gmail minimum local-part length of 6 characters");
			t77 = space();
			td13 = element("td");
			t78 = text("john@gmail.com");
			t79 = space();
			tr7 = element("tr");
			td14 = element("td");
			t80 = text("Invalid, because gmaill.com does not have valid MX records");
			t81 = space();
			td15 = element("td");
			t82 = text("john.smith@gmaill.com");
			t83 = space();
			tr8 = element("tr");
			td16 = element("td");
			t84 = text("Invalid because while microsoft.io does not have any MX records, it does have fallback A records, but alas no Mail Exchanger responds");
			t85 = space();
			td17 = element("td");
			t86 = text("john@microsoft.io");
			t87 = space();
			tr9 = element("tr");
			td18 = element("td");
			t88 = text("Meets Gmail 6 character minimum and all other requirements");
			t89 = space();
			td19 = element("td");
			t90 = text("john.smith@gmail.com");
			t91 = space();
			tr10 = element("tr");
			td20 = element("td");
			t92 = text("Meets pure syntax checks");
			t93 = space();
			td21 = element("td");
			t94 = text("\"hello world\"@domain.com");
			t95 = space();
			tr11 = element("tr");
			td22 = element("td");
			t96 = text("Suggest new email address");
			t97 = space();
			td23 = element("td");
			t98 = text("hello@gail.com");
			t99 = space();
			p5 = element("p");
			t100 = text("The following sample code demonstrates how to use Mailgun plugin to validate email address which its form is made with ");
			a3 = element("a");
			t101 = text("Tachyons");
			t102 = text(":");
			t103 = space();
			samplecode1.$$.fragment.c();
			t104 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t105 = space();
			ul1 = element("ul");
			li5 = element("li");
			t106 = text("v1.0.0: First release");
			t107 = space();
			relatedvalidators.$$.fragment.c();
			t108 = space();
			section4 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t109 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Mailgun plugin");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Validate an email address by using Mailgun API");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t5 = claim_text(a0_nodes, "Mailgun");
			a0_nodes.forEach(detach);
			t6 = claim_text(p0_nodes, " is one of most popular email services. It also provides free API to ");

			a1 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t7 = claim_text(a1_nodes, "validate an email address");
			a1_nodes.forEach(detach);
			t8 = claim_text(p0_nodes, " based on:");
			p0_nodes.forEach(detach);
			t9 = claim_text(section0_nodes, "\n        ");

			ul0 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t10 = claim_text(li0_nodes, "Mailbox detection");
			li0_nodes.forEach(detach);
			t11 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t12 = claim_text(li1_nodes, "Syntax checks (RFC defined grammar)");
			li1_nodes.forEach(detach);
			t13 = claim_text(ul0_nodes, "\n            ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t14 = claim_text(li2_nodes, "DNS validation");
			li2_nodes.forEach(detach);
			t15 = claim_text(ul0_nodes, "\n            ");

			li3 = claim_element(ul0_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t16 = claim_text(li3_nodes, "Spell checks");
			li3_nodes.forEach(detach);
			t17 = claim_text(ul0_nodes, "\n            ");

			li4 = claim_element(ul0_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			t18 = claim_text(li4_nodes, "Email Service Provider (ESP) specific local-part grammar (if available)");
			li4_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			t19 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t20 = claim_text(p1_nodes, "To use it, you need to ");

			a2 = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t21 = claim_text(a2_nodes, "sign up");
			a2_nodes.forEach(detach);
			t22 = claim_text(p1_nodes, " for a Mailgun account and get a free API key.");
			p1_nodes.forEach(detach);
			t23 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t24 = claim_text(p2_nodes, "The following piece of code is the starting point to use the Mailgun plugin:");
			p2_nodes.forEach(detach);
			t25 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t26 = claim_text(section0_nodes, "\n        ");

			p3 = claim_element(section0_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t27 = claim_text(p3_nodes, "The sample code above assumes that the FormValidation files are placed inside the ");

			code0 = claim_element(p3_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t28 = claim_text(code0_nodes, "vendors");
			code0_nodes.forEach(detach);
			t29 = claim_text(p3_nodes, " directory. You might need to change the path depending on where you place them on the server.");
			p3_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t30 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t31 = claim_text(section1_nodes, "\n        ");

			table0 = claim_element(section1_nodes, "TABLE", { class: true }, false);
			var table0_nodes = children(table0);

			tr0 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t32 = claim_text(th0_nodes, "Option");
			th0_nodes.forEach(detach);
			t33 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t34 = claim_text(th1_nodes, "Type");
			th1_nodes.forEach(detach);
			t35 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t36 = claim_text(th2_nodes, "Description");
			th2_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t37 = claim_text(table0_nodes, "\n            ");

			tr1 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code1 = claim_element(td0_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t38 = claim_text(code1_nodes, "apiKey");
			code1_nodes.forEach(detach);
			t39 = claim_text(td0_nodes, " ");

			sup0 = claim_element(td0_nodes, "SUP", {}, false);
			var sup0_nodes = children(sup0);

			t40 = claim_text(sup0_nodes, "*");
			sup0_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t41 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			t42 = claim_text(td1_nodes, "String");
			td1_nodes.forEach(detach);
			t43 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t44 = claim_text(td2_nodes, "The API key provided by Mailgun");
			td2_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t45 = claim_text(table0_nodes, "\n            ");

			tr2 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td3 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			code2 = claim_element(td3_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t46 = claim_text(code2_nodes, "field");
			code2_nodes.forEach(detach);
			t47 = claim_text(td3_nodes, " ");

			sup1 = claim_element(td3_nodes, "SUP", {}, false);
			var sup1_nodes = children(sup1);

			t48 = claim_text(sup1_nodes, "*");
			sup1_nodes.forEach(detach);
			td3_nodes.forEach(detach);
			t49 = claim_text(tr2_nodes, "\n                ");

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			t50 = claim_text(td4_nodes, "String");
			td4_nodes.forEach(detach);
			t51 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			t52 = claim_text(td5_nodes, "The field name that will be validated");
			td5_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t53 = claim_text(table0_nodes, "\n            ");

			tr3 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td6 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			code3 = claim_element(td6_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t54 = claim_text(code3_nodes, "message");
			code3_nodes.forEach(detach);
			t55 = claim_text(td6_nodes, " ");

			sup2 = claim_element(td6_nodes, "SUP", {}, false);
			var sup2_nodes = children(sup2);

			t56 = claim_text(sup2_nodes, "*");
			sup2_nodes.forEach(detach);
			td6_nodes.forEach(detach);
			t57 = claim_text(tr3_nodes, "\n                ");

			td7 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			t58 = claim_text(td7_nodes, "String");
			td7_nodes.forEach(detach);
			t59 = claim_text(tr3_nodes, "\n                ");

			td8 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			t60 = claim_text(td8_nodes, "Error message indicates the input is not valid");
			td8_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			t61 = claim_text(table0_nodes, "\n            ");

			tr4 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			td9 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			code4 = claim_element(td9_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t62 = claim_text(code4_nodes, "suggestion");
			code4_nodes.forEach(detach);
			td9_nodes.forEach(detach);
			t63 = claim_text(tr4_nodes, "\n                ");

			td10 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td10_nodes = children(td10);

			t64 = claim_text(td10_nodes, "Boolean");
			td10_nodes.forEach(detach);
			t65 = claim_text(tr4_nodes, "\n                ");

			td11 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td11_nodes = children(td11);

			t66 = claim_text(td11_nodes, "Show suggestion if the email is not valid. By default, it is set to ");

			code5 = claim_element(td11_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t67 = claim_text(code5_nodes, "false");
			code5_nodes.forEach(detach);
			td11_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			table0_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t68 = claim_text(nodes, "\n    \n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t69 = claim_text(section2_nodes, "\n        ");

			p4 = claim_element(section2_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t70 = claim_text(p4_nodes, "You can use the following sample email addresses to test with your app.");
			p4_nodes.forEach(detach);
			t71 = claim_text(section2_nodes, "\n        ");

			table1 = claim_element(section2_nodes, "TABLE", { class: true }, false);
			var table1_nodes = children(table1);

			tr5 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr5_nodes = children(tr5);

			th3 = claim_element(tr5_nodes, "TH", { class: true }, false);
			var th3_nodes = children(th3);

			t72 = claim_text(th3_nodes, "Description");
			th3_nodes.forEach(detach);
			t73 = claim_text(tr5_nodes, "\n                ");

			th4 = claim_element(tr5_nodes, "TH", { class: true }, false);
			var th4_nodes = children(th4);

			t74 = claim_text(th4_nodes, "Sample");
			th4_nodes.forEach(detach);
			tr5_nodes.forEach(detach);
			t75 = claim_text(table1_nodes, "\n            ");

			tr6 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr6_nodes = children(tr6);

			td12 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td12_nodes = children(td12);

			t76 = claim_text(td12_nodes, "Does not meet Gmail minimum local-part length of 6 characters");
			td12_nodes.forEach(detach);
			t77 = claim_text(tr6_nodes, "\n                ");

			td13 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td13_nodes = children(td13);

			t78 = claim_text(td13_nodes, "john@gmail.com");
			td13_nodes.forEach(detach);
			tr6_nodes.forEach(detach);
			t79 = claim_text(table1_nodes, "\n            ");

			tr7 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr7_nodes = children(tr7);

			td14 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td14_nodes = children(td14);

			t80 = claim_text(td14_nodes, "Invalid, because gmaill.com does not have valid MX records");
			td14_nodes.forEach(detach);
			t81 = claim_text(tr7_nodes, "\n                ");

			td15 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td15_nodes = children(td15);

			t82 = claim_text(td15_nodes, "john.smith@gmaill.com");
			td15_nodes.forEach(detach);
			tr7_nodes.forEach(detach);
			t83 = claim_text(table1_nodes, "\n            ");

			tr8 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr8_nodes = children(tr8);

			td16 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td16_nodes = children(td16);

			t84 = claim_text(td16_nodes, "Invalid because while microsoft.io does not have any MX records, it does have fallback A records, but alas no Mail Exchanger responds");
			td16_nodes.forEach(detach);
			t85 = claim_text(tr8_nodes, "\n                ");

			td17 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td17_nodes = children(td17);

			t86 = claim_text(td17_nodes, "john@microsoft.io");
			td17_nodes.forEach(detach);
			tr8_nodes.forEach(detach);
			t87 = claim_text(table1_nodes, "\n            ");

			tr9 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr9_nodes = children(tr9);

			td18 = claim_element(tr9_nodes, "TD", { class: true }, false);
			var td18_nodes = children(td18);

			t88 = claim_text(td18_nodes, "Meets Gmail 6 character minimum and all other requirements");
			td18_nodes.forEach(detach);
			t89 = claim_text(tr9_nodes, "\n                ");

			td19 = claim_element(tr9_nodes, "TD", { class: true }, false);
			var td19_nodes = children(td19);

			t90 = claim_text(td19_nodes, "john.smith@gmail.com");
			td19_nodes.forEach(detach);
			tr9_nodes.forEach(detach);
			t91 = claim_text(table1_nodes, "\n            ");

			tr10 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr10_nodes = children(tr10);

			td20 = claim_element(tr10_nodes, "TD", { class: true }, false);
			var td20_nodes = children(td20);

			t92 = claim_text(td20_nodes, "Meets pure syntax checks");
			td20_nodes.forEach(detach);
			t93 = claim_text(tr10_nodes, "\n                ");

			td21 = claim_element(tr10_nodes, "TD", { class: true }, false);
			var td21_nodes = children(td21);

			t94 = claim_text(td21_nodes, "\"hello world\"@domain.com");
			td21_nodes.forEach(detach);
			tr10_nodes.forEach(detach);
			t95 = claim_text(table1_nodes, "\n            ");

			tr11 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr11_nodes = children(tr11);

			td22 = claim_element(tr11_nodes, "TD", { class: true }, false);
			var td22_nodes = children(td22);

			t96 = claim_text(td22_nodes, "Suggest new email address");
			td22_nodes.forEach(detach);
			t97 = claim_text(tr11_nodes, "\n                ");

			td23 = claim_element(tr11_nodes, "TD", { class: true }, false);
			var td23_nodes = children(td23);

			t98 = claim_text(td23_nodes, "hello@gail.com");
			td23_nodes.forEach(detach);
			tr11_nodes.forEach(detach);
			table1_nodes.forEach(detach);
			t99 = claim_text(section2_nodes, "\n        ");

			p5 = claim_element(section2_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t100 = claim_text(p5_nodes, "The following sample code demonstrates how to use Mailgun plugin to validate email address which its form is made with ");

			a3 = claim_element(p5_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t101 = claim_text(a3_nodes, "Tachyons");
			a3_nodes.forEach(detach);
			t102 = claim_text(p5_nodes, ":");
			p5_nodes.forEach(detach);
			t103 = claim_text(section2_nodes, "\n");
			samplecode1.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t104 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t105 = claim_text(section3_nodes, "\n        ");

			ul1 = claim_element(section3_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li5 = claim_element(ul1_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			t106 = claim_text(li5_nodes, "v1.0.0: First release");
			li5_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			t107 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			t108 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			div = claim_element(section4_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t109 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section4_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 96);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 148);
			a0.href = "http://www.mailgun.com";
			a0.className = "blue dim link";
			add_location(a0, file, 10, 27, 309);
			a1.href = "/guide/validators/email-address";
			a1.className = "blue dim link";
			add_location(a1, file, 10, 162, 444);
			p0.className = "lh-copy";
			add_location(p0, file, 10, 8, 290);
			add_location(li0, file, 12, 12, 601);
			add_location(li1, file, 13, 12, 640);
			add_location(li2, file, 14, 12, 697);
			add_location(li3, file, 15, 12, 733);
			add_location(li4, file, 16, 12, 767);
			ul0.className = "ma0 pl3 lh-copy";
			add_location(ul0, file, 11, 8, 560);
			a2.href = "https://mailgun.com/signup";
			a2.className = "blue dim link";
			add_location(a2, file, 18, 50, 912);
			p1.className = "lh-copy";
			add_location(p1, file, 18, 8, 870);
			p2.className = "lh-copy";
			add_location(p2, file, 19, 8, 1041);
			add_location(code0, file, 58, 109, 2305);
			p3.className = "lh-copy";
			add_location(p3, file, 58, 8, 2204);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 227);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 65, 16, 2628);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 66, 16, 2690);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 67, 16, 2750);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 64, 12, 2579);
			add_location(code1, file, 70, 36, 2900);
			add_location(sup0, file, 70, 56, 2920);
			td0.className = "pv2 ph3";
			add_location(td0, file, 70, 16, 2880);
			td1.className = "pv2 ph3";
			add_location(td1, file, 71, 16, 2954);
			td2.className = "pv2 ph3";
			add_location(td2, file, 72, 16, 3002);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 69, 12, 2831);
			add_location(code2, file, 75, 36, 3158);
			add_location(sup1, file, 75, 55, 3177);
			td3.className = "pv2 ph3";
			add_location(td3, file, 75, 16, 3138);
			td4.className = "pv2 ph3";
			add_location(td4, file, 76, 16, 3211);
			td5.className = "pv2 ph3";
			add_location(td5, file, 77, 16, 3259);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 74, 12, 3089);
			add_location(code3, file, 80, 36, 3421);
			add_location(sup2, file, 80, 57, 3442);
			td6.className = "pv2 ph3";
			add_location(td6, file, 80, 16, 3401);
			td7.className = "pv2 ph3";
			add_location(td7, file, 81, 16, 3476);
			td8.className = "pv2 ph3";
			add_location(td8, file, 82, 16, 3524);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 79, 12, 3352);
			add_location(code4, file, 85, 36, 3695);
			td9.className = "pv2 ph3";
			add_location(td9, file, 85, 16, 3675);
			td10.className = "pv2 ph3";
			add_location(td10, file, 86, 16, 3740);
			add_location(code5, file, 87, 112, 3885);
			td11.className = "pv2 ph3 lh-copy";
			add_location(td11, file, 87, 16, 3789);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 84, 12, 3626);
			table0.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table0, file, 63, 8, 2509);
			section1.className = "mv5";
			add_location(section1, file, 61, 4, 2444);
			p4.className = "lh-copy";
			add_location(p4, file, 94, 8, 4039);
			th3.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th3, file, 97, 16, 4265);
			th4.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th4, file, 98, 16, 4332);
			tr5.className = "striped--light-gray";
			add_location(tr5, file, 96, 12, 4216);
			td12.className = "pv2 ph3 lh-copy";
			add_location(td12, file, 101, 16, 4457);
			td13.className = "pv2 ph3 lh-copy";
			add_location(td13, file, 102, 16, 4568);
			tr6.className = "striped--light-gray";
			add_location(tr6, file, 100, 12, 4408);
			td14.className = "pv2 ph3 lh-copy";
			add_location(td14, file, 105, 16, 4695);
			td15.className = "pv2 ph3 lh-copy";
			add_location(td15, file, 106, 16, 4803);
			tr7.className = "striped--light-gray";
			add_location(tr7, file, 104, 12, 4646);
			td16.className = "pv2 ph3 lh-copy";
			add_location(td16, file, 109, 16, 4937);
			td17.className = "pv2 ph3 lh-copy";
			add_location(td17, file, 110, 16, 5120);
			tr8.className = "striped--light-gray";
			add_location(tr8, file, 108, 12, 4888);
			td18.className = "pv2 ph3 lh-copy";
			add_location(td18, file, 113, 16, 5250);
			td19.className = "pv2 ph3 lh-copy";
			add_location(td19, file, 114, 16, 5358);
			tr9.className = "striped--light-gray";
			add_location(tr9, file, 112, 12, 5201);
			td20.className = "pv2 ph3 lh-copy";
			add_location(td20, file, 117, 16, 5491);
			td21.className = "pv2 ph3 lh-copy";
			add_location(td21, file, 118, 16, 5565);
			tr10.className = "striped--light-gray";
			add_location(tr10, file, 116, 12, 5442);
			td22.className = "pv2 ph3 lh-copy";
			add_location(td22, file, 121, 16, 5702);
			td23.className = "pv2 ph3 lh-copy";
			add_location(td23, file, 122, 16, 5777);
			tr11.className = "striped--light-gray";
			add_location(tr11, file, 120, 12, 5653);
			table1.className = "collapse ba br2 b--black-10 pv2 ph3 w-100 mb4";
			add_location(table1, file, 95, 8, 4142);
			a3.href = "/guide/plugins/tachyons";
			a3.className = "blue dim link";
			add_location(a3, file, 125, 146, 6006);
			p5.className = "lh-copy";
			add_location(p5, file, 125, 8, 5868);
			section2.className = "mv5";
			add_location(section2, file, 92, 4, 3968);
			add_location(li5, file, 205, 12, 9045);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 204, 8, 9000);
			section3.className = "mv5";
			add_location(section3, file, 202, 4, 8933);
			div.className = "flex";
			add_location(div, file, 212, 8, 9202);
			section4.className = "mv5";
			add_location(section4, file, 211, 4, 9172);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, p0);
			append(p0, a0);
			append(a0, t5);
			append(p0, t6);
			append(p0, a1);
			append(a1, t7);
			append(p0, t8);
			append(section0, t9);
			append(section0, ul0);
			append(ul0, li0);
			append(li0, t10);
			append(ul0, t11);
			append(ul0, li1);
			append(li1, t12);
			append(ul0, t13);
			append(ul0, li2);
			append(li2, t14);
			append(ul0, t15);
			append(ul0, li3);
			append(li3, t16);
			append(ul0, t17);
			append(ul0, li4);
			append(li4, t18);
			append(section0, t19);
			append(section0, p1);
			append(p1, t20);
			append(p1, a2);
			append(a2, t21);
			append(p1, t22);
			append(section0, t23);
			append(section0, p2);
			append(p2, t24);
			append(section0, t25);
			mount_component(samplecode0, section0, null);
			append(section0, t26);
			append(section0, p3);
			append(p3, t27);
			append(p3, code0);
			append(code0, t28);
			append(p3, t29);
			insert(target, t30, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t31);
			append(section1, table0);
			append(table0, tr0);
			append(tr0, th0);
			append(th0, t32);
			append(tr0, t33);
			append(tr0, th1);
			append(th1, t34);
			append(tr0, t35);
			append(tr0, th2);
			append(th2, t36);
			append(table0, t37);
			append(table0, tr1);
			append(tr1, td0);
			append(td0, code1);
			append(code1, t38);
			append(td0, t39);
			append(td0, sup0);
			append(sup0, t40);
			append(tr1, t41);
			append(tr1, td1);
			append(td1, t42);
			append(tr1, t43);
			append(tr1, td2);
			append(td2, t44);
			append(table0, t45);
			append(table0, tr2);
			append(tr2, td3);
			append(td3, code2);
			append(code2, t46);
			append(td3, t47);
			append(td3, sup1);
			append(sup1, t48);
			append(tr2, t49);
			append(tr2, td4);
			append(td4, t50);
			append(tr2, t51);
			append(tr2, td5);
			append(td5, t52);
			append(table0, t53);
			append(table0, tr3);
			append(tr3, td6);
			append(td6, code3);
			append(code3, t54);
			append(td6, t55);
			append(td6, sup2);
			append(sup2, t56);
			append(tr3, t57);
			append(tr3, td7);
			append(td7, t58);
			append(tr3, t59);
			append(tr3, td8);
			append(td8, t60);
			append(table0, t61);
			append(table0, tr4);
			append(tr4, td9);
			append(td9, code4);
			append(code4, t62);
			append(tr4, t63);
			append(tr4, td10);
			append(td10, t64);
			append(tr4, t65);
			append(tr4, td11);
			append(td11, t66);
			append(td11, code5);
			append(code5, t67);
			insert(target, t68, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t69);
			append(section2, p4);
			append(p4, t70);
			append(section2, t71);
			append(section2, table1);
			append(table1, tr5);
			append(tr5, th3);
			append(th3, t72);
			append(tr5, t73);
			append(tr5, th4);
			append(th4, t74);
			append(table1, t75);
			append(table1, tr6);
			append(tr6, td12);
			append(td12, t76);
			append(tr6, t77);
			append(tr6, td13);
			append(td13, t78);
			append(table1, t79);
			append(table1, tr7);
			append(tr7, td14);
			append(td14, t80);
			append(tr7, t81);
			append(tr7, td15);
			append(td15, t82);
			append(table1, t83);
			append(table1, tr8);
			append(tr8, td16);
			append(td16, t84);
			append(tr8, t85);
			append(tr8, td17);
			append(td17, t86);
			append(table1, t87);
			append(table1, tr9);
			append(tr9, td18);
			append(td18, t88);
			append(tr9, t89);
			append(tr9, td19);
			append(td19, t90);
			append(table1, t91);
			append(table1, tr10);
			append(tr10, td20);
			append(td20, t92);
			append(tr10, t93);
			append(tr10, td21);
			append(td21, t94);
			append(table1, t95);
			append(table1, tr11);
			append(tr11, td22);
			append(td22, t96);
			append(tr11, t97);
			append(tr11, td23);
			append(td23, t98);
			append(section2, t99);
			append(section2, p5);
			append(p5, t100);
			append(p5, a3);
			append(a3, t101);
			append(p5, t102);
			append(section2, t103);
			mount_component(samplecode1, section2, null);
			insert(target, t104, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t105);
			append(section3, ul1);
			append(ul1, li5);
			append(li5, t106);
			insert(target, t107, anchor);
			mount_component(relatedvalidators, target, anchor);
			insert(target, t108, anchor);
			insert(target, section4, anchor);
			append(section4, div);
			mount_component(prevbutton, div, null);
			append(div, t109);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			if (detaching) {
				detach(t30);
				detach(section1);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t68);
				detach(section2);
			}

			heading2.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t104);
				detach(section3);
			}

			heading3.$destroy();

			if (detaching) {
				detach(t107);
			}

			relatedvalidators.$destroy(detaching);

			if (detaching) {
				detach(t108);
				detach(section4);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Mailgun plugin";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import { a as Cards, b as Card } from './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as ChangelogLayout } from './chunk.4a563e90.js';

/* src/routes/updates/v1.4.0/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/updates/v1.4.0/index.svelte";

// (10:8) <Heading>
function create_default_slot_14(ctx) {
	var t;

	return {
		c: function create() {
			t = text("New features");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "New features");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (20:12) <Card target="/guide/validators/id/argentinian-identification-number" title="Argentinian identification number">
function create_default_slot_13(ctx) {
	var t;

	return {
		c: function create() {
			t = text("(DNI)");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "(DNI)");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (21:12) <Card target="/guide/validators/id/colombian-identification-number" title="Colombian identification number">
function create_default_slot_12(ctx) {
	var t;

	return {
		c: function create() {
			t = text("(NIT)");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "(NIT)");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (22:12) <Card target="/guide/validators/id/french-identification-number" title="French identification number">
function create_default_slot_11(ctx) {
	var t;

	return {
		c: function create() {
			t = text("(NIR)");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "(NIR)");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (23:12) <Card target="/guide/validators/id/hong-kong-identification-number" title="Hong Kong identification number">
function create_default_slot_10(ctx) {
	var t;

	return {
		c: function create() {
			t = text("(HKID)");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "(HKID)");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (24:12) <Card target="/guide/validators/id/indian-identification-number" title="Indian identification number">
function create_default_slot_9(ctx) {
	var t;

	return {
		c: function create() {
			t = text("(Aadhaar)");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "(Aadhaar)");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (25:12) <Card target="/guide/validators/id/korean-identification-number" title="Korean identification number">
function create_default_slot_8(ctx) {
	var t;

	return {
		c: function create() {
			t = text("(RRN)");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "(RRN)");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (26:12) <Card target="/guide/validators/id/malaysian-identification-number" title="Malaysian identification number">
function create_default_slot_7(ctx) {
	var t;

	return {
		c: function create() {
			t = text("(NRIC)");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "(NRIC)");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (27:12) <Card target="/guide/validators/id/mexican-identification-number" title="Mexican identification number">
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("(CURP)");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "(CURP)");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (28:12) <Card target="/guide/validators/id/norwegian-identification-number" title="Norwegian identification number">
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("(Fødselsnummer)");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "(Fødselsnummer)");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (19:8) <Cards>
function create_default_slot_4(ctx) {
	var t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, current;

	var card0 = new Card({
		props: {
		target: "/guide/validators/id/argentinian-identification-number",
		title: "Argentinian identification number",
		$$slots: { default: [create_default_slot_13] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card1 = new Card({
		props: {
		target: "/guide/validators/id/colombian-identification-number",
		title: "Colombian identification number",
		$$slots: { default: [create_default_slot_12] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card2 = new Card({
		props: {
		target: "/guide/validators/id/french-identification-number",
		title: "French identification number",
		$$slots: { default: [create_default_slot_11] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card3 = new Card({
		props: {
		target: "/guide/validators/id/hong-kong-identification-number",
		title: "Hong Kong identification number",
		$$slots: { default: [create_default_slot_10] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card4 = new Card({
		props: {
		target: "/guide/validators/id/indian-identification-number",
		title: "Indian identification number",
		$$slots: { default: [create_default_slot_9] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card5 = new Card({
		props: {
		target: "/guide/validators/id/korean-identification-number",
		title: "Korean identification number",
		$$slots: { default: [create_default_slot_8] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card6 = new Card({
		props: {
		target: "/guide/validators/id/malaysian-identification-number",
		title: "Malaysian identification number",
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card7 = new Card({
		props: {
		target: "/guide/validators/id/mexican-identification-number",
		title: "Mexican identification number",
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card8 = new Card({
		props: {
		target: "/guide/validators/id/norwegian-identification-number",
		title: "Norwegian identification number",
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card9 = new Card({
		props: {
		target: "/guide/validators/id/peruvian-identification-number",
		title: "Peruvian identification number"
	},
		$$inline: true
	});

	var card10 = new Card({
		props: {
		target: "/guide/validators/id/taiwanese-identification-number",
		title: "Taiwanese identification number"
	},
		$$inline: true
	});

	var card11 = new Card({
		props: {
		target: "/guide/validators/id/uruguayan-identification-number",
		title: "Uruguayan identification number"
	},
		$$inline: true
	});

	return {
		c: function create() {
			card0.$$.fragment.c();
			t0 = space();
			card1.$$.fragment.c();
			t1 = space();
			card2.$$.fragment.c();
			t2 = space();
			card3.$$.fragment.c();
			t3 = space();
			card4.$$.fragment.c();
			t4 = space();
			card5.$$.fragment.c();
			t5 = space();
			card6.$$.fragment.c();
			t6 = space();
			card7.$$.fragment.c();
			t7 = space();
			card8.$$.fragment.c();
			t8 = space();
			card9.$$.fragment.c();
			t9 = space();
			card10.$$.fragment.c();
			t10 = space();
			card11.$$.fragment.c();
		},

		l: function claim(nodes) {
			card0.$$.fragment.l(nodes);
			t0 = claim_text(nodes, "\n            ");
			card1.$$.fragment.l(nodes);
			t1 = claim_text(nodes, "\n            ");
			card2.$$.fragment.l(nodes);
			t2 = claim_text(nodes, "\n            ");
			card3.$$.fragment.l(nodes);
			t3 = claim_text(nodes, "\n            ");
			card4.$$.fragment.l(nodes);
			t4 = claim_text(nodes, "\n            ");
			card5.$$.fragment.l(nodes);
			t5 = claim_text(nodes, "\n            ");
			card6.$$.fragment.l(nodes);
			t6 = claim_text(nodes, "\n            ");
			card7.$$.fragment.l(nodes);
			t7 = claim_text(nodes, "\n            ");
			card8.$$.fragment.l(nodes);
			t8 = claim_text(nodes, "\n            ");
			card9.$$.fragment.l(nodes);
			t9 = claim_text(nodes, "\n            ");
			card10.$$.fragment.l(nodes);
			t10 = claim_text(nodes, "\n            ");
			card11.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(card0, target, anchor);
			insert(target, t0, anchor);
			mount_component(card1, target, anchor);
			insert(target, t1, anchor);
			mount_component(card2, target, anchor);
			insert(target, t2, anchor);
			mount_component(card3, target, anchor);
			insert(target, t3, anchor);
			mount_component(card4, target, anchor);
			insert(target, t4, anchor);
			mount_component(card5, target, anchor);
			insert(target, t5, anchor);
			mount_component(card6, target, anchor);
			insert(target, t6, anchor);
			mount_component(card7, target, anchor);
			insert(target, t7, anchor);
			mount_component(card8, target, anchor);
			insert(target, t8, anchor);
			mount_component(card9, target, anchor);
			insert(target, t9, anchor);
			mount_component(card10, target, anchor);
			insert(target, t10, anchor);
			mount_component(card11, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var card0_changes = {};
			if (changed.$$scope) card0_changes.$$scope = { changed, ctx };
			card0.$set(card0_changes);

			var card1_changes = {};
			if (changed.$$scope) card1_changes.$$scope = { changed, ctx };
			card1.$set(card1_changes);

			var card2_changes = {};
			if (changed.$$scope) card2_changes.$$scope = { changed, ctx };
			card2.$set(card2_changes);

			var card3_changes = {};
			if (changed.$$scope) card3_changes.$$scope = { changed, ctx };
			card3.$set(card3_changes);

			var card4_changes = {};
			if (changed.$$scope) card4_changes.$$scope = { changed, ctx };
			card4.$set(card4_changes);

			var card5_changes = {};
			if (changed.$$scope) card5_changes.$$scope = { changed, ctx };
			card5.$set(card5_changes);

			var card6_changes = {};
			if (changed.$$scope) card6_changes.$$scope = { changed, ctx };
			card6.$set(card6_changes);

			var card7_changes = {};
			if (changed.$$scope) card7_changes.$$scope = { changed, ctx };
			card7.$set(card7_changes);

			var card8_changes = {};
			if (changed.$$scope) card8_changes.$$scope = { changed, ctx };
			card8.$set(card8_changes);
		},

		i: function intro(local) {
			if (current) return;
			card0.$$.fragment.i(local);

			card1.$$.fragment.i(local);

			card2.$$.fragment.i(local);

			card3.$$.fragment.i(local);

			card4.$$.fragment.i(local);

			card5.$$.fragment.i(local);

			card6.$$.fragment.i(local);

			card7.$$.fragment.i(local);

			card8.$$.fragment.i(local);

			card9.$$.fragment.i(local);

			card10.$$.fragment.i(local);

			card11.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			card0.$$.fragment.o(local);
			card1.$$.fragment.o(local);
			card2.$$.fragment.o(local);
			card3.$$.fragment.o(local);
			card4.$$.fragment.o(local);
			card5.$$.fragment.o(local);
			card6.$$.fragment.o(local);
			card7.$$.fragment.o(local);
			card8.$$.fragment.o(local);
			card9.$$.fragment.o(local);
			card10.$$.fragment.o(local);
			card11.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			card0.$destroy(detaching);

			if (detaching) {
				detach(t0);
			}

			card1.$destroy(detaching);

			if (detaching) {
				detach(t1);
			}

			card2.$destroy(detaching);

			if (detaching) {
				detach(t2);
			}

			card3.$destroy(detaching);

			if (detaching) {
				detach(t3);
			}

			card4.$destroy(detaching);

			if (detaching) {
				detach(t4);
			}

			card5.$destroy(detaching);

			if (detaching) {
				detach(t5);
			}

			card6.$destroy(detaching);

			if (detaching) {
				detach(t6);
			}

			card7.$destroy(detaching);

			if (detaching) {
				detach(t7);
			}

			card8.$destroy(detaching);

			if (detaching) {
				detach(t8);
			}

			card9.$destroy(detaching);

			if (detaching) {
				detach(t9);
			}

			card10.$destroy(detaching);

			if (detaching) {
				detach(t10);
			}

			card11.$destroy(detaching);
		}
	};
}

// (97:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Improvements");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Improvements");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (132:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Bug fixes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Bug fixes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (144:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Upgrading to v1.4.0");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Upgrading to v1.4.0");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <ChangelogLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, ul0, li0, t5, t6, li1, t7, a0, t8, t9, a1, t10, t11, t12, p0, t13, a2, t14, t15, t16, t17, h3, t18, a3, t19, t20, t21, t22, p1, t23, t24, t25, section1, t26, ul1, li2, t27, code0, t28, t29, t30, p2, t31, code1, t32, t33, t34, t35, p3, t36, t37, t38, ul2, li3, t39, code2, t40, t41, t42, li4, t43, a4, t44, t45, t46, li5, t47, a5, t48, t49, t50, li6, t51, a6, t52, t53, a7, t54, t55, t56, section2, t57, ul3, li7, t58, t59, li8, t60, a8, t61, t62, t63, li9, t64, a9, t65, t66, t67, li10, t68, a10, t69, t70, t71, li11, t72, a11, t73, t74, a12, t75, t76, t77, li12, t78, a13, t79, t80, t81, section3, t82, ul4, li13, t83, a14, t84, t85, t86, li14, t87, t88, section4, a15, t89, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_14] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var cards = new Cards({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<form id="demoForm" method="POST"
    data-fvp-trigger="true"
    data-fvp-trigger___class="FormValidation.plugins.Trigger"
    
    data-fvp-tachyons="true"
    data-fvp-tachyons___class="FormValidation.plugins.Tachyons"

    data-fvp-submit-button="true"
    data-fvp-submit-button___class="FormValidation.plugins.SubmitButton"

    data-fvp-icon="true"
    data-fvp-icon___class="FormValidation.plugins.Icon"
    data-fvp-icon___valid="fa fa-check"
    data-fvp-icon___invalid="fa fa-times"
    data-fvp-icon___validating="fa fa-refresh">
...
</form>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    const form = document.getElementById('demoForm');
    FormValidation.formValidation(form, {
        plugins: {
            // You have to register the Declarative plugin only
            declarative: new FormValidation.plugins.Declarative()
        }
    });
});
</script-tag>
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<form id="demoForm">
...
</form>
    
<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    const form = document.getElementById('demoForm');
    FormValidation.formValidation(form, {
        plugins: {
            declarative: new FormValidation.plugins.Declarative(),
            // Other plugins
            trigger: new FormValidation.plugins.Trigger(),
            tachyons: new FormValidation.plugins.Tachyons(),
            submitButton: new FormValidation.plugins.SubmitButton(),
            icon: new FormValidation.plugins.Icon({
                valid: 'fa fa-check',
                invalid: 'fa fa-times',
                validating: 'fa fa-refresh',
            }),
        }
    });  
});
</script-tag>
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import id from 'formvalidation/dist/es6/validators/id';

const result = id().validate({
    value: ...,
    options: {
        country: 'BR',
        message: 'The input is not a valid Brazilian identification number',
    },
});
` },
		$$inline: true
	});

	var samplecode3 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import brId from 'formvalidation/dist/es6/validators/id/brId';

const result = brId().validate('An ID here');
` },
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Version v1.4.0");
			t1 = space();
			h2 = element("h2");
			t2 = text("Released 20 April 2019");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			ul0 = element("ul");
			li0 = element("li");
			t5 = text("Add verhoeff() helper method that implements the Verhoeff algorithm.");
			t6 = space();
			li1 = element("li");
			t7 = text("The ");
			a0 = element("a");
			t8 = text("vat");
			t9 = text(" validator supports ");
			a1 = element("a");
			t10 = text("Argentinian VAT number");
			t11 = text(".");
			t12 = space();
			p0 = element("p");
			t13 = text("The ");
			a2 = element("a");
			t14 = text("id");
			t15 = text(" validator supports validating more national identification numbers, including:");
			t16 = space();
			cards.$$.fragment.c();
			t17 = space();
			h3 = element("h3");
			t18 = text("The ");
			a3 = element("a");
			t19 = text("Declarative");
			t20 = text(" plugin now supports plugin declarations");
			t21 = space();
			samplecode0.$$.fragment.c();
			t22 = space();
			p1 = element("p");
			t23 = text("It serves the same functionalities such as declaring plugins as");
			t24 = space();
			samplecode1.$$.fragment.c();
			t25 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t26 = space();
			ul1 = element("ul");
			li2 = element("li");
			t27 = text("Separate id validators to ");
			code0 = element("code");
			t28 = text("id");
			t29 = text(" package to save imports when using with ES6 module.");
			t30 = space();
			p2 = element("p");
			t31 = text("In the previous versions, you need to import the whole ");
			code1 = element("code");
			t32 = text("id");
			t33 = text(" package if you only want to validate the identification number of particular country:");
			t34 = space();
			samplecode2.$$.fragment.c();
			t35 = space();
			p3 = element("p");
			t36 = text("This version provides the specfic module for each country. As the result, it saves a lot of size when your application is bundled with popular bundlers as Webpack, Rollup, etc.");
			t37 = space();
			samplecode3.$$.fragment.c();
			t38 = space();
			ul2 = element("ul");
			li3 = element("li");
			t39 = text("Separate vat validators to ");
			code2 = element("code");
			t40 = text("vat");
			t41 = text(" package to save imports when using with ES6 module.");
			t42 = space();
			li4 = element("li");
			t43 = text("In the last version, the ");
			a4 = element("a");
			t44 = text("Recaptcha plugin");
			t45 = text(" doesn't hide the error message and error icon when user click the captcha checkbox.\n            The error icon disappears when the captcha is expired. This version fixes that.");
			t46 = space();
			li5 = element("li");
			t47 = text("Support the latest version of ");
			a5 = element("a");
			t48 = text("TurretCSS");
			t49 = text(" (v5.1.3).");
			t50 = space();
			li6 = element("li");
			t51 = text("The ");
			a6 = element("a");
			t52 = text("vat validator");
			t53 = text(" supports ");
			a7 = element("a");
			t54 = text("Swiss VAT numbers");
			t55 = text(" that end with TVA, IVA, TPV.");
			t56 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t57 = space();
			ul3 = element("ul");
			li7 = element("li");
			t58 = text("Upgrade source code to be compatible with the latest Tyescript version (3.4.4).");
			t59 = space();
			li8 = element("li");
			t60 = text("Fix an issue that the ");
			a8 = element("a");
			t61 = text("ismn validator");
			t62 = text(" passes an invalid ISMN which ends with 0.");
			t63 = space();
			li9 = element("li");
			t64 = text("Fix an issue that the ");
			a9 = element("a");
			t65 = text("meid validator");
			t66 = text(" passes an invalid MEID which ends with 0.");
			t67 = space();
			li10 = element("li");
			t68 = text("The ");
			a10 = element("a");
			t69 = text("iban validator");
			t70 = text(" supports the new format of Costa Rica IBAN number (22 digits currently).");
			t71 = space();
			li11 = element("li");
			t72 = text("Fix an issue that ");
			a11 = element("a");
			t73 = text("icon");
			t74 = text(" is displayed at wrong position for ");
			a12 = element("a");
			t75 = text("Spectre");
			t76 = text(" form.");
			t77 = space();
			li12 = element("li");
			t78 = text("Fix an issue that the ");
			a13 = element("a");
			t79 = text("Message");
			t80 = text(" plugin doesn't ignore field on IE11");
			t81 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t82 = space();
			ul4 = element("ul");
			li13 = element("li");
			t83 = text("From v0.8.1 and older versions: Follow the ");
			a14 = element("a");
			t84 = text("Upgrading to v1.0.0");
			t85 = text(" guide.");
			t86 = space();
			li14 = element("li");
			t87 = text("From v1.0.0: Just download the new version and replace the old files in v1.0.0 with new files in v1.4.0.");
			t88 = space();
			section4 = element("section");
			a15 = element("a");
			t89 = text("Download v1.4.0");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Version v1.4.0");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Released 20 April 2019");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n   ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n\n        ");

			ul0 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t5 = claim_text(li0_nodes, "Add verhoeff() helper method that implements the Verhoeff algorithm.");
			li0_nodes.forEach(detach);
			t6 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t7 = claim_text(li1_nodes, "The ");

			a0 = claim_element(li1_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t8 = claim_text(a0_nodes, "vat");
			a0_nodes.forEach(detach);
			t9 = claim_text(li1_nodes, " validator supports ");

			a1 = claim_element(li1_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t10 = claim_text(a1_nodes, "Argentinian VAT number");
			a1_nodes.forEach(detach);
			t11 = claim_text(li1_nodes, ".");
			li1_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			t12 = claim_text(section0_nodes, "\n\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t13 = claim_text(p0_nodes, "The ");

			a2 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t14 = claim_text(a2_nodes, "id");
			a2_nodes.forEach(detach);
			t15 = claim_text(p0_nodes, " validator supports validating more national identification numbers, including:");
			p0_nodes.forEach(detach);
			t16 = claim_text(section0_nodes, "\n\n        ");
			cards.$$.fragment.l(section0_nodes);
			t17 = claim_text(section0_nodes, "\n\n        ");

			h3 = claim_element(section0_nodes, "H3", {}, false);
			var h3_nodes = children(h3);

			t18 = claim_text(h3_nodes, "The ");

			a3 = claim_element(h3_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t19 = claim_text(a3_nodes, "Declarative");
			a3_nodes.forEach(detach);
			t20 = claim_text(h3_nodes, " plugin now supports plugin declarations");
			h3_nodes.forEach(detach);
			t21 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t22 = claim_text(section0_nodes, "\n\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t23 = claim_text(p1_nodes, "It serves the same functionalities such as declaring plugins as");
			p1_nodes.forEach(detach);
			t24 = claim_text(section0_nodes, "\n\n");
			samplecode1.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t25 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t26 = claim_text(section1_nodes, "\n        ");

			ul1 = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li2 = claim_element(ul1_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t27 = claim_text(li2_nodes, "Separate id validators to ");

			code0 = claim_element(li2_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t28 = claim_text(code0_nodes, "id");
			code0_nodes.forEach(detach);
			t29 = claim_text(li2_nodes, " package to save imports when using with ES6 module.");
			li2_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			t30 = claim_text(section1_nodes, "\n        ");

			p2 = claim_element(section1_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t31 = claim_text(p2_nodes, "In the previous versions, you need to import the whole ");

			code1 = claim_element(p2_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t32 = claim_text(code1_nodes, "id");
			code1_nodes.forEach(detach);
			t33 = claim_text(p2_nodes, " package if you only want to validate the identification number of particular country:");
			p2_nodes.forEach(detach);
			t34 = claim_text(section1_nodes, "\n");
			samplecode2.$$.fragment.l(section1_nodes);
			t35 = claim_text(section1_nodes, " \n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t36 = claim_text(p3_nodes, "This version provides the specfic module for each country. As the result, it saves a lot of size when your application is bundled with popular bundlers as Webpack, Rollup, etc.");
			p3_nodes.forEach(detach);
			t37 = claim_text(section1_nodes, "\n");
			samplecode3.$$.fragment.l(section1_nodes);
			t38 = claim_text(section1_nodes, "\n\n        ");

			ul2 = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul2_nodes = children(ul2);

			li3 = claim_element(ul2_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t39 = claim_text(li3_nodes, "Separate vat validators to ");

			code2 = claim_element(li3_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t40 = claim_text(code2_nodes, "vat");
			code2_nodes.forEach(detach);
			t41 = claim_text(li3_nodes, " package to save imports when using with ES6 module.");
			li3_nodes.forEach(detach);
			t42 = claim_text(ul2_nodes, "\n            ");

			li4 = claim_element(ul2_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			t43 = claim_text(li4_nodes, "In the last version, the ");

			a4 = claim_element(li4_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t44 = claim_text(a4_nodes, "Recaptcha plugin");
			a4_nodes.forEach(detach);
			t45 = claim_text(li4_nodes, " doesn't hide the error message and error icon when user click the captcha checkbox.\n            The error icon disappears when the captcha is expired. This version fixes that.");
			li4_nodes.forEach(detach);
			t46 = claim_text(ul2_nodes, "\n            ");

			li5 = claim_element(ul2_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			t47 = claim_text(li5_nodes, "Support the latest version of ");

			a5 = claim_element(li5_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t48 = claim_text(a5_nodes, "TurretCSS");
			a5_nodes.forEach(detach);
			t49 = claim_text(li5_nodes, " (v5.1.3).");
			li5_nodes.forEach(detach);
			t50 = claim_text(ul2_nodes, "\n            ");

			li6 = claim_element(ul2_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			t51 = claim_text(li6_nodes, "The ");

			a6 = claim_element(li6_nodes, "A", { href: true, class: true }, false);
			var a6_nodes = children(a6);

			t52 = claim_text(a6_nodes, "vat validator");
			a6_nodes.forEach(detach);
			t53 = claim_text(li6_nodes, " supports ");

			a7 = claim_element(li6_nodes, "A", { href: true, class: true }, false);
			var a7_nodes = children(a7);

			t54 = claim_text(a7_nodes, "Swiss VAT numbers");
			a7_nodes.forEach(detach);
			t55 = claim_text(li6_nodes, " that end with TVA, IVA, TPV.");
			li6_nodes.forEach(detach);
			ul2_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t56 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t57 = claim_text(section2_nodes, "\n        ");

			ul3 = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul3_nodes = children(ul3);

			li7 = claim_element(ul3_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			t58 = claim_text(li7_nodes, "Upgrade source code to be compatible with the latest Tyescript version (3.4.4).");
			li7_nodes.forEach(detach);
			t59 = claim_text(ul3_nodes, "\n            ");

			li8 = claim_element(ul3_nodes, "LI", {}, false);
			var li8_nodes = children(li8);

			t60 = claim_text(li8_nodes, "Fix an issue that the ");

			a8 = claim_element(li8_nodes, "A", { href: true, class: true }, false);
			var a8_nodes = children(a8);

			t61 = claim_text(a8_nodes, "ismn validator");
			a8_nodes.forEach(detach);
			t62 = claim_text(li8_nodes, " passes an invalid ISMN which ends with 0.");
			li8_nodes.forEach(detach);
			t63 = claim_text(ul3_nodes, "\n            ");

			li9 = claim_element(ul3_nodes, "LI", {}, false);
			var li9_nodes = children(li9);

			t64 = claim_text(li9_nodes, "Fix an issue that the ");

			a9 = claim_element(li9_nodes, "A", { href: true, class: true }, false);
			var a9_nodes = children(a9);

			t65 = claim_text(a9_nodes, "meid validator");
			a9_nodes.forEach(detach);
			t66 = claim_text(li9_nodes, " passes an invalid MEID which ends with 0.");
			li9_nodes.forEach(detach);
			t67 = claim_text(ul3_nodes, "\n            ");

			li10 = claim_element(ul3_nodes, "LI", {}, false);
			var li10_nodes = children(li10);

			t68 = claim_text(li10_nodes, "The ");

			a10 = claim_element(li10_nodes, "A", { href: true, class: true }, false);
			var a10_nodes = children(a10);

			t69 = claim_text(a10_nodes, "iban validator");
			a10_nodes.forEach(detach);
			t70 = claim_text(li10_nodes, " supports the new format of Costa Rica IBAN number (22 digits currently).");
			li10_nodes.forEach(detach);
			t71 = claim_text(ul3_nodes, "\n            ");

			li11 = claim_element(ul3_nodes, "LI", {}, false);
			var li11_nodes = children(li11);

			t72 = claim_text(li11_nodes, "Fix an issue that ");

			a11 = claim_element(li11_nodes, "A", { href: true, class: true }, false);
			var a11_nodes = children(a11);

			t73 = claim_text(a11_nodes, "icon");
			a11_nodes.forEach(detach);
			t74 = claim_text(li11_nodes, " is displayed at wrong position for ");

			a12 = claim_element(li11_nodes, "A", { href: true, class: true }, false);
			var a12_nodes = children(a12);

			t75 = claim_text(a12_nodes, "Spectre");
			a12_nodes.forEach(detach);
			t76 = claim_text(li11_nodes, " form.");
			li11_nodes.forEach(detach);
			t77 = claim_text(ul3_nodes, "\n            ");

			li12 = claim_element(ul3_nodes, "LI", {}, false);
			var li12_nodes = children(li12);

			t78 = claim_text(li12_nodes, "Fix an issue that the ");

			a13 = claim_element(li12_nodes, "A", { href: true, class: true }, false);
			var a13_nodes = children(a13);

			t79 = claim_text(a13_nodes, "Message");
			a13_nodes.forEach(detach);
			t80 = claim_text(li12_nodes, " plugin doesn't ignore field on IE11");
			li12_nodes.forEach(detach);
			ul3_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			t81 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t82 = claim_text(section3_nodes, "\n        ");

			ul4 = claim_element(section3_nodes, "UL", { class: true }, false);
			var ul4_nodes = children(ul4);

			li13 = claim_element(ul4_nodes, "LI", {}, false);
			var li13_nodes = children(li13);

			t83 = claim_text(li13_nodes, "From v0.8.1 and older versions: Follow the ");

			a14 = claim_element(li13_nodes, "A", { href: true, class: true }, false);
			var a14_nodes = children(a14);

			t84 = claim_text(a14_nodes, "Upgrading to v1.0.0");
			a14_nodes.forEach(detach);
			t85 = claim_text(li13_nodes, " guide.");
			li13_nodes.forEach(detach);
			t86 = claim_text(ul4_nodes, "\n            ");

			li14 = claim_element(ul4_nodes, "LI", {}, false);
			var li14_nodes = children(li14);

			t87 = claim_text(li14_nodes, "From v1.0.0: Just download the new version and replace the old files in v1.0.0 with new files in v1.4.0.");
			li14_nodes.forEach(detach);
			ul4_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			t88 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			a15 = claim_element(section4_nodes, "A", { href: true, class: true, title: true }, false);
			var a15_nodes = children(a15);

			t89 = claim_text(a15_nodes, "Download v1.4.0");
			a15_nodes.forEach(detach);
			section4_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 92);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 144);
			add_location(li0, file, 12, 12, 314);
			a0.href = "/guide/validators/vat";
			a0.className = "blue dim link";
			add_location(a0, file, 13, 20, 412);
			a1.href = "/guide/validators/vat/argentinian-vat-number";
			a1.className = "blue dim link";
			add_location(a1, file, 13, 101, 493);
			add_location(li1, file, 13, 12, 404);
			ul0.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul0, file, 11, 8, 269);
			a2.href = "/guide/validators/id";
			a2.className = "blue dim link";
			add_location(a2, file, 16, 31, 649);
			p0.className = "lh-copy";
			add_location(p0, file, 16, 8, 626);
			a3.href = "/guide/plugins/declarative";
			a3.className = "blue dim link";
			add_location(a3, file, 33, 16, 2421);
			add_location(h3, file, 33, 8, 2413);
			p1.className = "lh-copy";
			add_location(p1, file, 66, 8, 3497);
			section0.className = "mv5";
			add_location(section0, file, 8, 3, 198);
			add_location(code0, file, 98, 42, 4536);
			add_location(li2, file, 98, 12, 4506);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 97, 8, 4461);
			add_location(code1, file, 100, 82, 4705);
			p2.className = "lh-copy";
			add_location(p2, file, 100, 8, 4631);
			p3.className = "lh-copy";
			add_location(p3, file, 113, 8, 5141);
			add_location(code2, file, 122, 43, 5638);
			add_location(li3, file, 122, 12, 5607);
			a4.href = "/guide/plugins/recaptcha";
			a4.className = "blue dim link";
			add_location(a4, file, 123, 41, 5753);
			add_location(li4, file, 123, 12, 5724);
			a5.href = "/guide/plugins/turret";
			a5.className = "blue dim link";
			add_location(a5, file, 125, 46, 6058);
			add_location(li5, file, 125, 12, 6024);
			a6.href = "/guide/validators/vat";
			a6.className = "blue dim link";
			add_location(a6, file, 126, 20, 6161);
			a7.href = "/guide/validators/vat/swiss-vat-number";
			a7.className = "blue dim link";
			add_location(a7, file, 126, 101, 6242);
			add_location(li6, file, 126, 12, 6153);
			ul2.className = "pa0 ma0 ml3 lh-copy mt4";
			add_location(ul2, file, 121, 8, 5551);
			section1.className = "mv5";
			add_location(section1, file, 95, 4, 4391);
			add_location(li7, file, 133, 12, 6515);
			a8.href = "/guide/validators/ismn";
			a8.className = "blue dim link";
			add_location(a8, file, 134, 38, 6642);
			add_location(li8, file, 134, 12, 6616);
			a9.href = "/guide/validators/meid";
			a9.className = "blue dim link";
			add_location(a9, file, 135, 38, 6801);
			add_location(li9, file, 135, 12, 6775);
			a10.href = "/guide/validators/iban";
			a10.className = "blue dim link";
			add_location(a10, file, 136, 20, 6942);
			add_location(li10, file, 136, 12, 6934);
			a11.href = "/guide/plugins/icon";
			a11.className = "blue dim link";
			add_location(a11, file, 137, 34, 7128);
			a12.href = "/guide/plugins/spectre";
			a12.className = "blue dim link";
			add_location(a12, file, 137, 130, 7224);
			add_location(li11, file, 137, 12, 7106);
			a13.href = "/guide/plugins/message";
			a13.className = "blue dim link";
			add_location(a13, file, 138, 38, 7340);
			add_location(li12, file, 138, 12, 7314);
			ul3.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul3, file, 132, 8, 6470);
			section2.className = "mv5";
			add_location(section2, file, 130, 4, 6403);
			a14.href = "/updates/v1.0.0/#upgrading-to-v1-0-0";
			a14.className = "blue dim link";
			add_location(a14, file, 145, 59, 7651);
			add_location(li13, file, 145, 12, 7604);
			add_location(li14, file, 146, 12, 7768);
			ul4.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul4, file, 144, 8, 7559);
			section3.className = "mv5";
			add_location(section3, file, 142, 4, 7482);
			a15.href = "/download";
			a15.className = "f6 f5-ns fw6 dib ba b--black-20 bg-blue white ph3 ph4-ns pv2 pv3-ns br2 grow no-underline";
			a15.title = "Download";
			add_location(a15, file, 151, 8, 7949);
			section4.className = "tc mv5";
			add_location(section4, file, 150, 4, 7916);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, ul0);
			append(ul0, li0);
			append(li0, t5);
			append(ul0, t6);
			append(ul0, li1);
			append(li1, t7);
			append(li1, a0);
			append(a0, t8);
			append(li1, t9);
			append(li1, a1);
			append(a1, t10);
			append(li1, t11);
			append(section0, t12);
			append(section0, p0);
			append(p0, t13);
			append(p0, a2);
			append(a2, t14);
			append(p0, t15);
			append(section0, t16);
			mount_component(cards, section0, null);
			append(section0, t17);
			append(section0, h3);
			append(h3, t18);
			append(h3, a3);
			append(a3, t19);
			append(h3, t20);
			append(section0, t21);
			mount_component(samplecode0, section0, null);
			append(section0, t22);
			append(section0, p1);
			append(p1, t23);
			append(section0, t24);
			mount_component(samplecode1, section0, null);
			insert(target, t25, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t26);
			append(section1, ul1);
			append(ul1, li2);
			append(li2, t27);
			append(li2, code0);
			append(code0, t28);
			append(li2, t29);
			append(section1, t30);
			append(section1, p2);
			append(p2, t31);
			append(p2, code1);
			append(code1, t32);
			append(p2, t33);
			append(section1, t34);
			mount_component(samplecode2, section1, null);
			append(section1, t35);
			append(section1, p3);
			append(p3, t36);
			append(section1, t37);
			mount_component(samplecode3, section1, null);
			append(section1, t38);
			append(section1, ul2);
			append(ul2, li3);
			append(li3, t39);
			append(li3, code2);
			append(code2, t40);
			append(li3, t41);
			append(ul2, t42);
			append(ul2, li4);
			append(li4, t43);
			append(li4, a4);
			append(a4, t44);
			append(li4, t45);
			append(ul2, t46);
			append(ul2, li5);
			append(li5, t47);
			append(li5, a5);
			append(a5, t48);
			append(li5, t49);
			append(ul2, t50);
			append(ul2, li6);
			append(li6, t51);
			append(li6, a6);
			append(a6, t52);
			append(li6, t53);
			append(li6, a7);
			append(a7, t54);
			append(li6, t55);
			insert(target, t56, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t57);
			append(section2, ul3);
			append(ul3, li7);
			append(li7, t58);
			append(ul3, t59);
			append(ul3, li8);
			append(li8, t60);
			append(li8, a8);
			append(a8, t61);
			append(li8, t62);
			append(ul3, t63);
			append(ul3, li9);
			append(li9, t64);
			append(li9, a9);
			append(a9, t65);
			append(li9, t66);
			append(ul3, t67);
			append(ul3, li10);
			append(li10, t68);
			append(li10, a10);
			append(a10, t69);
			append(li10, t70);
			append(ul3, t71);
			append(ul3, li11);
			append(li11, t72);
			append(li11, a11);
			append(a11, t73);
			append(li11, t74);
			append(li11, a12);
			append(a12, t75);
			append(li11, t76);
			append(ul3, t77);
			append(ul3, li12);
			append(li12, t78);
			append(li12, a13);
			append(a13, t79);
			append(li12, t80);
			insert(target, t81, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t82);
			append(section3, ul4);
			append(ul4, li13);
			append(li13, t83);
			append(li13, a14);
			append(a14, t84);
			append(li13, t85);
			append(ul4, t86);
			append(ul4, li14);
			append(li14, t87);
			insert(target, t88, anchor);
			insert(target, section4, anchor);
			append(section4, a15);
			append(a15, t89);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var cards_changes = {};
			if (changed.$$scope) cards_changes.$$scope = { changed, ctx };
			cards.$set(cards_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			cards.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			samplecode3.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			cards.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			samplecode3.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			cards.$destroy();

			samplecode0.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t25);
				detach(section1);
			}

			heading1.$destroy();

			samplecode2.$destroy();

			samplecode3.$destroy();

			if (detaching) {
				detach(t56);
				detach(section2);
			}

			heading2.$destroy();

			if (detaching) {
				detach(t81);
				detach(section3);
			}

			heading3.$destroy();

			if (detaching) {
				detach(t88);
				detach(section4);
			}
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var changeloglayout = new ChangelogLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			changeloglayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			changeloglayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • v1.4.0";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(changeloglayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var changeloglayout_changes = {};
			if (changed.$$scope) changeloglayout_changes.$$scope = { changed, ctx };
			changeloglayout.$set(changeloglayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			changeloglayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			changeloglayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			changeloglayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';

/* src/routes/guide/validators/string-length/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/validators/string-length/index.svelte";

// (10:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (77:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (83:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("HTML5 Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "HTML5 Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (89:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("ES6 Module Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "ES6 Module Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (121:12) <PrevButton target="/guide/validators/string-case">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("stringCase validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "stringCase validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (122:12) <NextButton target="/guide/validators/uri">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("uri validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "uri validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, h30, t5, t6, p0, sup0, t7, t8, a0, t9, t10, t11, table, tr0, th0, t12, t13, th1, t14, t15, th2, t16, t17, th3, t18, t19, tr1, td0, code0, t20, sup1, t21, t22, td1, code1, t23, t24, code2, t25, t26, td2, t27, t28, td3, t29, t30, tr2, td4, code3, t31, t32, td5, code4, t33, t34, td6, t35, t36, td7, t37, t38, tr3, td8, code5, t39, sup2, t40, t41, td9, code6, t42, t43, code7, t44, t45, td10, t46, t47, td11, t48, t49, tr4, td12, code8, t50, t51, td13, code9, t52, t53, td14, t54, t55, td15, t56, code10, t57, t58, tr5, td16, code11, t59, t60, td17, code12, t61, t62, td18, t63, t64, td19, t65, code13, t66, t67, p1, t68, code14, t69, t70, code15, t71, t72, t73, h31, t74, t75, t76, section1, t77, p2, t78, span0, t79, t80, span1, t81, t82, t83, t84, section2, t85, p3, t86, a1, t87, t88, code16, t89, t90, code17, t91, t92, t93, t94, section3, t95, p4, t96, t97, t98, t99, section4, div, t100, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import stringLength from 'formvalidation/dist/es6/validators/stringLength';

const result = stringLength().validate({
    value: ...,
    options: {
        'case': ...,
        message: ...,
    },
});
/*
result is an object of
{
    valid: true or false,
    message: The error message
}
*/
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo0 = new Demo({
		props: {
		prefix: "/guide/validators/string-length/basic",
		frameworks: ['bootstrap', 'tachyons']
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/validators/string-length/html5",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import stringLength from 'formvalidation/dist/es6/validators/stringLength';

const res1 = stringLength().validate({
    value: '123456',
    options: {
        max: 10,
        message: 'The input has to be less than 11 characters',
    },
});
// res1.valid === true

const res2 = stringLength().validate({
    value: '1234567890â™¥',
    options: {
        min: 5,
        max: 10,
        message: 'The input has to be between 5 and 10 characters long',
    },
});
// res2.valid === false
` },
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['notEmpty'] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/validators/string-case",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/validators/uri",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("stringLength validator");
			t1 = space();
			h2 = element("h2");
			t2 = text("Validate the length of a string");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			h30 = element("h3");
			t5 = text("Using with form field");
			t6 = space();
			p0 = element("p");
			sup0 = element("sup");
			t7 = text("*");
			t8 = text(" presents a required option. The HTML attributes are used to set the validator options via the ");
			a0 = element("a");
			t9 = text("Declarative");
			t10 = text(" plugin");
			t11 = space();
			table = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t12 = text("Name");
			t13 = space();
			th1 = element("th");
			t14 = text("HTML attribute");
			t15 = space();
			th2 = element("th");
			t16 = text("Type");
			t17 = space();
			th3 = element("th");
			t18 = text("Description");
			t19 = space();
			tr1 = element("tr");
			td0 = element("td");
			code0 = element("code");
			t20 = text("max");
			sup1 = element("sup");
			t21 = text("*");
			t22 = space();
			td1 = element("td");
			code1 = element("code");
			t23 = text("data-fv-string-length___max");
			t24 = text(" or ");
			code2 = element("code");
			t25 = text("maxlength");
			t26 = space();
			td2 = element("td");
			t27 = text("Number");
			t28 = space();
			td3 = element("td");
			t29 = text("The maximum length");
			t30 = space();
			tr2 = element("tr");
			td4 = element("td");
			code3 = element("code");
			t31 = text("message");
			t32 = space();
			td5 = element("td");
			code4 = element("code");
			t33 = text("data-fv-string-length___message");
			t34 = space();
			td6 = element("td");
			t35 = text("String");
			t36 = space();
			td7 = element("td");
			t37 = text("The error message");
			t38 = space();
			tr3 = element("tr");
			td8 = element("td");
			code5 = element("code");
			t39 = text("min");
			sup2 = element("sup");
			t40 = text("*");
			t41 = space();
			td9 = element("td");
			code6 = element("code");
			t42 = text("data-fv-string-length___min");
			t43 = text(" or ");
			code7 = element("code");
			t44 = text("minlength");
			t45 = space();
			td10 = element("td");
			t46 = text("Number");
			t47 = space();
			td11 = element("td");
			t48 = text("The minimum length");
			t49 = space();
			tr4 = element("tr");
			td12 = element("td");
			code8 = element("code");
			t50 = text("utf8Bytes");
			t51 = space();
			td13 = element("td");
			code9 = element("code");
			t52 = text("data-fv-string-length___utf8-bytes");
			t53 = space();
			td14 = element("td");
			t54 = text("Boolean");
			t55 = space();
			td15 = element("td");
			t56 = text("Evaluate string length in UTF-8 bytes. Default to ");
			code10 = element("code");
			t57 = text("false");
			t58 = space();
			tr5 = element("tr");
			td16 = element("td");
			code11 = element("code");
			t59 = text("trim");
			t60 = space();
			td17 = element("td");
			code12 = element("code");
			t61 = text("data-fv-string-length___trim");
			t62 = space();
			td18 = element("td");
			t63 = text("Boolean");
			t64 = space();
			td19 = element("td");
			t65 = text("Indicate the length will be calculated after trimming the value or not. Default to ");
			code13 = element("code");
			t66 = text("false");
			t67 = space();
			p1 = element("p");
			t68 = text("At least one of ");
			code14 = element("code");
			t69 = text("min");
			t70 = text(" and ");
			code15 = element("code");
			t71 = text("max");
			t72 = text(" options is required.");
			t73 = space();
			h31 = element("h3");
			t74 = text("Using with ES6 module");
			t75 = space();
			samplecode0.$$.fragment.c();
			t76 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t77 = space();
			p2 = element("p");
			t78 = text("In the following form, the ");
			span0 = element("span");
			t79 = text("Full name");
			t80 = text(" and ");
			span1 = element("span");
			t81 = text("Bio");
			t82 = text(" fields must be less than 50 and 200 characters respectively.");
			t83 = space();
			demo0.$$.fragment.c();
			t84 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t85 = space();
			p3 = element("p");
			t86 = text("When the ");
			a1 = element("a");
			t87 = text("Declarative");
			t88 = text(" plugin is used, the stringLength validator will be turned on automatically if the input uses HTML 5 ");
			code16 = element("code");
			t89 = text("maxlength");
			t90 = text(" or ");
			code17 = element("code");
			t91 = text("minlength");
			t92 = text(" attribute.");
			t93 = space();
			demo1.$$.fragment.c();
			t94 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t95 = space();
			p4 = element("p");
			t96 = text("The following snippet shows how to use the stringLength validator with ES6 module:");
			t97 = space();
			samplecode1.$$.fragment.c();
			t98 = space();
			relatedvalidators.$$.fragment.c();
			t99 = space();
			section4 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t100 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "stringLength validator");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Validate the length of a string");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n\n        ");

			h30 = claim_element(section0_nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t5 = claim_text(h30_nodes, "Using with form field");
			h30_nodes.forEach(detach);
			t6 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			sup0 = claim_element(p0_nodes, "SUP", {}, false);
			var sup0_nodes = children(sup0);

			t7 = claim_text(sup0_nodes, "*");
			sup0_nodes.forEach(detach);
			t8 = claim_text(p0_nodes, " presents a required option. The HTML attributes are used to set the validator options via the ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t9 = claim_text(a0_nodes, "Declarative");
			a0_nodes.forEach(detach);
			t10 = claim_text(p0_nodes, " plugin");
			p0_nodes.forEach(detach);
			t11 = claim_text(section0_nodes, "\n        ");

			table = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table_nodes = children(table);

			tr0 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t12 = claim_text(th0_nodes, "Name");
			th0_nodes.forEach(detach);
			t13 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t14 = claim_text(th1_nodes, "HTML attribute");
			th1_nodes.forEach(detach);
			t15 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t16 = claim_text(th2_nodes, "Type");
			th2_nodes.forEach(detach);
			t17 = claim_text(tr0_nodes, "\n                ");

			th3 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th3_nodes = children(th3);

			t18 = claim_text(th3_nodes, "Description");
			th3_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t19 = claim_text(table_nodes, "\n            ");

			tr1 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code0 = claim_element(td0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t20 = claim_text(code0_nodes, "max");
			code0_nodes.forEach(detach);

			sup1 = claim_element(td0_nodes, "SUP", {}, false);
			var sup1_nodes = children(sup1);

			t21 = claim_text(sup1_nodes, "*");
			sup1_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t22 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			code1 = claim_element(td1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t23 = claim_text(code1_nodes, "data-fv-string-length___max");
			code1_nodes.forEach(detach);
			t24 = claim_text(td1_nodes, " or ");

			code2 = claim_element(td1_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t25 = claim_text(code2_nodes, "maxlength");
			code2_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			t26 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t27 = claim_text(td2_nodes, "Number");
			td2_nodes.forEach(detach);
			t28 = claim_text(tr1_nodes, "\n                ");

			td3 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			t29 = claim_text(td3_nodes, "The maximum length");
			td3_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t30 = claim_text(table_nodes, "\n            ");

			tr2 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			code3 = claim_element(td4_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t31 = claim_text(code3_nodes, "message");
			code3_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t32 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			code4 = claim_element(td5_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t33 = claim_text(code4_nodes, "data-fv-string-length___message");
			code4_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			t34 = claim_text(tr2_nodes, "\n                ");

			td6 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			t35 = claim_text(td6_nodes, "String");
			td6_nodes.forEach(detach);
			t36 = claim_text(tr2_nodes, "\n                ");

			td7 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			t37 = claim_text(td7_nodes, "The error message");
			td7_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t38 = claim_text(table_nodes, "\n            ");

			tr3 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td8 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			code5 = claim_element(td8_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t39 = claim_text(code5_nodes, "min");
			code5_nodes.forEach(detach);

			sup2 = claim_element(td8_nodes, "SUP", {}, false);
			var sup2_nodes = children(sup2);

			t40 = claim_text(sup2_nodes, "*");
			sup2_nodes.forEach(detach);
			td8_nodes.forEach(detach);
			t41 = claim_text(tr3_nodes, "\n                ");

			td9 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			code6 = claim_element(td9_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t42 = claim_text(code6_nodes, "data-fv-string-length___min");
			code6_nodes.forEach(detach);
			t43 = claim_text(td9_nodes, " or ");

			code7 = claim_element(td9_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t44 = claim_text(code7_nodes, "minlength");
			code7_nodes.forEach(detach);
			td9_nodes.forEach(detach);
			t45 = claim_text(tr3_nodes, "\n                ");

			td10 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td10_nodes = children(td10);

			t46 = claim_text(td10_nodes, "Number");
			td10_nodes.forEach(detach);
			t47 = claim_text(tr3_nodes, "\n                ");

			td11 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td11_nodes = children(td11);

			t48 = claim_text(td11_nodes, "The minimum length");
			td11_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			t49 = claim_text(table_nodes, "\n            ");

			tr4 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			td12 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td12_nodes = children(td12);

			code8 = claim_element(td12_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t50 = claim_text(code8_nodes, "utf8Bytes");
			code8_nodes.forEach(detach);
			td12_nodes.forEach(detach);
			t51 = claim_text(tr4_nodes, "\n                ");

			td13 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td13_nodes = children(td13);

			code9 = claim_element(td13_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t52 = claim_text(code9_nodes, "data-fv-string-length___utf8-bytes");
			code9_nodes.forEach(detach);
			td13_nodes.forEach(detach);
			t53 = claim_text(tr4_nodes, "\n                ");

			td14 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td14_nodes = children(td14);

			t54 = claim_text(td14_nodes, "Boolean");
			td14_nodes.forEach(detach);
			t55 = claim_text(tr4_nodes, "\n                ");

			td15 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td15_nodes = children(td15);

			t56 = claim_text(td15_nodes, "Evaluate string length in UTF-8 bytes. Default to ");

			code10 = claim_element(td15_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t57 = claim_text(code10_nodes, "false");
			code10_nodes.forEach(detach);
			td15_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			t58 = claim_text(table_nodes, "\n            ");

			tr5 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr5_nodes = children(tr5);

			td16 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td16_nodes = children(td16);

			code11 = claim_element(td16_nodes, "CODE", {}, false);
			var code11_nodes = children(code11);

			t59 = claim_text(code11_nodes, "trim");
			code11_nodes.forEach(detach);
			td16_nodes.forEach(detach);
			t60 = claim_text(tr5_nodes, "\n                ");

			td17 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td17_nodes = children(td17);

			code12 = claim_element(td17_nodes, "CODE", {}, false);
			var code12_nodes = children(code12);

			t61 = claim_text(code12_nodes, "data-fv-string-length___trim");
			code12_nodes.forEach(detach);
			td17_nodes.forEach(detach);
			t62 = claim_text(tr5_nodes, "\n                ");

			td18 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td18_nodes = children(td18);

			t63 = claim_text(td18_nodes, "Boolean");
			td18_nodes.forEach(detach);
			t64 = claim_text(tr5_nodes, "\n                ");

			td19 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td19_nodes = children(td19);

			t65 = claim_text(td19_nodes, "Indicate the length will be calculated after trimming the value or not. Default to ");

			code13 = claim_element(td19_nodes, "CODE", {}, false);
			var code13_nodes = children(code13);

			t66 = claim_text(code13_nodes, "false");
			code13_nodes.forEach(detach);
			td19_nodes.forEach(detach);
			tr5_nodes.forEach(detach);
			table_nodes.forEach(detach);
			t67 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t68 = claim_text(p1_nodes, "At least one of ");

			code14 = claim_element(p1_nodes, "CODE", {}, false);
			var code14_nodes = children(code14);

			t69 = claim_text(code14_nodes, "min");
			code14_nodes.forEach(detach);
			t70 = claim_text(p1_nodes, " and ");

			code15 = claim_element(p1_nodes, "CODE", {}, false);
			var code15_nodes = children(code15);

			t71 = claim_text(code15_nodes, "max");
			code15_nodes.forEach(detach);
			t72 = claim_text(p1_nodes, " options is required.");
			p1_nodes.forEach(detach);
			t73 = claim_text(section0_nodes, "\n\n        ");

			h31 = claim_element(section0_nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t74 = claim_text(h31_nodes, "Using with ES6 module");
			h31_nodes.forEach(detach);
			t75 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t76 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t77 = claim_text(section1_nodes, "\n        ");

			p2 = claim_element(section1_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t78 = claim_text(p2_nodes, "In the following form, the ");

			span0 = claim_element(p2_nodes, "SPAN", { class: true }, false);
			var span0_nodes = children(span0);

			t79 = claim_text(span0_nodes, "Full name");
			span0_nodes.forEach(detach);
			t80 = claim_text(p2_nodes, " and ");

			span1 = claim_element(p2_nodes, "SPAN", { class: true }, false);
			var span1_nodes = children(span1);

			t81 = claim_text(span1_nodes, "Bio");
			span1_nodes.forEach(detach);
			t82 = claim_text(p2_nodes, " fields must be less than 50 and 200 characters respectively.");
			p2_nodes.forEach(detach);
			t83 = claim_text(section1_nodes, "\n        ");
			demo0.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t84 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t85 = claim_text(section2_nodes, "\n        ");

			p3 = claim_element(section2_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t86 = claim_text(p3_nodes, "When the ");

			a1 = claim_element(p3_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t87 = claim_text(a1_nodes, "Declarative");
			a1_nodes.forEach(detach);
			t88 = claim_text(p3_nodes, " plugin is used, the stringLength validator will be turned on automatically if the input uses HTML 5 ");

			code16 = claim_element(p3_nodes, "CODE", {}, false);
			var code16_nodes = children(code16);

			t89 = claim_text(code16_nodes, "maxlength");
			code16_nodes.forEach(detach);
			t90 = claim_text(p3_nodes, " or ");

			code17 = claim_element(p3_nodes, "CODE", {}, false);
			var code17_nodes = children(code17);

			t91 = claim_text(code17_nodes, "minlength");
			code17_nodes.forEach(detach);
			t92 = claim_text(p3_nodes, " attribute.");
			p3_nodes.forEach(detach);
			t93 = claim_text(section2_nodes, "\n        ");
			demo1.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t94 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t95 = claim_text(section3_nodes, "\n\n        ");

			p4 = claim_element(section3_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t96 = claim_text(p4_nodes, "The following snippet shows how to use the stringLength validator with ES6 module:");
			p4_nodes.forEach(detach);
			t97 = claim_text(section3_nodes, "\n");
			samplecode1.$$.fragment.l(section3_nodes);
			section3_nodes.forEach(detach);
			t98 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			t99 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			div = claim_element(section4_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t100 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section4_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 104);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 164);
			add_location(h30, file, 11, 8, 294);
			add_location(sup0, file, 12, 29, 354);
			a0.href = "/guide/plugins/declarative";
			a0.className = "blue dim link";
			add_location(a0, file, 12, 136, 461);
			p0.className = "lh-copy i";
			add_location(p0, file, 12, 8, 333);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 15, 16, 678);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 16, 16, 738);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 17, 16, 808);
			th3.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th3, file, 18, 16, 868);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 14, 12, 629);
			add_location(code0, file, 21, 36, 1018);
			add_location(sup1, file, 21, 52, 1034);
			td0.className = "pv2 ph3";
			add_location(td0, file, 21, 16, 998);
			add_location(code1, file, 22, 36, 1088);
			add_location(code2, file, 22, 80, 1132);
			td1.className = "pv2 ph3";
			add_location(td1, file, 22, 16, 1068);
			td2.className = "pv2 ph3";
			add_location(td2, file, 23, 16, 1176);
			td3.className = "pv2 ph3";
			add_location(td3, file, 24, 16, 1224);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 20, 12, 949);
			add_location(code3, file, 27, 36, 1367);
			td4.className = "pv2 ph3";
			add_location(td4, file, 27, 16, 1347);
			add_location(code4, file, 28, 36, 1429);
			td5.className = "pv2 ph3";
			add_location(td5, file, 28, 16, 1409);
			td6.className = "pv2 ph3";
			add_location(td6, file, 29, 16, 1495);
			td7.className = "pv2 ph3";
			add_location(td7, file, 30, 16, 1543);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 26, 12, 1298);
			add_location(code5, file, 33, 36, 1685);
			add_location(sup2, file, 33, 52, 1701);
			td8.className = "pv2 ph3";
			add_location(td8, file, 33, 16, 1665);
			add_location(code6, file, 34, 36, 1755);
			add_location(code7, file, 34, 80, 1799);
			td9.className = "pv2 ph3";
			add_location(td9, file, 34, 16, 1735);
			td10.className = "pv2 ph3";
			add_location(td10, file, 35, 16, 1843);
			td11.className = "pv2 ph3";
			add_location(td11, file, 36, 16, 1891);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 32, 12, 1616);
			add_location(code8, file, 39, 36, 2034);
			td12.className = "pv2 ph3";
			add_location(td12, file, 39, 16, 2014);
			add_location(code9, file, 40, 36, 2098);
			td13.className = "pv2 ph3";
			add_location(td13, file, 40, 16, 2078);
			td14.className = "pv2 ph3";
			add_location(td14, file, 41, 16, 2167);
			add_location(code10, file, 42, 94, 2294);
			td15.className = "pv2 ph3 lh-copy";
			add_location(td15, file, 42, 16, 2216);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 38, 12, 1965);
			add_location(code11, file, 45, 36, 2417);
			td16.className = "pv2 ph3";
			add_location(td16, file, 45, 16, 2397);
			add_location(code12, file, 46, 36, 2476);
			td17.className = "pv2 ph3";
			add_location(td17, file, 46, 16, 2456);
			td18.className = "pv2 ph3";
			add_location(td18, file, 47, 16, 2539);
			add_location(code13, file, 48, 127, 2699);
			td19.className = "pv2 ph3 lh-copy";
			add_location(td19, file, 48, 16, 2588);
			tr5.className = "striped--light-gray";
			add_location(tr5, file, 44, 12, 2348);
			table.className = "collapse ba br2 b--black-10 pv2 ph3 w-100 mb4";
			add_location(table, file, 13, 8, 555);
			add_location(code14, file, 51, 43, 2801);
			add_location(code15, file, 51, 64, 2822);
			p1.className = "lh-copy";
			add_location(p1, file, 51, 8, 2766);
			add_location(h31, file, 53, 8, 2873);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 228);
			span0.className = "i";
			add_location(span0, file, 77, 54, 3425);
			span1.className = "i";
			add_location(span1, file, 77, 91, 3462);
			p2.className = "lh-copy";
			add_location(p2, file, 77, 8, 3379);
			section1.className = "mv5";
			add_location(section1, file, 75, 4, 3308);
			a1.href = "/guide/plugins/declarative";
			a1.className = "blue dim link";
			add_location(a1, file, 83, 36, 3776);
			add_location(code16, file, 83, 211, 3951);
			add_location(code17, file, 83, 237, 3977);
			p3.className = "lh-copy";
			add_location(p3, file, 83, 8, 3748);
			section2.className = "mv5";
			add_location(section2, file, 81, 4, 3677);
			p4.className = "lh-copy";
			add_location(p4, file, 90, 8, 4202);
			section3.className = "mv5";
			add_location(section3, file, 87, 4, 4125);
			div.className = "flex";
			add_location(div, file, 119, 8, 4991);
			section4.className = "mv5";
			add_location(section4, file, 118, 4, 4961);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, h30);
			append(h30, t5);
			append(section0, t6);
			append(section0, p0);
			append(p0, sup0);
			append(sup0, t7);
			append(p0, t8);
			append(p0, a0);
			append(a0, t9);
			append(p0, t10);
			append(section0, t11);
			append(section0, table);
			append(table, tr0);
			append(tr0, th0);
			append(th0, t12);
			append(tr0, t13);
			append(tr0, th1);
			append(th1, t14);
			append(tr0, t15);
			append(tr0, th2);
			append(th2, t16);
			append(tr0, t17);
			append(tr0, th3);
			append(th3, t18);
			append(table, t19);
			append(table, tr1);
			append(tr1, td0);
			append(td0, code0);
			append(code0, t20);
			append(td0, sup1);
			append(sup1, t21);
			append(tr1, t22);
			append(tr1, td1);
			append(td1, code1);
			append(code1, t23);
			append(td1, t24);
			append(td1, code2);
			append(code2, t25);
			append(tr1, t26);
			append(tr1, td2);
			append(td2, t27);
			append(tr1, t28);
			append(tr1, td3);
			append(td3, t29);
			append(table, t30);
			append(table, tr2);
			append(tr2, td4);
			append(td4, code3);
			append(code3, t31);
			append(tr2, t32);
			append(tr2, td5);
			append(td5, code4);
			append(code4, t33);
			append(tr2, t34);
			append(tr2, td6);
			append(td6, t35);
			append(tr2, t36);
			append(tr2, td7);
			append(td7, t37);
			append(table, t38);
			append(table, tr3);
			append(tr3, td8);
			append(td8, code5);
			append(code5, t39);
			append(td8, sup2);
			append(sup2, t40);
			append(tr3, t41);
			append(tr3, td9);
			append(td9, code6);
			append(code6, t42);
			append(td9, t43);
			append(td9, code7);
			append(code7, t44);
			append(tr3, t45);
			append(tr3, td10);
			append(td10, t46);
			append(tr3, t47);
			append(tr3, td11);
			append(td11, t48);
			append(table, t49);
			append(table, tr4);
			append(tr4, td12);
			append(td12, code8);
			append(code8, t50);
			append(tr4, t51);
			append(tr4, td13);
			append(td13, code9);
			append(code9, t52);
			append(tr4, t53);
			append(tr4, td14);
			append(td14, t54);
			append(tr4, t55);
			append(tr4, td15);
			append(td15, t56);
			append(td15, code10);
			append(code10, t57);
			append(table, t58);
			append(table, tr5);
			append(tr5, td16);
			append(td16, code11);
			append(code11, t59);
			append(tr5, t60);
			append(tr5, td17);
			append(td17, code12);
			append(code12, t61);
			append(tr5, t62);
			append(tr5, td18);
			append(td18, t63);
			append(tr5, t64);
			append(tr5, td19);
			append(td19, t65);
			append(td19, code13);
			append(code13, t66);
			append(section0, t67);
			append(section0, p1);
			append(p1, t68);
			append(p1, code14);
			append(code14, t69);
			append(p1, t70);
			append(p1, code15);
			append(code15, t71);
			append(p1, t72);
			append(section0, t73);
			append(section0, h31);
			append(h31, t74);
			append(section0, t75);
			mount_component(samplecode0, section0, null);
			insert(target, t76, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t77);
			append(section1, p2);
			append(p2, t78);
			append(p2, span0);
			append(span0, t79);
			append(p2, t80);
			append(p2, span1);
			append(span1, t81);
			append(p2, t82);
			append(section1, t83);
			mount_component(demo0, section1, null);
			insert(target, t84, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t85);
			append(section2, p3);
			append(p3, t86);
			append(p3, a1);
			append(a1, t87);
			append(p3, t88);
			append(p3, code16);
			append(code16, t89);
			append(p3, t90);
			append(p3, code17);
			append(code17, t91);
			append(p3, t92);
			append(section2, t93);
			mount_component(demo1, section2, null);
			insert(target, t94, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t95);
			append(section3, p4);
			append(p4, t96);
			append(section3, t97);
			mount_component(samplecode1, section3, null);
			insert(target, t98, anchor);
			mount_component(relatedvalidators, target, anchor);
			insert(target, t99, anchor);
			insert(target, section4, anchor);
			append(section4, div);
			mount_component(prevbutton, div, null);
			append(div, t100);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			demo0.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			demo0.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			if (detaching) {
				detach(t76);
				detach(section1);
			}

			heading1.$destroy();

			demo0.$destroy();

			if (detaching) {
				detach(t84);
				detach(section2);
			}

			heading2.$destroy();

			demo1.$destroy();

			if (detaching) {
				detach(t94);
				detach(section3);
			}

			heading3.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t98);
			}

			relatedvalidators.$destroy(detaching);

			if (detaching) {
				detach(t99);
				detach(section4);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation â€¢ stringLength validator";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

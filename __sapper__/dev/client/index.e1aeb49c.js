import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as ChangelogLayout } from './chunk.4a563e90.js';

/* src/routes/updates/v0.3.1/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/updates/v0.3.1/index.svelte";

// (10:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("New features");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "New features");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (19:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (26:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Improvements");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Improvements");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (35:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Bug fixes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Bug fixes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <ChangelogLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, ul0, li0, t5, a0, t6, t7, t8, li1, t9, code0, t10, t11, code1, t12, t13, t14, li2, t15, code2, t16, t17, t18, section1, t19, ul1, li3, t20, code3, t21, t22, t23, section2, t24, ul2, li4, t25, t26, li5, t27, code4, t28, t29, t30, li6, t31, code5, t32, t33, t34, section3, t35, ul3, li7, t36, t37, li8, code6, t38, t39, a1, t40, t41, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Version 0.3.1");
			t1 = space();
			h2 = element("h2");
			t2 = text("Released 17 March 2014");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			ul0 = element("ul");
			li0 = element("li");
			t5 = text("Add ");
			a0 = element("a");
			t6 = text("date");
			t7 = text(" validator");
			t8 = space();
			li1 = element("li");
			t9 = text("Add ");
			code0 = element("code");
			t10 = text("enabled");
			t11 = text(" option and ");
			code1 = element("code");
			t12 = text("enableFieldValidators()");
			t13 = text(" method to enable/disable all validators to given field");
			t14 = space();
			li2 = element("li");
			t15 = text("Add ");
			code2 = element("code");
			t16 = text("bower.json");
			t17 = text(" file");
			t18 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t19 = space();
			ul1 = element("ul");
			li3 = element("li");
			t20 = text("Remove the ");
			code3 = element("code");
			t21 = text("columns");
			t22 = text(" option. Now the plugin works normally no matter how many columns the form uses");
			t23 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t24 = space();
			ul2 = element("ul");
			li4 = element("li");
			t25 = text("Support more form controls on the same row");
			t26 = space();
			li5 = element("li");
			t27 = text("Improve ");
			code4 = element("code");
			t28 = text("updateStatus()");
			t29 = text(" method to make the plugin play well with another");
			t30 = space();
			li6 = element("li");
			t31 = text("The ");
			code5 = element("code");
			t32 = text("resetForm");
			t33 = text(" method now only resets fields with validator rules");
			t34 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t35 = space();
			ul3 = element("ul");
			li7 = element("li");
			t36 = text("The error messages aren't shown if the form field doesn't have label");
			t37 = space();
			li8 = element("li");
			code6 = element("code");
			t38 = text("submitHandler");
			t39 = text(" or default submission isn't called after ");
			a1 = element("a");
			t40 = text("remote validation");
			t41 = text(" completes");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Version 0.3.1");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Released 17 March 2014");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			ul0 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t5 = claim_text(li0_nodes, "Add ");

			a0 = claim_element(li0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t6 = claim_text(a0_nodes, "date");
			a0_nodes.forEach(detach);
			t7 = claim_text(li0_nodes, " validator");
			li0_nodes.forEach(detach);
			t8 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t9 = claim_text(li1_nodes, "Add ");

			code0 = claim_element(li1_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t10 = claim_text(code0_nodes, "enabled");
			code0_nodes.forEach(detach);
			t11 = claim_text(li1_nodes, " option and ");

			code1 = claim_element(li1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t12 = claim_text(code1_nodes, "enableFieldValidators()");
			code1_nodes.forEach(detach);
			t13 = claim_text(li1_nodes, " method to enable/disable all validators to given field");
			li1_nodes.forEach(detach);
			t14 = claim_text(ul0_nodes, "\n            ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t15 = claim_text(li2_nodes, "Add ");

			code2 = claim_element(li2_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t16 = claim_text(code2_nodes, "bower.json");
			code2_nodes.forEach(detach);
			t17 = claim_text(li2_nodes, " file");
			li2_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t18 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t19 = claim_text(section1_nodes, "\n        ");

			ul1 = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li3 = claim_element(ul1_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t20 = claim_text(li3_nodes, "Remove the ");

			code3 = claim_element(li3_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t21 = claim_text(code3_nodes, "columns");
			code3_nodes.forEach(detach);
			t22 = claim_text(li3_nodes, " option. Now the plugin works normally no matter how many columns the form uses");
			li3_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t23 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t24 = claim_text(section2_nodes, "\n        ");

			ul2 = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul2_nodes = children(ul2);

			li4 = claim_element(ul2_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			t25 = claim_text(li4_nodes, "Support more form controls on the same row");
			li4_nodes.forEach(detach);
			t26 = claim_text(ul2_nodes, "\n            ");

			li5 = claim_element(ul2_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			t27 = claim_text(li5_nodes, "Improve ");

			code4 = claim_element(li5_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t28 = claim_text(code4_nodes, "updateStatus()");
			code4_nodes.forEach(detach);
			t29 = claim_text(li5_nodes, " method to make the plugin play well with another");
			li5_nodes.forEach(detach);
			t30 = claim_text(ul2_nodes, "\n            ");

			li6 = claim_element(ul2_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			t31 = claim_text(li6_nodes, "The ");

			code5 = claim_element(li6_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t32 = claim_text(code5_nodes, "resetForm");
			code5_nodes.forEach(detach);
			t33 = claim_text(li6_nodes, " method now only resets fields with validator rules");
			li6_nodes.forEach(detach);
			ul2_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			t34 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t35 = claim_text(section3_nodes, "\n        ");

			ul3 = claim_element(section3_nodes, "UL", { class: true }, false);
			var ul3_nodes = children(ul3);

			li7 = claim_element(ul3_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			t36 = claim_text(li7_nodes, "The error messages aren't shown if the form field doesn't have label");
			li7_nodes.forEach(detach);
			t37 = claim_text(ul3_nodes, "\n            ");

			li8 = claim_element(ul3_nodes, "LI", {}, false);
			var li8_nodes = children(li8);

			code6 = claim_element(li8_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t38 = claim_text(code6_nodes, "submitHandler");
			code6_nodes.forEach(detach);
			t39 = claim_text(li8_nodes, " or default submission isn't called after ");

			a1 = claim_element(li8_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t40 = claim_text(a1_nodes, "remote validation");
			a1_nodes.forEach(detach);
			t41 = claim_text(li8_nodes, " completes");
			li8_nodes.forEach(detach);
			ul3_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 92);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 143);
			a0.href = "/guide/validators/date";
			a0.className = "blue dim link";
			add_location(a0, file, 11, 20, 321);
			add_location(li0, file, 11, 12, 313);
			add_location(code0, file, 12, 20, 420);
			add_location(code1, file, 12, 52, 452);
			add_location(li1, file, 12, 12, 412);
			add_location(code2, file, 13, 20, 569);
			add_location(li2, file, 13, 12, 561);
			ul0.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul0, file, 10, 8, 268);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 198);
			add_location(code3, file, 20, 27, 762);
			add_location(li3, file, 20, 12, 747);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 19, 8, 702);
			section1.className = "mv5";
			add_location(section1, file, 17, 4, 637);
			add_location(li4, file, 27, 12, 1016);
			add_location(code4, file, 28, 24, 1092);
			add_location(li5, file, 28, 12, 1080);
			add_location(code5, file, 29, 20, 1194);
			add_location(li6, file, 29, 12, 1186);
			ul2.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul2, file, 26, 8, 971);
			section2.className = "mv5";
			add_location(section2, file, 24, 4, 901);
			add_location(li7, file, 36, 12, 1419);
			add_location(code6, file, 37, 16, 1513);
			a1.href = "/guide/validators/remote";
			a1.className = "blue dim link";
			add_location(a1, file, 37, 84, 1581);
			add_location(li8, file, 37, 12, 1509);
			ul3.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul3, file, 35, 8, 1374);
			section3.className = "mv5";
			add_location(section3, file, 33, 4, 1307);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, ul0);
			append(ul0, li0);
			append(li0, t5);
			append(li0, a0);
			append(a0, t6);
			append(li0, t7);
			append(ul0, t8);
			append(ul0, li1);
			append(li1, t9);
			append(li1, code0);
			append(code0, t10);
			append(li1, t11);
			append(li1, code1);
			append(code1, t12);
			append(li1, t13);
			append(ul0, t14);
			append(ul0, li2);
			append(li2, t15);
			append(li2, code2);
			append(code2, t16);
			append(li2, t17);
			insert(target, t18, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t19);
			append(section1, ul1);
			append(ul1, li3);
			append(li3, t20);
			append(li3, code3);
			append(code3, t21);
			append(li3, t22);
			insert(target, t23, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t24);
			append(section2, ul2);
			append(ul2, li4);
			append(li4, t25);
			append(ul2, t26);
			append(ul2, li5);
			append(li5, t27);
			append(li5, code4);
			append(code4, t28);
			append(li5, t29);
			append(ul2, t30);
			append(ul2, li6);
			append(li6, t31);
			append(li6, code5);
			append(code5, t32);
			append(li6, t33);
			insert(target, t34, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t35);
			append(section3, ul3);
			append(ul3, li7);
			append(li7, t36);
			append(ul3, t37);
			append(ul3, li8);
			append(li8, code6);
			append(code6, t38);
			append(li8, t39);
			append(li8, a1);
			append(a1, t40);
			append(li8, t41);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			if (detaching) {
				detach(t18);
				detach(section1);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t23);
				detach(section2);
			}

			heading2.$destroy();

			if (detaching) {
				detach(t34);
				detach(section3);
			}

			heading3.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var changeloglayout = new ChangelogLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			changeloglayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			changeloglayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • v0.3.1";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(changeloglayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var changeloglayout_changes = {};
			if (changed.$$scope) changeloglayout_changes.$$scope = { changed, ctx };
			changeloglayout.$set(changeloglayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			changeloglayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			changeloglayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			changeloglayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

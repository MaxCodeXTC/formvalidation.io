import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as ChangelogLayout } from './chunk.4a563e90.js';

/* src/routes/updates/v0.4.0/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/updates/v0.4.0/index.svelte";

// (10:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("New features");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "New features");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (72:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (80:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Improvements");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Improvements");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (89:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Bug fixes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Bug fixes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <ChangelogLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, ul0, li0, i0, t5, t6, li1, i1, t7, t8, table, tr0, th0, t9, t10, th1, t11, t12, tr1, td0, code0, t13, t14, td1, a0, t15, t16, tr2, td2, code1, t17, t18, td3, a1, t19, t20, tr3, td4, code2, t21, t22, td5, a2, t23, t24, tr4, td6, code3, t25, t26, td7, a3, t27, t28, tr5, td8, code4, t29, t30, td9, a4, t31, t32, tr6, td10, code5, t33, t34, td11, a5, t35, t36, tr7, td12, code6, t37, t38, td13, a6, t39, t40, tr8, td14, code7, t41, t42, td15, a7, t43, t44, tr9, td16, code8, t45, t46, td17, a8, t47, t48, ul1, li2, i2, t49, code9, t50, t51, code10, t52, t53, t54, li3, t55, code11, t56, t57, t58, li4, t59, a9, t60, t61, t62, li5, t63, a10, t64, t65, t66, li6, t67, a11, t68, t69, li7, t70, a12, t71, t72, li8, t73, a13, t74, t75, li9, t76, a14, t77, t78, t79, section1, t80, ul2, li10, code12, t81, t82, t83, li11, t84, code13, t85, t86, t87, section2, t88, ul3, li12, t89, a15, t90, t91, t92, li13, i3, t93, t94, li14, t95, code14, t96, t97, t98, section3, t99, ul4, li15, t100, code15, t101, t102, t103, li16, t104, code16, t105, t106, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Version 0.4.0");
			t1 = space();
			h2 = element("h2");
			t2 = text("Released 03 April 2014");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			ul0 = element("ul");
			li0 = element("li");
			i0 = element("i");
			t5 = text(" Set validator option by using HTML 5 attributes");
			t6 = space();
			li1 = element("li");
			i1 = element("i");
			t7 = text(" Support HTML 5 input types:");
			t8 = space();
			table = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t9 = text("HTML 5 attribute");
			t10 = space();
			th1 = element("th");
			t11 = text("Equivalent validator");
			t12 = space();
			tr1 = element("tr");
			td0 = element("td");
			code0 = element("code");
			t13 = text("min=\"...\"");
			t14 = space();
			td1 = element("td");
			a0 = element("a");
			t15 = text("greaterThan validator");
			t16 = space();
			tr2 = element("tr");
			td2 = element("td");
			code1 = element("code");
			t17 = text("max=\"...\"");
			t18 = space();
			td3 = element("td");
			a1 = element("a");
			t19 = text("lessThan validator");
			t20 = space();
			tr3 = element("tr");
			td4 = element("td");
			code2 = element("code");
			t21 = text("maxlength=\"...\"");
			t22 = space();
			td5 = element("td");
			a2 = element("a");
			t23 = text("stringLength validator");
			t24 = space();
			tr4 = element("tr");
			td6 = element("td");
			code3 = element("code");
			t25 = text("pattern=\"...\"");
			t26 = space();
			td7 = element("td");
			a3 = element("a");
			t27 = text("regexp validator");
			t28 = space();
			tr5 = element("tr");
			td8 = element("td");
			code4 = element("code");
			t29 = text("required");
			t30 = space();
			td9 = element("td");
			a4 = element("a");
			t31 = text("notEmpty validator");
			t32 = space();
			tr6 = element("tr");
			td10 = element("td");
			code5 = element("code");
			t33 = text("type=\"color\"");
			t34 = space();
			td11 = element("td");
			a5 = element("a");
			t35 = text("color validator");
			t36 = space();
			tr7 = element("tr");
			td12 = element("td");
			code6 = element("code");
			t37 = text("type=\"email\"");
			t38 = space();
			td13 = element("td");
			a6 = element("a");
			t39 = text("emailAddress validator");
			t40 = space();
			tr8 = element("tr");
			td14 = element("td");
			code7 = element("code");
			t41 = text("type=\"range\"");
			t42 = space();
			td15 = element("td");
			a7 = element("a");
			t43 = text("between validator");
			t44 = space();
			tr9 = element("tr");
			td16 = element("td");
			code8 = element("code");
			t45 = text("type=\"url\"");
			t46 = space();
			td17 = element("td");
			a8 = element("a");
			t47 = text("uri validator");
			t48 = space();
			ul1 = element("ul");
			li2 = element("li");
			i2 = element("i");
			t49 = text(" Set the custom trigger event. It's possible to use ");
			code9 = element("code");
			t50 = text("data-bv-trigger");
			t51 = text(" attribute or ");
			code10 = element("code");
			t52 = text("trigger");
			t53 = text(" option.");
			t54 = space();
			li3 = element("li");
			t55 = text("Add ");
			code11 = element("code");
			t56 = text("setLiveMode()");
			t57 = text(" method to turn on/off the live validating mode");
			t58 = space();
			li4 = element("li");
			t59 = text("Add ");
			a9 = element("a");
			t60 = text("iban validator");
			t61 = text(" for validating IBAN (International Bank Account Number)");
			t62 = space();
			li5 = element("li");
			t63 = text("Add ");
			a10 = element("a");
			t64 = text("uuid validator");
			t65 = text(", support UUID v3, v4, v5");
			t66 = space();
			li6 = element("li");
			t67 = text("Add ");
			a11 = element("a");
			t68 = text("numeric validator");
			t69 = space();
			li7 = element("li");
			t70 = text("Add ");
			a12 = element("a");
			t71 = text("integer validator");
			t72 = space();
			li8 = element("li");
			t73 = text("Add ");
			a13 = element("a");
			t74 = text("hex validator");
			t75 = space();
			li9 = element("li");
			t76 = text("Add ");
			a14 = element("a");
			t77 = text("stringCase validator");
			t78 = text(" to check a string is lower or upper case");
			t79 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t80 = space();
			ul2 = element("ul");
			li10 = element("li");
			code12 = element("code");
			t81 = text("disableSubmitButtons()");
			t82 = text(" is now marked as a public API");
			t83 = space();
			li11 = element("li");
			t84 = text("The first parameter of ");
			code13 = element("code");
			t85 = text("updateStatus()");
			t86 = text(" method now accepts the field name only");
			t87 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t88 = space();
			ul3 = element("ul");
			li12 = element("li");
			t89 = text("The ");
			a15 = element("a");
			t90 = text("regexp validator");
			t91 = text(" allows to pass a string");
			t92 = space();
			li13 = element("li");
			i3 = element("i");
			t93 = text(" Support multiple elements with the same name");
			t94 = space();
			li14 = element("li");
			t95 = text("Do not validate hidden (");
			code14 = element("code");
			t96 = text("type=\"hidden\"");
			t97 = text(") and invisible element");
			t98 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t99 = space();
			ul4 = element("ul");
			li15 = element("li");
			t100 = text("Submit button remains disabled after calling custom ");
			code15 = element("code");
			t101 = text("submitHandler");
			t102 = text(" and the form is valid");
			t103 = space();
			li16 = element("li");
			t104 = text("The ");
			code16 = element("code");
			t105 = text("fields.[fieldName].message");
			t106 = text(" option is not used when showing the error message");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Version 0.4.0");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Released 03 April 2014");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			ul0 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			i0 = claim_element(li0_nodes, "I", { class: true }, false);
			var i0_nodes = children(i0);

			i0_nodes.forEach(detach);
			t5 = claim_text(li0_nodes, " Set validator option by using HTML 5 attributes");
			li0_nodes.forEach(detach);
			t6 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			i1 = claim_element(li1_nodes, "I", { class: true }, false);
			var i1_nodes = children(i1);

			i1_nodes.forEach(detach);
			t7 = claim_text(li1_nodes, " Support HTML 5 input types:");
			li1_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			t8 = claim_text(section0_nodes, "\n\n        ");

			table = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table_nodes = children(table);

			tr0 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t9 = claim_text(th0_nodes, "HTML 5 attribute");
			th0_nodes.forEach(detach);
			t10 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t11 = claim_text(th1_nodes, "Equivalent validator");
			th1_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t12 = claim_text(table_nodes, "\n            ");

			tr1 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code0 = claim_element(td0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t13 = claim_text(code0_nodes, "min=\"...\"");
			code0_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t14 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			a0 = claim_element(td1_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t15 = claim_text(a0_nodes, "greaterThan validator");
			a0_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t16 = claim_text(table_nodes, "\n            ");

			tr2 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td2 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			code1 = claim_element(td2_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t17 = claim_text(code1_nodes, "max=\"...\"");
			code1_nodes.forEach(detach);
			td2_nodes.forEach(detach);
			t18 = claim_text(tr2_nodes, "\n                ");

			td3 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			a1 = claim_element(td3_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t19 = claim_text(a1_nodes, "lessThan validator");
			a1_nodes.forEach(detach);
			td3_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t20 = claim_text(table_nodes, "\n            ");

			tr3 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td4 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			code2 = claim_element(td4_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t21 = claim_text(code2_nodes, "maxlength=\"...\"");
			code2_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t22 = claim_text(tr3_nodes, "\n                ");

			td5 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			a2 = claim_element(td5_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t23 = claim_text(a2_nodes, "stringLength validator");
			a2_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			t24 = claim_text(table_nodes, "\n            ");

			tr4 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			td6 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			code3 = claim_element(td6_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t25 = claim_text(code3_nodes, "pattern=\"...\"");
			code3_nodes.forEach(detach);
			td6_nodes.forEach(detach);
			t26 = claim_text(tr4_nodes, "\n                ");

			td7 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			a3 = claim_element(td7_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t27 = claim_text(a3_nodes, "regexp validator");
			a3_nodes.forEach(detach);
			td7_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			t28 = claim_text(table_nodes, "\n            ");

			tr5 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr5_nodes = children(tr5);

			td8 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			code4 = claim_element(td8_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t29 = claim_text(code4_nodes, "required");
			code4_nodes.forEach(detach);
			td8_nodes.forEach(detach);
			t30 = claim_text(tr5_nodes, "\n                ");

			td9 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			a4 = claim_element(td9_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t31 = claim_text(a4_nodes, "notEmpty validator");
			a4_nodes.forEach(detach);
			td9_nodes.forEach(detach);
			tr5_nodes.forEach(detach);
			t32 = claim_text(table_nodes, "\n            ");

			tr6 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr6_nodes = children(tr6);

			td10 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td10_nodes = children(td10);

			code5 = claim_element(td10_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t33 = claim_text(code5_nodes, "type=\"color\"");
			code5_nodes.forEach(detach);
			td10_nodes.forEach(detach);
			t34 = claim_text(tr6_nodes, "\n                ");

			td11 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td11_nodes = children(td11);

			a5 = claim_element(td11_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t35 = claim_text(a5_nodes, "color validator");
			a5_nodes.forEach(detach);
			td11_nodes.forEach(detach);
			tr6_nodes.forEach(detach);
			t36 = claim_text(table_nodes, "\n            ");

			tr7 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr7_nodes = children(tr7);

			td12 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td12_nodes = children(td12);

			code6 = claim_element(td12_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t37 = claim_text(code6_nodes, "type=\"email\"");
			code6_nodes.forEach(detach);
			td12_nodes.forEach(detach);
			t38 = claim_text(tr7_nodes, "\n                ");

			td13 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td13_nodes = children(td13);

			a6 = claim_element(td13_nodes, "A", { href: true, class: true }, false);
			var a6_nodes = children(a6);

			t39 = claim_text(a6_nodes, "emailAddress validator");
			a6_nodes.forEach(detach);
			td13_nodes.forEach(detach);
			tr7_nodes.forEach(detach);
			t40 = claim_text(table_nodes, "\n            ");

			tr8 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr8_nodes = children(tr8);

			td14 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td14_nodes = children(td14);

			code7 = claim_element(td14_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t41 = claim_text(code7_nodes, "type=\"range\"");
			code7_nodes.forEach(detach);
			td14_nodes.forEach(detach);
			t42 = claim_text(tr8_nodes, "\n                ");

			td15 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td15_nodes = children(td15);

			a7 = claim_element(td15_nodes, "A", { href: true, class: true }, false);
			var a7_nodes = children(a7);

			t43 = claim_text(a7_nodes, "between validator");
			a7_nodes.forEach(detach);
			td15_nodes.forEach(detach);
			tr8_nodes.forEach(detach);
			t44 = claim_text(table_nodes, "\n            ");

			tr9 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr9_nodes = children(tr9);

			td16 = claim_element(tr9_nodes, "TD", { class: true }, false);
			var td16_nodes = children(td16);

			code8 = claim_element(td16_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t45 = claim_text(code8_nodes, "type=\"url\"");
			code8_nodes.forEach(detach);
			td16_nodes.forEach(detach);
			t46 = claim_text(tr9_nodes, "\n                ");

			td17 = claim_element(tr9_nodes, "TD", { class: true }, false);
			var td17_nodes = children(td17);

			a8 = claim_element(td17_nodes, "A", { href: true, class: true }, false);
			var a8_nodes = children(a8);

			t47 = claim_text(a8_nodes, "uri validator");
			a8_nodes.forEach(detach);
			td17_nodes.forEach(detach);
			tr9_nodes.forEach(detach);
			table_nodes.forEach(detach);
			t48 = claim_text(section0_nodes, "\n\n        ");

			ul1 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li2 = claim_element(ul1_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			i2 = claim_element(li2_nodes, "I", { class: true }, false);
			var i2_nodes = children(i2);

			i2_nodes.forEach(detach);
			t49 = claim_text(li2_nodes, " Set the custom trigger event. It's possible to use ");

			code9 = claim_element(li2_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t50 = claim_text(code9_nodes, "data-bv-trigger");
			code9_nodes.forEach(detach);
			t51 = claim_text(li2_nodes, " attribute or ");

			code10 = claim_element(li2_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t52 = claim_text(code10_nodes, "trigger");
			code10_nodes.forEach(detach);
			t53 = claim_text(li2_nodes, " option.");
			li2_nodes.forEach(detach);
			t54 = claim_text(ul1_nodes, "\n            ");

			li3 = claim_element(ul1_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t55 = claim_text(li3_nodes, "Add ");

			code11 = claim_element(li3_nodes, "CODE", {}, false);
			var code11_nodes = children(code11);

			t56 = claim_text(code11_nodes, "setLiveMode()");
			code11_nodes.forEach(detach);
			t57 = claim_text(li3_nodes, " method to turn on/off the live validating mode");
			li3_nodes.forEach(detach);
			t58 = claim_text(ul1_nodes, "\n            ");

			li4 = claim_element(ul1_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			t59 = claim_text(li4_nodes, "Add ");

			a9 = claim_element(li4_nodes, "A", { href: true, class: true }, false);
			var a9_nodes = children(a9);

			t60 = claim_text(a9_nodes, "iban validator");
			a9_nodes.forEach(detach);
			t61 = claim_text(li4_nodes, " for validating IBAN (International Bank Account Number)");
			li4_nodes.forEach(detach);
			t62 = claim_text(ul1_nodes, "\n            ");

			li5 = claim_element(ul1_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			t63 = claim_text(li5_nodes, "Add ");

			a10 = claim_element(li5_nodes, "A", { href: true, class: true }, false);
			var a10_nodes = children(a10);

			t64 = claim_text(a10_nodes, "uuid validator");
			a10_nodes.forEach(detach);
			t65 = claim_text(li5_nodes, ", support UUID v3, v4, v5");
			li5_nodes.forEach(detach);
			t66 = claim_text(ul1_nodes, "\n            ");

			li6 = claim_element(ul1_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			t67 = claim_text(li6_nodes, "Add ");

			a11 = claim_element(li6_nodes, "A", { href: true, class: true }, false);
			var a11_nodes = children(a11);

			t68 = claim_text(a11_nodes, "numeric validator");
			a11_nodes.forEach(detach);
			li6_nodes.forEach(detach);
			t69 = claim_text(ul1_nodes, "\n            ");

			li7 = claim_element(ul1_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			t70 = claim_text(li7_nodes, "Add ");

			a12 = claim_element(li7_nodes, "A", { href: true, class: true }, false);
			var a12_nodes = children(a12);

			t71 = claim_text(a12_nodes, "integer validator");
			a12_nodes.forEach(detach);
			li7_nodes.forEach(detach);
			t72 = claim_text(ul1_nodes, "\n            ");

			li8 = claim_element(ul1_nodes, "LI", {}, false);
			var li8_nodes = children(li8);

			t73 = claim_text(li8_nodes, "Add ");

			a13 = claim_element(li8_nodes, "A", { href: true, class: true }, false);
			var a13_nodes = children(a13);

			t74 = claim_text(a13_nodes, "hex validator");
			a13_nodes.forEach(detach);
			li8_nodes.forEach(detach);
			t75 = claim_text(ul1_nodes, "\n            ");

			li9 = claim_element(ul1_nodes, "LI", {}, false);
			var li9_nodes = children(li9);

			t76 = claim_text(li9_nodes, "Add ");

			a14 = claim_element(li9_nodes, "A", { href: true, class: true }, false);
			var a14_nodes = children(a14);

			t77 = claim_text(a14_nodes, "stringCase validator");
			a14_nodes.forEach(detach);
			t78 = claim_text(li9_nodes, " to check a string is lower or upper case");
			li9_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t79 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t80 = claim_text(section1_nodes, "\n        ");

			ul2 = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul2_nodes = children(ul2);

			li10 = claim_element(ul2_nodes, "LI", {}, false);
			var li10_nodes = children(li10);

			code12 = claim_element(li10_nodes, "CODE", {}, false);
			var code12_nodes = children(code12);

			t81 = claim_text(code12_nodes, "disableSubmitButtons()");
			code12_nodes.forEach(detach);
			t82 = claim_text(li10_nodes, " is now marked as a public API");
			li10_nodes.forEach(detach);
			t83 = claim_text(ul2_nodes, "\n            ");

			li11 = claim_element(ul2_nodes, "LI", {}, false);
			var li11_nodes = children(li11);

			t84 = claim_text(li11_nodes, "The first parameter of ");

			code13 = claim_element(li11_nodes, "CODE", {}, false);
			var code13_nodes = children(code13);

			t85 = claim_text(code13_nodes, "updateStatus()");
			code13_nodes.forEach(detach);
			t86 = claim_text(li11_nodes, " method now accepts the field name only");
			li11_nodes.forEach(detach);
			ul2_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t87 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t88 = claim_text(section2_nodes, "\n        ");

			ul3 = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul3_nodes = children(ul3);

			li12 = claim_element(ul3_nodes, "LI", {}, false);
			var li12_nodes = children(li12);

			t89 = claim_text(li12_nodes, "The ");

			a15 = claim_element(li12_nodes, "A", { href: true, class: true }, false);
			var a15_nodes = children(a15);

			t90 = claim_text(a15_nodes, "regexp validator");
			a15_nodes.forEach(detach);
			t91 = claim_text(li12_nodes, " allows to pass a string");
			li12_nodes.forEach(detach);
			t92 = claim_text(ul3_nodes, "\n            ");

			li13 = claim_element(ul3_nodes, "LI", {}, false);
			var li13_nodes = children(li13);

			i3 = claim_element(li13_nodes, "I", { class: true }, false);
			var i3_nodes = children(i3);

			i3_nodes.forEach(detach);
			t93 = claim_text(li13_nodes, " Support multiple elements with the same name");
			li13_nodes.forEach(detach);
			t94 = claim_text(ul3_nodes, "\n            ");

			li14 = claim_element(ul3_nodes, "LI", {}, false);
			var li14_nodes = children(li14);

			t95 = claim_text(li14_nodes, "Do not validate hidden (");

			code14 = claim_element(li14_nodes, "CODE", {}, false);
			var code14_nodes = children(code14);

			t96 = claim_text(code14_nodes, "type=\"hidden\"");
			code14_nodes.forEach(detach);
			t97 = claim_text(li14_nodes, ") and invisible element");
			li14_nodes.forEach(detach);
			ul3_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			t98 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t99 = claim_text(section3_nodes, "\n        ");

			ul4 = claim_element(section3_nodes, "UL", { class: true }, false);
			var ul4_nodes = children(ul4);

			li15 = claim_element(ul4_nodes, "LI", {}, false);
			var li15_nodes = children(li15);

			t100 = claim_text(li15_nodes, "Submit button remains disabled after calling custom ");

			code15 = claim_element(li15_nodes, "CODE", {}, false);
			var code15_nodes = children(code15);

			t101 = claim_text(code15_nodes, "submitHandler");
			code15_nodes.forEach(detach);
			t102 = claim_text(li15_nodes, " and the form is valid");
			li15_nodes.forEach(detach);
			t103 = claim_text(ul4_nodes, "\n            ");

			li16 = claim_element(ul4_nodes, "LI", {}, false);
			var li16_nodes = children(li16);

			t104 = claim_text(li16_nodes, "The ");

			code16 = claim_element(li16_nodes, "CODE", {}, false);
			var code16_nodes = children(code16);

			t105 = claim_text(code16_nodes, "fields.[fieldName].message");
			code16_nodes.forEach(detach);
			t106 = claim_text(li16_nodes, " option is not used when showing the error message");
			li16_nodes.forEach(detach);
			ul4_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 92);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 143);
			i0.className = "fa fa-star";
			add_location(i0, file, 11, 16, 317);
			add_location(li0, file, 11, 12, 313);
			i1.className = "fa fa-star";
			add_location(i1, file, 12, 16, 413);
			add_location(li1, file, 12, 12, 409);
			ul0.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul0, file, 10, 8, 268);
			th0.className = "pv2 ph3 tl f6 fw6";
			add_location(th0, file, 17, 16, 609);
			th1.className = "pv2 ph3 tl f6 fw6";
			add_location(th1, file, 18, 16, 677);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 16, 12, 560);
			add_location(code0, file, 21, 36, 832);
			td0.className = "pv2 ph3";
			add_location(td0, file, 21, 16, 812);
			a0.href = "/guide/validators/greater-than";
			a0.className = "blue dim link";
			add_location(a0, file, 22, 36, 896);
			td1.className = "pv2 ph3";
			add_location(td1, file, 22, 16, 876);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 20, 12, 763);
			add_location(code1, file, 25, 36, 1089);
			td2.className = "pv2 ph3";
			add_location(td2, file, 25, 16, 1069);
			a1.href = "/guide/validators/less-than";
			a1.className = "blue dim link";
			add_location(a1, file, 26, 36, 1153);
			td3.className = "pv2 ph3";
			add_location(td3, file, 26, 16, 1133);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 24, 12, 1020);
			add_location(code2, file, 29, 36, 1340);
			td4.className = "pv2 ph3";
			add_location(td4, file, 29, 16, 1320);
			a2.href = "/guide/validators/string-length";
			a2.className = "blue dim link";
			add_location(a2, file, 30, 36, 1410);
			td5.className = "pv2 ph3";
			add_location(td5, file, 30, 16, 1390);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 28, 12, 1271);
			add_location(code3, file, 33, 36, 1605);
			td6.className = "pv2 ph3";
			add_location(td6, file, 33, 16, 1585);
			a3.href = "/guide/validators/regexp";
			a3.className = "blue dim link";
			add_location(a3, file, 34, 36, 1673);
			td7.className = "pv2 ph3";
			add_location(td7, file, 34, 16, 1653);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 32, 12, 1536);
			add_location(code4, file, 37, 36, 1855);
			td8.className = "pv2 ph3";
			add_location(td8, file, 37, 16, 1835);
			a4.href = "/guide/validators/not-empty";
			a4.className = "blue dim link";
			add_location(a4, file, 38, 36, 1918);
			td9.className = "pv2 ph3";
			add_location(td9, file, 38, 16, 1898);
			tr5.className = "striped--light-gray";
			add_location(tr5, file, 36, 12, 1786);
			add_location(code5, file, 41, 36, 2105);
			td10.className = "pv2 ph3";
			add_location(td10, file, 41, 16, 2085);
			a5.href = "/guide/validators/color";
			a5.className = "blue dim link";
			add_location(a5, file, 42, 36, 2172);
			td11.className = "pv2 ph3";
			add_location(td11, file, 42, 16, 2152);
			tr6.className = "striped--light-gray";
			add_location(tr6, file, 40, 12, 2036);
			add_location(code6, file, 45, 36, 2352);
			td12.className = "pv2 ph3";
			add_location(td12, file, 45, 16, 2332);
			a6.href = "/guide/validators/email-address";
			a6.className = "blue dim link";
			add_location(a6, file, 46, 36, 2419);
			td13.className = "pv2 ph3";
			add_location(td13, file, 46, 16, 2399);
			tr7.className = "striped--light-gray";
			add_location(tr7, file, 44, 12, 2283);
			add_location(code7, file, 49, 36, 2614);
			td14.className = "pv2 ph3";
			add_location(td14, file, 49, 16, 2594);
			a7.href = "/guide/validators/between";
			a7.className = "blue dim link";
			add_location(a7, file, 50, 36, 2681);
			td15.className = "pv2 ph3";
			add_location(td15, file, 50, 16, 2661);
			tr8.className = "striped--light-gray";
			add_location(tr8, file, 48, 12, 2545);
			add_location(code8, file, 53, 36, 2865);
			td16.className = "pv2 ph3";
			add_location(td16, file, 53, 16, 2845);
			a8.href = "/guide/validators/uri";
			a8.className = "blue dim link";
			add_location(a8, file, 54, 36, 2930);
			td17.className = "pv2 ph3";
			add_location(td17, file, 54, 16, 2910);
			tr9.className = "striped--light-gray";
			add_location(tr9, file, 52, 12, 2796);
			table.className = "collapse ba br2 b--black-10 pv2 ph3";
			add_location(table, file, 15, 8, 496);
			i2.className = "fa fa-star";
			add_location(i2, file, 59, 16, 3100);
			add_location(code9, file, 59, 94, 3178);
			add_location(code10, file, 59, 136, 3220);
			add_location(li2, file, 59, 12, 3096);
			add_location(code11, file, 60, 20, 3274);
			add_location(li3, file, 60, 12, 3266);
			a9.href = "/guide/validators/iban";
			a9.className = "blue dim link";
			add_location(a9, file, 61, 20, 3373);
			add_location(li4, file, 61, 12, 3365);
			a10.href = "/guide/validators/uuid";
			a10.className = "blue dim link";
			add_location(a10, file, 62, 20, 3528);
			add_location(li5, file, 62, 12, 3520);
			a11.href = "/guide/validators/numeric";
			a11.className = "blue dim link";
			add_location(a11, file, 63, 20, 3652);
			add_location(li6, file, 63, 12, 3644);
			a12.href = "/guide/validators/integer";
			a12.className = "blue dim link";
			add_location(a12, file, 64, 20, 3757);
			add_location(li7, file, 64, 12, 3749);
			a13.href = "/guide/validators/hex";
			a13.className = "blue dim link";
			add_location(a13, file, 65, 20, 3862);
			add_location(li8, file, 65, 12, 3854);
			a14.href = "/guide/validators/string-case";
			a14.className = "blue dim link";
			add_location(a14, file, 66, 20, 3959);
			add_location(li9, file, 66, 12, 3951);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 58, 8, 3051);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 198);
			add_location(code12, file, 73, 16, 4240);
			add_location(li10, file, 73, 12, 4236);
			add_location(code13, file, 74, 39, 4350);
			add_location(li11, file, 74, 12, 4323);
			ul2.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul2, file, 72, 8, 4191);
			section1.className = "mv5";
			add_location(section1, file, 70, 4, 4126);
			a15.href = "/guide/validators/regexp";
			a15.className = "blue dim link";
			add_location(a15, file, 81, 20, 4579);
			add_location(li12, file, 81, 12, 4571);
			i3.className = "fa fa-star";
			add_location(i3, file, 82, 16, 4702);
			add_location(li13, file, 82, 12, 4698);
			add_location(code14, file, 83, 40, 4819);
			add_location(li14, file, 83, 12, 4791);
			ul3.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul3, file, 80, 8, 4526);
			section2.className = "mv5";
			add_location(section2, file, 78, 4, 4456);
			add_location(code15, file, 90, 68, 5076);
			add_location(li15, file, 90, 12, 5020);
			add_location(code16, file, 91, 20, 5150);
			add_location(li16, file, 91, 12, 5142);
			ul4.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul4, file, 89, 8, 4975);
			section3.className = "mv5";
			add_location(section3, file, 87, 4, 4908);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, ul0);
			append(ul0, li0);
			append(li0, i0);
			append(li0, t5);
			append(ul0, t6);
			append(ul0, li1);
			append(li1, i1);
			append(li1, t7);
			append(section0, t8);
			append(section0, table);
			append(table, tr0);
			append(tr0, th0);
			append(th0, t9);
			append(tr0, t10);
			append(tr0, th1);
			append(th1, t11);
			append(table, t12);
			append(table, tr1);
			append(tr1, td0);
			append(td0, code0);
			append(code0, t13);
			append(tr1, t14);
			append(tr1, td1);
			append(td1, a0);
			append(a0, t15);
			append(table, t16);
			append(table, tr2);
			append(tr2, td2);
			append(td2, code1);
			append(code1, t17);
			append(tr2, t18);
			append(tr2, td3);
			append(td3, a1);
			append(a1, t19);
			append(table, t20);
			append(table, tr3);
			append(tr3, td4);
			append(td4, code2);
			append(code2, t21);
			append(tr3, t22);
			append(tr3, td5);
			append(td5, a2);
			append(a2, t23);
			append(table, t24);
			append(table, tr4);
			append(tr4, td6);
			append(td6, code3);
			append(code3, t25);
			append(tr4, t26);
			append(tr4, td7);
			append(td7, a3);
			append(a3, t27);
			append(table, t28);
			append(table, tr5);
			append(tr5, td8);
			append(td8, code4);
			append(code4, t29);
			append(tr5, t30);
			append(tr5, td9);
			append(td9, a4);
			append(a4, t31);
			append(table, t32);
			append(table, tr6);
			append(tr6, td10);
			append(td10, code5);
			append(code5, t33);
			append(tr6, t34);
			append(tr6, td11);
			append(td11, a5);
			append(a5, t35);
			append(table, t36);
			append(table, tr7);
			append(tr7, td12);
			append(td12, code6);
			append(code6, t37);
			append(tr7, t38);
			append(tr7, td13);
			append(td13, a6);
			append(a6, t39);
			append(table, t40);
			append(table, tr8);
			append(tr8, td14);
			append(td14, code7);
			append(code7, t41);
			append(tr8, t42);
			append(tr8, td15);
			append(td15, a7);
			append(a7, t43);
			append(table, t44);
			append(table, tr9);
			append(tr9, td16);
			append(td16, code8);
			append(code8, t45);
			append(tr9, t46);
			append(tr9, td17);
			append(td17, a8);
			append(a8, t47);
			append(section0, t48);
			append(section0, ul1);
			append(ul1, li2);
			append(li2, i2);
			append(li2, t49);
			append(li2, code9);
			append(code9, t50);
			append(li2, t51);
			append(li2, code10);
			append(code10, t52);
			append(li2, t53);
			append(ul1, t54);
			append(ul1, li3);
			append(li3, t55);
			append(li3, code11);
			append(code11, t56);
			append(li3, t57);
			append(ul1, t58);
			append(ul1, li4);
			append(li4, t59);
			append(li4, a9);
			append(a9, t60);
			append(li4, t61);
			append(ul1, t62);
			append(ul1, li5);
			append(li5, t63);
			append(li5, a10);
			append(a10, t64);
			append(li5, t65);
			append(ul1, t66);
			append(ul1, li6);
			append(li6, t67);
			append(li6, a11);
			append(a11, t68);
			append(ul1, t69);
			append(ul1, li7);
			append(li7, t70);
			append(li7, a12);
			append(a12, t71);
			append(ul1, t72);
			append(ul1, li8);
			append(li8, t73);
			append(li8, a13);
			append(a13, t74);
			append(ul1, t75);
			append(ul1, li9);
			append(li9, t76);
			append(li9, a14);
			append(a14, t77);
			append(li9, t78);
			insert(target, t79, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t80);
			append(section1, ul2);
			append(ul2, li10);
			append(li10, code12);
			append(code12, t81);
			append(li10, t82);
			append(ul2, t83);
			append(ul2, li11);
			append(li11, t84);
			append(li11, code13);
			append(code13, t85);
			append(li11, t86);
			insert(target, t87, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t88);
			append(section2, ul3);
			append(ul3, li12);
			append(li12, t89);
			append(li12, a15);
			append(a15, t90);
			append(li12, t91);
			append(ul3, t92);
			append(ul3, li13);
			append(li13, i3);
			append(li13, t93);
			append(ul3, t94);
			append(ul3, li14);
			append(li14, t95);
			append(li14, code14);
			append(code14, t96);
			append(li14, t97);
			insert(target, t98, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t99);
			append(section3, ul4);
			append(ul4, li15);
			append(li15, t100);
			append(li15, code15);
			append(code15, t101);
			append(li15, t102);
			append(ul4, t103);
			append(ul4, li16);
			append(li16, t104);
			append(li16, code16);
			append(code16, t105);
			append(li16, t106);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			if (detaching) {
				detach(t79);
				detach(section1);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t87);
				detach(section2);
			}

			heading2.$destroy();

			if (detaching) {
				detach(t98);
				detach(section3);
			}

			heading3.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var changeloglayout = new ChangelogLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			changeloglayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			changeloglayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • v0.4.0";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(changeloglayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var changeloglayout_changes = {};
			if (changed.$$scope) changeloglayout_changes.$$scope = { changed, ctx };
			changeloglayout.$set(changeloglayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			changeloglayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			changeloglayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			changeloglayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

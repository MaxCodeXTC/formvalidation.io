import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, w as empty, k as claim_element, l as children, n as add_location, p as append, z as check_outros, I as destroy_each, y as on_outro, x as group_outros } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import { a as SampleData } from './chunk.41999a23.js';

/* src/routes/guide/plugins/password-strength/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/plugins/password-strength/index.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.sample = list[i];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.group = list[i];
	return child_ctx;
}

// (10:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Usage");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Usage");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (61:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (104:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (113:12) {#each group.samples as sample}
function create_each_block_1(ctx) {
	var tr, current;

	var sampledata = new SampleData({
		props: {
		sample: ctx.sample,
		sender: "/guide/plugins/password-strength/basic"
	},
		$$inline: true
	});

	return {
		c: function create() {
			tr = element("tr");
			sampledata.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", { class: true }, false);
			var tr_nodes = children(tr);

			sampledata.$$.fragment.l(tr_nodes);
			tr_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			tr.className = "striped--light-gray";
			add_location(tr, file, 113, 12, 5463);
		},

		m: function mount(target, anchor) {
			insert(target, tr, anchor);
			mount_component(sampledata, tr, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var sampledata_changes = {};
			if (changed._groups) sampledata_changes.sample = ctx.sample;
			sampledata.$set(sampledata_changes);
		},

		i: function intro(local) {
			if (current) return;
			sampledata.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			sampledata.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(tr);
			}

			sampledata.$destroy();
		}
	};
}

// (108:12) {#each _groups as group}
function create_each_block(ctx) {
	var tr, th0, t0_value = ctx.group.name, t0, t1, th1, t2, t3, each_1_anchor, current;

	var each_value_1 = ctx.group.samples;

	var each_blocks = [];

	for (var i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	function outro_block(i, detaching, local) {
		if (each_blocks[i]) {
			if (detaching) {
				on_outro(() => {
					each_blocks[i].d(detaching);
					each_blocks[i] = null;
				});
			}

			each_blocks[i].o(local);
		}
	}

	return {
		c: function create() {
			tr = element("tr");
			th0 = element("th");
			t0 = text(t0_value);
			t1 = space();
			th1 = element("th");
			t2 = text("Is valid?");
			t3 = space();

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			this.h();
		},

		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", { class: true }, false);
			var tr_nodes = children(tr);

			th0 = claim_element(tr_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t0 = claim_text(th0_nodes, t0_value);
			th0_nodes.forEach(detach);
			t1 = claim_text(tr_nodes, "\n                ");

			th1 = claim_element(tr_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t2 = claim_text(th1_nodes, "Is valid?");
			th1_nodes.forEach(detach);
			tr_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n            ");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
			this.h();
		},

		h: function hydrate() {
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 109, 16, 5272);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 110, 16, 5340);
			tr.className = "striped--light-gray";
			add_location(tr, file, 108, 12, 5223);
		},

		m: function mount(target, anchor) {
			insert(target, tr, anchor);
			append(tr, th0);
			append(th0, t0);
			append(tr, t1);
			append(tr, th1);
			append(th1, t2);
			insert(target, t3, anchor);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			if (changed._groups) {
				each_value_1 = ctx.group.samples;

				for (var i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						each_blocks[i].i(1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].i(1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();
				for (; i < each_blocks.length; i += 1) outro_block(i, 1, 1);
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			for (var i = 0; i < each_value_1.length; i += 1) each_blocks[i].i();

			current = true;
		},

		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) outro_block(i, 0);

			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(tr);
				detach(t3);
			}

			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach(each_1_anchor);
			}
		}
	};
}

// (125:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changelog");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changelog");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (133:12) <PrevButton target="/guide/plugins/mui">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Mui plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Mui plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (134:12) <NextButton target="/guide/plugins/pure">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Pure plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Pure plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, p0, t5, a, t6, t7, t8, p1, t9, t10, t11, p2, t12, code0, t13, t14, t15, section1, t16, p3, sup0, t17, t18, t19, table0, tr0, th0, t20, t21, th1, t22, t23, th2, t24, t25, tr1, td0, code1, t26, t27, sup1, t28, t29, td1, t30, t31, td2, t32, t33, tr2, td3, code2, t34, t35, td4, t36, t37, td5, t38, t39, tr3, td6, code3, t40, t41, td7, t42, t43, td8, p4, t44, code4, t45, t46, t47, p5, t48, t49, tr4, td9, code5, t50, t51, td10, t52, t53, td11, p6, t54, t55, ul0, li0, code6, t56, t57, code7, t58, t59, code8, t60, t61, t62, li1, code9, t63, t64, t65, li2, code10, t66, t67, t68, p7, t69, t70, section2, t71, p8, t72, t73, table1, t74, t75, section3, t76, ul1, li3, t77, t78, section4, div, t79, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="demoForm" method="POST">
        <input type="password" name="pwd" />
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>

<!-- Include zxcvbn library -->
<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/zxcvbn/4.4.2/zxcvbn.js"></script-tag>

<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/plugins/PasswordStrength.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                passwordStrength: new FormValidation.plugins.PasswordStrength({
                    field: 'pwd',
                    message: 'The password is weak',
                    minimalScore: 3,
                    onValidated: function(valid, message, score) {
                        ...
                    }
                }),
                ...
            },
        }
    );
});
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var each_value = ctx._groups;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	function outro_block(i, detaching, local) {
		if (each_blocks[i]) {
			if (detaching) {
				on_outro(() => {
					each_blocks[i].d(detaching);
					each_blocks[i] = null;
				});
			}

			each_blocks[i].o(local);
		}
	}

	var demo = new Demo({
		props: {
		prefix: "/guide/plugins/password-strength/basic",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/plugins/mui",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/plugins/pure",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("PasswordStrength plugin");
			t1 = space();
			h2 = element("h2");
			t2 = text("Check the strength of a password");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			p0 = element("p");
			t5 = text("The PasswordStrength plugin uses the popular ");
			a = element("a");
			t6 = text("zxcvbn library");
			t7 = text(" to estimate the strength of a password.");
			t8 = space();
			p1 = element("p");
			t9 = text("The following piece of code is the starting point to use it:");
			t10 = space();
			samplecode.$$.fragment.c();
			t11 = space();
			p2 = element("p");
			t12 = text("The sample code above assumes that the FormValidation files are placed inside the ");
			code0 = element("code");
			t13 = text("vendors");
			t14 = text(" directory. You might need to change the path depending on where you place them on the server.");
			t15 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t16 = space();
			p3 = element("p");
			sup0 = element("sup");
			t17 = text("*");
			t18 = text(" presents a required parameter");
			t19 = space();
			table0 = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t20 = text("Option");
			t21 = space();
			th1 = element("th");
			t22 = text("Type");
			t23 = space();
			th2 = element("th");
			t24 = text("Description");
			t25 = space();
			tr1 = element("tr");
			td0 = element("td");
			code1 = element("code");
			t26 = text("field");
			t27 = space();
			sup1 = element("sup");
			t28 = text("*");
			t29 = space();
			td1 = element("td");
			t30 = text("String");
			t31 = space();
			td2 = element("td");
			t32 = text("The field name");
			t33 = space();
			tr2 = element("tr");
			td3 = element("td");
			code2 = element("code");
			t34 = text("message");
			t35 = space();
			td4 = element("td");
			t36 = text("String");
			t37 = space();
			td5 = element("td");
			t38 = text("The default error message which will be shown to let user know that the password is weak. It then will be replaced with the warning message of zxcvbn library to indicate the specific reason why the password is weak");
			t39 = space();
			tr3 = element("tr");
			td6 = element("td");
			code3 = element("code");
			t40 = text("minimalScore");
			t41 = space();
			td7 = element("td");
			t42 = text("Number");
			t43 = space();
			td8 = element("td");
			p4 = element("p");
			t44 = text("For a given password, the zxcvbn library will calculate its strength and the score can be one of 0, 1, 2, 3, 4. The password will be treated as invalid if the scroce if less than ");
			code4 = element("code");
			t45 = text("minimalScore");
			t46 = text(".");
			t47 = space();
			p5 = element("p");
			t48 = text("The default value is 3");
			t49 = space();
			tr4 = element("tr");
			td9 = element("td");
			code5 = element("code");
			t50 = text("onValidated");
			t51 = space();
			td10 = element("td");
			t52 = text("Function");
			t53 = space();
			td11 = element("td");
			p6 = element("p");
			t54 = text("The callback function that will be triggered after validating the password. The function takes three parameters:");
			t55 = space();
			ul0 = element("ul");
			li0 = element("li");
			code6 = element("code");
			t56 = text("valid");
			t57 = text(" (Boolean): Can be ");
			code7 = element("code");
			t58 = text("true");
			t59 = text(" or ");
			code8 = element("code");
			t60 = text("false");
			t61 = text(" depending on the field is valid or not");
			t62 = space();
			li1 = element("li");
			code9 = element("code");
			t63 = text("message");
			t64 = text(" (String): The error message returned by the zxcvbn library");
			t65 = space();
			li2 = element("li");
			code10 = element("code");
			t66 = text("score");
			t67 = text(" (Number): The score returned by the zxcvbn library. Can be one of 0, 1, 2, 3, 4");
			t68 = space();
			p7 = element("p");
			t69 = text("By using this callback, we can display a progress bar based on the score to let user know how strong the password is.");
			t70 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t71 = space();
			p8 = element("p");
			t72 = text("You can click on the sample password below to see the result.");
			t73 = space();
			table1 = element("table");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t74 = space();
			demo.$$.fragment.c();
			t75 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t76 = space();
			ul1 = element("ul");
			li3 = element("li");
			t77 = text("v1.5.0: First release. It means that the PasswordStrength plugin requires FormValidation v1.5.0 or newer.");
			t78 = space();
			section4 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t79 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "PasswordStrength plugin");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Check the strength of a password");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t5 = claim_text(p0_nodes, "The PasswordStrength plugin uses the popular ");

			a = claim_element(p0_nodes, "A", { href: true, class: true, target: true }, false);
			var a_nodes = children(a);

			t6 = claim_text(a_nodes, "zxcvbn library");
			a_nodes.forEach(detach);
			t7 = claim_text(p0_nodes, " to estimate the strength of a password.");
			p0_nodes.forEach(detach);
			t8 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t9 = claim_text(p1_nodes, "The following piece of code is the starting point to use it:");
			p1_nodes.forEach(detach);
			t10 = claim_text(section0_nodes, "\n");
			samplecode.$$.fragment.l(section0_nodes);
			t11 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t12 = claim_text(p2_nodes, "The sample code above assumes that the FormValidation files are placed inside the ");

			code0 = claim_element(p2_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t13 = claim_text(code0_nodes, "vendors");
			code0_nodes.forEach(detach);
			t14 = claim_text(p2_nodes, " directory. You might need to change the path depending on where you place them on the server.");
			p2_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t15 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t16 = claim_text(section1_nodes, "\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			sup0 = claim_element(p3_nodes, "SUP", {}, false);
			var sup0_nodes = children(sup0);

			t17 = claim_text(sup0_nodes, "*");
			sup0_nodes.forEach(detach);
			t18 = claim_text(p3_nodes, " presents a required parameter");
			p3_nodes.forEach(detach);
			t19 = claim_text(section1_nodes, "\n        ");

			table0 = claim_element(section1_nodes, "TABLE", { class: true }, false);
			var table0_nodes = children(table0);

			tr0 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t20 = claim_text(th0_nodes, "Option");
			th0_nodes.forEach(detach);
			t21 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t22 = claim_text(th1_nodes, "Type");
			th1_nodes.forEach(detach);
			t23 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t24 = claim_text(th2_nodes, "Description");
			th2_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t25 = claim_text(table0_nodes, "\n            ");

			tr1 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code1 = claim_element(td0_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t26 = claim_text(code1_nodes, "field");
			code1_nodes.forEach(detach);
			t27 = claim_text(td0_nodes, " ");

			sup1 = claim_element(td0_nodes, "SUP", {}, false);
			var sup1_nodes = children(sup1);

			t28 = claim_text(sup1_nodes, "*");
			sup1_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t29 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			t30 = claim_text(td1_nodes, "String");
			td1_nodes.forEach(detach);
			t31 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t32 = claim_text(td2_nodes, "The field name");
			td2_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t33 = claim_text(table0_nodes, "\n            ");

			tr2 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td3 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			code2 = claim_element(td3_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t34 = claim_text(code2_nodes, "message");
			code2_nodes.forEach(detach);
			td3_nodes.forEach(detach);
			t35 = claim_text(tr2_nodes, "\n                ");

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			t36 = claim_text(td4_nodes, "String");
			td4_nodes.forEach(detach);
			t37 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			t38 = claim_text(td5_nodes, "The default error message which will be shown to let user know that the password is weak. It then will be replaced with the warning message of zxcvbn library to indicate the specific reason why the password is weak");
			td5_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t39 = claim_text(table0_nodes, "\n            ");

			tr3 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td6 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			code3 = claim_element(td6_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t40 = claim_text(code3_nodes, "minimalScore");
			code3_nodes.forEach(detach);
			td6_nodes.forEach(detach);
			t41 = claim_text(tr3_nodes, "\n                ");

			td7 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			t42 = claim_text(td7_nodes, "Number");
			td7_nodes.forEach(detach);
			t43 = claim_text(tr3_nodes, "\n                ");

			td8 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			p4 = claim_element(td8_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t44 = claim_text(p4_nodes, "For a given password, the zxcvbn library will calculate its strength and the score can be one of 0, 1, 2, 3, 4. The password will be treated as invalid if the scroce if less than ");

			code4 = claim_element(p4_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t45 = claim_text(code4_nodes, "minimalScore");
			code4_nodes.forEach(detach);
			t46 = claim_text(p4_nodes, ".");
			p4_nodes.forEach(detach);
			t47 = claim_text(td8_nodes, "\n                    ");

			p5 = claim_element(td8_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t48 = claim_text(p5_nodes, "The default value is 3");
			p5_nodes.forEach(detach);
			td8_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			t49 = claim_text(table0_nodes, "\n            ");

			tr4 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			td9 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			code5 = claim_element(td9_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t50 = claim_text(code5_nodes, "onValidated");
			code5_nodes.forEach(detach);
			td9_nodes.forEach(detach);
			t51 = claim_text(tr4_nodes, "\n                ");

			td10 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td10_nodes = children(td10);

			t52 = claim_text(td10_nodes, "Function");
			td10_nodes.forEach(detach);
			t53 = claim_text(tr4_nodes, "\n                ");

			td11 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td11_nodes = children(td11);

			p6 = claim_element(td11_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t54 = claim_text(p6_nodes, "The callback function that will be triggered after validating the password. The function takes three parameters:");
			p6_nodes.forEach(detach);
			t55 = claim_text(td11_nodes, "\n                    ");

			ul0 = claim_element(td11_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			code6 = claim_element(li0_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t56 = claim_text(code6_nodes, "valid");
			code6_nodes.forEach(detach);
			t57 = claim_text(li0_nodes, " (Boolean): Can be ");

			code7 = claim_element(li0_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t58 = claim_text(code7_nodes, "true");
			code7_nodes.forEach(detach);
			t59 = claim_text(li0_nodes, " or ");

			code8 = claim_element(li0_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t60 = claim_text(code8_nodes, "false");
			code8_nodes.forEach(detach);
			t61 = claim_text(li0_nodes, " depending on the field is valid or not");
			li0_nodes.forEach(detach);
			t62 = claim_text(ul0_nodes, "\n                        ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			code9 = claim_element(li1_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t63 = claim_text(code9_nodes, "message");
			code9_nodes.forEach(detach);
			t64 = claim_text(li1_nodes, " (String): The error message returned by the zxcvbn library");
			li1_nodes.forEach(detach);
			t65 = claim_text(ul0_nodes, "\n                        ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			code10 = claim_element(li2_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t66 = claim_text(code10_nodes, "score");
			code10_nodes.forEach(detach);
			t67 = claim_text(li2_nodes, " (Number): The score returned by the zxcvbn library. Can be one of 0, 1, 2, 3, 4");
			li2_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			t68 = claim_text(td11_nodes, "\n                    ");

			p7 = claim_element(td11_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t69 = claim_text(p7_nodes, "By using this callback, we can display a progress bar based on the score to let user know how strong the password is.");
			p7_nodes.forEach(detach);
			td11_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			table0_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t70 = claim_text(nodes, "\n    \n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t71 = claim_text(section2_nodes, "\n\n        ");

			p8 = claim_element(section2_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t72 = claim_text(p8_nodes, "You can click on the sample password below to see the result.");
			p8_nodes.forEach(detach);
			t73 = claim_text(section2_nodes, "\n        ");

			table1 = claim_element(section2_nodes, "TABLE", { class: true }, false);
			var table1_nodes = children(table1);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(table1_nodes);
			}

			table1_nodes.forEach(detach);
			t74 = claim_text(section2_nodes, "\n\n        ");
			demo.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t75 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t76 = claim_text(section3_nodes, "\n        ");

			ul1 = claim_element(section3_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li3 = claim_element(ul1_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t77 = claim_text(li3_nodes, "v1.5.0: First release. It means that the PasswordStrength plugin requires FormValidation v1.5.0 or newer.");
			li3_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			t78 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			div = claim_element(section4_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t79 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section4_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 105);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 166);
			a.href = "https://github.com/dropbox/zxcvbn";
			a.className = "blue dim link";
			a.target = "_blank";
			add_location(a, file, 10, 72, 358);
			p0.className = "lh-copy";
			add_location(p0, file, 10, 8, 294);
			p1.className = "lh-copy";
			add_location(p1, file, 11, 8, 511);
			add_location(code0, file, 56, 109, 2047);
			p2.className = "lh-copy";
			add_location(p2, file, 56, 8, 1946);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 231);
			add_location(sup0, file, 61, 29, 2272);
			p3.className = "lh-copy i";
			add_location(p3, file, 61, 8, 2251);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 64, 16, 2446);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 65, 16, 2508);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 66, 16, 2568);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 63, 12, 2397);
			add_location(code1, file, 69, 36, 2718);
			add_location(sup1, file, 69, 55, 2737);
			td0.className = "pv2 ph3";
			add_location(td0, file, 69, 16, 2698);
			td1.className = "pv2 ph3";
			add_location(td1, file, 70, 16, 2771);
			td2.className = "pv2 ph3 lh-copy";
			add_location(td2, file, 71, 16, 2819);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 68, 12, 2649);
			add_location(code2, file, 74, 36, 2966);
			td3.className = "pv2 ph3";
			add_location(td3, file, 74, 16, 2946);
			td4.className = "pv2 ph3";
			add_location(td4, file, 75, 16, 3008);
			td5.className = "pv2 ph3 lh-copy";
			add_location(td5, file, 76, 16, 3056);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 73, 12, 2897);
			add_location(code3, file, 79, 36, 3403);
			td6.className = "pv2 ph3";
			add_location(td6, file, 79, 16, 3383);
			td7.className = "pv2 ph3";
			add_location(td7, file, 80, 16, 3450);
			add_location(code4, file, 82, 218, 3737);
			p4.className = "lh-copy";
			add_location(p4, file, 82, 20, 3539);
			p5.className = "lh-copy";
			add_location(p5, file, 83, 20, 3788);
			td8.className = "pv2 ph3";
			add_location(td8, file, 81, 16, 3498);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 78, 12, 3334);
			add_location(code5, file, 87, 36, 3955);
			td9.className = "pv2 ph3";
			add_location(td9, file, 87, 16, 3935);
			td10.className = "pv2 ph3";
			add_location(td10, file, 88, 16, 4001);
			p6.className = "lh-copy";
			add_location(p6, file, 90, 20, 4100);
			add_location(code6, file, 92, 28, 4313);
			add_location(code7, file, 92, 65, 4350);
			add_location(code8, file, 92, 86, 4371);
			add_location(li0, file, 92, 24, 4309);
			add_location(code9, file, 93, 28, 4462);
			add_location(li1, file, 93, 24, 4458);
			add_location(code10, file, 94, 28, 4575);
			add_location(li2, file, 94, 24, 4571);
			ul0.className = "ma0 pl3 lh-copy";
			add_location(ul0, file, 91, 20, 4256);
			p7.className = "lh-copy";
			add_location(p7, file, 96, 20, 4725);
			td11.className = "pv2 ph3 lh-copy";
			add_location(td11, file, 89, 16, 4051);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 86, 12, 3886);
			table0.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table0, file, 62, 8, 2327);
			section1.className = "mv5";
			add_location(section1, file, 59, 4, 2186);
			p8.className = "lh-copy";
			add_location(p8, file, 105, 8, 5019);
			table1.className = "collapse ba br2 b--black-10 pv2 ph3 w-100 mb4";
			add_location(table1, file, 106, 8, 5112);
			section2.className = "mv5";
			add_location(section2, file, 102, 4, 4947);
			add_location(li3, file, 126, 12, 5890);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 125, 8, 5845);
			section3.className = "mv5";
			add_location(section3, file, 123, 4, 5778);
			div.className = "flex";
			add_location(div, file, 131, 8, 6069);
			section4.className = "mv5";
			add_location(section4, file, 130, 4, 6039);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, p0);
			append(p0, t5);
			append(p0, a);
			append(a, t6);
			append(p0, t7);
			append(section0, t8);
			append(section0, p1);
			append(p1, t9);
			append(section0, t10);
			mount_component(samplecode, section0, null);
			append(section0, t11);
			append(section0, p2);
			append(p2, t12);
			append(p2, code0);
			append(code0, t13);
			append(p2, t14);
			insert(target, t15, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t16);
			append(section1, p3);
			append(p3, sup0);
			append(sup0, t17);
			append(p3, t18);
			append(section1, t19);
			append(section1, table0);
			append(table0, tr0);
			append(tr0, th0);
			append(th0, t20);
			append(tr0, t21);
			append(tr0, th1);
			append(th1, t22);
			append(tr0, t23);
			append(tr0, th2);
			append(th2, t24);
			append(table0, t25);
			append(table0, tr1);
			append(tr1, td0);
			append(td0, code1);
			append(code1, t26);
			append(td0, t27);
			append(td0, sup1);
			append(sup1, t28);
			append(tr1, t29);
			append(tr1, td1);
			append(td1, t30);
			append(tr1, t31);
			append(tr1, td2);
			append(td2, t32);
			append(table0, t33);
			append(table0, tr2);
			append(tr2, td3);
			append(td3, code2);
			append(code2, t34);
			append(tr2, t35);
			append(tr2, td4);
			append(td4, t36);
			append(tr2, t37);
			append(tr2, td5);
			append(td5, t38);
			append(table0, t39);
			append(table0, tr3);
			append(tr3, td6);
			append(td6, code3);
			append(code3, t40);
			append(tr3, t41);
			append(tr3, td7);
			append(td7, t42);
			append(tr3, t43);
			append(tr3, td8);
			append(td8, p4);
			append(p4, t44);
			append(p4, code4);
			append(code4, t45);
			append(p4, t46);
			append(td8, t47);
			append(td8, p5);
			append(p5, t48);
			append(table0, t49);
			append(table0, tr4);
			append(tr4, td9);
			append(td9, code5);
			append(code5, t50);
			append(tr4, t51);
			append(tr4, td10);
			append(td10, t52);
			append(tr4, t53);
			append(tr4, td11);
			append(td11, p6);
			append(p6, t54);
			append(td11, t55);
			append(td11, ul0);
			append(ul0, li0);
			append(li0, code6);
			append(code6, t56);
			append(li0, t57);
			append(li0, code7);
			append(code7, t58);
			append(li0, t59);
			append(li0, code8);
			append(code8, t60);
			append(li0, t61);
			append(ul0, t62);
			append(ul0, li1);
			append(li1, code9);
			append(code9, t63);
			append(li1, t64);
			append(ul0, t65);
			append(ul0, li2);
			append(li2, code10);
			append(code10, t66);
			append(li2, t67);
			append(td11, t68);
			append(td11, p7);
			append(p7, t69);
			insert(target, t70, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t71);
			append(section2, p8);
			append(p8, t72);
			append(section2, t73);
			append(section2, table1);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(table1, null);
			}

			append(section2, t74);
			mount_component(demo, section2, null);
			insert(target, t75, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t76);
			append(section3, ul1);
			append(ul1, li3);
			append(li3, t77);
			insert(target, t78, anchor);
			insert(target, section4, anchor);
			append(section4, div);
			mount_component(prevbutton, div, null);
			append(div, t79);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			if (changed._groups) {
				each_value = ctx._groups;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						each_blocks[i].i(1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].i(1);
						each_blocks[i].m(table1, null);
					}
				}

				group_outros();
				for (; i < each_blocks.length; i += 1) outro_block(i, 1, 1);
				check_outros();
			}

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			for (var i = 0; i < each_value.length; i += 1) each_blocks[i].i();

			demo.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);

			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) outro_block(i, 0);

			demo.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			samplecode.$destroy();

			if (detaching) {
				detach(t15);
				detach(section1);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t70);
				detach(section2);
			}

			heading2.$destroy();

			destroy_each(each_blocks, detaching);

			demo.$destroy();

			if (detaching) {
				detach(t75);
				detach(section3);
			}

			heading3.$destroy();

			if (detaching) {
				detach(t78);
				detach(section4);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • PasswordStrength plugin";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

function instance($$self) {
	

const _groups = [
    {
        name: 'Common password',
        samples: ['12345678', 'admin', 'abcdef', 'password', 'qwerty']
    },
    {
        name: 'Female names',
        samples: ['mary', 'patricia', 'linda', 'barbara', 'elizabeth']
    },
    {
        name: 'Male names',
        samples: ['james', 'john', 'robert', 'michael', 'william']
    },
    {
        name: 'Surnames',
        samples: ['smith', 'johnson', 'williams', 'jones', 'brown']
    },
    {
        name: 'English words on Wikipedia',
        samples: ['national', 'university', 'people', 'history', 'county']
    },
];

	return { _groups };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export default Index;

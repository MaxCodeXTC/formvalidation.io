import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as ChangelogLayout } from './chunk.4a563e90.js';
import { a as Tip } from './chunk.38eb3b47.js';

/* src/routes/updates/v0.6.0/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/updates/v0.6.0/index.svelte";

// (10:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("New features");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "New features");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (42:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (51:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Improvements");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Improvements");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (77:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Bug fixes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Bug fixes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (92:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Upgrading to v0.6.0");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Upgrading to v0.6.0");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (134:8) <Tip heading="Note">
function create_default_slot_1(ctx) {
	var t0, code0, t1, t2, code1, t3, t4, code2, t5, t6;

	return {
		c: function create() {
			t0 = text("Don't confuse ");
			code0 = element("code");
			t1 = text("bootstrap(.min).js");
			t2 = text(" file provided by the Bootstrap framework with ");
			code1 = element("code");
			t3 = text("bootstrap(.min).js");
			t4 = text(" provided by FormValidation which is placed inside the ");
			code2 = element("code");
			t5 = text("formvalidation/dist/js/framework");
			t6 = text(" directory.\n            They are two different files and both of them need to be included as mentioned above");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "Don't confuse ");

			code0 = claim_element(nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t1 = claim_text(code0_nodes, "bootstrap(.min).js");
			code0_nodes.forEach(detach);
			t2 = claim_text(nodes, " file provided by the Bootstrap framework with ");

			code1 = claim_element(nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t3 = claim_text(code1_nodes, "bootstrap(.min).js");
			code1_nodes.forEach(detach);
			t4 = claim_text(nodes, " provided by FormValidation which is placed inside the ");

			code2 = claim_element(nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t5 = claim_text(code2_nodes, "formvalidation/dist/js/framework");
			code2_nodes.forEach(detach);
			t6 = claim_text(nodes, " directory.\n            They are two different files and both of them need to be included as mentioned above");
			this.h();
		},

		h: function hydrate() {
			add_location(code0, file, 133, 42, 8229);
			add_location(code1, file, 133, 120, 8307);
			add_location(code2, file, 133, 206, 8393);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, code0, anchor);
			append(code0, t1);
			insert(target, t2, anchor);
			insert(target, code1, anchor);
			append(code1, t3);
			insert(target, t4, anchor);
			insert(target, code2, anchor);
			append(code2, t5);
			insert(target, t6, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(code0);
				detach(t2);
				detach(code1);
				detach(t4);
				detach(code2);
				detach(t6);
			}
		}
	};
}

// (5:0) <ChangelogLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, p0, t5, strong0, t6, t7, t8, ul0, li0, a0, t9, t10, li1, a1, t11, t12, li2, a2, t13, t14, li3, a3, t15, t16, li4, a4, t17, t18, ul1, li5, t19, code0, t20, t21, t22, li6, t23, t24, li7, t25, t26, li8, t27, t28, li9, t29, t30, li10, t31, t32, li11, t33, code1, t34, t35, code2, t36, t37, t38, li12, t39, code3, t40, t41, t42, li13, t43, a5, t44, t45, t46, li14, t47, a6, t48, t49, t50, li15, t51, a7, t52, t53, t54, li16, t55, code4, t56, t57, t58, li17, t59, code5, t60, t61, code6, t62, t63, code7, t64, t65, t66, li18, t67, a8, t68, t69, t70, li19, t71, a9, t72, t73, t74, li20, t75, a10, t76, t77, t78, li21, t79, a11, t80, t81, t82, section1, t83, ul2, li22, t84, a12, t85, t86, t87, li23, t88, code8, t89, t90, code9, t91, t92, code10, t93, t94, t95, li24, t96, t97, section2, t98, ul3, li25, t99, t100, li26, t101, code11, t102, t103, a13, t104, t105, t106, li27, t107, a14, t108, t109, t110, li28, t111, t112, li29, t113, t114, li30, t115, code12, t116, t117, code13, t118, t119, li31, t120, t121, li32, t122, a15, t123, t124, t125, li33, t126, a16, t127, t128, t129, li34, t130, a17, t131, t132, t133, li35, t134, a18, t135, t136, t137, li36, t138, a19, t139, t140, t141, li37, t142, t143, li38, t144, t145, li39, t146, t147, li40, t148, t149, li41, t150, code14, t151, t152, a20, t153, t154, t155, li42, t156, t157, li43, a21, t158, t159, t160, li44, t161, code15, t162, t163, code16, t164, t165, t166, section3, t167, ul4, li45, t168, a22, t169, t170, t171, li46, t172, a23, t173, t174, code17, t175, t176, code18, t177, t178, t179, li47, t180, a24, t181, t182, code19, t183, t184, t185, li48, t186, a25, t187, t188, t189, li49, t190, t191, li50, a26, t192, t193, t194, li51, t195, code20, t196, t197, t198, li52, t199, code21, t200, t201, t202, li53, t203, a27, t204, t205, t206, section4, t207, p1, t208, strong1, t209, t210, t211, h30, t212, t213, p2, t214, strong2, t215, t216, t217, p3, t218, t219, t220, p4, t221, t222, t223, t224, h31, t225, t226, p5, t227, t228, t229, h32, t230, t231, p6, t232, t233, p7, strong3, t234, t235, t236, p8, t237, t238, table, tr0, th0, t239, t240, th1, t241, t242, tr1, td0, t243, t244, tr2, td1, t245, code22, t246, t247, t248, td2, t249, code23, t250, t251, t252, tr3, td3, t253, t254, tr4, td4, code24, t255, t256, td5, code25, t257, t258, tr5, td6, code26, t259, t260, td7, code27, t261, t262, tr6, td8, code28, t263, t264, td9, code29, t265, t266, tr7, td10, code30, t267, t268, td11, code31, t269, t270, tr8, td12, t271, td13, t272, tr9, td14, t273, t274, tr10, td15, code32, t275, t276, td16, code33, t277, t278, tr11, td17, code34, t279, t280, td18, code35, t281, t282, tr12, td19, code36, t283, t284, td20, code37, t285, t286, tr13, td21, t287, td22, t288, tr14, td23, t289, t290, tr15, td24, p9, t291, t292, ul5, li54, t293, code38, t294, t295, code39, t296, t297, li55, t298, code40, t299, t300, code41, t301, t302, code42, t303, t304, t305, tr16, td25, code43, t306, t307, td26, code44, t308, t309, tr17, td27, code45, t310, t311, td28, code46, t312, t313, tr18, td29, code47, t314, t315, td30, code48, t316, t317, tr19, td31, code49, t318, t319, td32, code50, t320, t321, tr20, td33, code51, t322, t323, td34, code52, t324, t325, tr21, td35, code53, t326, t327, td36, code54, t328, t329, tr22, td37, code55, t330, t331, td38, code56, t332, t333, tr23, td39, code57, t334, t335, td40, code58, t336, t337, tr24, td41, code59, t338, t339, td42, code60, t340, t341, tr25, td43, code61, t342, t343, td44, code62, t344, t345, tr26, td45, code63, t346, t347, td46, code64, t348, t349, p10, t350, a28, t351, t352, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading4 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<!-- v0.5.3 -->
<!-- Path to Bootstrap CSS v3.0.0 or higher -->
<link-tag rel="stylesheet" href="/vendor/bootstrap/css/bootstrap.min.css">

<!-- Path to BootstrapValidator CSS -->
<link-tag rel="stylesheet" href="/vendor/bootstrapvalidator/dist/css/bootstrapValidator(.min).css">

<!-- jQuery v1.9.1 or higher -->
<script-tag src="/vendor/jquery/jquery.min.js"></script-tag>

<!-- Path to Bootstrap JS -->
<script-tag src="/vendor/bootstrap/js/bootstrap.min.js"></script-tag>

<!-- Path to BootstrapValidator JS -->
<script-tag src="/vendor/bootstrapvalidator/dist/js/bootstrapValidator(.min).js"></script-tag>
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<!-- Path to Bootstrap CSS v3.0.0 or higher -->
<link-tag rel="stylesheet" href="/vendor/bootstrap/css/bootstrap.min.css">

<!-- FormValidation CSS file -->
<link-tag rel="stylesheet" href="/vendor/formvalidation/dist/css/formValidation(.min).css">

<!-- jQuery v1.9.1 or higher -->
<script-tag src="/vendor/jquery/jquery.min.js"></script-tag>

<!-- Path to Bootstrap JS -->
<script-tag src="/vendor/bootstrap/js/bootstrap.min.js"></script-tag>

<!-- FormValidation plugin and the class supports validating Bootstrap form -->
<script-tag src="/vendor/formvalidation/dist/js/formValidation(.min).js"></script-tag>
<script-tag src="/vendor/formvalidation/dist/js/framework/bootstrap(.min).js"></script-tag>
` },
		$$inline: true
	});

	var tip = new Tip({
		props: {
		heading: "Note",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "html", code: `
// v0.5.3    
(function($) {
    $.fn.bootstrapValidator.validators.yourValidatorName = {
        validate: function(validator, $field, options) {
            ...
        }
    };
}(window.jQuery));    

// v0.6.0
(function($) {
    FormValidation.Validator.yourValidatorName = {
        validate: function(validator, $field, options) {
            // ...
            // The validation code is the same
        }
    };
}(window.jQuery));
` },
		$$inline: true
	});

	var samplecode3 = new SampleCode({
		props: {
		lang: "javascript",
		code: `
$(form).bootstrapValidator({
    container: 'tooltip',
    feedbackIcons: {
        valid: '...',
        invalid: '...',
        validating: '...'
    },
    group: 'td',
    submitButtons: '#submitButton'
});
`
	},
		$$inline: true
	});

	var samplecode4 = new SampleCode({
		props: { lang: "html", code: `
$(form).formValidation({
    framework: 'bootstrap',
    err: {
        container: 'tooltip'
    }
    icon: {
        valid: '...',
        invalid: '...',
        validating: '...'
    },
    row: {
        selector: 'td'
    },
    button: {
        selector: '#submitButton'
    }
});
` },
		$$inline: true
	});

	var samplecode5 = new SampleCode({
		props: {
		lang: "javascript",
		code: `
$(form).bootstrapValidator({
    fields: {
        fieldName: {
            container: 'tooltip',
            feedbackIcons: false,
            group: '.col-sm-3',
            validators: {
                ...
            }
        }
    }
});
`
	},
		$$inline: true
	});

	var samplecode6 = new SampleCode({
		props: {
		lang: "javascript",
		code: `
$(form).formValidation({
    framework: 'bootstrap',
    fields: {
        fieldName: {
            err: 'tooltip',
            icon: false,
            row: '.col-sm-3',
            validators: {
                ...
            }
        }
    }
});
`
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Version 0.6.0");
			t1 = space();
			h2 = element("h2");
			t2 = text("Released 06 January 2015");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			p0 = element("p");
			t5 = text("From v0.6.0, the plugin has new name: ");
			strong0 = element("strong");
			t6 = text("FormValidation");
			t7 = text(". It supports validating form created by many frameworks including");
			t8 = space();
			ul0 = element("ul");
			li0 = element("li");
			a0 = element("a");
			t9 = text("Bootstrap");
			t10 = space();
			li1 = element("li");
			a1 = element("a");
			t11 = text("Foundation");
			t12 = space();
			li2 = element("li");
			a2 = element("a");
			t13 = text("Pure");
			t14 = space();
			li3 = element("li");
			a3 = element("a");
			t15 = text("Semantic UI");
			t16 = space();
			li4 = element("li");
			a4 = element("a");
			t17 = text("UIKit");
			t18 = space();
			ul1 = element("ul");
			li5 = element("li");
			t19 = text("Add ");
			code0 = element("code");
			t20 = text("transformer");
			t21 = text(" option, allowing to hook the value of field before validating");
			t22 = space();
			li6 = element("li");
			t23 = text("Support add-on");
			t24 = space();
			li7 = element("li");
			t25 = text("Support Zurb Foundation framework");
			t26 = space();
			li8 = element("li");
			t27 = text("Support UI Kit framework");
			t28 = space();
			li9 = element("li");
			t29 = text("Support Semantic UI framework");
			t30 = space();
			li10 = element("li");
			t31 = text("Support Pure framework");
			t32 = space();
			li11 = element("li");
			t33 = text("Add ");
			code1 = element("code");
			t34 = text("setLocale()");
			t35 = text(" and ");
			code2 = element("code");
			t36 = text("getLocale()");
			t37 = text(" methods to support multiple languages");
			t38 = space();
			li12 = element("li");
			t39 = text("Add ");
			code3 = element("code");
			t40 = text("validateContainer()");
			t41 = text(" method");
			t42 = space();
			li13 = element("li");
			t43 = text("Add UAE ");
			a5 = element("a");
			t44 = text("phone number");
			t45 = text(" validator");
			t46 = space();
			li14 = element("li");
			t47 = text("Add ");
			a6 = element("a");
			t48 = text("EIN");
			t49 = text(" validator");
			t50 = space();
			li15 = element("li");
			t51 = text("Add ");
			a7 = element("a");
			t52 = text("BIC (ISO 9362)");
			t53 = text(" validator");
			t54 = space();
			li16 = element("li");
			t55 = text("Add ");
			code4 = element("code");
			t56 = text("composer.json");
			t57 = text(" file");
			t58 = space();
			li17 = element("li");
			t59 = text("Add ");
			code5 = element("code");
			t60 = text("err");
			t61 = text(", ");
			code6 = element("code");
			t62 = text("icon");
			t63 = text(", ");
			code7 = element("code");
			t64 = text("row");
			t65 = text(" options");
			t66 = space();
			li18 = element("li");
			t67 = text("Add Spanish ");
			a8 = element("a");
			t68 = text("postal code");
			t69 = text(" validator");
			t70 = space();
			li19 = element("li");
			t71 = text("Support Spanish ");
			a9 = element("a");
			t72 = text("CIF");
			t73 = text(" validator");
			t74 = space();
			li20 = element("li");
			t75 = text("Add India ");
			a10 = element("a");
			t76 = text("phone number");
			t77 = text(" validator");
			t78 = space();
			li21 = element("li");
			t79 = text("Add India ");
			a11 = element("a");
			t80 = text("postal code");
			t81 = text(" validator>");
			t82 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t83 = space();
			ul2 = element("ul");
			li22 = element("li");
			t84 = text("Remove hexColor validator. Use ");
			a12 = element("a");
			t85 = text("color");
			t86 = text(" validator instead");
			t87 = space();
			li23 = element("li");
			t88 = text("Change event ");
			code8 = element("code");
			t89 = text("error.x.x");
			t90 = text(" to ");
			code9 = element("code");
			t91 = text("err.x.x");
			t92 = text(" to avoid ");
			code10 = element("code");
			t93 = text("window.onerror");
			t94 = text(" being invoked by jQuery");
			t95 = space();
			li24 = element("li");
			t96 = text("Remove tab behavior from base class");
			t97 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t98 = space();
			ul3 = element("ul");
			li25 = element("li");
			t99 = text("Look for the field inside form first when using selector");
			t100 = space();
			li26 = element("li");
			t101 = text("Add ");
			code11 = element("code");
			t102 = text("allowEmptyProtocol");
			t103 = text(" option to set optional protocol in ");
			a13 = element("a");
			t104 = text("uri");
			t105 = text(" validator");
			t106 = space();
			li27 = element("li");
			t107 = text("Improve ");
			a14 = element("a");
			t108 = text("identical");
			t109 = text(" validator");
			t110 = space();
			li28 = element("li");
			t111 = text("Show the credit card icon based on its type");
			t112 = space();
			li29 = element("li");
			t113 = text("Showing tooltip/popover when moving over or clicking the feedback icon (Bootstrap 3.3.0)");
			t114 = space();
			li30 = element("li");
			t115 = text("Use ");
			code12 = element("code");
			t116 = text("jQuery");
			t117 = text(" instead of ");
			code13 = element("code");
			t118 = text("window.jQuery");
			t119 = space();
			li31 = element("li");
			t120 = text("Allow to reuse data which is returned by the validator");
			t121 = space();
			li32 = element("li");
			t122 = text("Don't need to set the ");
			a15 = element("a");
			t123 = text("different");
			t124 = text(" validator for both fields");
			t125 = space();
			li33 = element("li");
			t126 = text("Improve the ");
			a16 = element("a");
			t127 = text("CPF");
			t128 = text(" validator");
			t129 = space();
			li34 = element("li");
			t130 = text("Add sample data for ");
			a17 = element("a");
			t131 = text("CPF");
			t132 = text(" validator");
			t133 = space();
			li35 = element("li");
			t134 = text("Improve Spanish ");
			a18 = element("a");
			t135 = text("phone");
			t136 = text(" validator");
			t137 = space();
			li36 = element("li");
			t138 = text("Improve Slovenian ");
			a19 = element("a");
			t139 = text("vat number");
			t140 = text(" validator");
			t141 = space();
			li37 = element("li");
			t142 = text("Improve tooltip style when working with Semantic UI form");
			t143 = space();
			li38 = element("li");
			t144 = text("Fix destroying Semantic UI popup");
			t145 = space();
			li39 = element("li");
			t146 = text("Fix typo in UIKit class");
			t147 = space();
			li40 = element("li");
			t148 = text("Validators return true for not supported countries");
			t149 = space();
			li41 = element("li");
			t150 = text("Support to use a ");
			code14 = element("code");
			t151 = text("Date");
			t152 = text(" object as value for ");
			a20 = element("a");
			t153 = text("min and max");
			t154 = text(" options");
			t155 = space();
			li42 = element("li");
			t156 = text("Improve cvv validator");
			t157 = space();
			li43 = element("li");
			a21 = element("a");
			t158 = text("uri");
			t159 = text(" validator gets slower if more than 25 characters");
			t160 = space();
			li44 = element("li");
			t161 = text("The ");
			code15 = element("code");
			t162 = text("isValidContainer()");
			t163 = text(" method should return ");
			code16 = element("code");
			t164 = text("null");
			t165 = text(" if the container consists of at least one field which is not validated yet or being validated");
			t166 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t167 = space();
			ul4 = element("ul");
			li45 = element("li");
			t168 = text("The ");
			a22 = element("a");
			t169 = text("cusip");
			t170 = text(" validator doesn't work");
			t171 = space();
			li46 = element("li");
			t172 = text("ix the ");
			a23 = element("a");
			t173 = text("date");
			t174 = text(" validator issue where accepts ");
			code17 = element("code");
			t175 = text("2014-11-1 23:");
			t176 = text(" as valid ");
			code18 = element("code");
			t177 = text("YYYY-MM-DD h:m");
			t178 = text(" date");
			t179 = space();
			li47 = element("li");
			t180 = text("The ");
			a24 = element("a");
			t181 = text("color");
			t182 = text(" validator doesn't provide ");
			code19 = element("code");
			t183 = text("html5Attributes");
			t184 = text(" mapping");
			t185 = space();
			li48 = element("li");
			t186 = text("Update Brazil ");
			a25 = element("a");
			t187 = text("ID");
			t188 = text(" validator to support working with Mask plugin");
			t189 = space();
			li49 = element("li");
			t190 = text("Fix the icon without label class");
			t191 = space();
			li50 = element("li");
			a26 = element("a");
			t192 = text("identical");
			t193 = text(" validator allows to compare with any input");
			t194 = space();
			li51 = element("li");
			t195 = text("Fix ");
			code20 = element("code");
			t196 = text("validateContainer()");
			t197 = text(" to use map value instead of key");
			t198 = space();
			li52 = element("li");
			t199 = text("Show the ");
			code21 = element("code");
			t200 = text("validating");
			t201 = text(" icon when the field is being validated");
			t202 = space();
			li53 = element("li");
			t203 = text("Fix bug of US ");
			a27 = element("a");
			t204 = text("phone number");
			t205 = text(" validator");
			t206 = space();
			section4 = element("section");
			heading4.$$.fragment.c();
			t207 = space();
			p1 = element("p");
			t208 = text("From v0.6.0, the plugin name is changed to ");
			strong1 = element("strong");
			t209 = text("FormValidation");
			t210 = text(". To upgrade from v0.5.3 to v0.6.0, perform the following steps:");
			t211 = space();
			h30 = element("h3");
			t212 = text("Required Step: Changing CSS, JavaScript paths");
			t213 = space();
			p2 = element("p");
			t214 = text("This step is ");
			strong2 = element("strong");
			t215 = text("required");
			t216 = text(".");
			t217 = space();
			p3 = element("p");
			t218 = text("In v0.5.3:");
			t219 = space();
			samplecode0.$$.fragment.c();
			t220 = space();
			p4 = element("p");
			t221 = text("In v0.6.0:");
			t222 = space();
			samplecode1.$$.fragment.c();
			t223 = space();
			tip.$$.fragment.c();
			t224 = space();
			h31 = element("h3");
			t225 = text("Required Step: Changing your own validator");
			t226 = space();
			p5 = element("p");
			t227 = text("You can ignore this step in case you don't have any your own validators. Otherwise, change its declaration as following:");
			t228 = space();
			samplecode2.$$.fragment.c();
			t229 = space();
			h32 = element("h3");
			t230 = text("Optional Step: Calling plugin");
			t231 = space();
			p6 = element("p");
			t232 = text("After completing the steps above, you can call the plugin by both programmatic and declarative usages as before.");
			t233 = space();
			p7 = element("p");
			strong3 = element("strong");
			t234 = text("Using v0.5.3 options as your current one are supported in all v0.6.x releases");
			t235 = text(". It means that you will have a lot of time to upgrade your code while current one still work.");
			t236 = space();
			p8 = element("p");
			t237 = text("Anyway, it is recommended to change the plugin calling, options which are listed as following:");
			t238 = space();
			table = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t239 = text("v0.5.3");
			t240 = space();
			th1 = element("th");
			t241 = text("v0.6.0");
			t242 = space();
			tr1 = element("tr");
			td0 = element("td");
			t243 = text("Attribute");
			t244 = space();
			tr2 = element("tr");
			td1 = element("td");
			t245 = text("Use ");
			code22 = element("code");
			t246 = text("data-bv-xxx");
			t247 = text(" attribute");
			t248 = space();
			td2 = element("td");
			t249 = text("Use ");
			code23 = element("code");
			t250 = text("data-fv-xxx");
			t251 = text(" attribute");
			t252 = space();
			tr3 = element("tr");
			td3 = element("td");
			t253 = text("Form settings");
			t254 = space();
			tr4 = element("tr");
			td4 = element("td");
			code24 = element("code");
			t255 = text("container");
			t256 = space();
			td5 = element("td");
			code25 = element("code");
			t257 = text("err.container");
			t258 = space();
			tr5 = element("tr");
			td6 = element("td");
			code26 = element("code");
			t259 = text("feedbackIcons");
			t260 = space();
			td7 = element("td");
			code27 = element("code");
			t261 = text("icon");
			t262 = space();
			tr6 = element("tr");
			td8 = element("td");
			code28 = element("code");
			t263 = text("group");
			t264 = space();
			td9 = element("td");
			code29 = element("code");
			t265 = text("row.selector");
			t266 = space();
			tr7 = element("tr");
			td10 = element("td");
			code30 = element("code");
			t267 = text("submitButtons");
			t268 = space();
			td11 = element("td");
			code31 = element("code");
			t269 = text("button.selector");
			t270 = space();
			tr8 = element("tr");
			td12 = element("td");
			samplecode3.$$.fragment.c();
			t271 = space();
			td13 = element("td");
			samplecode4.$$.fragment.c();
			t272 = space();
			tr9 = element("tr");
			td14 = element("td");
			t273 = text("Field settings");
			t274 = space();
			tr10 = element("tr");
			td15 = element("td");
			code32 = element("code");
			t275 = text("container");
			t276 = space();
			td16 = element("td");
			code33 = element("code");
			t277 = text("err");
			t278 = space();
			tr11 = element("tr");
			td17 = element("td");
			code34 = element("code");
			t279 = text("feedbackIcons");
			t280 = space();
			td18 = element("td");
			code35 = element("code");
			t281 = text("icon");
			t282 = space();
			tr12 = element("tr");
			td19 = element("td");
			code36 = element("code");
			t283 = text("group");
			t284 = space();
			td20 = element("td");
			code37 = element("code");
			t285 = text("row");
			t286 = space();
			tr13 = element("tr");
			td21 = element("td");
			samplecode5.$$.fragment.c();
			t287 = space();
			td22 = element("td");
			samplecode6.$$.fragment.c();
			t288 = space();
			tr14 = element("tr");
			td23 = element("td");
			t289 = text("Events");
			t290 = space();
			tr15 = element("tr");
			td24 = element("td");
			p9 = element("p");
			t291 = text("There are two changes about the event names:");
			t292 = space();
			ul5 = element("ul");
			li54 = element("li");
			t293 = text("The namespace ");
			code38 = element("code");
			t294 = text(".bv");
			t295 = text(" is changed to ");
			code39 = element("code");
			t296 = text(".fv");
			t297 = space();
			li55 = element("li");
			t298 = text("The namespace ");
			code40 = element("code");
			t299 = text("error.");
			t300 = text(" is changed to ");
			code41 = element("code");
			t301 = text("err.");
			t302 = text(" to avoid ");
			code42 = element("code");
			t303 = text("window.onerror");
			t304 = text(" being invoked by jQuery");
			t305 = space();
			tr16 = element("tr");
			td25 = element("td");
			code43 = element("code");
			t306 = text("init.form.bv");
			t307 = space();
			td26 = element("td");
			code44 = element("code");
			t308 = text("init.form.fv");
			t309 = space();
			tr17 = element("tr");
			td27 = element("td");
			code45 = element("code");
			t310 = text("error.form.bv");
			t311 = space();
			td28 = element("td");
			code46 = element("code");
			t312 = text("err.form.fv");
			t313 = space();
			tr18 = element("tr");
			td29 = element("td");
			code47 = element("code");
			t314 = text("success.form.bv");
			t315 = space();
			td30 = element("td");
			code48 = element("code");
			t316 = text("success.form.fv");
			t317 = space();
			tr19 = element("tr");
			td31 = element("td");
			code49 = element("code");
			t318 = text("added.field.bv");
			t319 = space();
			td32 = element("td");
			code50 = element("code");
			t320 = text("added.field.fv");
			t321 = space();
			tr20 = element("tr");
			td33 = element("td");
			code51 = element("code");
			t322 = text("removed.field.bv");
			t323 = space();
			td34 = element("td");
			code52 = element("code");
			t324 = text("removed.field.fv");
			t325 = space();
			tr21 = element("tr");
			td35 = element("td");
			code53 = element("code");
			t326 = text("init.field.bv");
			t327 = space();
			td36 = element("td");
			code54 = element("code");
			t328 = text("init.field.fv");
			t329 = space();
			tr22 = element("tr");
			td37 = element("td");
			code55 = element("code");
			t330 = text("error.field.bv");
			t331 = space();
			td38 = element("td");
			code56 = element("code");
			t332 = text("err.field.fv");
			t333 = space();
			tr23 = element("tr");
			td39 = element("td");
			code57 = element("code");
			t334 = text("success.field.bv");
			t335 = space();
			td40 = element("td");
			code58 = element("code");
			t336 = text("success.field.fv");
			t337 = space();
			tr24 = element("tr");
			td41 = element("td");
			code59 = element("code");
			t338 = text("status.field.bv");
			t339 = space();
			td42 = element("td");
			code60 = element("code");
			t340 = text("status.field.fv");
			t341 = space();
			tr25 = element("tr");
			td43 = element("td");
			code61 = element("code");
			t342 = text("error.validator.bv");
			t343 = space();
			td44 = element("td");
			code62 = element("code");
			t344 = text("err.validator.fv");
			t345 = space();
			tr26 = element("tr");
			td45 = element("td");
			code63 = element("code");
			t346 = text("success.validator.bv");
			t347 = space();
			td46 = element("td");
			code64 = element("code");
			t348 = text("success.validator.fv");
			t349 = space();
			p10 = element("p");
			t350 = text("The last thing, the hexColor validator, deprecated in v0.5.3, is replaced with ");
			a28 = element("a");
			t351 = text("color");
			t352 = text(" validator.");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Version 0.6.0");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Released 06 January 2015");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t5 = claim_text(p0_nodes, "From v0.6.0, the plugin has new name: ");

			strong0 = claim_element(p0_nodes, "STRONG", {}, false);
			var strong0_nodes = children(strong0);

			t6 = claim_text(strong0_nodes, "FormValidation");
			strong0_nodes.forEach(detach);
			t7 = claim_text(p0_nodes, ". It supports validating form created by many frameworks including");
			p0_nodes.forEach(detach);
			t8 = claim_text(section0_nodes, "\n        ");

			ul0 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			a0 = claim_element(li0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t9 = claim_text(a0_nodes, "Bootstrap");
			a0_nodes.forEach(detach);
			li0_nodes.forEach(detach);
			t10 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			a1 = claim_element(li1_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t11 = claim_text(a1_nodes, "Foundation");
			a1_nodes.forEach(detach);
			li1_nodes.forEach(detach);
			t12 = claim_text(ul0_nodes, "\n            ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			a2 = claim_element(li2_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t13 = claim_text(a2_nodes, "Pure");
			a2_nodes.forEach(detach);
			li2_nodes.forEach(detach);
			t14 = claim_text(ul0_nodes, "\n            ");

			li3 = claim_element(ul0_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			a3 = claim_element(li3_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t15 = claim_text(a3_nodes, "Semantic UI");
			a3_nodes.forEach(detach);
			li3_nodes.forEach(detach);
			t16 = claim_text(ul0_nodes, "\n            ");

			li4 = claim_element(ul0_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			a4 = claim_element(li4_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t17 = claim_text(a4_nodes, "UIKit");
			a4_nodes.forEach(detach);
			li4_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			t18 = claim_text(section0_nodes, "\n\n        ");

			ul1 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li5 = claim_element(ul1_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			t19 = claim_text(li5_nodes, "Add ");

			code0 = claim_element(li5_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t20 = claim_text(code0_nodes, "transformer");
			code0_nodes.forEach(detach);
			t21 = claim_text(li5_nodes, " option, allowing to hook the value of field before validating");
			li5_nodes.forEach(detach);
			t22 = claim_text(ul1_nodes, "\n            ");

			li6 = claim_element(ul1_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			t23 = claim_text(li6_nodes, "Support add-on");
			li6_nodes.forEach(detach);
			t24 = claim_text(ul1_nodes, "\n            ");

			li7 = claim_element(ul1_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			t25 = claim_text(li7_nodes, "Support Zurb Foundation framework");
			li7_nodes.forEach(detach);
			t26 = claim_text(ul1_nodes, "\n            ");

			li8 = claim_element(ul1_nodes, "LI", {}, false);
			var li8_nodes = children(li8);

			t27 = claim_text(li8_nodes, "Support UI Kit framework");
			li8_nodes.forEach(detach);
			t28 = claim_text(ul1_nodes, "\n            ");

			li9 = claim_element(ul1_nodes, "LI", {}, false);
			var li9_nodes = children(li9);

			t29 = claim_text(li9_nodes, "Support Semantic UI framework");
			li9_nodes.forEach(detach);
			t30 = claim_text(ul1_nodes, "\n            ");

			li10 = claim_element(ul1_nodes, "LI", {}, false);
			var li10_nodes = children(li10);

			t31 = claim_text(li10_nodes, "Support Pure framework");
			li10_nodes.forEach(detach);
			t32 = claim_text(ul1_nodes, "\n            ");

			li11 = claim_element(ul1_nodes, "LI", {}, false);
			var li11_nodes = children(li11);

			t33 = claim_text(li11_nodes, "Add ");

			code1 = claim_element(li11_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t34 = claim_text(code1_nodes, "setLocale()");
			code1_nodes.forEach(detach);
			t35 = claim_text(li11_nodes, " and ");

			code2 = claim_element(li11_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t36 = claim_text(code2_nodes, "getLocale()");
			code2_nodes.forEach(detach);
			t37 = claim_text(li11_nodes, " methods to support multiple languages");
			li11_nodes.forEach(detach);
			t38 = claim_text(ul1_nodes, "\n            ");

			li12 = claim_element(ul1_nodes, "LI", {}, false);
			var li12_nodes = children(li12);

			t39 = claim_text(li12_nodes, "Add ");

			code3 = claim_element(li12_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t40 = claim_text(code3_nodes, "validateContainer()");
			code3_nodes.forEach(detach);
			t41 = claim_text(li12_nodes, " method");
			li12_nodes.forEach(detach);
			t42 = claim_text(ul1_nodes, "\n            ");

			li13 = claim_element(ul1_nodes, "LI", {}, false);
			var li13_nodes = children(li13);

			t43 = claim_text(li13_nodes, "Add UAE ");

			a5 = claim_element(li13_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t44 = claim_text(a5_nodes, "phone number");
			a5_nodes.forEach(detach);
			t45 = claim_text(li13_nodes, " validator");
			li13_nodes.forEach(detach);
			t46 = claim_text(ul1_nodes, "\n            ");

			li14 = claim_element(ul1_nodes, "LI", {}, false);
			var li14_nodes = children(li14);

			t47 = claim_text(li14_nodes, "Add ");

			a6 = claim_element(li14_nodes, "A", { href: true, class: true }, false);
			var a6_nodes = children(a6);

			t48 = claim_text(a6_nodes, "EIN");
			a6_nodes.forEach(detach);
			t49 = claim_text(li14_nodes, " validator");
			li14_nodes.forEach(detach);
			t50 = claim_text(ul1_nodes, "\n            ");

			li15 = claim_element(ul1_nodes, "LI", {}, false);
			var li15_nodes = children(li15);

			t51 = claim_text(li15_nodes, "Add ");

			a7 = claim_element(li15_nodes, "A", { href: true, class: true }, false);
			var a7_nodes = children(a7);

			t52 = claim_text(a7_nodes, "BIC (ISO 9362)");
			a7_nodes.forEach(detach);
			t53 = claim_text(li15_nodes, " validator");
			li15_nodes.forEach(detach);
			t54 = claim_text(ul1_nodes, "\n            ");

			li16 = claim_element(ul1_nodes, "LI", {}, false);
			var li16_nodes = children(li16);

			t55 = claim_text(li16_nodes, "Add ");

			code4 = claim_element(li16_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t56 = claim_text(code4_nodes, "composer.json");
			code4_nodes.forEach(detach);
			t57 = claim_text(li16_nodes, " file");
			li16_nodes.forEach(detach);
			t58 = claim_text(ul1_nodes, "\n            ");

			li17 = claim_element(ul1_nodes, "LI", {}, false);
			var li17_nodes = children(li17);

			t59 = claim_text(li17_nodes, "Add ");

			code5 = claim_element(li17_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t60 = claim_text(code5_nodes, "err");
			code5_nodes.forEach(detach);
			t61 = claim_text(li17_nodes, ", ");

			code6 = claim_element(li17_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t62 = claim_text(code6_nodes, "icon");
			code6_nodes.forEach(detach);
			t63 = claim_text(li17_nodes, ", ");

			code7 = claim_element(li17_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t64 = claim_text(code7_nodes, "row");
			code7_nodes.forEach(detach);
			t65 = claim_text(li17_nodes, " options");
			li17_nodes.forEach(detach);
			t66 = claim_text(ul1_nodes, "\n            ");

			li18 = claim_element(ul1_nodes, "LI", {}, false);
			var li18_nodes = children(li18);

			t67 = claim_text(li18_nodes, "Add Spanish ");

			a8 = claim_element(li18_nodes, "A", { href: true, class: true }, false);
			var a8_nodes = children(a8);

			t68 = claim_text(a8_nodes, "postal code");
			a8_nodes.forEach(detach);
			t69 = claim_text(li18_nodes, " validator");
			li18_nodes.forEach(detach);
			t70 = claim_text(ul1_nodes, "\n            ");

			li19 = claim_element(ul1_nodes, "LI", {}, false);
			var li19_nodes = children(li19);

			t71 = claim_text(li19_nodes, "Support Spanish ");

			a9 = claim_element(li19_nodes, "A", { href: true, class: true }, false);
			var a9_nodes = children(a9);

			t72 = claim_text(a9_nodes, "CIF");
			a9_nodes.forEach(detach);
			t73 = claim_text(li19_nodes, " validator");
			li19_nodes.forEach(detach);
			t74 = claim_text(ul1_nodes, "\n            ");

			li20 = claim_element(ul1_nodes, "LI", {}, false);
			var li20_nodes = children(li20);

			t75 = claim_text(li20_nodes, "Add India ");

			a10 = claim_element(li20_nodes, "A", { href: true, class: true }, false);
			var a10_nodes = children(a10);

			t76 = claim_text(a10_nodes, "phone number");
			a10_nodes.forEach(detach);
			t77 = claim_text(li20_nodes, " validator");
			li20_nodes.forEach(detach);
			t78 = claim_text(ul1_nodes, "\n            ");

			li21 = claim_element(ul1_nodes, "LI", {}, false);
			var li21_nodes = children(li21);

			t79 = claim_text(li21_nodes, "Add India ");

			a11 = claim_element(li21_nodes, "A", { href: true, class: true }, false);
			var a11_nodes = children(a11);

			t80 = claim_text(a11_nodes, "postal code");
			a11_nodes.forEach(detach);
			t81 = claim_text(li21_nodes, " validator>");
			li21_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t82 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t83 = claim_text(section1_nodes, "\n        ");

			ul2 = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul2_nodes = children(ul2);

			li22 = claim_element(ul2_nodes, "LI", {}, false);
			var li22_nodes = children(li22);

			t84 = claim_text(li22_nodes, "Remove hexColor validator. Use ");

			a12 = claim_element(li22_nodes, "A", { href: true, class: true }, false);
			var a12_nodes = children(a12);

			t85 = claim_text(a12_nodes, "color");
			a12_nodes.forEach(detach);
			t86 = claim_text(li22_nodes, " validator instead");
			li22_nodes.forEach(detach);
			t87 = claim_text(ul2_nodes, "\n            ");

			li23 = claim_element(ul2_nodes, "LI", {}, false);
			var li23_nodes = children(li23);

			t88 = claim_text(li23_nodes, "Change event ");

			code8 = claim_element(li23_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t89 = claim_text(code8_nodes, "error.x.x");
			code8_nodes.forEach(detach);
			t90 = claim_text(li23_nodes, " to ");

			code9 = claim_element(li23_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t91 = claim_text(code9_nodes, "err.x.x");
			code9_nodes.forEach(detach);
			t92 = claim_text(li23_nodes, " to avoid ");

			code10 = claim_element(li23_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t93 = claim_text(code10_nodes, "window.onerror");
			code10_nodes.forEach(detach);
			t94 = claim_text(li23_nodes, " being invoked by jQuery");
			li23_nodes.forEach(detach);
			t95 = claim_text(ul2_nodes, "\n            ");

			li24 = claim_element(ul2_nodes, "LI", {}, false);
			var li24_nodes = children(li24);

			t96 = claim_text(li24_nodes, "Remove tab behavior from base class");
			li24_nodes.forEach(detach);
			ul2_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t97 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t98 = claim_text(section2_nodes, "\n        ");

			ul3 = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul3_nodes = children(ul3);

			li25 = claim_element(ul3_nodes, "LI", {}, false);
			var li25_nodes = children(li25);

			t99 = claim_text(li25_nodes, "Look for the field inside form first when using selector");
			li25_nodes.forEach(detach);
			t100 = claim_text(ul3_nodes, "\n            ");

			li26 = claim_element(ul3_nodes, "LI", {}, false);
			var li26_nodes = children(li26);

			t101 = claim_text(li26_nodes, "Add ");

			code11 = claim_element(li26_nodes, "CODE", {}, false);
			var code11_nodes = children(code11);

			t102 = claim_text(code11_nodes, "allowEmptyProtocol");
			code11_nodes.forEach(detach);
			t103 = claim_text(li26_nodes, " option to set optional protocol in ");

			a13 = claim_element(li26_nodes, "A", { href: true, class: true }, false);
			var a13_nodes = children(a13);

			t104 = claim_text(a13_nodes, "uri");
			a13_nodes.forEach(detach);
			t105 = claim_text(li26_nodes, " validator");
			li26_nodes.forEach(detach);
			t106 = claim_text(ul3_nodes, "\n            ");

			li27 = claim_element(ul3_nodes, "LI", {}, false);
			var li27_nodes = children(li27);

			t107 = claim_text(li27_nodes, "Improve ");

			a14 = claim_element(li27_nodes, "A", { href: true, class: true }, false);
			var a14_nodes = children(a14);

			t108 = claim_text(a14_nodes, "identical");
			a14_nodes.forEach(detach);
			t109 = claim_text(li27_nodes, " validator");
			li27_nodes.forEach(detach);
			t110 = claim_text(ul3_nodes, "\n            ");

			li28 = claim_element(ul3_nodes, "LI", {}, false);
			var li28_nodes = children(li28);

			t111 = claim_text(li28_nodes, "Show the credit card icon based on its type");
			li28_nodes.forEach(detach);
			t112 = claim_text(ul3_nodes, "\n            ");

			li29 = claim_element(ul3_nodes, "LI", {}, false);
			var li29_nodes = children(li29);

			t113 = claim_text(li29_nodes, "Showing tooltip/popover when moving over or clicking the feedback icon (Bootstrap 3.3.0)");
			li29_nodes.forEach(detach);
			t114 = claim_text(ul3_nodes, "\n            ");

			li30 = claim_element(ul3_nodes, "LI", {}, false);
			var li30_nodes = children(li30);

			t115 = claim_text(li30_nodes, "Use ");

			code12 = claim_element(li30_nodes, "CODE", {}, false);
			var code12_nodes = children(code12);

			t116 = claim_text(code12_nodes, "jQuery");
			code12_nodes.forEach(detach);
			t117 = claim_text(li30_nodes, " instead of ");

			code13 = claim_element(li30_nodes, "CODE", {}, false);
			var code13_nodes = children(code13);

			t118 = claim_text(code13_nodes, "window.jQuery");
			code13_nodes.forEach(detach);
			li30_nodes.forEach(detach);
			t119 = claim_text(ul3_nodes, "\n            ");

			li31 = claim_element(ul3_nodes, "LI", {}, false);
			var li31_nodes = children(li31);

			t120 = claim_text(li31_nodes, "Allow to reuse data which is returned by the validator");
			li31_nodes.forEach(detach);
			t121 = claim_text(ul3_nodes, "\n            ");

			li32 = claim_element(ul3_nodes, "LI", {}, false);
			var li32_nodes = children(li32);

			t122 = claim_text(li32_nodes, "Don't need to set the ");

			a15 = claim_element(li32_nodes, "A", { href: true, class: true }, false);
			var a15_nodes = children(a15);

			t123 = claim_text(a15_nodes, "different");
			a15_nodes.forEach(detach);
			t124 = claim_text(li32_nodes, " validator for both fields");
			li32_nodes.forEach(detach);
			t125 = claim_text(ul3_nodes, "\n            ");

			li33 = claim_element(ul3_nodes, "LI", {}, false);
			var li33_nodes = children(li33);

			t126 = claim_text(li33_nodes, "Improve the ");

			a16 = claim_element(li33_nodes, "A", { href: true, class: true }, false);
			var a16_nodes = children(a16);

			t127 = claim_text(a16_nodes, "CPF");
			a16_nodes.forEach(detach);
			t128 = claim_text(li33_nodes, " validator");
			li33_nodes.forEach(detach);
			t129 = claim_text(ul3_nodes, "\n            ");

			li34 = claim_element(ul3_nodes, "LI", {}, false);
			var li34_nodes = children(li34);

			t130 = claim_text(li34_nodes, "Add sample data for ");

			a17 = claim_element(li34_nodes, "A", { href: true, class: true }, false);
			var a17_nodes = children(a17);

			t131 = claim_text(a17_nodes, "CPF");
			a17_nodes.forEach(detach);
			t132 = claim_text(li34_nodes, " validator");
			li34_nodes.forEach(detach);
			t133 = claim_text(ul3_nodes, "\n            ");

			li35 = claim_element(ul3_nodes, "LI", {}, false);
			var li35_nodes = children(li35);

			t134 = claim_text(li35_nodes, "Improve Spanish ");

			a18 = claim_element(li35_nodes, "A", { href: true, class: true }, false);
			var a18_nodes = children(a18);

			t135 = claim_text(a18_nodes, "phone");
			a18_nodes.forEach(detach);
			t136 = claim_text(li35_nodes, " validator");
			li35_nodes.forEach(detach);
			t137 = claim_text(ul3_nodes, "\n            ");

			li36 = claim_element(ul3_nodes, "LI", {}, false);
			var li36_nodes = children(li36);

			t138 = claim_text(li36_nodes, "Improve Slovenian ");

			a19 = claim_element(li36_nodes, "A", { href: true, class: true }, false);
			var a19_nodes = children(a19);

			t139 = claim_text(a19_nodes, "vat number");
			a19_nodes.forEach(detach);
			t140 = claim_text(li36_nodes, " validator");
			li36_nodes.forEach(detach);
			t141 = claim_text(ul3_nodes, "\n            ");

			li37 = claim_element(ul3_nodes, "LI", {}, false);
			var li37_nodes = children(li37);

			t142 = claim_text(li37_nodes, "Improve tooltip style when working with Semantic UI form");
			li37_nodes.forEach(detach);
			t143 = claim_text(ul3_nodes, "\n            ");

			li38 = claim_element(ul3_nodes, "LI", {}, false);
			var li38_nodes = children(li38);

			t144 = claim_text(li38_nodes, "Fix destroying Semantic UI popup");
			li38_nodes.forEach(detach);
			t145 = claim_text(ul3_nodes, "\n            ");

			li39 = claim_element(ul3_nodes, "LI", {}, false);
			var li39_nodes = children(li39);

			t146 = claim_text(li39_nodes, "Fix typo in UIKit class");
			li39_nodes.forEach(detach);
			t147 = claim_text(ul3_nodes, "\n            ");

			li40 = claim_element(ul3_nodes, "LI", {}, false);
			var li40_nodes = children(li40);

			t148 = claim_text(li40_nodes, "Validators return true for not supported countries");
			li40_nodes.forEach(detach);
			t149 = claim_text(ul3_nodes, "\n            ");

			li41 = claim_element(ul3_nodes, "LI", {}, false);
			var li41_nodes = children(li41);

			t150 = claim_text(li41_nodes, "Support to use a ");

			code14 = claim_element(li41_nodes, "CODE", {}, false);
			var code14_nodes = children(code14);

			t151 = claim_text(code14_nodes, "Date");
			code14_nodes.forEach(detach);
			t152 = claim_text(li41_nodes, " object as value for ");

			a20 = claim_element(li41_nodes, "A", { href: true, class: true }, false);
			var a20_nodes = children(a20);

			t153 = claim_text(a20_nodes, "min and max");
			a20_nodes.forEach(detach);
			t154 = claim_text(li41_nodes, " options");
			li41_nodes.forEach(detach);
			t155 = claim_text(ul3_nodes, "\n            ");

			li42 = claim_element(ul3_nodes, "LI", {}, false);
			var li42_nodes = children(li42);

			t156 = claim_text(li42_nodes, "Improve cvv validator");
			li42_nodes.forEach(detach);
			t157 = claim_text(ul3_nodes, "\n            ");

			li43 = claim_element(ul3_nodes, "LI", {}, false);
			var li43_nodes = children(li43);

			a21 = claim_element(li43_nodes, "A", { href: true, class: true }, false);
			var a21_nodes = children(a21);

			t158 = claim_text(a21_nodes, "uri");
			a21_nodes.forEach(detach);
			t159 = claim_text(li43_nodes, " validator gets slower if more than 25 characters");
			li43_nodes.forEach(detach);
			t160 = claim_text(ul3_nodes, "\n            ");

			li44 = claim_element(ul3_nodes, "LI", {}, false);
			var li44_nodes = children(li44);

			t161 = claim_text(li44_nodes, "The ");

			code15 = claim_element(li44_nodes, "CODE", {}, false);
			var code15_nodes = children(code15);

			t162 = claim_text(code15_nodes, "isValidContainer()");
			code15_nodes.forEach(detach);
			t163 = claim_text(li44_nodes, " method should return ");

			code16 = claim_element(li44_nodes, "CODE", {}, false);
			var code16_nodes = children(code16);

			t164 = claim_text(code16_nodes, "null");
			code16_nodes.forEach(detach);
			t165 = claim_text(li44_nodes, " if the container consists of at least one field which is not validated yet or being validated");
			li44_nodes.forEach(detach);
			ul3_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			t166 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t167 = claim_text(section3_nodes, "\n        ");

			ul4 = claim_element(section3_nodes, "UL", { class: true }, false);
			var ul4_nodes = children(ul4);

			li45 = claim_element(ul4_nodes, "LI", {}, false);
			var li45_nodes = children(li45);

			t168 = claim_text(li45_nodes, "The ");

			a22 = claim_element(li45_nodes, "A", { href: true, class: true }, false);
			var a22_nodes = children(a22);

			t169 = claim_text(a22_nodes, "cusip");
			a22_nodes.forEach(detach);
			t170 = claim_text(li45_nodes, " validator doesn't work");
			li45_nodes.forEach(detach);
			t171 = claim_text(ul4_nodes, "\n            ");

			li46 = claim_element(ul4_nodes, "LI", {}, false);
			var li46_nodes = children(li46);

			t172 = claim_text(li46_nodes, "ix the ");

			a23 = claim_element(li46_nodes, "A", { href: true, class: true }, false);
			var a23_nodes = children(a23);

			t173 = claim_text(a23_nodes, "date");
			a23_nodes.forEach(detach);
			t174 = claim_text(li46_nodes, " validator issue where accepts ");

			code17 = claim_element(li46_nodes, "CODE", {}, false);
			var code17_nodes = children(code17);

			t175 = claim_text(code17_nodes, "2014-11-1 23:");
			code17_nodes.forEach(detach);
			t176 = claim_text(li46_nodes, " as valid ");

			code18 = claim_element(li46_nodes, "CODE", {}, false);
			var code18_nodes = children(code18);

			t177 = claim_text(code18_nodes, "YYYY-MM-DD h:m");
			code18_nodes.forEach(detach);
			t178 = claim_text(li46_nodes, " date");
			li46_nodes.forEach(detach);
			t179 = claim_text(ul4_nodes, "\n            ");

			li47 = claim_element(ul4_nodes, "LI", {}, false);
			var li47_nodes = children(li47);

			t180 = claim_text(li47_nodes, "The ");

			a24 = claim_element(li47_nodes, "A", { href: true, class: true }, false);
			var a24_nodes = children(a24);

			t181 = claim_text(a24_nodes, "color");
			a24_nodes.forEach(detach);
			t182 = claim_text(li47_nodes, " validator doesn't provide ");

			code19 = claim_element(li47_nodes, "CODE", {}, false);
			var code19_nodes = children(code19);

			t183 = claim_text(code19_nodes, "html5Attributes");
			code19_nodes.forEach(detach);
			t184 = claim_text(li47_nodes, " mapping");
			li47_nodes.forEach(detach);
			t185 = claim_text(ul4_nodes, "\n            ");

			li48 = claim_element(ul4_nodes, "LI", {}, false);
			var li48_nodes = children(li48);

			t186 = claim_text(li48_nodes, "Update Brazil ");

			a25 = claim_element(li48_nodes, "A", { href: true, class: true }, false);
			var a25_nodes = children(a25);

			t187 = claim_text(a25_nodes, "ID");
			a25_nodes.forEach(detach);
			t188 = claim_text(li48_nodes, " validator to support working with Mask plugin");
			li48_nodes.forEach(detach);
			t189 = claim_text(ul4_nodes, "\n            ");

			li49 = claim_element(ul4_nodes, "LI", {}, false);
			var li49_nodes = children(li49);

			t190 = claim_text(li49_nodes, "Fix the icon without label class");
			li49_nodes.forEach(detach);
			t191 = claim_text(ul4_nodes, "\n            ");

			li50 = claim_element(ul4_nodes, "LI", {}, false);
			var li50_nodes = children(li50);

			a26 = claim_element(li50_nodes, "A", { href: true, class: true }, false);
			var a26_nodes = children(a26);

			t192 = claim_text(a26_nodes, "identical");
			a26_nodes.forEach(detach);
			t193 = claim_text(li50_nodes, " validator allows to compare with any input");
			li50_nodes.forEach(detach);
			t194 = claim_text(ul4_nodes, "\n            ");

			li51 = claim_element(ul4_nodes, "LI", {}, false);
			var li51_nodes = children(li51);

			t195 = claim_text(li51_nodes, "Fix ");

			code20 = claim_element(li51_nodes, "CODE", {}, false);
			var code20_nodes = children(code20);

			t196 = claim_text(code20_nodes, "validateContainer()");
			code20_nodes.forEach(detach);
			t197 = claim_text(li51_nodes, " to use map value instead of key");
			li51_nodes.forEach(detach);
			t198 = claim_text(ul4_nodes, "\n            ");

			li52 = claim_element(ul4_nodes, "LI", {}, false);
			var li52_nodes = children(li52);

			t199 = claim_text(li52_nodes, "Show the ");

			code21 = claim_element(li52_nodes, "CODE", {}, false);
			var code21_nodes = children(code21);

			t200 = claim_text(code21_nodes, "validating");
			code21_nodes.forEach(detach);
			t201 = claim_text(li52_nodes, " icon when the field is being validated");
			li52_nodes.forEach(detach);
			t202 = claim_text(ul4_nodes, "\n            ");

			li53 = claim_element(ul4_nodes, "LI", {}, false);
			var li53_nodes = children(li53);

			t203 = claim_text(li53_nodes, "Fix bug of US ");

			a27 = claim_element(li53_nodes, "A", { href: true, class: true }, false);
			var a27_nodes = children(a27);

			t204 = claim_text(a27_nodes, "phone number");
			a27_nodes.forEach(detach);
			t205 = claim_text(li53_nodes, " validator");
			li53_nodes.forEach(detach);
			ul4_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			t206 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			heading4.$$.fragment.l(section4_nodes);
			t207 = claim_text(section4_nodes, "\n        ");

			p1 = claim_element(section4_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t208 = claim_text(p1_nodes, "From v0.6.0, the plugin name is changed to ");

			strong1 = claim_element(p1_nodes, "STRONG", {}, false);
			var strong1_nodes = children(strong1);

			t209 = claim_text(strong1_nodes, "FormValidation");
			strong1_nodes.forEach(detach);
			t210 = claim_text(p1_nodes, ". To upgrade from v0.5.3 to v0.6.0, perform the following steps:");
			p1_nodes.forEach(detach);
			t211 = claim_text(section4_nodes, "\n        ");

			h30 = claim_element(section4_nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t212 = claim_text(h30_nodes, "Required Step: Changing CSS, JavaScript paths");
			h30_nodes.forEach(detach);
			t213 = claim_text(section4_nodes, "\n\n        ");

			p2 = claim_element(section4_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t214 = claim_text(p2_nodes, "This step is ");

			strong2 = claim_element(p2_nodes, "STRONG", {}, false);
			var strong2_nodes = children(strong2);

			t215 = claim_text(strong2_nodes, "required");
			strong2_nodes.forEach(detach);
			t216 = claim_text(p2_nodes, ".");
			p2_nodes.forEach(detach);
			t217 = claim_text(section4_nodes, "\n        ");

			p3 = claim_element(section4_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t218 = claim_text(p3_nodes, "In v0.5.3:");
			p3_nodes.forEach(detach);
			t219 = claim_text(section4_nodes, "\n    ");
			samplecode0.$$.fragment.l(section4_nodes);
			t220 = claim_text(section4_nodes, "\n\n        ");

			p4 = claim_element(section4_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t221 = claim_text(p4_nodes, "In v0.6.0:");
			p4_nodes.forEach(detach);
			t222 = claim_text(section4_nodes, "\n        ");
			samplecode1.$$.fragment.l(section4_nodes);
			t223 = claim_text(section4_nodes, "\n        ");
			tip.$$.fragment.l(section4_nodes);
			t224 = claim_text(section4_nodes, "\n\n        ");

			h31 = claim_element(section4_nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t225 = claim_text(h31_nodes, "Required Step: Changing your own validator");
			h31_nodes.forEach(detach);
			t226 = claim_text(section4_nodes, "\n\n        ");

			p5 = claim_element(section4_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t227 = claim_text(p5_nodes, "You can ignore this step in case you don't have any your own validators. Otherwise, change its declaration as following:");
			p5_nodes.forEach(detach);
			t228 = claim_text(section4_nodes, "\n\n        ");
			samplecode2.$$.fragment.l(section4_nodes);
			t229 = claim_text(section4_nodes, "\n\n        ");

			h32 = claim_element(section4_nodes, "H3", {}, false);
			var h32_nodes = children(h32);

			t230 = claim_text(h32_nodes, "Optional Step: Calling plugin");
			h32_nodes.forEach(detach);
			t231 = claim_text(section4_nodes, "\n\n        ");

			p6 = claim_element(section4_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t232 = claim_text(p6_nodes, "After completing the steps above, you can call the plugin by both programmatic and declarative usages as before.");
			p6_nodes.forEach(detach);
			t233 = claim_text(section4_nodes, "\n        ");

			p7 = claim_element(section4_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			strong3 = claim_element(p7_nodes, "STRONG", {}, false);
			var strong3_nodes = children(strong3);

			t234 = claim_text(strong3_nodes, "Using v0.5.3 options as your current one are supported in all v0.6.x releases");
			strong3_nodes.forEach(detach);
			t235 = claim_text(p7_nodes, ". It means that you will have a lot of time to upgrade your code while current one still work.");
			p7_nodes.forEach(detach);
			t236 = claim_text(section4_nodes, "\n        ");

			p8 = claim_element(section4_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t237 = claim_text(p8_nodes, "Anyway, it is recommended to change the plugin calling, options which are listed as following:");
			p8_nodes.forEach(detach);
			t238 = claim_text(section4_nodes, "\n\n        ");

			table = claim_element(section4_nodes, "TABLE", { class: true }, false);
			var table_nodes = children(table);

			tr0 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t239 = claim_text(th0_nodes, "v0.5.3");
			th0_nodes.forEach(detach);
			t240 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t241 = claim_text(th1_nodes, "v0.6.0");
			th1_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t242 = claim_text(table_nodes, "\n            ");

			tr1 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { colspan: true, class: true }, false);
			var td0_nodes = children(td0);

			t243 = claim_text(td0_nodes, "Attribute");
			td0_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t244 = claim_text(table_nodes, "\n            ");

			tr2 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td1 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			t245 = claim_text(td1_nodes, "Use ");

			code22 = claim_element(td1_nodes, "CODE", {}, false);
			var code22_nodes = children(code22);

			t246 = claim_text(code22_nodes, "data-bv-xxx");
			code22_nodes.forEach(detach);
			t247 = claim_text(td1_nodes, " attribute");
			td1_nodes.forEach(detach);
			t248 = claim_text(tr2_nodes, "\n                ");

			td2 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t249 = claim_text(td2_nodes, "Use ");

			code23 = claim_element(td2_nodes, "CODE", {}, false);
			var code23_nodes = children(code23);

			t250 = claim_text(code23_nodes, "data-fv-xxx");
			code23_nodes.forEach(detach);
			t251 = claim_text(td2_nodes, " attribute");
			td2_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t252 = claim_text(table_nodes, "\n\n            ");

			tr3 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td3 = claim_element(tr3_nodes, "TD", { colspan: true, class: true }, false);
			var td3_nodes = children(td3);

			t253 = claim_text(td3_nodes, "Form settings");
			td3_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			t254 = claim_text(table_nodes, "\n            ");

			tr4 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			td4 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			code24 = claim_element(td4_nodes, "CODE", {}, false);
			var code24_nodes = children(code24);

			t255 = claim_text(code24_nodes, "container");
			code24_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t256 = claim_text(tr4_nodes, "\n                ");

			td5 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			code25 = claim_element(td5_nodes, "CODE", {}, false);
			var code25_nodes = children(code25);

			t257 = claim_text(code25_nodes, "err.container");
			code25_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			t258 = claim_text(table_nodes, "\n            ");

			tr5 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr5_nodes = children(tr5);

			td6 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			code26 = claim_element(td6_nodes, "CODE", {}, false);
			var code26_nodes = children(code26);

			t259 = claim_text(code26_nodes, "feedbackIcons");
			code26_nodes.forEach(detach);
			td6_nodes.forEach(detach);
			t260 = claim_text(tr5_nodes, "\n                ");

			td7 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			code27 = claim_element(td7_nodes, "CODE", {}, false);
			var code27_nodes = children(code27);

			t261 = claim_text(code27_nodes, "icon");
			code27_nodes.forEach(detach);
			td7_nodes.forEach(detach);
			tr5_nodes.forEach(detach);
			t262 = claim_text(table_nodes, "\n            ");

			tr6 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr6_nodes = children(tr6);

			td8 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			code28 = claim_element(td8_nodes, "CODE", {}, false);
			var code28_nodes = children(code28);

			t263 = claim_text(code28_nodes, "group");
			code28_nodes.forEach(detach);
			td8_nodes.forEach(detach);
			t264 = claim_text(tr6_nodes, "\n                ");

			td9 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			code29 = claim_element(td9_nodes, "CODE", {}, false);
			var code29_nodes = children(code29);

			t265 = claim_text(code29_nodes, "row.selector");
			code29_nodes.forEach(detach);
			td9_nodes.forEach(detach);
			tr6_nodes.forEach(detach);
			t266 = claim_text(table_nodes, "\n            ");

			tr7 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr7_nodes = children(tr7);

			td10 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td10_nodes = children(td10);

			code30 = claim_element(td10_nodes, "CODE", {}, false);
			var code30_nodes = children(code30);

			t267 = claim_text(code30_nodes, "submitButtons");
			code30_nodes.forEach(detach);
			td10_nodes.forEach(detach);
			t268 = claim_text(tr7_nodes, "\n                ");

			td11 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td11_nodes = children(td11);

			code31 = claim_element(td11_nodes, "CODE", {}, false);
			var code31_nodes = children(code31);

			t269 = claim_text(code31_nodes, "button.selector");
			code31_nodes.forEach(detach);
			td11_nodes.forEach(detach);
			tr7_nodes.forEach(detach);
			t270 = claim_text(table_nodes, "\n            ");

			tr8 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr8_nodes = children(tr8);

			td12 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td12_nodes = children(td12);

			samplecode3.$$.fragment.l(td12_nodes);
			td12_nodes.forEach(detach);
			t271 = claim_text(tr8_nodes, "\n                ");

			td13 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td13_nodes = children(td13);

			samplecode4.$$.fragment.l(td13_nodes);
			td13_nodes.forEach(detach);
			tr8_nodes.forEach(detach);
			t272 = claim_text(table_nodes, "\n\n            ");

			tr9 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr9_nodes = children(tr9);

			td14 = claim_element(tr9_nodes, "TD", { colspan: true, class: true }, false);
			var td14_nodes = children(td14);

			t273 = claim_text(td14_nodes, "Field settings");
			td14_nodes.forEach(detach);
			tr9_nodes.forEach(detach);
			t274 = claim_text(table_nodes, "\n            ");

			tr10 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr10_nodes = children(tr10);

			td15 = claim_element(tr10_nodes, "TD", { class: true }, false);
			var td15_nodes = children(td15);

			code32 = claim_element(td15_nodes, "CODE", {}, false);
			var code32_nodes = children(code32);

			t275 = claim_text(code32_nodes, "container");
			code32_nodes.forEach(detach);
			td15_nodes.forEach(detach);
			t276 = claim_text(tr10_nodes, "\n                ");

			td16 = claim_element(tr10_nodes, "TD", { class: true }, false);
			var td16_nodes = children(td16);

			code33 = claim_element(td16_nodes, "CODE", {}, false);
			var code33_nodes = children(code33);

			t277 = claim_text(code33_nodes, "err");
			code33_nodes.forEach(detach);
			td16_nodes.forEach(detach);
			tr10_nodes.forEach(detach);
			t278 = claim_text(table_nodes, "\n            ");

			tr11 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr11_nodes = children(tr11);

			td17 = claim_element(tr11_nodes, "TD", { class: true }, false);
			var td17_nodes = children(td17);

			code34 = claim_element(td17_nodes, "CODE", {}, false);
			var code34_nodes = children(code34);

			t279 = claim_text(code34_nodes, "feedbackIcons");
			code34_nodes.forEach(detach);
			td17_nodes.forEach(detach);
			t280 = claim_text(tr11_nodes, "\n                ");

			td18 = claim_element(tr11_nodes, "TD", { class: true }, false);
			var td18_nodes = children(td18);

			code35 = claim_element(td18_nodes, "CODE", {}, false);
			var code35_nodes = children(code35);

			t281 = claim_text(code35_nodes, "icon");
			code35_nodes.forEach(detach);
			td18_nodes.forEach(detach);
			tr11_nodes.forEach(detach);
			t282 = claim_text(table_nodes, "\n            ");

			tr12 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr12_nodes = children(tr12);

			td19 = claim_element(tr12_nodes, "TD", { class: true }, false);
			var td19_nodes = children(td19);

			code36 = claim_element(td19_nodes, "CODE", {}, false);
			var code36_nodes = children(code36);

			t283 = claim_text(code36_nodes, "group");
			code36_nodes.forEach(detach);
			td19_nodes.forEach(detach);
			t284 = claim_text(tr12_nodes, "\n                ");

			td20 = claim_element(tr12_nodes, "TD", { class: true }, false);
			var td20_nodes = children(td20);

			code37 = claim_element(td20_nodes, "CODE", {}, false);
			var code37_nodes = children(code37);

			t285 = claim_text(code37_nodes, "row");
			code37_nodes.forEach(detach);
			td20_nodes.forEach(detach);
			tr12_nodes.forEach(detach);
			t286 = claim_text(table_nodes, "\n            ");

			tr13 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr13_nodes = children(tr13);

			td21 = claim_element(tr13_nodes, "TD", { class: true }, false);
			var td21_nodes = children(td21);

			samplecode5.$$.fragment.l(td21_nodes);
			td21_nodes.forEach(detach);
			t287 = claim_text(tr13_nodes, "\n                ");

			td22 = claim_element(tr13_nodes, "TD", { class: true }, false);
			var td22_nodes = children(td22);

			samplecode6.$$.fragment.l(td22_nodes);
			td22_nodes.forEach(detach);
			tr13_nodes.forEach(detach);
			t288 = claim_text(table_nodes, "\n\n            ");

			tr14 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr14_nodes = children(tr14);

			td23 = claim_element(tr14_nodes, "TD", { colspan: true, class: true }, false);
			var td23_nodes = children(td23);

			t289 = claim_text(td23_nodes, "Events");
			td23_nodes.forEach(detach);
			tr14_nodes.forEach(detach);
			t290 = claim_text(table_nodes, "\n            ");

			tr15 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr15_nodes = children(tr15);

			td24 = claim_element(tr15_nodes, "TD", { colspan: true, class: true }, false);
			var td24_nodes = children(td24);

			p9 = claim_element(td24_nodes, "P", { class: true }, false);
			var p9_nodes = children(p9);

			t291 = claim_text(p9_nodes, "There are two changes about the event names:");
			p9_nodes.forEach(detach);
			t292 = claim_text(td24_nodes, "\n                    ");

			ul5 = claim_element(td24_nodes, "UL", { class: true }, false);
			var ul5_nodes = children(ul5);

			li54 = claim_element(ul5_nodes, "LI", {}, false);
			var li54_nodes = children(li54);

			t293 = claim_text(li54_nodes, "The namespace ");

			code38 = claim_element(li54_nodes, "CODE", {}, false);
			var code38_nodes = children(code38);

			t294 = claim_text(code38_nodes, ".bv");
			code38_nodes.forEach(detach);
			t295 = claim_text(li54_nodes, " is changed to ");

			code39 = claim_element(li54_nodes, "CODE", {}, false);
			var code39_nodes = children(code39);

			t296 = claim_text(code39_nodes, ".fv");
			code39_nodes.forEach(detach);
			li54_nodes.forEach(detach);
			t297 = claim_text(ul5_nodes, "\n                        ");

			li55 = claim_element(ul5_nodes, "LI", {}, false);
			var li55_nodes = children(li55);

			t298 = claim_text(li55_nodes, "The namespace ");

			code40 = claim_element(li55_nodes, "CODE", {}, false);
			var code40_nodes = children(code40);

			t299 = claim_text(code40_nodes, "error.");
			code40_nodes.forEach(detach);
			t300 = claim_text(li55_nodes, " is changed to ");

			code41 = claim_element(li55_nodes, "CODE", {}, false);
			var code41_nodes = children(code41);

			t301 = claim_text(code41_nodes, "err.");
			code41_nodes.forEach(detach);
			t302 = claim_text(li55_nodes, " to avoid ");

			code42 = claim_element(li55_nodes, "CODE", {}, false);
			var code42_nodes = children(code42);

			t303 = claim_text(code42_nodes, "window.onerror");
			code42_nodes.forEach(detach);
			t304 = claim_text(li55_nodes, " being invoked by jQuery");
			li55_nodes.forEach(detach);
			ul5_nodes.forEach(detach);
			td24_nodes.forEach(detach);
			tr15_nodes.forEach(detach);
			t305 = claim_text(table_nodes, "\n            ");

			tr16 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr16_nodes = children(tr16);

			td25 = claim_element(tr16_nodes, "TD", { class: true }, false);
			var td25_nodes = children(td25);

			code43 = claim_element(td25_nodes, "CODE", {}, false);
			var code43_nodes = children(code43);

			t306 = claim_text(code43_nodes, "init.form.bv");
			code43_nodes.forEach(detach);
			td25_nodes.forEach(detach);
			t307 = claim_text(tr16_nodes, "\n                ");

			td26 = claim_element(tr16_nodes, "TD", { class: true }, false);
			var td26_nodes = children(td26);

			code44 = claim_element(td26_nodes, "CODE", {}, false);
			var code44_nodes = children(code44);

			t308 = claim_text(code44_nodes, "init.form.fv");
			code44_nodes.forEach(detach);
			td26_nodes.forEach(detach);
			tr16_nodes.forEach(detach);
			t309 = claim_text(table_nodes, "\n            ");

			tr17 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr17_nodes = children(tr17);

			td27 = claim_element(tr17_nodes, "TD", { class: true }, false);
			var td27_nodes = children(td27);

			code45 = claim_element(td27_nodes, "CODE", {}, false);
			var code45_nodes = children(code45);

			t310 = claim_text(code45_nodes, "error.form.bv");
			code45_nodes.forEach(detach);
			td27_nodes.forEach(detach);
			t311 = claim_text(tr17_nodes, "\n                ");

			td28 = claim_element(tr17_nodes, "TD", { class: true }, false);
			var td28_nodes = children(td28);

			code46 = claim_element(td28_nodes, "CODE", {}, false);
			var code46_nodes = children(code46);

			t312 = claim_text(code46_nodes, "err.form.fv");
			code46_nodes.forEach(detach);
			td28_nodes.forEach(detach);
			tr17_nodes.forEach(detach);
			t313 = claim_text(table_nodes, "\n            ");

			tr18 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr18_nodes = children(tr18);

			td29 = claim_element(tr18_nodes, "TD", { class: true }, false);
			var td29_nodes = children(td29);

			code47 = claim_element(td29_nodes, "CODE", {}, false);
			var code47_nodes = children(code47);

			t314 = claim_text(code47_nodes, "success.form.bv");
			code47_nodes.forEach(detach);
			td29_nodes.forEach(detach);
			t315 = claim_text(tr18_nodes, "\n                ");

			td30 = claim_element(tr18_nodes, "TD", { class: true }, false);
			var td30_nodes = children(td30);

			code48 = claim_element(td30_nodes, "CODE", {}, false);
			var code48_nodes = children(code48);

			t316 = claim_text(code48_nodes, "success.form.fv");
			code48_nodes.forEach(detach);
			td30_nodes.forEach(detach);
			tr18_nodes.forEach(detach);
			t317 = claim_text(table_nodes, "\n            ");

			tr19 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr19_nodes = children(tr19);

			td31 = claim_element(tr19_nodes, "TD", { class: true }, false);
			var td31_nodes = children(td31);

			code49 = claim_element(td31_nodes, "CODE", {}, false);
			var code49_nodes = children(code49);

			t318 = claim_text(code49_nodes, "added.field.bv");
			code49_nodes.forEach(detach);
			td31_nodes.forEach(detach);
			t319 = claim_text(tr19_nodes, "\n                ");

			td32 = claim_element(tr19_nodes, "TD", { class: true }, false);
			var td32_nodes = children(td32);

			code50 = claim_element(td32_nodes, "CODE", {}, false);
			var code50_nodes = children(code50);

			t320 = claim_text(code50_nodes, "added.field.fv");
			code50_nodes.forEach(detach);
			td32_nodes.forEach(detach);
			tr19_nodes.forEach(detach);
			t321 = claim_text(table_nodes, "\n            ");

			tr20 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr20_nodes = children(tr20);

			td33 = claim_element(tr20_nodes, "TD", { class: true }, false);
			var td33_nodes = children(td33);

			code51 = claim_element(td33_nodes, "CODE", {}, false);
			var code51_nodes = children(code51);

			t322 = claim_text(code51_nodes, "removed.field.bv");
			code51_nodes.forEach(detach);
			td33_nodes.forEach(detach);
			t323 = claim_text(tr20_nodes, "\n                ");

			td34 = claim_element(tr20_nodes, "TD", { class: true }, false);
			var td34_nodes = children(td34);

			code52 = claim_element(td34_nodes, "CODE", {}, false);
			var code52_nodes = children(code52);

			t324 = claim_text(code52_nodes, "removed.field.fv");
			code52_nodes.forEach(detach);
			td34_nodes.forEach(detach);
			tr20_nodes.forEach(detach);
			t325 = claim_text(table_nodes, "\n            ");

			tr21 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr21_nodes = children(tr21);

			td35 = claim_element(tr21_nodes, "TD", { class: true }, false);
			var td35_nodes = children(td35);

			code53 = claim_element(td35_nodes, "CODE", {}, false);
			var code53_nodes = children(code53);

			t326 = claim_text(code53_nodes, "init.field.bv");
			code53_nodes.forEach(detach);
			td35_nodes.forEach(detach);
			t327 = claim_text(tr21_nodes, "\n                ");

			td36 = claim_element(tr21_nodes, "TD", { class: true }, false);
			var td36_nodes = children(td36);

			code54 = claim_element(td36_nodes, "CODE", {}, false);
			var code54_nodes = children(code54);

			t328 = claim_text(code54_nodes, "init.field.fv");
			code54_nodes.forEach(detach);
			td36_nodes.forEach(detach);
			tr21_nodes.forEach(detach);
			t329 = claim_text(table_nodes, "\n            ");

			tr22 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr22_nodes = children(tr22);

			td37 = claim_element(tr22_nodes, "TD", { class: true }, false);
			var td37_nodes = children(td37);

			code55 = claim_element(td37_nodes, "CODE", {}, false);
			var code55_nodes = children(code55);

			t330 = claim_text(code55_nodes, "error.field.bv");
			code55_nodes.forEach(detach);
			td37_nodes.forEach(detach);
			t331 = claim_text(tr22_nodes, "\n                ");

			td38 = claim_element(tr22_nodes, "TD", { class: true }, false);
			var td38_nodes = children(td38);

			code56 = claim_element(td38_nodes, "CODE", {}, false);
			var code56_nodes = children(code56);

			t332 = claim_text(code56_nodes, "err.field.fv");
			code56_nodes.forEach(detach);
			td38_nodes.forEach(detach);
			tr22_nodes.forEach(detach);
			t333 = claim_text(table_nodes, "\n            ");

			tr23 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr23_nodes = children(tr23);

			td39 = claim_element(tr23_nodes, "TD", { class: true }, false);
			var td39_nodes = children(td39);

			code57 = claim_element(td39_nodes, "CODE", {}, false);
			var code57_nodes = children(code57);

			t334 = claim_text(code57_nodes, "success.field.bv");
			code57_nodes.forEach(detach);
			td39_nodes.forEach(detach);
			t335 = claim_text(tr23_nodes, "\n                ");

			td40 = claim_element(tr23_nodes, "TD", { class: true }, false);
			var td40_nodes = children(td40);

			code58 = claim_element(td40_nodes, "CODE", {}, false);
			var code58_nodes = children(code58);

			t336 = claim_text(code58_nodes, "success.field.fv");
			code58_nodes.forEach(detach);
			td40_nodes.forEach(detach);
			tr23_nodes.forEach(detach);
			t337 = claim_text(table_nodes, "\n            ");

			tr24 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr24_nodes = children(tr24);

			td41 = claim_element(tr24_nodes, "TD", { class: true }, false);
			var td41_nodes = children(td41);

			code59 = claim_element(td41_nodes, "CODE", {}, false);
			var code59_nodes = children(code59);

			t338 = claim_text(code59_nodes, "status.field.bv");
			code59_nodes.forEach(detach);
			td41_nodes.forEach(detach);
			t339 = claim_text(tr24_nodes, "\n                ");

			td42 = claim_element(tr24_nodes, "TD", { class: true }, false);
			var td42_nodes = children(td42);

			code60 = claim_element(td42_nodes, "CODE", {}, false);
			var code60_nodes = children(code60);

			t340 = claim_text(code60_nodes, "status.field.fv");
			code60_nodes.forEach(detach);
			td42_nodes.forEach(detach);
			tr24_nodes.forEach(detach);
			t341 = claim_text(table_nodes, "\n            ");

			tr25 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr25_nodes = children(tr25);

			td43 = claim_element(tr25_nodes, "TD", { class: true }, false);
			var td43_nodes = children(td43);

			code61 = claim_element(td43_nodes, "CODE", {}, false);
			var code61_nodes = children(code61);

			t342 = claim_text(code61_nodes, "error.validator.bv");
			code61_nodes.forEach(detach);
			td43_nodes.forEach(detach);
			t343 = claim_text(tr25_nodes, "\n                ");

			td44 = claim_element(tr25_nodes, "TD", { class: true }, false);
			var td44_nodes = children(td44);

			code62 = claim_element(td44_nodes, "CODE", {}, false);
			var code62_nodes = children(code62);

			t344 = claim_text(code62_nodes, "err.validator.fv");
			code62_nodes.forEach(detach);
			td44_nodes.forEach(detach);
			tr25_nodes.forEach(detach);
			t345 = claim_text(table_nodes, "\n            ");

			tr26 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr26_nodes = children(tr26);

			td45 = claim_element(tr26_nodes, "TD", { class: true }, false);
			var td45_nodes = children(td45);

			code63 = claim_element(td45_nodes, "CODE", {}, false);
			var code63_nodes = children(code63);

			t346 = claim_text(code63_nodes, "success.validator.bv");
			code63_nodes.forEach(detach);
			td45_nodes.forEach(detach);
			t347 = claim_text(tr26_nodes, "\n                ");

			td46 = claim_element(tr26_nodes, "TD", { class: true }, false);
			var td46_nodes = children(td46);

			code64 = claim_element(td46_nodes, "CODE", {}, false);
			var code64_nodes = children(code64);

			t348 = claim_text(code64_nodes, "success.validator.fv");
			code64_nodes.forEach(detach);
			td46_nodes.forEach(detach);
			tr26_nodes.forEach(detach);
			table_nodes.forEach(detach);
			t349 = claim_text(section4_nodes, "\n\n        ");

			p10 = claim_element(section4_nodes, "P", { class: true }, false);
			var p10_nodes = children(p10);

			t350 = claim_text(p10_nodes, "The last thing, the hexColor validator, deprecated in v0.5.3, is replaced with ");

			a28 = claim_element(p10_nodes, "A", { href: true, class: true }, false);
			var a28_nodes = children(a28);

			t351 = claim_text(a28_nodes, "color");
			a28_nodes.forEach(detach);
			t352 = claim_text(p10_nodes, " validator.");
			p10_nodes.forEach(detach);
			section4_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 92);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 143);
			add_location(strong0, file, 10, 65, 327);
			p0.className = "lh-copy";
			add_location(p0, file, 10, 8, 270);
			a0.href = "http://getbootstrap.com";
			a0.className = "blue dim link";
			add_location(a0, file, 12, 16, 486);
			add_location(li0, file, 12, 12, 482);
			a1.href = "http://foundation.zurb.com";
			a1.className = "blue dim link";
			add_location(a1, file, 13, 16, 577);
			add_location(li1, file, 13, 12, 573);
			a2.href = "http://purecss.io";
			a2.className = "blue dim link";
			add_location(a2, file, 14, 16, 672);
			add_location(li2, file, 14, 12, 668);
			a3.href = "http://semantic-ui.com";
			a3.className = "blue dim link";
			add_location(a3, file, 15, 16, 752);
			add_location(li3, file, 15, 12, 748);
			a4.href = "http://getuikit.com";
			a4.className = "blue dim link";
			add_location(a4, file, 16, 16, 844);
			add_location(li4, file, 16, 12, 840);
			ul0.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul0, file, 11, 8, 437);
			add_location(code0, file, 20, 20, 987);
			add_location(li5, file, 20, 12, 979);
			add_location(li6, file, 21, 12, 1091);
			add_location(li7, file, 22, 12, 1127);
			add_location(li8, file, 23, 12, 1182);
			add_location(li9, file, 24, 12, 1228);
			add_location(li10, file, 25, 12, 1279);
			add_location(code1, file, 26, 20, 1331);
			add_location(code2, file, 26, 49, 1360);
			add_location(li11, file, 26, 12, 1323);
			add_location(code3, file, 27, 20, 1448);
			add_location(li12, file, 27, 12, 1440);
			a5.href = "/guide/validators/phone";
			a5.className = "blue dim link";
			add_location(a5, file, 28, 24, 1517);
			add_location(li13, file, 28, 12, 1505);
			a6.href = "/guide/validators/ein";
			a6.className = "blue dim link";
			add_location(a6, file, 29, 20, 1625);
			add_location(li14, file, 29, 12, 1617);
			a7.href = "/guide/validators/bic";
			a7.className = "blue dim link";
			add_location(a7, file, 30, 20, 1722);
			add_location(li15, file, 30, 12, 1714);
			add_location(code4, file, 31, 20, 1830);
			add_location(li16, file, 31, 12, 1822);
			add_location(code5, file, 32, 20, 1887);
			add_location(code6, file, 32, 38, 1905);
			add_location(code7, file, 32, 57, 1924);
			add_location(li17, file, 32, 12, 1879);
			a8.href = "/guide/validators/zip-code";
			a8.className = "blue dim link";
			add_location(a8, file, 33, 28, 1982);
			add_location(li18, file, 33, 12, 1966);
			a9.href = "/guide/validators/id";
			a9.className = "blue dim link";
			add_location(a9, file, 34, 32, 2104);
			add_location(li19, file, 34, 12, 2084);
			a10.href = "/guide/validators/phone";
			a10.className = "blue dim link";
			add_location(a10, file, 35, 26, 2206);
			add_location(li20, file, 35, 12, 2192);
			a11.href = "/guide/validators/zip-code";
			a11.className = "blue dim link";
			add_location(a11, file, 36, 26, 2320);
			add_location(li21, file, 36, 12, 2306);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 19, 8, 934);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 200);
			a12.href = "/guide/validators/color";
			a12.className = "blue dim link";
			add_location(a12, file, 43, 47, 2590);
			add_location(li22, file, 43, 12, 2555);
			add_location(code8, file, 44, 29, 2708);
			add_location(code9, file, 44, 55, 2734);
			add_location(code10, file, 44, 85, 2764);
			add_location(li23, file, 44, 12, 2691);
			add_location(li24, file, 45, 12, 2833);
			ul2.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul2, file, 42, 8, 2510);
			section1.className = "mv5";
			add_location(section1, file, 40, 4, 2445);
			add_location(li25, file, 52, 12, 3027);
			add_location(code11, file, 53, 20, 3113);
			a13.href = "/guide/validators/uri";
			a13.className = "blue dim link";
			add_location(a13, file, 53, 87, 3180);
			add_location(li26, file, 53, 12, 3105);
			a14.href = "/guide/validators/identical";
			a14.className = "blue dim link";
			add_location(a14, file, 54, 24, 3281);
			add_location(li27, file, 54, 12, 3269);
			add_location(li28, file, 55, 12, 3382);
			add_location(li29, file, 56, 12, 3447);
			add_location(code12, file, 57, 20, 3565);
			add_location(code13, file, 57, 51, 3596);
			add_location(li30, file, 57, 12, 3557);
			add_location(li31, file, 58, 12, 3640);
			a15.href = "/guide/validators/different";
			a15.className = "blue dim link";
			add_location(a15, file, 59, 38, 3742);
			add_location(li32, file, 59, 12, 3716);
			a16.href = "/guide/validators/id";
			a16.className = "blue dim link";
			add_location(a16, file, 60, 28, 3875);
			add_location(li33, file, 60, 12, 3859);
			a17.href = "/guide/validators/id";
			a17.className = "blue dim link";
			add_location(a17, file, 61, 36, 3987);
			add_location(li34, file, 61, 12, 3963);
			a18.href = "/guide/validators/phone";
			a18.className = "blue dim link";
			add_location(a18, file, 62, 32, 4095);
			add_location(li35, file, 62, 12, 4075);
			a19.href = "/guide/validators/vat";
			a19.className = "blue dim link";
			add_location(a19, file, 63, 34, 4210);
			add_location(li36, file, 63, 12, 4188);
			add_location(li37, file, 64, 12, 4306);
			add_location(li38, file, 65, 12, 4384);
			add_location(li39, file, 66, 12, 4438);
			add_location(li40, file, 67, 12, 4483);
			add_location(code14, file, 68, 33, 4576);
			a20.href = "/guide/validators/date";
			a20.className = "blue dim link";
			add_location(a20, file, 68, 71, 4614);
			add_location(li41, file, 68, 12, 4555);
			add_location(li42, file, 69, 12, 4710);
			a21.href = "/guide/validators/uri";
			a21.className = "blue dim link";
			add_location(a21, file, 70, 16, 4757);
			add_location(li43, file, 70, 12, 4753);
			add_location(code15, file, 71, 20, 4893);
			add_location(code16, file, 71, 73, 4946);
			add_location(li44, file, 71, 12, 4885);
			ul3.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul3, file, 51, 8, 2982);
			section2.className = "mv5";
			add_location(section2, file, 49, 4, 2912);
			a22.href = "/guide/validators/cusip";
			a22.className = "blue dim link";
			add_location(a22, file, 78, 20, 5217);
			add_location(li45, file, 78, 12, 5209);
			a23.href = "/guide/validators/date";
			a23.className = "blue dim link";
			add_location(a23, file, 79, 23, 5334);
			add_location(code17, file, 79, 117, 5428);
			add_location(code18, file, 79, 153, 5464);
			add_location(li46, file, 79, 12, 5323);
			a24.href = "/guide/validators/color";
			a24.className = "blue dim link";
			add_location(a24, file, 80, 20, 5522);
			add_location(code19, file, 80, 112, 5614);
			add_location(li47, file, 80, 12, 5514);
			a25.href = "/guide/validators/id";
			a25.className = "blue dim link";
			add_location(a25, file, 81, 30, 5686);
			add_location(li48, file, 81, 12, 5668);
			add_location(li49, file, 82, 12, 5809);
			a26.href = "/guide/validators/identical";
			a26.className = "blue dim link";
			add_location(a26, file, 83, 16, 5867);
			add_location(li50, file, 83, 12, 5863);
			add_location(code20, file, 84, 20, 6009);
			add_location(li51, file, 84, 12, 6001);
			add_location(code21, file, 85, 25, 6104);
			add_location(li52, file, 85, 12, 6091);
			a27.href = "/guide/validators/phone";
			a27.className = "blue dim link";
			add_location(a27, file, 86, 30, 6202);
			add_location(li53, file, 86, 12, 6184);
			ul4.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul4, file, 77, 8, 5164);
			section3.className = "mv5";
			add_location(section3, file, 75, 4, 5097);
			add_location(strong1, file, 92, 70, 6463);
			p1.className = "lh-copy";
			add_location(p1, file, 92, 8, 6401);
			add_location(h30, file, 93, 8, 6571);
			add_location(strong2, file, 95, 40, 6667);
			p2.className = "lh-copy";
			add_location(p2, file, 95, 8, 6635);
			p3.className = "lh-copy";
			add_location(p3, file, 96, 8, 6706);
			p4.className = "lh-copy";
			add_location(p4, file, 115, 8, 7402);
			add_location(h31, file, 136, 8, 8562);
			p5.className = "lh-copy";
			add_location(p5, file, 138, 8, 8623);
			add_location(h32, file, 161, 8, 9262);
			p6.className = "lh-copy";
			add_location(p6, file, 163, 8, 9310);
			add_location(strong3, file, 164, 27, 9473);
			p7.className = "lh-copy";
			add_location(p7, file, 164, 8, 9454);
			p8.className = "lh-copy";
			add_location(p8, file, 165, 8, 9674);
			th0.className = "pv2 ph3 tl f6 fw6 ttu tc";
			add_location(th0, file, 169, 16, 9920);
			th1.className = "pv2 ph3 tl f6 fw6 ttu tc";
			add_location(th1, file, 170, 16, 9985);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 168, 12, 9871);
			td0.colSpan = "2";
			td0.className = "pv2 ph3";
			add_location(td0, file, 173, 16, 10116);
			tr1.className = "bg-light-blue white tc";
			add_location(tr1, file, 172, 12, 10064);
			add_location(code22, file, 176, 40, 10266);
			td1.className = "pv2 ph3";
			add_location(td1, file, 176, 16, 10242);
			add_location(code23, file, 177, 40, 10346);
			td2.className = "pv2 ph3";
			add_location(td2, file, 177, 16, 10322);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 175, 12, 10193);
			td3.colSpan = "2";
			td3.className = "pv2 ph3";
			add_location(td3, file, 181, 16, 10469);
			tr3.className = "bg-light-blue white tc";
			add_location(tr3, file, 180, 12, 10417);
			add_location(code24, file, 184, 36, 10619);
			td4.className = "pv2 ph3";
			add_location(td4, file, 184, 16, 10599);
			add_location(code25, file, 185, 36, 10683);
			td5.className = "pv2 ph3";
			add_location(td5, file, 185, 16, 10663);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 183, 12, 10550);
			add_location(code26, file, 188, 36, 10814);
			td6.className = "pv2 ph3";
			add_location(td6, file, 188, 16, 10794);
			add_location(code27, file, 189, 36, 10882);
			td7.className = "pv2 ph3";
			add_location(td7, file, 189, 16, 10862);
			tr5.className = "striped--light-gray";
			add_location(tr5, file, 187, 12, 10745);
			add_location(code28, file, 192, 36, 11004);
			td8.className = "pv2 ph3";
			add_location(td8, file, 192, 16, 10984);
			add_location(code29, file, 193, 36, 11064);
			td9.className = "pv2 ph3";
			add_location(td9, file, 193, 16, 11044);
			tr6.className = "striped--light-gray";
			add_location(tr6, file, 191, 12, 10935);
			add_location(code30, file, 196, 36, 11194);
			td10.className = "pv2 ph3";
			add_location(td10, file, 196, 16, 11174);
			add_location(code31, file, 197, 36, 11262);
			td11.className = "pv2 ph3";
			add_location(td11, file, 197, 16, 11242);
			tr7.className = "striped--light-gray";
			add_location(tr7, file, 195, 12, 11125);
			td12.className = "pv2 ph3 v-top";
			add_location(td12, file, 200, 16, 11375);
			td13.className = "pv2 ph3 v-top";
			add_location(td13, file, 214, 16, 11715);
			tr8.className = "striped--light-gray";
			add_location(tr8, file, 199, 12, 11326);
			td14.colSpan = "2";
			td14.className = "pv2 ph3";
			add_location(td14, file, 238, 16, 12194);
			tr9.className = "bg-light-blue white tc";
			add_location(tr9, file, 237, 12, 12142);
			add_location(code32, file, 241, 36, 12345);
			td15.className = "pv2 ph3";
			add_location(td15, file, 241, 16, 12325);
			add_location(code33, file, 242, 36, 12409);
			td16.className = "pv2 ph3";
			add_location(td16, file, 242, 16, 12389);
			tr10.className = "striped--light-gray";
			add_location(tr10, file, 240, 12, 12276);
			add_location(code34, file, 245, 36, 12530);
			td17.className = "pv2 ph3";
			add_location(td17, file, 245, 16, 12510);
			add_location(code35, file, 246, 36, 12598);
			td18.className = "pv2 ph3";
			add_location(td18, file, 246, 16, 12578);
			tr11.className = "striped--light-gray";
			add_location(tr11, file, 244, 12, 12461);
			add_location(code36, file, 249, 36, 12720);
			td19.className = "pv2 ph3";
			add_location(td19, file, 249, 16, 12700);
			add_location(code37, file, 250, 36, 12780);
			td20.className = "pv2 ph3";
			add_location(td20, file, 250, 16, 12760);
			tr12.className = "striped--light-gray";
			add_location(tr12, file, 248, 12, 12651);
			td21.className = "pv2 ph3 v-top";
			add_location(td21, file, 253, 16, 12881);
			td22.className = "pv2 ph3 v-top";
			add_location(td22, file, 269, 16, 13254);
			tr13.className = "striped--light-gray";
			add_location(tr13, file, 252, 12, 12832);
			td23.colSpan = "2";
			td23.className = "pv2 ph3";
			add_location(td23, file, 289, 16, 13701);
			tr14.className = "bg-light-blue white tc";
			add_location(tr14, file, 288, 12, 13649);
			p9.className = "lh-copy";
			add_location(p9, file, 293, 20, 13877);
			add_location(code38, file, 295, 42, 14040);
			add_location(code39, file, 295, 73, 14071);
			add_location(li54, file, 295, 24, 14022);
			add_location(code40, file, 296, 42, 14135);
			add_location(code41, file, 296, 76, 14169);
			add_location(code42, file, 296, 103, 14196);
			add_location(li55, file, 296, 24, 14117);
			ul5.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul5, file, 294, 20, 13965);
			td24.colSpan = "2";
			td24.className = "pv2 ph3";
			add_location(td24, file, 292, 16, 13824);
			tr15.className = "striped--light-gray";
			add_location(tr15, file, 291, 12, 13775);
			add_location(code43, file, 301, 36, 14400);
			td25.className = "pv2 ph3";
			add_location(td25, file, 301, 16, 14380);
			add_location(code44, file, 302, 36, 14467);
			td26.className = "pv2 ph3";
			add_location(td26, file, 302, 16, 14447);
			tr16.className = "striped--light-gray";
			add_location(tr16, file, 300, 12, 14331);
			add_location(code45, file, 305, 36, 14597);
			td27.className = "pv2 ph3";
			add_location(td27, file, 305, 16, 14577);
			add_location(code46, file, 306, 36, 14665);
			td28.className = "pv2 ph3";
			add_location(td28, file, 306, 16, 14645);
			tr17.className = "striped--light-gray";
			add_location(tr17, file, 304, 12, 14528);
			add_location(code47, file, 309, 36, 14794);
			td29.className = "pv2 ph3";
			add_location(td29, file, 309, 16, 14774);
			add_location(code48, file, 310, 36, 14864);
			td30.className = "pv2 ph3";
			add_location(td30, file, 310, 16, 14844);
			tr18.className = "striped--light-gray";
			add_location(tr18, file, 308, 12, 14725);
			add_location(code49, file, 313, 36, 14997);
			td31.className = "pv2 ph3";
			add_location(td31, file, 313, 16, 14977);
			add_location(code50, file, 314, 36, 15066);
			td32.className = "pv2 ph3";
			add_location(td32, file, 314, 16, 15046);
			tr19.className = "striped--light-gray";
			add_location(tr19, file, 312, 12, 14928);
			add_location(code51, file, 317, 36, 15198);
			td33.className = "pv2 ph3";
			add_location(td33, file, 317, 16, 15178);
			add_location(code52, file, 318, 36, 15269);
			td34.className = "pv2 ph3";
			add_location(td34, file, 318, 16, 15249);
			tr20.className = "striped--light-gray";
			add_location(tr20, file, 316, 12, 15129);
			add_location(code53, file, 321, 36, 15403);
			td35.className = "pv2 ph3";
			add_location(td35, file, 321, 16, 15383);
			add_location(code54, file, 322, 36, 15471);
			td36.className = "pv2 ph3";
			add_location(td36, file, 322, 16, 15451);
			tr21.className = "striped--light-gray";
			add_location(tr21, file, 320, 12, 15334);
			add_location(code55, file, 325, 36, 15602);
			td37.className = "pv2 ph3";
			add_location(td37, file, 325, 16, 15582);
			add_location(code56, file, 326, 36, 15671);
			td38.className = "pv2 ph3";
			add_location(td38, file, 326, 16, 15651);
			tr22.className = "striped--light-gray";
			add_location(tr22, file, 324, 12, 15533);
			add_location(code57, file, 329, 36, 15801);
			td39.className = "pv2 ph3";
			add_location(td39, file, 329, 16, 15781);
			add_location(code58, file, 330, 36, 15872);
			td40.className = "pv2 ph3";
			add_location(td40, file, 330, 16, 15852);
			tr23.className = "striped--light-gray";
			add_location(tr23, file, 328, 12, 15732);
			add_location(code59, file, 333, 36, 16006);
			td41.className = "pv2 ph3";
			add_location(td41, file, 333, 16, 15986);
			add_location(code60, file, 334, 36, 16076);
			td42.className = "pv2 ph3";
			add_location(td42, file, 334, 16, 16056);
			tr24.className = "striped--light-gray";
			add_location(tr24, file, 332, 12, 15937);
			add_location(code61, file, 337, 36, 16209);
			td43.className = "pv2 ph3";
			add_location(td43, file, 337, 16, 16189);
			add_location(code62, file, 338, 36, 16282);
			td44.className = "pv2 ph3";
			add_location(td44, file, 338, 16, 16262);
			tr25.className = "striped--light-gray";
			add_location(tr25, file, 336, 12, 16140);
			add_location(code63, file, 341, 36, 16416);
			td45.className = "pv2 ph3";
			add_location(td45, file, 341, 16, 16396);
			add_location(code64, file, 342, 36, 16491);
			td46.className = "pv2 ph3";
			add_location(td46, file, 342, 16, 16471);
			tr26.className = "striped--light-gray";
			add_location(tr26, file, 340, 12, 16347);
			table.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table, file, 167, 8, 9801);
			a28.href = "/guide/validators/color";
			a28.className = "blue dim link";
			add_location(a28, file, 346, 106, 16672);
			p10.className = "lh-copy";
			add_location(p10, file, 346, 8, 16574);
			section4.className = "mv5";
			add_location(section4, file, 90, 4, 6324);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, p0);
			append(p0, t5);
			append(p0, strong0);
			append(strong0, t6);
			append(p0, t7);
			append(section0, t8);
			append(section0, ul0);
			append(ul0, li0);
			append(li0, a0);
			append(a0, t9);
			append(ul0, t10);
			append(ul0, li1);
			append(li1, a1);
			append(a1, t11);
			append(ul0, t12);
			append(ul0, li2);
			append(li2, a2);
			append(a2, t13);
			append(ul0, t14);
			append(ul0, li3);
			append(li3, a3);
			append(a3, t15);
			append(ul0, t16);
			append(ul0, li4);
			append(li4, a4);
			append(a4, t17);
			append(section0, t18);
			append(section0, ul1);
			append(ul1, li5);
			append(li5, t19);
			append(li5, code0);
			append(code0, t20);
			append(li5, t21);
			append(ul1, t22);
			append(ul1, li6);
			append(li6, t23);
			append(ul1, t24);
			append(ul1, li7);
			append(li7, t25);
			append(ul1, t26);
			append(ul1, li8);
			append(li8, t27);
			append(ul1, t28);
			append(ul1, li9);
			append(li9, t29);
			append(ul1, t30);
			append(ul1, li10);
			append(li10, t31);
			append(ul1, t32);
			append(ul1, li11);
			append(li11, t33);
			append(li11, code1);
			append(code1, t34);
			append(li11, t35);
			append(li11, code2);
			append(code2, t36);
			append(li11, t37);
			append(ul1, t38);
			append(ul1, li12);
			append(li12, t39);
			append(li12, code3);
			append(code3, t40);
			append(li12, t41);
			append(ul1, t42);
			append(ul1, li13);
			append(li13, t43);
			append(li13, a5);
			append(a5, t44);
			append(li13, t45);
			append(ul1, t46);
			append(ul1, li14);
			append(li14, t47);
			append(li14, a6);
			append(a6, t48);
			append(li14, t49);
			append(ul1, t50);
			append(ul1, li15);
			append(li15, t51);
			append(li15, a7);
			append(a7, t52);
			append(li15, t53);
			append(ul1, t54);
			append(ul1, li16);
			append(li16, t55);
			append(li16, code4);
			append(code4, t56);
			append(li16, t57);
			append(ul1, t58);
			append(ul1, li17);
			append(li17, t59);
			append(li17, code5);
			append(code5, t60);
			append(li17, t61);
			append(li17, code6);
			append(code6, t62);
			append(li17, t63);
			append(li17, code7);
			append(code7, t64);
			append(li17, t65);
			append(ul1, t66);
			append(ul1, li18);
			append(li18, t67);
			append(li18, a8);
			append(a8, t68);
			append(li18, t69);
			append(ul1, t70);
			append(ul1, li19);
			append(li19, t71);
			append(li19, a9);
			append(a9, t72);
			append(li19, t73);
			append(ul1, t74);
			append(ul1, li20);
			append(li20, t75);
			append(li20, a10);
			append(a10, t76);
			append(li20, t77);
			append(ul1, t78);
			append(ul1, li21);
			append(li21, t79);
			append(li21, a11);
			append(a11, t80);
			append(li21, t81);
			insert(target, t82, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t83);
			append(section1, ul2);
			append(ul2, li22);
			append(li22, t84);
			append(li22, a12);
			append(a12, t85);
			append(li22, t86);
			append(ul2, t87);
			append(ul2, li23);
			append(li23, t88);
			append(li23, code8);
			append(code8, t89);
			append(li23, t90);
			append(li23, code9);
			append(code9, t91);
			append(li23, t92);
			append(li23, code10);
			append(code10, t93);
			append(li23, t94);
			append(ul2, t95);
			append(ul2, li24);
			append(li24, t96);
			insert(target, t97, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t98);
			append(section2, ul3);
			append(ul3, li25);
			append(li25, t99);
			append(ul3, t100);
			append(ul3, li26);
			append(li26, t101);
			append(li26, code11);
			append(code11, t102);
			append(li26, t103);
			append(li26, a13);
			append(a13, t104);
			append(li26, t105);
			append(ul3, t106);
			append(ul3, li27);
			append(li27, t107);
			append(li27, a14);
			append(a14, t108);
			append(li27, t109);
			append(ul3, t110);
			append(ul3, li28);
			append(li28, t111);
			append(ul3, t112);
			append(ul3, li29);
			append(li29, t113);
			append(ul3, t114);
			append(ul3, li30);
			append(li30, t115);
			append(li30, code12);
			append(code12, t116);
			append(li30, t117);
			append(li30, code13);
			append(code13, t118);
			append(ul3, t119);
			append(ul3, li31);
			append(li31, t120);
			append(ul3, t121);
			append(ul3, li32);
			append(li32, t122);
			append(li32, a15);
			append(a15, t123);
			append(li32, t124);
			append(ul3, t125);
			append(ul3, li33);
			append(li33, t126);
			append(li33, a16);
			append(a16, t127);
			append(li33, t128);
			append(ul3, t129);
			append(ul3, li34);
			append(li34, t130);
			append(li34, a17);
			append(a17, t131);
			append(li34, t132);
			append(ul3, t133);
			append(ul3, li35);
			append(li35, t134);
			append(li35, a18);
			append(a18, t135);
			append(li35, t136);
			append(ul3, t137);
			append(ul3, li36);
			append(li36, t138);
			append(li36, a19);
			append(a19, t139);
			append(li36, t140);
			append(ul3, t141);
			append(ul3, li37);
			append(li37, t142);
			append(ul3, t143);
			append(ul3, li38);
			append(li38, t144);
			append(ul3, t145);
			append(ul3, li39);
			append(li39, t146);
			append(ul3, t147);
			append(ul3, li40);
			append(li40, t148);
			append(ul3, t149);
			append(ul3, li41);
			append(li41, t150);
			append(li41, code14);
			append(code14, t151);
			append(li41, t152);
			append(li41, a20);
			append(a20, t153);
			append(li41, t154);
			append(ul3, t155);
			append(ul3, li42);
			append(li42, t156);
			append(ul3, t157);
			append(ul3, li43);
			append(li43, a21);
			append(a21, t158);
			append(li43, t159);
			append(ul3, t160);
			append(ul3, li44);
			append(li44, t161);
			append(li44, code15);
			append(code15, t162);
			append(li44, t163);
			append(li44, code16);
			append(code16, t164);
			append(li44, t165);
			insert(target, t166, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t167);
			append(section3, ul4);
			append(ul4, li45);
			append(li45, t168);
			append(li45, a22);
			append(a22, t169);
			append(li45, t170);
			append(ul4, t171);
			append(ul4, li46);
			append(li46, t172);
			append(li46, a23);
			append(a23, t173);
			append(li46, t174);
			append(li46, code17);
			append(code17, t175);
			append(li46, t176);
			append(li46, code18);
			append(code18, t177);
			append(li46, t178);
			append(ul4, t179);
			append(ul4, li47);
			append(li47, t180);
			append(li47, a24);
			append(a24, t181);
			append(li47, t182);
			append(li47, code19);
			append(code19, t183);
			append(li47, t184);
			append(ul4, t185);
			append(ul4, li48);
			append(li48, t186);
			append(li48, a25);
			append(a25, t187);
			append(li48, t188);
			append(ul4, t189);
			append(ul4, li49);
			append(li49, t190);
			append(ul4, t191);
			append(ul4, li50);
			append(li50, a26);
			append(a26, t192);
			append(li50, t193);
			append(ul4, t194);
			append(ul4, li51);
			append(li51, t195);
			append(li51, code20);
			append(code20, t196);
			append(li51, t197);
			append(ul4, t198);
			append(ul4, li52);
			append(li52, t199);
			append(li52, code21);
			append(code21, t200);
			append(li52, t201);
			append(ul4, t202);
			append(ul4, li53);
			append(li53, t203);
			append(li53, a27);
			append(a27, t204);
			append(li53, t205);
			insert(target, t206, anchor);
			insert(target, section4, anchor);
			mount_component(heading4, section4, null);
			append(section4, t207);
			append(section4, p1);
			append(p1, t208);
			append(p1, strong1);
			append(strong1, t209);
			append(p1, t210);
			append(section4, t211);
			append(section4, h30);
			append(h30, t212);
			append(section4, t213);
			append(section4, p2);
			append(p2, t214);
			append(p2, strong2);
			append(strong2, t215);
			append(p2, t216);
			append(section4, t217);
			append(section4, p3);
			append(p3, t218);
			append(section4, t219);
			mount_component(samplecode0, section4, null);
			append(section4, t220);
			append(section4, p4);
			append(p4, t221);
			append(section4, t222);
			mount_component(samplecode1, section4, null);
			append(section4, t223);
			mount_component(tip, section4, null);
			append(section4, t224);
			append(section4, h31);
			append(h31, t225);
			append(section4, t226);
			append(section4, p5);
			append(p5, t227);
			append(section4, t228);
			mount_component(samplecode2, section4, null);
			append(section4, t229);
			append(section4, h32);
			append(h32, t230);
			append(section4, t231);
			append(section4, p6);
			append(p6, t232);
			append(section4, t233);
			append(section4, p7);
			append(p7, strong3);
			append(strong3, t234);
			append(p7, t235);
			append(section4, t236);
			append(section4, p8);
			append(p8, t237);
			append(section4, t238);
			append(section4, table);
			append(table, tr0);
			append(tr0, th0);
			append(th0, t239);
			append(tr0, t240);
			append(tr0, th1);
			append(th1, t241);
			append(table, t242);
			append(table, tr1);
			append(tr1, td0);
			append(td0, t243);
			append(table, t244);
			append(table, tr2);
			append(tr2, td1);
			append(td1, t245);
			append(td1, code22);
			append(code22, t246);
			append(td1, t247);
			append(tr2, t248);
			append(tr2, td2);
			append(td2, t249);
			append(td2, code23);
			append(code23, t250);
			append(td2, t251);
			append(table, t252);
			append(table, tr3);
			append(tr3, td3);
			append(td3, t253);
			append(table, t254);
			append(table, tr4);
			append(tr4, td4);
			append(td4, code24);
			append(code24, t255);
			append(tr4, t256);
			append(tr4, td5);
			append(td5, code25);
			append(code25, t257);
			append(table, t258);
			append(table, tr5);
			append(tr5, td6);
			append(td6, code26);
			append(code26, t259);
			append(tr5, t260);
			append(tr5, td7);
			append(td7, code27);
			append(code27, t261);
			append(table, t262);
			append(table, tr6);
			append(tr6, td8);
			append(td8, code28);
			append(code28, t263);
			append(tr6, t264);
			append(tr6, td9);
			append(td9, code29);
			append(code29, t265);
			append(table, t266);
			append(table, tr7);
			append(tr7, td10);
			append(td10, code30);
			append(code30, t267);
			append(tr7, t268);
			append(tr7, td11);
			append(td11, code31);
			append(code31, t269);
			append(table, t270);
			append(table, tr8);
			append(tr8, td12);
			mount_component(samplecode3, td12, null);
			append(tr8, t271);
			append(tr8, td13);
			mount_component(samplecode4, td13, null);
			append(table, t272);
			append(table, tr9);
			append(tr9, td14);
			append(td14, t273);
			append(table, t274);
			append(table, tr10);
			append(tr10, td15);
			append(td15, code32);
			append(code32, t275);
			append(tr10, t276);
			append(tr10, td16);
			append(td16, code33);
			append(code33, t277);
			append(table, t278);
			append(table, tr11);
			append(tr11, td17);
			append(td17, code34);
			append(code34, t279);
			append(tr11, t280);
			append(tr11, td18);
			append(td18, code35);
			append(code35, t281);
			append(table, t282);
			append(table, tr12);
			append(tr12, td19);
			append(td19, code36);
			append(code36, t283);
			append(tr12, t284);
			append(tr12, td20);
			append(td20, code37);
			append(code37, t285);
			append(table, t286);
			append(table, tr13);
			append(tr13, td21);
			mount_component(samplecode5, td21, null);
			append(tr13, t287);
			append(tr13, td22);
			mount_component(samplecode6, td22, null);
			append(table, t288);
			append(table, tr14);
			append(tr14, td23);
			append(td23, t289);
			append(table, t290);
			append(table, tr15);
			append(tr15, td24);
			append(td24, p9);
			append(p9, t291);
			append(td24, t292);
			append(td24, ul5);
			append(ul5, li54);
			append(li54, t293);
			append(li54, code38);
			append(code38, t294);
			append(li54, t295);
			append(li54, code39);
			append(code39, t296);
			append(ul5, t297);
			append(ul5, li55);
			append(li55, t298);
			append(li55, code40);
			append(code40, t299);
			append(li55, t300);
			append(li55, code41);
			append(code41, t301);
			append(li55, t302);
			append(li55, code42);
			append(code42, t303);
			append(li55, t304);
			append(table, t305);
			append(table, tr16);
			append(tr16, td25);
			append(td25, code43);
			append(code43, t306);
			append(tr16, t307);
			append(tr16, td26);
			append(td26, code44);
			append(code44, t308);
			append(table, t309);
			append(table, tr17);
			append(tr17, td27);
			append(td27, code45);
			append(code45, t310);
			append(tr17, t311);
			append(tr17, td28);
			append(td28, code46);
			append(code46, t312);
			append(table, t313);
			append(table, tr18);
			append(tr18, td29);
			append(td29, code47);
			append(code47, t314);
			append(tr18, t315);
			append(tr18, td30);
			append(td30, code48);
			append(code48, t316);
			append(table, t317);
			append(table, tr19);
			append(tr19, td31);
			append(td31, code49);
			append(code49, t318);
			append(tr19, t319);
			append(tr19, td32);
			append(td32, code50);
			append(code50, t320);
			append(table, t321);
			append(table, tr20);
			append(tr20, td33);
			append(td33, code51);
			append(code51, t322);
			append(tr20, t323);
			append(tr20, td34);
			append(td34, code52);
			append(code52, t324);
			append(table, t325);
			append(table, tr21);
			append(tr21, td35);
			append(td35, code53);
			append(code53, t326);
			append(tr21, t327);
			append(tr21, td36);
			append(td36, code54);
			append(code54, t328);
			append(table, t329);
			append(table, tr22);
			append(tr22, td37);
			append(td37, code55);
			append(code55, t330);
			append(tr22, t331);
			append(tr22, td38);
			append(td38, code56);
			append(code56, t332);
			append(table, t333);
			append(table, tr23);
			append(tr23, td39);
			append(td39, code57);
			append(code57, t334);
			append(tr23, t335);
			append(tr23, td40);
			append(td40, code58);
			append(code58, t336);
			append(table, t337);
			append(table, tr24);
			append(tr24, td41);
			append(td41, code59);
			append(code59, t338);
			append(tr24, t339);
			append(tr24, td42);
			append(td42, code60);
			append(code60, t340);
			append(table, t341);
			append(table, tr25);
			append(tr25, td43);
			append(td43, code61);
			append(code61, t342);
			append(tr25, t343);
			append(tr25, td44);
			append(td44, code62);
			append(code62, t344);
			append(table, t345);
			append(table, tr26);
			append(tr26, td45);
			append(td45, code63);
			append(code63, t346);
			append(tr26, t347);
			append(tr26, td46);
			append(td46, code64);
			append(code64, t348);
			append(section4, t349);
			append(section4, p10);
			append(p10, t350);
			append(p10, a28);
			append(a28, t351);
			append(p10, t352);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var heading4_changes = {};
			if (changed.$$scope) heading4_changes.$$scope = { changed, ctx };
			heading4.$set(heading4_changes);

			var tip_changes = {};
			if (changed.$$scope) tip_changes.$$scope = { changed, ctx };
			tip.$set(tip_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			heading4.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			tip.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			samplecode3.$$.fragment.i(local);

			samplecode4.$$.fragment.i(local);

			samplecode5.$$.fragment.i(local);

			samplecode6.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			heading4.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			tip.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			samplecode3.$$.fragment.o(local);
			samplecode4.$$.fragment.o(local);
			samplecode5.$$.fragment.o(local);
			samplecode6.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			if (detaching) {
				detach(t82);
				detach(section1);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t97);
				detach(section2);
			}

			heading2.$destroy();

			if (detaching) {
				detach(t166);
				detach(section3);
			}

			heading3.$destroy();

			if (detaching) {
				detach(t206);
				detach(section4);
			}

			heading4.$destroy();

			samplecode0.$destroy();

			samplecode1.$destroy();

			tip.$destroy();

			samplecode2.$destroy();

			samplecode3.$destroy();

			samplecode4.$destroy();

			samplecode5.$destroy();

			samplecode6.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var changeloglayout = new ChangelogLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			changeloglayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			changeloglayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • v0.6.0";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(changeloglayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var changeloglayout_changes = {};
			if (changed.$$scope) changeloglayout_changes.$$scope = { changed, ctx };
			changeloglayout.$set(changeloglayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			changeloglayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			changeloglayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			changeloglayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

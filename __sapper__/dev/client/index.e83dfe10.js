import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as ChangelogLayout } from './chunk.4a563e90.js';

/* src/routes/updates/v0.6.2/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/updates/v0.6.2/index.svelte";

// (10:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("New features");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "New features");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (20:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Improvements");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Improvements");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (32:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Bug fixes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Bug fixes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <ChangelogLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, ul0, li0, t5, a0, t6, t7, t8, li1, t9, code0, t10, t11, code1, t12, t13, li2, a1, t14, t15, t16, li3, a2, t17, t18, t19, section1, t20, ul1, li4, a3, t21, t22, t23, li5, a4, t24, t25, code2, t26, t27, t28, li6, t29, code3, t30, t31, t32, li7, t33, code4, t34, t35, t36, li8, t37, t38, li9, t39, t40, section2, t41, ul2, li10, t42, t43, li11, t44, t45, li12, t46, a5, t47, t48, t49, li13, t50, code5, t51, t52, t53, li14, t54, code6, t55, t56, code7, t57, t58, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Version 0.6.2");
			t1 = space();
			h2 = element("h2");
			t2 = text("Released 02 April 2015");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			ul0 = element("ul");
			li0 = element("li");
			t5 = text("Add new ");
			a0 = element("a");
			t6 = text("promise");
			t7 = text(" validator");
			t8 = space();
			li1 = element("li");
			t9 = text("Add ");
			code0 = element("code");
			t10 = text("STATUS_IGNORED");
			t11 = text(" status. The field will be ignored for the current validation if the validator returns ");
			code1 = element("code");
			t12 = text("null");
			t13 = space();
			li2 = element("li");
			a1 = element("a");
			t14 = text("iban");
			t15 = text(" validator adds new sepa option that requires the IBAN number must be (or not) from the SEPA countries");
			t16 = space();
			li3 = element("li");
			a2 = element("a");
			t17 = text("iban");
			t18 = text(" validator now supports East Timor, Kosovo countries");
			t19 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t20 = space();
			ul1 = element("ul");
			li4 = element("li");
			a3 = element("a");
			t21 = text("date");
			t22 = text(" validator supports dot (.) separator for European countries");
			t23 = space();
			li5 = element("li");
			a4 = element("a");
			t24 = text("iban");
			t25 = text(" validator will return ");
			code2 = element("code");
			t26 = text("false");
			t27 = text(" if the country is not supported");
			t28 = space();
			li6 = element("li");
			t29 = text("Allow to use callback for field's ");
			code3 = element("code");
			t30 = text("excluded");
			t31 = text(" option");
			t32 = space();
			li7 = element("li");
			t33 = text("Skip validation on button using ");
			code4 = element("code");
			t34 = text("formnovalidate");
			t35 = text(" attribute");
			t36 = space();
			li8 = element("li");
			t37 = text("Add more examples for iban test suite");
			t38 = space();
			li9 = element("li");
			t39 = text("The field container and its feedback icon don't have success/error class if all field validators are disabled");
			t40 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t41 = space();
			ul2 = element("ul");
			li10 = element("li");
			t42 = text("Spanish VAT validator doesn't work with some examples");
			t43 = space();
			li11 = element("li");
			t44 = text("Override the options when adding field");
			t45 = space();
			li12 = element("li");
			t46 = text("The Brazilian ");
			a5 = element("a");
			t47 = text("ID");
			t48 = text(" (CPF) number must have 11 digits");
			t49 = space();
			li13 = element("li");
			t50 = text("The ");
			code5 = element("code");
			t51 = text("updateMessage()");
			t52 = text(" method must return the plugin instance for chaining");
			t53 = space();
			li14 = element("li");
			t54 = text("When calling ");
			code6 = element("code");
			t55 = text("resetField(true)");
			t56 = text(" and ");
			code7 = element("code");
			t57 = text("resetForm(true)");
			t58 = text(" methods, the field need be reset value before updating the status");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Version 0.6.2");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Released 02 April 2015");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			ul0 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t5 = claim_text(li0_nodes, "Add new ");

			a0 = claim_element(li0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t6 = claim_text(a0_nodes, "promise");
			a0_nodes.forEach(detach);
			t7 = claim_text(li0_nodes, " validator");
			li0_nodes.forEach(detach);
			t8 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t9 = claim_text(li1_nodes, "Add ");

			code0 = claim_element(li1_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t10 = claim_text(code0_nodes, "STATUS_IGNORED");
			code0_nodes.forEach(detach);
			t11 = claim_text(li1_nodes, " status. The field will be ignored for the current validation if the validator returns ");

			code1 = claim_element(li1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t12 = claim_text(code1_nodes, "null");
			code1_nodes.forEach(detach);
			li1_nodes.forEach(detach);
			t13 = claim_text(ul0_nodes, "\n            ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			a1 = claim_element(li2_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t14 = claim_text(a1_nodes, "iban");
			a1_nodes.forEach(detach);
			t15 = claim_text(li2_nodes, " validator adds new sepa option that requires the IBAN number must be (or not) from the SEPA countries");
			li2_nodes.forEach(detach);
			t16 = claim_text(ul0_nodes, "\n            ");

			li3 = claim_element(ul0_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			a2 = claim_element(li3_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t17 = claim_text(a2_nodes, "iban");
			a2_nodes.forEach(detach);
			t18 = claim_text(li3_nodes, " validator now supports East Timor, Kosovo countries");
			li3_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t19 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t20 = claim_text(section1_nodes, "\n        ");

			ul1 = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li4 = claim_element(ul1_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			a3 = claim_element(li4_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t21 = claim_text(a3_nodes, "date");
			a3_nodes.forEach(detach);
			t22 = claim_text(li4_nodes, " validator supports dot (.) separator for European countries");
			li4_nodes.forEach(detach);
			t23 = claim_text(ul1_nodes, "\n            ");

			li5 = claim_element(ul1_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			a4 = claim_element(li5_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t24 = claim_text(a4_nodes, "iban");
			a4_nodes.forEach(detach);
			t25 = claim_text(li5_nodes, " validator will return ");

			code2 = claim_element(li5_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t26 = claim_text(code2_nodes, "false");
			code2_nodes.forEach(detach);
			t27 = claim_text(li5_nodes, " if the country is not supported");
			li5_nodes.forEach(detach);
			t28 = claim_text(ul1_nodes, "\n            ");

			li6 = claim_element(ul1_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			t29 = claim_text(li6_nodes, "Allow to use callback for field's ");

			code3 = claim_element(li6_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t30 = claim_text(code3_nodes, "excluded");
			code3_nodes.forEach(detach);
			t31 = claim_text(li6_nodes, " option");
			li6_nodes.forEach(detach);
			t32 = claim_text(ul1_nodes, "\n            ");

			li7 = claim_element(ul1_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			t33 = claim_text(li7_nodes, "Skip validation on button using ");

			code4 = claim_element(li7_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t34 = claim_text(code4_nodes, "formnovalidate");
			code4_nodes.forEach(detach);
			t35 = claim_text(li7_nodes, " attribute");
			li7_nodes.forEach(detach);
			t36 = claim_text(ul1_nodes, "\n            ");

			li8 = claim_element(ul1_nodes, "LI", {}, false);
			var li8_nodes = children(li8);

			t37 = claim_text(li8_nodes, "Add more examples for iban test suite");
			li8_nodes.forEach(detach);
			t38 = claim_text(ul1_nodes, "\n            ");

			li9 = claim_element(ul1_nodes, "LI", {}, false);
			var li9_nodes = children(li9);

			t39 = claim_text(li9_nodes, "The field container and its feedback icon don't have success/error class if all field validators are disabled");
			li9_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t40 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t41 = claim_text(section2_nodes, "\n        ");

			ul2 = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul2_nodes = children(ul2);

			li10 = claim_element(ul2_nodes, "LI", {}, false);
			var li10_nodes = children(li10);

			t42 = claim_text(li10_nodes, "Spanish VAT validator doesn't work with some examples");
			li10_nodes.forEach(detach);
			t43 = claim_text(ul2_nodes, "\n            ");

			li11 = claim_element(ul2_nodes, "LI", {}, false);
			var li11_nodes = children(li11);

			t44 = claim_text(li11_nodes, "Override the options when adding field");
			li11_nodes.forEach(detach);
			t45 = claim_text(ul2_nodes, "\n            ");

			li12 = claim_element(ul2_nodes, "LI", {}, false);
			var li12_nodes = children(li12);

			t46 = claim_text(li12_nodes, "The Brazilian ");

			a5 = claim_element(li12_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t47 = claim_text(a5_nodes, "ID");
			a5_nodes.forEach(detach);
			t48 = claim_text(li12_nodes, " (CPF) number must have 11 digits");
			li12_nodes.forEach(detach);
			t49 = claim_text(ul2_nodes, "\n            ");

			li13 = claim_element(ul2_nodes, "LI", {}, false);
			var li13_nodes = children(li13);

			t50 = claim_text(li13_nodes, "The ");

			code5 = claim_element(li13_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t51 = claim_text(code5_nodes, "updateMessage()");
			code5_nodes.forEach(detach);
			t52 = claim_text(li13_nodes, " method must return the plugin instance for chaining");
			li13_nodes.forEach(detach);
			t53 = claim_text(ul2_nodes, "\n            ");

			li14 = claim_element(ul2_nodes, "LI", {}, false);
			var li14_nodes = children(li14);

			t54 = claim_text(li14_nodes, "When calling ");

			code6 = claim_element(li14_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t55 = claim_text(code6_nodes, "resetField(true)");
			code6_nodes.forEach(detach);
			t56 = claim_text(li14_nodes, " and ");

			code7 = claim_element(li14_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t57 = claim_text(code7_nodes, "resetForm(true)");
			code7_nodes.forEach(detach);
			t58 = claim_text(li14_nodes, " methods, the field need be reset value before updating the status");
			li14_nodes.forEach(detach);
			ul2_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 92);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 143);
			a0.href = "/guide/validators/promise";
			a0.className = "blue dim link";
			add_location(a0, file, 11, 24, 325);
			add_location(li0, file, 11, 12, 313);
			add_location(code0, file, 12, 20, 430);
			add_location(code1, file, 12, 134, 544);
			add_location(li1, file, 12, 12, 422);
			a1.href = "/guide/validators/iban";
			a1.className = "blue dim link";
			add_location(a1, file, 13, 16, 583);
			add_location(li2, file, 13, 12, 579);
			a2.href = "/guide/validators/iban";
			a2.className = "blue dim link";
			add_location(a2, file, 14, 16, 770);
			add_location(li3, file, 14, 12, 766);
			ul0.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul0, file, 10, 8, 268);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 198);
			a3.href = "/guide/validators/date";
			a3.className = "blue dim link";
			add_location(a3, file, 21, 16, 1044);
			add_location(li4, file, 21, 12, 1040);
			a4.href = "/guide/validators/iban";
			a4.className = "blue dim link";
			add_location(a4, file, 22, 16, 1189);
			add_location(code2, file, 22, 102, 1275);
			add_location(li5, file, 22, 12, 1185);
			add_location(code3, file, 23, 50, 1381);
			add_location(li6, file, 23, 12, 1343);
			add_location(code4, file, 24, 48, 1463);
			add_location(li7, file, 24, 12, 1427);
			add_location(li8, file, 25, 12, 1518);
			add_location(li9, file, 26, 12, 1577);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 20, 8, 995);
			section1.className = "mv5";
			add_location(section1, file, 18, 4, 925);
			add_location(li10, file, 33, 12, 1842);
			add_location(li11, file, 34, 12, 1917);
			a5.href = "/guide/validators/id";
			a5.className = "blue dim link";
			add_location(a5, file, 35, 30, 1995);
			add_location(li12, file, 35, 12, 1977);
			add_location(code5, file, 36, 20, 2113);
			add_location(li13, file, 36, 12, 2105);
			add_location(code6, file, 37, 29, 2228);
			add_location(code7, file, 37, 63, 2262);
			add_location(li14, file, 37, 12, 2211);
			ul2.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul2, file, 32, 8, 1797);
			section2.className = "mv5";
			add_location(section2, file, 30, 4, 1730);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, ul0);
			append(ul0, li0);
			append(li0, t5);
			append(li0, a0);
			append(a0, t6);
			append(li0, t7);
			append(ul0, t8);
			append(ul0, li1);
			append(li1, t9);
			append(li1, code0);
			append(code0, t10);
			append(li1, t11);
			append(li1, code1);
			append(code1, t12);
			append(ul0, t13);
			append(ul0, li2);
			append(li2, a1);
			append(a1, t14);
			append(li2, t15);
			append(ul0, t16);
			append(ul0, li3);
			append(li3, a2);
			append(a2, t17);
			append(li3, t18);
			insert(target, t19, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t20);
			append(section1, ul1);
			append(ul1, li4);
			append(li4, a3);
			append(a3, t21);
			append(li4, t22);
			append(ul1, t23);
			append(ul1, li5);
			append(li5, a4);
			append(a4, t24);
			append(li5, t25);
			append(li5, code2);
			append(code2, t26);
			append(li5, t27);
			append(ul1, t28);
			append(ul1, li6);
			append(li6, t29);
			append(li6, code3);
			append(code3, t30);
			append(li6, t31);
			append(ul1, t32);
			append(ul1, li7);
			append(li7, t33);
			append(li7, code4);
			append(code4, t34);
			append(li7, t35);
			append(ul1, t36);
			append(ul1, li8);
			append(li8, t37);
			append(ul1, t38);
			append(ul1, li9);
			append(li9, t39);
			insert(target, t40, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t41);
			append(section2, ul2);
			append(ul2, li10);
			append(li10, t42);
			append(ul2, t43);
			append(ul2, li11);
			append(li11, t44);
			append(ul2, t45);
			append(ul2, li12);
			append(li12, t46);
			append(li12, a5);
			append(a5, t47);
			append(li12, t48);
			append(ul2, t49);
			append(ul2, li13);
			append(li13, t50);
			append(li13, code5);
			append(code5, t51);
			append(li13, t52);
			append(ul2, t53);
			append(ul2, li14);
			append(li14, t54);
			append(li14, code6);
			append(code6, t55);
			append(li14, t56);
			append(li14, code7);
			append(code7, t57);
			append(li14, t58);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			if (detaching) {
				detach(t19);
				detach(section1);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t40);
				detach(section2);
			}

			heading2.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var changeloglayout = new ChangelogLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			changeloglayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			changeloglayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • v0.6.2";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(changeloglayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var changeloglayout_changes = {};
			if (changed.$$scope) changeloglayout_changes.$$scope = { changed, ctx };
			changeloglayout.$set(changeloglayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			changeloglayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			changeloglayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			changeloglayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

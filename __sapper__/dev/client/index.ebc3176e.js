import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, w as empty, y as on_outro, z as check_outros, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, I as destroy_each, x as group_outros, r as noop } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as Tip } from './chunk.38eb3b47.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';
import { a as SampleData } from './chunk.41999a23.js';

/* src/routes/guide/validators/phone/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/validators/phone/index.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.example = list[i];
	child_ctx.i = i;
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.item = list[i];
	return child_ctx;
}

// (10:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (34:8) <Tip>
function create_default_slot_5(ctx) {
	var t0, code0, t1, t2, code1, t3, t4;

	return {
		c: function create() {
			t0 = text("Since the plugin doesn't support HTML 5 ");
			code0 = element("code");
			t1 = text("type=\"tel\"");
			t2 = text(" attribute, you should use ");
			code1 = element("code");
			t3 = text("type=\"text\"");
			t4 = text(" instead");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "Since the plugin doesn't support HTML 5 ");

			code0 = claim_element(nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t1 = claim_text(code0_nodes, "type=\"tel\"");
			code0_nodes.forEach(detach);
			t2 = claim_text(nodes, " attribute, you should use ");

			code1 = claim_element(nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t3 = claim_text(code1_nodes, "type=\"text\"");
			code1_nodes.forEach(detach);
			t4 = claim_text(nodes, " instead");
			this.h();
		},

		h: function hydrate() {
			add_location(code0, file, 33, 53, 1632);
			add_location(code1, file, 33, 103, 1682);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, code0, anchor);
			append(code0, t1);
			insert(target, t2, anchor);
			insert(target, code1, anchor);
			append(code1, t3);
			insert(target, t4, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(code0);
				detach(t2);
				detach(code1);
				detach(t4);
			}
		}
	};
}

// (56:16) {:else}
function create_else_block(ctx) {
	var tr, td0, t0_value = ctx.item.country, t0, t1, td1, t2_value = ctx.item.code, t2, t3, td2, t4, td3;

	return {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			td1 = element("td");
			t2 = text(t2_value);
			t3 = space();
			td2 = element("td");
			t4 = space();
			td3 = element("td");
			this.h();
		},

		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", { class: true }, false);
			var tr_nodes = children(tr);

			td0 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			t0 = claim_text(td0_nodes, t0_value);
			td0_nodes.forEach(detach);
			t1 = claim_text(tr_nodes, "\n                    ");

			td1 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			t2 = claim_text(td1_nodes, t2_value);
			td1_nodes.forEach(detach);
			t3 = claim_text(tr_nodes, "\n                    ");

			td2 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			td2_nodes.forEach(detach);
			t4 = claim_text(tr_nodes, "\n                    ");

			td3 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			td3_nodes.forEach(detach);
			tr_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			td0.className = "pv2 ph3";
			add_location(td0, file, 57, 20, 3055);
			td1.className = "pv2 ph3";
			add_location(td1, file, 58, 20, 3115);
			td2.className = "pv2 ph3";
			add_location(td2, file, 59, 20, 3172);
			td3.className = "pv2 ph3";
			add_location(td3, file, 60, 20, 3218);
			tr.className = "striped--light-gray";
			add_location(tr, file, 56, 16, 3002);
		},

		m: function mount(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td0);
			append(td0, t0);
			append(tr, t1);
			append(tr, td1);
			append(td1, t2);
			append(tr, t3);
			append(tr, td2);
			append(tr, t4);
			append(tr, td3);
		},

		p: noop,
		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(tr);
			}
		}
	};
}

// (48:16) {#if item.examples.length > 0}
function create_if_block(ctx) {
	var each_1_anchor, current;

	var each_value_1 = ctx.item.examples;

	var each_blocks = [];

	for (var i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	function outro_block(i, detaching, local) {
		if (each_blocks[i]) {
			if (detaching) {
				on_outro(() => {
					each_blocks[i].d(detaching);
					each_blocks[i] = null;
				});
			}

			each_blocks[i].o(local);
		}
	}

	return {
		c: function create() {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},

		l: function claim(nodes) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},

		m: function mount(target, anchor) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			if (changed._samples) {
				each_value_1 = ctx.item.examples;

				for (var i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						each_blocks[i].i(1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].i(1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();
				for (; i < each_blocks.length; i += 1) outro_block(i, 1, 1);
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			for (var i = 0; i < each_value_1.length; i += 1) each_blocks[i].i();

			current = true;
		},

		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) outro_block(i, 0);

			current = false;
		},

		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach(each_1_anchor);
			}
		}
	};
}

// (51:40) {#if i === 0}
function create_if_block_2(ctx) {
	var t_value = ctx.item.country, t;

	return {
		c: function create() {
			t = text(t_value);
		},

		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (52:40) {#if i === 0}
function create_if_block_1(ctx) {
	var t_value = ctx.item.code, t;

	return {
		c: function create() {
			t = text(t_value);
		},

		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (49:16) {#each item.examples as example, i}
function create_each_block_1(ctx) {
	var tr, td0, t0, td1, t1, current;

	var if_block0 = (ctx.i === 0) && create_if_block_2(ctx);

	var if_block1 = (ctx.i === 0) && create_if_block_1(ctx);

	var sampledata = new SampleData({
		props: {
		sample: { country: ctx.item.code, sample: ctx.example },
		renderSample: func,
		sender: "/guide/validators/phone/basic"
	},
		$$inline: true
	});

	return {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			if (if_block0) if_block0.c();
			t0 = space();
			td1 = element("td");
			if (if_block1) if_block1.c();
			t1 = space();
			sampledata.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", { class: true }, false);
			var tr_nodes = children(tr);

			td0 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			if (if_block0) if_block0.l(td0_nodes);
			td0_nodes.forEach(detach);
			t0 = claim_text(tr_nodes, "\n                    ");

			td1 = claim_element(tr_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			if (if_block1) if_block1.l(td1_nodes);
			td1_nodes.forEach(detach);
			t1 = claim_text(tr_nodes, "\n                    ");
			sampledata.$$.fragment.l(tr_nodes);
			tr_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			td0.className = "pv2 ph3";
			add_location(td0, file, 50, 20, 2629);
			td1.className = "pv2 ph3";
			add_location(td1, file, 51, 20, 2707);
			tr.className = "striped--light-gray";
			add_location(tr, file, 49, 16, 2576);
		},

		m: function mount(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td0);
			if (if_block0) if_block0.m(td0, null);
			append(tr, t0);
			append(tr, td1);
			if (if_block1) if_block1.m(td1, null);
			append(tr, t1);
			mount_component(sampledata, tr, null);
			current = true;
		},

		p: function update(changed, ctx) {
			if (ctx.i === 0) {
				if (if_block0) {
					if_block0.p(changed, ctx);
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					if_block0.m(td0, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (ctx.i === 0) {
				if (if_block1) {
					if_block1.p(changed, ctx);
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					if_block1.m(td1, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			var sampledata_changes = {};
			if (changed._samples) sampledata_changes.sample = { country: ctx.item.code, sample: ctx.example };
			sampledata.$set(sampledata_changes);
		},

		i: function intro(local) {
			if (current) return;
			sampledata.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			sampledata.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(tr);
			}

			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();

			sampledata.$destroy();
		}
	};
}

// (47:12) {#each _samples as item}
function create_each_block(ctx) {
	var current_block_type_index, if_block, if_block_anchor, current;

	var if_block_creators = [
		create_if_block,
		create_else_block
	];

	var if_blocks = [];

	function select_block_type(ctx) {
		if (ctx.item.examples.length > 0) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},

		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},

		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);
			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(changed, ctx);
			} else {
				group_outros();
				on_outro(() => {
					if_blocks[previous_block_index].d(1);
					if_blocks[previous_block_index] = null;
				});
				if_block.o(1);
				check_outros();

				if_block = if_blocks[current_block_type_index];
				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}
				if_block.i(1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},

		i: function intro(local) {
			if (current) return;
			if (if_block) if_block.i();
			current = true;
		},

		o: function outro(local) {
			if (if_block) if_block.o();
			current = false;
		},

		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);

			if (detaching) {
				detach(if_block_anchor);
			}
		}
	};
}

// (91:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (97:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("ES6 Module Example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "ES6 Module Example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (128:12) <PrevButton target="/guide/validators/numeric">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("numeric validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "numeric validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (129:12) <NextButton target="/guide/validators/promise">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("promise validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "promise validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, h30, t5, t6, p0, sup0, t7, t8, a0, t9, t10, t11, table0, tr0, th0, t12, t13, th1, t14, t15, th2, t16, t17, th3, t18, t19, tr1, td0, code0, t20, sup1, t21, t22, td1, code1, t23, t24, td2, t25, t26, td3, t27, t28, tr2, td4, code2, t29, t30, td5, code3, t31, t32, td6, t33, t34, td7, t35, t36, t37, p1, t38, a1, t39, t40, t41, p2, t42, t43, table1, tr3, th4, t44, t45, th5, t46, t47, th6, t48, t49, th7, t50, t51, t52, h31, t53, t54, t55, section1, t56, p3, t57, t58, t59, section2, t60, p4, t61, t62, t63, t64, section3, div, t65, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var tip = new Tip({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var each_value = ctx._samples;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	function outro_block(i, detaching, local) {
		if (each_blocks[i]) {
			if (detaching) {
				on_outro(() => {
					each_blocks[i].d(detaching);
					each_blocks[i] = null;
				});
			}

			each_blocks[i].o(local);
		}
	}

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import phone from 'formvalidation/dist/es6/validators/phone';

const result = phone().validate({
    value: ...,
    options: {
        // Can be a string or a function returns a string
        country: ...,
        message: ...,
    },
});
/*
result is an object of
{
    valid: true or false,
    message: The error message
}
*/
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/validators/phone/basic",
		frameworks: ['bootstrap', 'tachyons']
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
// You might need to change the importing path
import phone from 'formvalidation/dist/es6/validators/phone';

const res1 = phone().validate({
    value: '246.555.8888',
    options: {
        country: 'US',
        message: 'The value is not a valid phone number',
    },
});
// res1.valid === true

const res2 = phone().validate({
    value: '(+55) 15 3702-7523',
    options: {
        country: 'BR',
        message: 'The value is not a valid phone number',
    },
});
// res2.valid === true
` },
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['regexp', 'zipCode'] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/validators/numeric",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/validators/promise",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("phone validator");
			t1 = space();
			h2 = element("h2");
			t2 = text("Validate a phone number");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			h30 = element("h3");
			t5 = text("Using with form field");
			t6 = space();
			p0 = element("p");
			sup0 = element("sup");
			t7 = text("*");
			t8 = text(" presents a required option. The HTML attributes are used to set the validator options via the ");
			a0 = element("a");
			t9 = text("Declarative");
			t10 = text(" plugin");
			t11 = space();
			table0 = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t12 = text("Name");
			t13 = space();
			th1 = element("th");
			t14 = text("HTML attribute");
			t15 = space();
			th2 = element("th");
			t16 = text("Type");
			t17 = space();
			th3 = element("th");
			t18 = text("Description");
			t19 = space();
			tr1 = element("tr");
			td0 = element("td");
			code0 = element("code");
			t20 = text("country");
			sup1 = element("sup");
			t21 = text("*");
			t22 = space();
			td1 = element("td");
			code1 = element("code");
			t23 = text("data-fv-phone___country");
			t24 = space();
			td2 = element("td");
			t25 = text("String or Function");
			t26 = space();
			td3 = element("td");
			t27 = text("An ISO-3166 country code");
			t28 = space();
			tr2 = element("tr");
			td4 = element("td");
			code2 = element("code");
			t29 = text("message");
			t30 = space();
			td5 = element("td");
			code3 = element("code");
			t31 = text("data-fv-phone___message");
			t32 = space();
			td6 = element("td");
			t33 = text("String");
			t34 = space();
			td7 = element("td");
			t35 = text("The error message");
			t36 = space();
			tip.$$.fragment.c();
			t37 = space();
			p1 = element("p");
			t38 = text("If you want to support custom formats of a phone number, you should use the ");
			a1 = element("a");
			t39 = text("Transformer");
			t40 = text(" plugin.");
			t41 = space();
			p2 = element("p");
			t42 = text("The validator supports the following countries (click the sample number to validate it):");
			t43 = space();
			table1 = element("table");
			tr3 = element("tr");
			th4 = element("th");
			t44 = text("Country");
			t45 = space();
			th5 = element("th");
			t46 = text("Country code");
			t47 = space();
			th6 = element("th");
			t48 = text("Sample");
			t49 = space();
			th7 = element("th");
			t50 = text("Is it valid?");
			t51 = space();

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t52 = space();
			h31 = element("h3");
			t53 = text("Using with ES6 module");
			t54 = space();
			samplecode0.$$.fragment.c();
			t55 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t56 = space();
			p3 = element("p");
			t57 = text("You can click on sample from the table above to see if it's a valid or invalid phone number.");
			t58 = space();
			demo.$$.fragment.c();
			t59 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t60 = space();
			p4 = element("p");
			t61 = text("The following snippet shows how to use the phone validator with ES6 module:");
			t62 = space();
			samplecode1.$$.fragment.c();
			t63 = space();
			relatedvalidators.$$.fragment.c();
			t64 = space();
			section3 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t65 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "phone validator");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Validate a phone number");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n\n        ");

			h30 = claim_element(section0_nodes, "H3", {}, false);
			var h30_nodes = children(h30);

			t5 = claim_text(h30_nodes, "Using with form field");
			h30_nodes.forEach(detach);
			t6 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			sup0 = claim_element(p0_nodes, "SUP", {}, false);
			var sup0_nodes = children(sup0);

			t7 = claim_text(sup0_nodes, "*");
			sup0_nodes.forEach(detach);
			t8 = claim_text(p0_nodes, " presents a required option. The HTML attributes are used to set the validator options via the ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t9 = claim_text(a0_nodes, "Declarative");
			a0_nodes.forEach(detach);
			t10 = claim_text(p0_nodes, " plugin");
			p0_nodes.forEach(detach);
			t11 = claim_text(section0_nodes, "\n        ");

			table0 = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table0_nodes = children(table0);

			tr0 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t12 = claim_text(th0_nodes, "Name");
			th0_nodes.forEach(detach);
			t13 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t14 = claim_text(th1_nodes, "HTML attribute");
			th1_nodes.forEach(detach);
			t15 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t16 = claim_text(th2_nodes, "Type");
			th2_nodes.forEach(detach);
			t17 = claim_text(tr0_nodes, "\n                ");

			th3 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th3_nodes = children(th3);

			t18 = claim_text(th3_nodes, "Description");
			th3_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t19 = claim_text(table0_nodes, "\n            ");

			tr1 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code0 = claim_element(td0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t20 = claim_text(code0_nodes, "country");
			code0_nodes.forEach(detach);

			sup1 = claim_element(td0_nodes, "SUP", {}, false);
			var sup1_nodes = children(sup1);

			t21 = claim_text(sup1_nodes, "*");
			sup1_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t22 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			code1 = claim_element(td1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t23 = claim_text(code1_nodes, "data-fv-phone___country");
			code1_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			t24 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t25 = claim_text(td2_nodes, "String or Function");
			td2_nodes.forEach(detach);
			t26 = claim_text(tr1_nodes, "\n                ");

			td3 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			t27 = claim_text(td3_nodes, "An ISO-3166 country code");
			td3_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t28 = claim_text(table0_nodes, "\n            ");

			tr2 = claim_element(table0_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			code2 = claim_element(td4_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t29 = claim_text(code2_nodes, "message");
			code2_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t30 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			code3 = claim_element(td5_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t31 = claim_text(code3_nodes, "data-fv-phone___message");
			code3_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			t32 = claim_text(tr2_nodes, "\n                ");

			td6 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			t33 = claim_text(td6_nodes, "String");
			td6_nodes.forEach(detach);
			t34 = claim_text(tr2_nodes, "\n                ");

			td7 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			t35 = claim_text(td7_nodes, "The error message");
			td7_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			table0_nodes.forEach(detach);
			t36 = claim_text(section0_nodes, "\n        ");
			tip.$$.fragment.l(section0_nodes);
			t37 = claim_text(section0_nodes, "\n\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t38 = claim_text(p1_nodes, "If you want to support custom formats of a phone number, you should use the ");

			a1 = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t39 = claim_text(a1_nodes, "Transformer");
			a1_nodes.forEach(detach);
			t40 = claim_text(p1_nodes, " plugin.");
			p1_nodes.forEach(detach);
			t41 = claim_text(section0_nodes, "\n\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t42 = claim_text(p2_nodes, "The validator supports the following countries (click the sample number to validate it):");
			p2_nodes.forEach(detach);
			t43 = claim_text(section0_nodes, "\n\n        ");

			table1 = claim_element(section0_nodes, "TABLE", { class: true }, false);
			var table1_nodes = children(table1);

			tr3 = claim_element(table1_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			th4 = claim_element(tr3_nodes, "TH", { class: true }, false);
			var th4_nodes = children(th4);

			t44 = claim_text(th4_nodes, "Country");
			th4_nodes.forEach(detach);
			t45 = claim_text(tr3_nodes, "\n                ");

			th5 = claim_element(tr3_nodes, "TH", { class: true }, false);
			var th5_nodes = children(th5);

			t46 = claim_text(th5_nodes, "Country code");
			th5_nodes.forEach(detach);
			t47 = claim_text(tr3_nodes, "\n                ");

			th6 = claim_element(tr3_nodes, "TH", { class: true }, false);
			var th6_nodes = children(th6);

			t48 = claim_text(th6_nodes, "Sample");
			th6_nodes.forEach(detach);
			t49 = claim_text(tr3_nodes, "\n                ");

			th7 = claim_element(tr3_nodes, "TH", { class: true }, false);
			var th7_nodes = children(th7);

			t50 = claim_text(th7_nodes, "Is it valid?");
			th7_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			t51 = claim_text(table1_nodes, "\n            ");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(table1_nodes);
			}

			table1_nodes.forEach(detach);
			t52 = claim_text(section0_nodes, "\n\n        ");

			h31 = claim_element(section0_nodes, "H3", {}, false);
			var h31_nodes = children(h31);

			t53 = claim_text(h31_nodes, "Using with ES6 module");
			h31_nodes.forEach(detach);
			t54 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t55 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t56 = claim_text(section1_nodes, "\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t57 = claim_text(p3_nodes, "You can click on sample from the table above to see if it's a valid or invalid phone number.");
			p3_nodes.forEach(detach);
			t58 = claim_text(section1_nodes, "\n        ");
			demo.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t59 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t60 = claim_text(section2_nodes, "\n\n        ");

			p4 = claim_element(section2_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t61 = claim_text(p4_nodes, "The following snippet shows how to use the phone validator with ES6 module:");
			p4_nodes.forEach(detach);
			t62 = claim_text(section2_nodes, "\n");
			samplecode1.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t63 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			t64 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			div = claim_element(section3_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t65 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 97);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 150);
			add_location(h30, file, 11, 8, 272);
			add_location(sup0, file, 12, 29, 332);
			a0.href = "/guide/plugins/declarative";
			a0.className = "blue dim link";
			add_location(a0, file, 12, 136, 439);
			p0.className = "lh-copy i";
			add_location(p0, file, 12, 8, 311);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 15, 16, 652);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 16, 16, 712);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 17, 16, 782);
			th3.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th3, file, 18, 16, 842);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 14, 12, 603);
			add_location(code0, file, 21, 36, 992);
			add_location(sup1, file, 21, 56, 1012);
			td0.className = "pv2 ph3";
			add_location(td0, file, 21, 16, 972);
			add_location(code1, file, 22, 36, 1066);
			td1.className = "pv2 ph3";
			add_location(td1, file, 22, 16, 1046);
			td2.className = "pv2 ph3";
			add_location(td2, file, 23, 16, 1124);
			td3.className = "pv2 ph3";
			add_location(td3, file, 24, 16, 1184);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 20, 12, 923);
			add_location(code2, file, 27, 36, 1333);
			td4.className = "pv2 ph3";
			add_location(td4, file, 27, 16, 1313);
			add_location(code3, file, 28, 36, 1395);
			td5.className = "pv2 ph3";
			add_location(td5, file, 28, 16, 1375);
			td6.className = "pv2 ph3";
			add_location(td6, file, 29, 16, 1453);
			td7.className = "pv2 ph3";
			add_location(td7, file, 30, 16, 1501);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 26, 12, 1264);
			table0.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table0, file, 13, 8, 533);
			a1.href = "/guide/plugins/transformer";
			a1.className = "blue dim link";
			add_location(a1, file, 35, 103, 1825);
			p1.className = "lh-copy";
			add_location(p1, file, 35, 8, 1730);
			p2.className = "lh-copy";
			add_location(p2, file, 37, 8, 1921);
			th4.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th4, file, 41, 16, 2161);
			th5.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th5, file, 42, 16, 2224);
			th6.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th6, file, 43, 16, 2292);
			th7.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th7, file, 44, 16, 2354);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 40, 12, 2112);
			table1.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table1, file, 39, 8, 2042);
			add_location(h31, file, 66, 8, 3334);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 206);
			p3.className = "lh-copy";
			add_location(p3, file, 91, 8, 3878);
			section1.className = "mv5";
			add_location(section1, file, 89, 4, 3807);
			p4.className = "lh-copy";
			add_location(p4, file, 98, 8, 4186);
			section2.className = "mv5";
			add_location(section2, file, 95, 4, 4109);
			div.className = "flex";
			add_location(div, file, 126, 8, 4936);
			section3.className = "mv5";
			add_location(section3, file, 125, 4, 4906);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, h30);
			append(h30, t5);
			append(section0, t6);
			append(section0, p0);
			append(p0, sup0);
			append(sup0, t7);
			append(p0, t8);
			append(p0, a0);
			append(a0, t9);
			append(p0, t10);
			append(section0, t11);
			append(section0, table0);
			append(table0, tr0);
			append(tr0, th0);
			append(th0, t12);
			append(tr0, t13);
			append(tr0, th1);
			append(th1, t14);
			append(tr0, t15);
			append(tr0, th2);
			append(th2, t16);
			append(tr0, t17);
			append(tr0, th3);
			append(th3, t18);
			append(table0, t19);
			append(table0, tr1);
			append(tr1, td0);
			append(td0, code0);
			append(code0, t20);
			append(td0, sup1);
			append(sup1, t21);
			append(tr1, t22);
			append(tr1, td1);
			append(td1, code1);
			append(code1, t23);
			append(tr1, t24);
			append(tr1, td2);
			append(td2, t25);
			append(tr1, t26);
			append(tr1, td3);
			append(td3, t27);
			append(table0, t28);
			append(table0, tr2);
			append(tr2, td4);
			append(td4, code2);
			append(code2, t29);
			append(tr2, t30);
			append(tr2, td5);
			append(td5, code3);
			append(code3, t31);
			append(tr2, t32);
			append(tr2, td6);
			append(td6, t33);
			append(tr2, t34);
			append(tr2, td7);
			append(td7, t35);
			append(section0, t36);
			mount_component(tip, section0, null);
			append(section0, t37);
			append(section0, p1);
			append(p1, t38);
			append(p1, a1);
			append(a1, t39);
			append(p1, t40);
			append(section0, t41);
			append(section0, p2);
			append(p2, t42);
			append(section0, t43);
			append(section0, table1);
			append(table1, tr3);
			append(tr3, th4);
			append(th4, t44);
			append(tr3, t45);
			append(tr3, th5);
			append(th5, t46);
			append(tr3, t47);
			append(tr3, th6);
			append(th6, t48);
			append(tr3, t49);
			append(tr3, th7);
			append(th7, t50);
			append(table1, t51);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(table1, null);
			}

			append(section0, t52);
			append(section0, h31);
			append(h31, t53);
			append(section0, t54);
			mount_component(samplecode0, section0, null);
			insert(target, t55, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t56);
			append(section1, p3);
			append(p3, t57);
			append(section1, t58);
			mount_component(demo, section1, null);
			insert(target, t59, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t60);
			append(section2, p4);
			append(p4, t61);
			append(section2, t62);
			mount_component(samplecode1, section2, null);
			insert(target, t63, anchor);
			mount_component(relatedvalidators, target, anchor);
			insert(target, t64, anchor);
			insert(target, section3, anchor);
			append(section3, div);
			mount_component(prevbutton, div, null);
			append(div, t65);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var tip_changes = {};
			if (changed.$$scope) tip_changes.$$scope = { changed, ctx };
			tip.$set(tip_changes);

			if (changed._samples) {
				each_value = ctx._samples;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						each_blocks[i].i(1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].i(1);
						each_blocks[i].m(table1, null);
					}
				}

				group_outros();
				for (; i < each_blocks.length; i += 1) outro_block(i, 1, 1);
				check_outros();
			}

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			tip.$$.fragment.i(local);

			for (var i = 0; i < each_value.length; i += 1) each_blocks[i].i();

			samplecode0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			tip.$$.fragment.o(local);

			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) outro_block(i, 0);

			samplecode0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			tip.$destroy();

			destroy_each(each_blocks, detaching);

			samplecode0.$destroy();

			if (detaching) {
				detach(t55);
				detach(section1);
			}

			heading1.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t59);
				detach(section2);
			}

			heading2.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t63);
			}

			relatedvalidators.$destroy(detaching);

			if (detaching) {
				detach(t64);
				detach(section3);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • phone validator";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

function func(s) {
	return s.sample;
}

function instance($$self) {
	

const _samples = [
    {
        country: 'United States',
        code: 'US',
        examples: [
            // Valid
            '1444-555-1234', '246.555.8888', '1235554567', '(123)456-7890', '123)456.0987', '1-444-555-1234', '14325678901', '1(123)456-7890', '+1 246.555-8888', '+1 (123)456-7890', '+1(123)456-7890',
            // Invalid
            '7334-12.111', 'v123.11.1111', '(23)440.4448', '123(456)7890', '0800 333333 abcdef',
        ],
    },
    {
        country: 'United Arab Emirates',
        code: 'AE',
        examples: [
            // Valid
            '00971501234567', '+971521234567', '971551234567', '971 56 123 4567', '971-50-123-4567', '971.4.123.4567', '+971 (0) 4 1234567', '971 (56) 1234567', '0551234567', '021234567', '600-540-000',
        ],
    },
    {
        country: 'Bulgaria',
        code: 'BG',
        examples: [
            // Valid
            '359895123456', '0898111222', '0886111222', '0875111222', '0899555555', '359898111222',
            '00898111222', // double 0
            '+35998111222', '098111222', '090012900', '070010007', '070043256', '35970045045', '35970045666', '08000700', '080088001', '080015333', '028700000', '030100000', '03010070', '03656745', // + and without + at the beginning
            // Invalid
            '01211212',
        ],
    },
    {
        country: 'Brazil',
        code: 'BR',
        examples: [
            // Valid
            '0800.000.00.00', '0800-000-00-00', '0800 000 00 00', '0800-00-00-00', '0800.00.00.00', '0800 00 00 00', '0800-000-0000', '0800 000 0000', '0800.000.0000', '08000000000', '1692089-4635',
            '16920894635', '16992089-4635', '16 99202-4635', '(16)99202-4635', '(16)92089-4635', '(16) 92089-4635', '(15) 4343-4343', '+55 15 3702-7523', '(+55)1537027523',
            '(+55)(15)3702-7523', '(+55) 15 3702-7523', '(+55) 15 99202-7523', '99202-4635', '(16) 9208-4635',
        ],
    },
    {
        country: 'China',
        code: 'CN',
        examples: [
            // Valid
            '18911111111', '189 1111 1111', '189-1111-1111', '0086-18911111111', '+86-18911111111', '86-18911111111', '0086 18911111111', '+86 18911111111', '86 18911111111', '0086 189-1111-1111',
            '+86 189-1111-1111', '86 189-1111-1111', '02011111111', '020-11111111', '020 11111111', '020 1111 1111', '020-1111-1111', '0086 020 82803159',
            '0086-020-82803159', '+86 20 61302222-8866', '+86 20 6130-2222-8866', '+86 10 59081185',
        ],
    },
    {
        country: 'Czech Republic',
        code: 'CZ',
        examples: [
            // Valid
            '00420123456789', '00420 123456789', '00420 123 456 789', '00 420 123 456 789', '+420123456789', '+420 123456789', '+420 123 456 789', '123456789', '123 456 789',
            // Invalid
            '420123456789', '420 123456789', '420 123 456 789', '00421123456789', '00421 123456789', '00421 123 456 789', '00 421 123 456 789', '+421123456789', '+421 123456789', '+421 123 456 789',
        ],
    },
    {
        country: 'Denmark',
        code: 'DK',
        examples: [],
    },
    {
        country: 'France',
        code: 'FR',
        examples: [
            // Valid
            '0644444444', '06 44 44 44 44', '06-44-44-44-44', '06.44.44.44.44', '+33644444444', '+336.44.44.44.44', '+33 6.44.44.44.44', '0033644444444', '00336.44.44.44.44', '0033 6.44.44.44.44', '+33(0)644444444', '+33 (0) 644444444',
            // Invalid
            '06 44.44-44.44', '06 44 44-4444', '06444444444444', '6644444444', '06  44.44-44.44', '+33 (0)  644444444', '(0)644444444', '+33-(0)-644444444', '+33 (0)-644444444', '+33-(0) 644444444', '06.44.44.44.44.',
        ],
    },
    {
        country: 'Germany',
        code: 'DE',
        examples: [
            // Valid
            '+49(89)123456', '089-1234567', '0891234567', '0049-89-123456', '089 123456-78',
        ],
    },
    {
        country: 'India',
        code: 'IN',
        examples: [
            // Valid
            '9999114011', '+919911112341', '+91 9415007327', '03598245785', '+911204312280', '1302231221',
        ],
    },
    {
        country: 'Morocco',
        code: 'MA',
        examples: [
            // Valid
            '0644444444', '0610245896', '0630548564', '06 44 44 44 44', '06-44-44-44-44', '06.44.44.44.44', '06 44.44-44.44', '0528254856', '0535484541', '05 28 44 44 44',
            '05-28-44.44.44', '05.28.44.44.44', '05 28.44-44.44', '+212644444444', '+2126.44.44.44.44', '+212 6.44.44.44.44', '00212644444444', '002126.44.44.44.44', '00212 6.44.44.44.44', '+212(0)644444444', '+212 (0) 644444444',
            // Invalid
            '0625468961', '0512548632', '0542564896', '06444444444444', '6644444444', '06  44.44-44.44', '+212 (0)  644444444', '(0)644444444',
        ],
    },
    {
        country: 'Netherlands',
        code: 'NL',
        examples: [
            // Valid
            '0101234567', '010-1234567', '010 - 123 45 67', '010 1234 567', '06-12345678', '06 123 456 78', '0111-123456', '0111 123456', // Popular formats
            '+31101234567', '0031101234567', '+31(0) 10123 4567', '+3110-1234567', '003110 1234567', '+316 123 456 78', '+31(0)6 123 45678', '+31111-123456', '0031111-123456', // International notation
            // Invalid
            '06-1234-5678',         // An extra dash is not allowed
            '06 123456789',         // Too long
            '06 1234567',           // Too short
            '+31(06) 123 45678',    // Invalid optional declaration
            '1234567',              // Without regional number
        ],
    },
    {
        country: 'Pakistan',
        code: 'PK',
        examples: [
            // Valid
            '03336527366'
        ],
    },
    {
        country: 'Romania',
        code: 'RO',
        examples: [
            // Valid
            '+40213.564.864', '+40213 564 864', '0213-564-864', '0213564864', '0313564864', '0720512346', '0730512346', '0740512346', '0750512346', '+40750512346', '+40750.512.346', '0760512346', '0770512346', '0780512346',
            // Invalid
            '40213-564-864', '0213/564/864', '0413564864', '0790512346',
        ],
    },
    {
        country: 'Russia',
        code: 'RU',
        examples: [
            // Valid
            '+7(911)976-91-04',
        ],
    },
    {
        country: 'Slovakia',
        code: 'SK',
        examples: [
            // Valid
            '00421123456789', '00421 123456789', '00421 123 456 789', '00 421 123 456 789', '+421123456789', '+421 123456789', '+421 123 456 789', '123456789', '123 456 789',
            // Invalid
            '421123456789', '421 123456789', '421 123 456 789', '00420123456789', '00420 123456789', '00420 123 456 789', '00 420 123 456 789', '+420123456789', '+420 123456789', '+420 123 456 789',
        ],
    },
    {
        country: 'Spain',
        code: 'ES',
        examples: [],
    },
    {
        country: 'Thailand',
        code: 'TH',
        examples: [],
    },
    {
        country: 'United Kingdom',
        code: 'GB',
        examples: [
            // Valid
            '01611234567', '0161 123 4567', '(0161) 123 4567', '0161-123-4567', '+44 161 123 4567', '+441611234567', '+44(0)161234567', '00 44 161 1234567', '(011) 44 161 234567', '0161-158-5587', '0161 123 4567 ext. 123', '01611234567x123', '+44161234567x123', '+44 (0) 161 1234567 ext 123',
            // Invalid
            '012345678900', '1611234567', '012345678', '123 4567', '061 123 4567',
        ],
    },
    {
        country: 'Venezuela',
        code: 'VE',
        examples: [],
    },
];

	return { _samples };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export default Index;

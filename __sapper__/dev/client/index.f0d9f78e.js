import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as ChangelogLayout } from './chunk.4a563e90.js';

/* src/routes/updates/v1.0.1/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/updates/v1.0.1/index.svelte";

// (10:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Bug fixes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Bug fixes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (19:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Upgrading to v1.0.1");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Upgrading to v1.0.1");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <ChangelogLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, ul0, li0, t5, a0, t6, t7, t8, li1, t9, t10, li2, t11, a1, t12, t13, code, t14, t15, t16, section1, t17, ul1, li3, t18, a2, t19, t20, t21, li4, t22, t23, section2, a3, t24, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Version 1.0.1");
			t1 = space();
			h2 = element("h2");
			t2 = text("Released 29 June 2018");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			ul0 = element("ul");
			li0 = element("li");
			t5 = text("Fix an issue that the separator option in ");
			a0 = element("a");
			t6 = text("date");
			t7 = text(" validator isn't determined properly");
			t8 = space();
			li1 = element("li");
			t9 = text("Fix an issue that the message container isn't added success/error CSS classes when choosing any but first checkbox");
			t10 = space();
			li2 = element("li");
			t11 = text("Fix an issue that the ");
			a1 = element("a");
			t12 = text("remote");
			t13 = text(" validator and ");
			code = element("code");
			t14 = text("FormValidation.utils.fetch()");
			t15 = text(" method don't send the correct data for POST request");
			t16 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t17 = space();
			ul1 = element("ul");
			li3 = element("li");
			t18 = text("From v0.8.1 and older versions: Follow the ");
			a2 = element("a");
			t19 = text("Upgrading to v1.0.0");
			t20 = text(" guide");
			t21 = space();
			li4 = element("li");
			t22 = text("From v1.0.0: Just download the new version and replace the old files in v1.0.0 with new files in v1.0.1.");
			t23 = space();
			section2 = element("section");
			a3 = element("a");
			t24 = text("Download v1.0.1");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Version 1.0.1");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Released 29 June 2018");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			ul0 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t5 = claim_text(li0_nodes, "Fix an issue that the separator option in ");

			a0 = claim_element(li0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t6 = claim_text(a0_nodes, "date");
			a0_nodes.forEach(detach);
			t7 = claim_text(li0_nodes, " validator isn't determined properly");
			li0_nodes.forEach(detach);
			t8 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t9 = claim_text(li1_nodes, "Fix an issue that the message container isn't added success/error CSS classes when choosing any but first checkbox");
			li1_nodes.forEach(detach);
			t10 = claim_text(ul0_nodes, "\n            ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t11 = claim_text(li2_nodes, "Fix an issue that the ");

			a1 = claim_element(li2_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t12 = claim_text(a1_nodes, "remote");
			a1_nodes.forEach(detach);
			t13 = claim_text(li2_nodes, " validator and ");

			code = claim_element(li2_nodes, "CODE", {}, false);
			var code_nodes = children(code);

			t14 = claim_text(code_nodes, "FormValidation.utils.fetch()");
			code_nodes.forEach(detach);
			t15 = claim_text(li2_nodes, " method don't send the correct data for POST request");
			li2_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t16 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t17 = claim_text(section1_nodes, "\n        ");

			ul1 = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li3 = claim_element(ul1_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t18 = claim_text(li3_nodes, "From v0.8.1 and older versions: Follow the ");

			a2 = claim_element(li3_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t19 = claim_text(a2_nodes, "Upgrading to v1.0.0");
			a2_nodes.forEach(detach);
			t20 = claim_text(li3_nodes, " guide");
			li3_nodes.forEach(detach);
			t21 = claim_text(ul1_nodes, "\n            ");

			li4 = claim_element(ul1_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			t22 = claim_text(li4_nodes, "From v1.0.0: Just download the new version and replace the old files in v1.0.0 with new files in v1.0.1.");
			li4_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t23 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			a3 = claim_element(section2_nodes, "A", { href: true, class: true, title: true }, false);
			var a3_nodes = children(a3);

			t24 = claim_text(a3_nodes, "Download v1.0.1");
			a3_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 92);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 143);
			a0.href = "/guide/validators/date";
			a0.className = "blue dim link";
			add_location(a0, file, 11, 58, 355);
			add_location(li0, file, 11, 12, 309);
			add_location(li1, file, 12, 12, 472);
			a1.href = "/guide/validators/remote";
			a1.className = "blue dim link";
			add_location(a1, file, 13, 38, 634);
			add_location(code, file, 13, 120, 716);
			add_location(li2, file, 13, 12, 608);
			ul0.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul0, file, 10, 8, 264);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 197);
			a2.href = "/updates/v1.0.0/#upgrading-to-v1-0-0";
			a2.className = "blue dim link";
			add_location(a2, file, 20, 59, 1018);
			add_location(li3, file, 20, 12, 971);
			add_location(li4, file, 21, 12, 1134);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 19, 8, 926);
			section1.className = "mv5";
			add_location(section1, file, 17, 4, 849);
			a3.href = "/download";
			a3.className = "f6 f5-ns fw6 dib ba b--black-20 bg-blue white ph3 ph4-ns pv2 pv3-ns br2 grow no-underline";
			a3.title = "Download";
			add_location(a3, file, 26, 8, 1315);
			section2.className = "tc mv5";
			add_location(section2, file, 25, 4, 1282);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, ul0);
			append(ul0, li0);
			append(li0, t5);
			append(li0, a0);
			append(a0, t6);
			append(li0, t7);
			append(ul0, t8);
			append(ul0, li1);
			append(li1, t9);
			append(ul0, t10);
			append(ul0, li2);
			append(li2, t11);
			append(li2, a1);
			append(a1, t12);
			append(li2, t13);
			append(li2, code);
			append(code, t14);
			append(li2, t15);
			insert(target, t16, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t17);
			append(section1, ul1);
			append(ul1, li3);
			append(li3, t18);
			append(li3, a2);
			append(a2, t19);
			append(li3, t20);
			append(ul1, t21);
			append(ul1, li4);
			append(li4, t22);
			insert(target, t23, anchor);
			insert(target, section2, anchor);
			append(section2, a3);
			append(a3, t24);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			if (detaching) {
				detach(t16);
				detach(section1);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t23);
				detach(section2);
			}
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var changeloglayout = new ChangelogLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			changeloglayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			changeloglayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • v1.0.1";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(changeloglayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var changeloglayout_changes = {};
			if (changed.$$scope) changeloglayout_changes.$$scope = { changed, ctx };
			changeloglayout.$set(changeloglayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			changeloglayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			changeloglayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			changeloglayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

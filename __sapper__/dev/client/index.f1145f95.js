import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, w as empty, x as group_outros, z as check_outros, I as destroy_each, y as on_outro } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import { a as Cards, b as Card } from './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';

/* src/routes/guide/plugins/tooltip/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/plugins/tooltip/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.p = list[i];
	return child_ctx;
}

// (10:8) <Heading>
function create_default_slot_7(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Usage");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Usage");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (54:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Options");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Options");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (94:12) {#each _frameworks as p}
function create_each_block(ctx) {
	var current;

	var card = new Card({
		props: {
		target: "/guide/plugins/" + ctx.p.toLowerCase(),
		title: ctx.p
	},
		$$inline: true
	});

	return {
		c: function create() {
			card.$$.fragment.c();
		},

		l: function claim(nodes) {
			card.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var card_changes = {};
			if (changed._frameworks) card_changes.target = "/guide/plugins/" + ctx.p.toLowerCase();
			if (changed._frameworks) card_changes.title = ctx.p;
			card.$set(card_changes);
		},

		i: function intro(local) {
			if (current) return;
			card.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			card.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			card.$destroy(detaching);
		}
	};
}

// (93:8) <Cards>
function create_default_slot_5(ctx) {
	var each_1_anchor, current;

	var each_value = ctx._frameworks;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	function outro_block(i, detaching, local) {
		if (each_blocks[i]) {
			if (detaching) {
				on_outro(() => {
					each_blocks[i].d(detaching);
					each_blocks[i] = null;
				});
			}

			each_blocks[i].o(local);
		}
	}

	return {
		c: function create() {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},

		l: function claim(nodes) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},

		m: function mount(target, anchor) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			if (changed._frameworks) {
				each_value = ctx._frameworks;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
						each_blocks[i].i(1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].i(1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();
				for (; i < each_blocks.length; i += 1) outro_block(i, 1, 1);
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			for (var i = 0; i < each_value.length; i += 1) each_blocks[i].i();

			current = true;
		},

		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < each_blocks.length; i += 1) outro_block(i, 0);

			current = false;
		},

		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach(each_1_anchor);
			}
		}
	};
}

// (126:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Basic example");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Basic example");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (132:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changelog");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changelog");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (140:12) <PrevButton target="/guide/plugins/tachyons">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Tachyons plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Tachyons plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (141:12) <NextButton target="/guide/plugins/transformer">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Transformer plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Transformer plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, p0, t5, a0, t6, t7, t8, p1, t9, t10, t11, p2, t12, code0, t13, t14, t15, section1, t16, table, tr0, th0, t17, t18, th1, t19, t20, th2, t21, t22, tr1, td0, code1, t23, t24, td1, t25, t26, td2, p3, t27, t28, ul0, li0, code2, t29, t30, t31, li1, code3, t32, t33, li2, code4, t34, t35, li3, code5, t36, t37, li4, code6, t38, t39, li5, code7, t40, t41, li6, code8, t42, t43, li7, code9, t44, t45, tr2, td3, code10, t46, t47, td4, t48, t49, td5, p4, t50, t51, ul1, li8, code11, t52, t53, t54, li9, code12, t55, t56, t57, p5, t58, a1, t59, t60, t61, t62, p6, t63, code13, t64, t65, t66, t67, section2, t68, p7, t69, span, t70, t71, t72, t73, section3, t74, ul2, li10, t75, t76, section4, div, t77, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="demoForm" method="POST">
        ...
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>    
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                // You have to register the Tooltip plugin before Icon plugin
                tooltip: new FormValidation.plugins.Tooltip({
                    placement: ...,
                    trigger: ...,
                }),
                icon: new FormValidation.plugins.Icon(),
                ...
            },
        }
    );
});
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var cards = new Cards({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
FormValidation.formValidation(
    document.getElementById('demoForm'),
    {
        fields: {
            ...
        },
        plugins: {
            bootstrap: new FormValidation.plugins.Bootstrap({
                // Do not show the error message in default area
                defaultMessageContainer: false,
            }),
            // Again, remember to register the Tooltip plugin before Icon plugin
            tooltip: new FormValidation.plugins.Tooltip(),
            icon: new FormValidation.plugins.Icon({
                valid: 'fa fa-check',
                invalid: 'fa fa-times',
                validating: 'fa fa-refresh'
            }),
        },
    }
);
` },
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/plugins/tooltip/basic",
		frameworks: ['bootstrap', 'tachyons']
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/plugins/tachyons",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/plugins/transformer",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Tooltip plugin");
			t1 = space();
			h2 = element("h2");
			t2 = text("Show error message in a tooltip");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			p0 = element("p");
			t5 = text("You have to use this plugin with ");
			a0 = element("a");
			t6 = text("Icon");
			t7 = text(" plugin which displays different icons depending on the field validity. The error message then will be shown inside a tooltip when you click or hover on the icon.");
			t8 = space();
			p1 = element("p");
			t9 = text("The following piece of code is the starting point to use the Tooltip plugin:");
			t10 = space();
			samplecode0.$$.fragment.c();
			t11 = space();
			p2 = element("p");
			t12 = text("The sample code above assumes that the FormValidation files are placed inside the ");
			code0 = element("code");
			t13 = text("vendors");
			t14 = text(" directory. You might need to change the path depending on where you place them on the server.");
			t15 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t16 = space();
			table = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t17 = text("Option");
			t18 = space();
			th1 = element("th");
			t19 = text("Type");
			t20 = space();
			th2 = element("th");
			t21 = text("Description");
			t22 = space();
			tr1 = element("tr");
			td0 = element("td");
			code1 = element("code");
			t23 = text("placement");
			t24 = space();
			td1 = element("td");
			t25 = text("String");
			t26 = space();
			td2 = element("td");
			p3 = element("p");
			t27 = text("Indicate where the tooltip will be displayed over the icon. Can be one of the following values:");
			t28 = space();
			ul0 = element("ul");
			li0 = element("li");
			code2 = element("code");
			t29 = text("top");
			t30 = text(" (the default value)");
			t31 = space();
			li1 = element("li");
			code3 = element("code");
			t32 = text("top-left");
			t33 = space();
			li2 = element("li");
			code4 = element("code");
			t34 = text("top-right");
			t35 = space();
			li3 = element("li");
			code5 = element("code");
			t36 = text("bottom");
			t37 = space();
			li4 = element("li");
			code6 = element("code");
			t38 = text("bottom-left");
			t39 = space();
			li5 = element("li");
			code7 = element("code");
			t40 = text("bottom-right");
			t41 = space();
			li6 = element("li");
			code8 = element("code");
			t42 = text("left");
			t43 = space();
			li7 = element("li");
			code9 = element("code");
			t44 = text("right");
			t45 = space();
			tr2 = element("tr");
			td3 = element("td");
			code10 = element("code");
			t46 = text("trigger");
			t47 = space();
			td4 = element("td");
			t48 = text("String");
			t49 = space();
			td5 = element("td");
			p4 = element("p");
			t50 = text("Indicate when the tooltip will be displayed. Can be one of the following values:");
			t51 = space();
			ul1 = element("ul");
			li8 = element("li");
			code11 = element("code");
			t52 = text("click");
			t53 = text(" (the default value): Clicking on the icon will show up the tooltip.");
			t54 = space();
			li9 = element("li");
			code12 = element("code");
			t55 = text("hover");
			t56 = text(": Hovering the mouse over the icon will show up the tooltip.");
			t57 = space();
			p5 = element("p");
			t58 = text("Same as the ");
			a1 = element("a");
			t59 = text("Icon");
			t60 = text(" plugin, the Tooltip plugin only supports the form made in the following CSS frameworks:");
			t61 = space();
			cards.$$.fragment.c();
			t62 = space();
			p6 = element("p");
			t63 = text("If you don't want the plugin supporting given CSS framework above to show the error message, you can set ");
			code13 = element("code");
			t64 = text("defaultMessageContainer: false");
			t65 = text(" as following:");
			t66 = space();
			samplecode1.$$.fragment.c();
			t67 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t68 = space();
			p7 = element("p");
			t69 = text("In the following form, try to press the ");
			span = element("span");
			t70 = text("Add product");
			t71 = text(" button, and then click on the any icon that is attached to any invalid field.");
			t72 = space();
			demo.$$.fragment.c();
			t73 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t74 = space();
			ul2 = element("ul");
			li10 = element("li");
			t75 = text("v1.0.0: First release");
			t76 = space();
			section4 = element("section");
			div = element("div");
			prevbutton.$$.fragment.c();
			t77 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Tooltip plugin");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Show error message in a tooltip");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t5 = claim_text(p0_nodes, "You have to use this plugin with ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t6 = claim_text(a0_nodes, "Icon");
			a0_nodes.forEach(detach);
			t7 = claim_text(p0_nodes, " plugin which displays different icons depending on the field validity. The error message then will be shown inside a tooltip when you click or hover on the icon.");
			p0_nodes.forEach(detach);
			t8 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t9 = claim_text(p1_nodes, "The following piece of code is the starting point to use the Tooltip plugin:");
			p1_nodes.forEach(detach);
			t10 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t11 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t12 = claim_text(p2_nodes, "The sample code above assumes that the FormValidation files are placed inside the ");

			code0 = claim_element(p2_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t13 = claim_text(code0_nodes, "vendors");
			code0_nodes.forEach(detach);
			t14 = claim_text(p2_nodes, " directory. You might need to change the path depending on where you place them on the server.");
			p2_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t15 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t16 = claim_text(section1_nodes, "\n        ");

			table = claim_element(section1_nodes, "TABLE", { class: true }, false);
			var table_nodes = children(table);

			tr0 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t17 = claim_text(th0_nodes, "Option");
			th0_nodes.forEach(detach);
			t18 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t19 = claim_text(th1_nodes, "Type");
			th1_nodes.forEach(detach);
			t20 = claim_text(tr0_nodes, "\n                ");

			th2 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th2_nodes = children(th2);

			t21 = claim_text(th2_nodes, "Description");
			th2_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t22 = claim_text(table_nodes, "\n            ");

			tr1 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code1 = claim_element(td0_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t23 = claim_text(code1_nodes, "placement");
			code1_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t24 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			t25 = claim_text(td1_nodes, "String");
			td1_nodes.forEach(detach);
			t26 = claim_text(tr1_nodes, "\n                ");

			td2 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			p3 = claim_element(td2_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t27 = claim_text(p3_nodes, "Indicate where the tooltip will be displayed over the icon. Can be one of the following values:");
			p3_nodes.forEach(detach);
			t28 = claim_text(td2_nodes, "\n                    ");

			ul0 = claim_element(td2_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			code2 = claim_element(li0_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t29 = claim_text(code2_nodes, "top");
			code2_nodes.forEach(detach);
			t30 = claim_text(li0_nodes, " (the default value)");
			li0_nodes.forEach(detach);
			t31 = claim_text(ul0_nodes, "\n                        ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			code3 = claim_element(li1_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t32 = claim_text(code3_nodes, "top-left");
			code3_nodes.forEach(detach);
			li1_nodes.forEach(detach);
			t33 = claim_text(ul0_nodes, "\n                        ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			code4 = claim_element(li2_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t34 = claim_text(code4_nodes, "top-right");
			code4_nodes.forEach(detach);
			li2_nodes.forEach(detach);
			t35 = claim_text(ul0_nodes, "\n                        ");

			li3 = claim_element(ul0_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			code5 = claim_element(li3_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t36 = claim_text(code5_nodes, "bottom");
			code5_nodes.forEach(detach);
			li3_nodes.forEach(detach);
			t37 = claim_text(ul0_nodes, "\n                        ");

			li4 = claim_element(ul0_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			code6 = claim_element(li4_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t38 = claim_text(code6_nodes, "bottom-left");
			code6_nodes.forEach(detach);
			li4_nodes.forEach(detach);
			t39 = claim_text(ul0_nodes, "\n                        ");

			li5 = claim_element(ul0_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			code7 = claim_element(li5_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t40 = claim_text(code7_nodes, "bottom-right");
			code7_nodes.forEach(detach);
			li5_nodes.forEach(detach);
			t41 = claim_text(ul0_nodes, "\n                        ");

			li6 = claim_element(ul0_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			code8 = claim_element(li6_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t42 = claim_text(code8_nodes, "left");
			code8_nodes.forEach(detach);
			li6_nodes.forEach(detach);
			t43 = claim_text(ul0_nodes, "\n                        ");

			li7 = claim_element(ul0_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			code9 = claim_element(li7_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t44 = claim_text(code9_nodes, "right");
			code9_nodes.forEach(detach);
			li7_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			td2_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t45 = claim_text(table_nodes, "\n            ");

			tr2 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td3 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			code10 = claim_element(td3_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t46 = claim_text(code10_nodes, "trigger");
			code10_nodes.forEach(detach);
			td3_nodes.forEach(detach);
			t47 = claim_text(tr2_nodes, "\n                ");

			td4 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			t48 = claim_text(td4_nodes, "String");
			td4_nodes.forEach(detach);
			t49 = claim_text(tr2_nodes, "\n                ");

			td5 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			p4 = claim_element(td5_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t50 = claim_text(p4_nodes, "Indicate when the tooltip will be displayed. Can be one of the following values:");
			p4_nodes.forEach(detach);
			t51 = claim_text(td5_nodes, "\n                    ");

			ul1 = claim_element(td5_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li8 = claim_element(ul1_nodes, "LI", {}, false);
			var li8_nodes = children(li8);

			code11 = claim_element(li8_nodes, "CODE", {}, false);
			var code11_nodes = children(code11);

			t52 = claim_text(code11_nodes, "click");
			code11_nodes.forEach(detach);
			t53 = claim_text(li8_nodes, " (the default value): Clicking on the icon will show up the tooltip.");
			li8_nodes.forEach(detach);
			t54 = claim_text(ul1_nodes, "\n                        ");

			li9 = claim_element(ul1_nodes, "LI", {}, false);
			var li9_nodes = children(li9);

			code12 = claim_element(li9_nodes, "CODE", {}, false);
			var code12_nodes = children(code12);

			t55 = claim_text(code12_nodes, "hover");
			code12_nodes.forEach(detach);
			t56 = claim_text(li9_nodes, ": Hovering the mouse over the icon will show up the tooltip.");
			li9_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			table_nodes.forEach(detach);
			t57 = claim_text(section1_nodes, "\n\n        ");

			p5 = claim_element(section1_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t58 = claim_text(p5_nodes, "Same as the ");

			a1 = claim_element(p5_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t59 = claim_text(a1_nodes, "Icon");
			a1_nodes.forEach(detach);
			t60 = claim_text(p5_nodes, " plugin, the Tooltip plugin only supports the form made in the following CSS frameworks:");
			p5_nodes.forEach(detach);
			t61 = claim_text(section1_nodes, "\n\n        ");
			cards.$$.fragment.l(section1_nodes);
			t62 = claim_text(section1_nodes, "\n\n        ");

			p6 = claim_element(section1_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t63 = claim_text(p6_nodes, "If you don't want the plugin supporting given CSS framework above to show the error message, you can set ");

			code13 = claim_element(p6_nodes, "CODE", {}, false);
			var code13_nodes = children(code13);

			t64 = claim_text(code13_nodes, "defaultMessageContainer: false");
			code13_nodes.forEach(detach);
			t65 = claim_text(p6_nodes, " as following:");
			p6_nodes.forEach(detach);
			t66 = claim_text(section1_nodes, "\n");
			samplecode1.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t67 = claim_text(nodes, "\n    \n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t68 = claim_text(section2_nodes, "\n        ");

			p7 = claim_element(section2_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t69 = claim_text(p7_nodes, "In the following form, try to press the ");

			span = claim_element(p7_nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t70 = claim_text(span_nodes, "Add product");
			span_nodes.forEach(detach);
			t71 = claim_text(p7_nodes, " button, and then click on the any icon that is attached to any invalid field.");
			p7_nodes.forEach(detach);
			t72 = claim_text(section2_nodes, "\n        ");
			demo.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t73 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t74 = claim_text(section3_nodes, "\n        ");

			ul2 = claim_element(section3_nodes, "UL", { class: true }, false);
			var ul2_nodes = children(ul2);

			li10 = claim_element(ul2_nodes, "LI", {}, false);
			var li10_nodes = children(li10);

			t75 = claim_text(li10_nodes, "v1.0.0: First release");
			li10_nodes.forEach(detach);
			ul2_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			t76 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			div = claim_element(section4_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			prevbutton.$$.fragment.l(div_nodes);
			t77 = claim_text(div_nodes, "\n            ");
			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section4_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 96);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 148);
			a0.href = "/guide/plugins/icon";
			a0.className = "blue dim link";
			add_location(a0, file, 10, 60, 327);
			p0.className = "lh-copy";
			add_location(p0, file, 10, 8, 275);
			p1.className = "lh-copy";
			add_location(p1, file, 11, 8, 562);
			add_location(code0, file, 49, 109, 1807);
			p2.className = "lh-copy";
			add_location(p2, file, 49, 8, 1706);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 212);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 56, 16, 2130);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 57, 16, 2192);
			th2.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th2, file, 58, 16, 2252);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 55, 12, 2081);
			add_location(code1, file, 61, 36, 2402);
			td0.className = "pv2 ph3";
			add_location(td0, file, 61, 16, 2382);
			td1.className = "pv2 ph3";
			add_location(td1, file, 62, 16, 2446);
			p3.className = "lh-copy";
			add_location(p3, file, 64, 20, 2535);
			add_location(code2, file, 66, 28, 2731);
			add_location(li0, file, 66, 24, 2727);
			add_location(code3, file, 67, 28, 2801);
			add_location(li1, file, 67, 24, 2797);
			add_location(code4, file, 68, 28, 2856);
			add_location(li2, file, 68, 24, 2852);
			add_location(code5, file, 69, 28, 2912);
			add_location(li3, file, 69, 24, 2908);
			add_location(code6, file, 70, 28, 2965);
			add_location(li4, file, 70, 24, 2961);
			add_location(code7, file, 71, 28, 3023);
			add_location(li5, file, 71, 24, 3019);
			add_location(code8, file, 72, 28, 3082);
			add_location(li6, file, 72, 24, 3078);
			add_location(code9, file, 73, 28, 3133);
			add_location(li7, file, 73, 24, 3129);
			ul0.className = "ma0 pl3 lh-copy";
			add_location(ul0, file, 65, 20, 2674);
			td2.className = "pv2 ph3";
			add_location(td2, file, 63, 16, 2494);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 60, 12, 2333);
			add_location(code10, file, 78, 36, 3304);
			td3.className = "pv2 ph3";
			add_location(td3, file, 78, 16, 3284);
			td4.className = "pv2 ph3";
			add_location(td4, file, 79, 16, 3346);
			p4.className = "lh-copy";
			add_location(p4, file, 81, 20, 3435);
			add_location(code11, file, 83, 28, 3616);
			add_location(li8, file, 83, 24, 3612);
			add_location(code12, file, 84, 28, 3736);
			add_location(li9, file, 84, 24, 3732);
			ul1.className = "ma0 pl3 lh-copy";
			add_location(ul1, file, 82, 20, 3559);
			td5.className = "pv2 ph3";
			add_location(td5, file, 80, 16, 3394);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 77, 12, 3235);
			table.className = "collapse ba br2 b--black-10 pv2 ph3 w-100";
			add_location(table, file, 54, 8, 2011);
			a1.href = "/guide/plugins/icon";
			a1.className = "blue dim link";
			add_location(a1, file, 90, 39, 3943);
			p5.className = "lh-copy";
			add_location(p5, file, 90, 8, 3912);
			add_location(code13, file, 98, 132, 4400);
			p6.className = "lh-copy";
			add_location(p6, file, 98, 8, 4276);
			section1.className = "mv5";
			add_location(section1, file, 52, 4, 1946);
			span.className = "i";
			add_location(span, file, 126, 67, 5343);
			p7.className = "lh-copy";
			add_location(p7, file, 126, 8, 5284);
			section2.className = "mv5";
			add_location(section2, file, 124, 4, 5213);
			add_location(li10, file, 133, 12, 5686);
			ul2.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul2, file, 132, 8, 5641);
			section3.className = "mv5";
			add_location(section3, file, 130, 4, 5574);
			div.className = "flex";
			add_location(div, file, 138, 8, 5781);
			section4.className = "mv5";
			add_location(section4, file, 137, 4, 5751);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, p0);
			append(p0, t5);
			append(p0, a0);
			append(a0, t6);
			append(p0, t7);
			append(section0, t8);
			append(section0, p1);
			append(p1, t9);
			append(section0, t10);
			mount_component(samplecode0, section0, null);
			append(section0, t11);
			append(section0, p2);
			append(p2, t12);
			append(p2, code0);
			append(code0, t13);
			append(p2, t14);
			insert(target, t15, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t16);
			append(section1, table);
			append(table, tr0);
			append(tr0, th0);
			append(th0, t17);
			append(tr0, t18);
			append(tr0, th1);
			append(th1, t19);
			append(tr0, t20);
			append(tr0, th2);
			append(th2, t21);
			append(table, t22);
			append(table, tr1);
			append(tr1, td0);
			append(td0, code1);
			append(code1, t23);
			append(tr1, t24);
			append(tr1, td1);
			append(td1, t25);
			append(tr1, t26);
			append(tr1, td2);
			append(td2, p3);
			append(p3, t27);
			append(td2, t28);
			append(td2, ul0);
			append(ul0, li0);
			append(li0, code2);
			append(code2, t29);
			append(li0, t30);
			append(ul0, t31);
			append(ul0, li1);
			append(li1, code3);
			append(code3, t32);
			append(ul0, t33);
			append(ul0, li2);
			append(li2, code4);
			append(code4, t34);
			append(ul0, t35);
			append(ul0, li3);
			append(li3, code5);
			append(code5, t36);
			append(ul0, t37);
			append(ul0, li4);
			append(li4, code6);
			append(code6, t38);
			append(ul0, t39);
			append(ul0, li5);
			append(li5, code7);
			append(code7, t40);
			append(ul0, t41);
			append(ul0, li6);
			append(li6, code8);
			append(code8, t42);
			append(ul0, t43);
			append(ul0, li7);
			append(li7, code9);
			append(code9, t44);
			append(table, t45);
			append(table, tr2);
			append(tr2, td3);
			append(td3, code10);
			append(code10, t46);
			append(tr2, t47);
			append(tr2, td4);
			append(td4, t48);
			append(tr2, t49);
			append(tr2, td5);
			append(td5, p4);
			append(p4, t50);
			append(td5, t51);
			append(td5, ul1);
			append(ul1, li8);
			append(li8, code11);
			append(code11, t52);
			append(li8, t53);
			append(ul1, t54);
			append(ul1, li9);
			append(li9, code12);
			append(code12, t55);
			append(li9, t56);
			append(section1, t57);
			append(section1, p5);
			append(p5, t58);
			append(p5, a1);
			append(a1, t59);
			append(p5, t60);
			append(section1, t61);
			mount_component(cards, section1, null);
			append(section1, t62);
			append(section1, p6);
			append(p6, t63);
			append(p6, code13);
			append(code13, t64);
			append(p6, t65);
			append(section1, t66);
			mount_component(samplecode1, section1, null);
			insert(target, t67, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t68);
			append(section2, p7);
			append(p7, t69);
			append(p7, span);
			append(span, t70);
			append(p7, t71);
			append(section2, t72);
			mount_component(demo, section2, null);
			insert(target, t73, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t74);
			append(section3, ul2);
			append(ul2, li10);
			append(li10, t75);
			insert(target, t76, anchor);
			insert(target, section4, anchor);
			append(section4, div);
			mount_component(prevbutton, div, null);
			append(div, t77);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var cards_changes = {};
			if (changed.$$scope) cards_changes.$$scope = { changed, ctx };
			cards.$set(cards_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			cards.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			cards.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			if (detaching) {
				detach(t15);
				detach(section1);
			}

			heading1.$destroy();

			cards.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t67);
				detach(section2);
			}

			heading2.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t73);
				detach(section3);
			}

			heading3.$destroy();

			if (detaching) {
				detach(t76);
				detach(section4);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Tooltip plugin";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

function instance($$self) {
	

const _frameworks = [
    'Bootstrap', 'Bootstrap3', 'Bulma', 'Foundation', 'Materialize', 'Milligram', 'mini', 'MUI',
    'Pure', 'Semantic', 'Shoelace', 'Spectre', 'Tachyons', 'Turret', 'UIkit',
];

	return { _frameworks };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, r as noop } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';

/* src/routes/guide/examples/switching-validators-on-the-same-field/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/switching-validators-on-the-same-field/index.svelte";

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section, p0, t2, t3, p1, t4, a0, t5, t6, a1, t7, t8, t9, p2, t10, code, t11, t12, t13, t14, p3, t15, t16, div, t17, t18, t19, current;

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
const form = document.getElementById('demoForm');
const fv = FormValidation.formValidation(form, {
    fields: {
        yourId: {
            validators: {
                id: {
                    // The id validator is enabled by default
                    enabled: true,
                    country: 'BR',
                    message: 'Please enter a valid Brazilian ID number',
                },
                vat: {
                    // The vat validator is disabled initially
                    enabled: false,
                    country: 'BR',
                    message: 'Please enter a valid Brazilian VAT number',
                },
            },
        },
    },
});
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
form.querySelector('[name="yourId"]').addEventListener('keyup', function(e) {
    switch (e.target.value.length) {
        // User is trying to put a VAT number
        case 14:
            fv
                // Disable the id validator
                .disableValidator('yourId', 'id')
                // Enable the vat one
                .enableValidator('yourId', 'vat')
                // Revalidate field
                .revalidateField('yourId');
            break;

        // User is trying to put an ID number
        case 11:
        default:
            fv
                .enableValidator('yourId', 'id')
                .disableValidator('yourId', 'vat')
                .revalidateField('yourId');
            break;
    }
});
` },
		$$inline: true
	});

	var demo = new Demo({
		props: {
		prefix: "/guide/examples/switching-validators-on-the-same-field",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Enabling validators on the fly',
        'Switching validators on the same field',
    ] },
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['id', 'vat'] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Switching validators on the same field");
			t1 = space();
			section = element("section");
			p0 = element("p");
			t2 = text("In general, a field might have different validators. Based on various conditions, some of them can be turned on, and the remaining are turned off.");
			t3 = space();
			p1 = element("p");
			t4 = text("For instance, the following form asks user to fill in a number which must be a valid Brazilian ");
			a0 = element("a");
			t5 = text("ID");
			t6 = text(" (known as CPF) or ");
			a1 = element("a");
			t7 = text("VAT");
			t8 = text(" (known as CNPJ) number.\n            CPF and CNPJ numbers have 11 and 14 characters respectively.\n            Based on the length of input, we can guess which type of number user is trying to put in.");
			t9 = space();
			p2 = element("p");
			t10 = text("Firstly, use the ");
			code = element("code");
			t11 = text("enabled");
			t12 = text(" option to enable (disable) validators initially");
			t13 = space();
			samplecode0.$$.fragment.c();
			t14 = space();
			p3 = element("p");
			t15 = text("Lastly, turn on (off) the validators based on the length of field:");
			t16 = space();
			div = element("div");
			samplecode1.$$.fragment.c();
			t17 = space();
			demo.$$.fragment.c();
			t18 = space();
			examples.$$.fragment.c();
			t19 = space();
			relatedvalidators.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Switching validators on the same field");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    \n    ");

			section = claim_element(nodes, "SECTION", { class: true }, false);
			var section_nodes = children(section);

			p0 = claim_element(section_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "In general, a field might have different validators. Based on various conditions, some of them can be turned on, and the remaining are turned off.");
			p0_nodes.forEach(detach);
			t3 = claim_text(section_nodes, "\n        ");

			p1 = claim_element(section_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t4 = claim_text(p1_nodes, "For instance, the following form asks user to fill in a number which must be a valid Brazilian ");

			a0 = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t5 = claim_text(a0_nodes, "ID");
			a0_nodes.forEach(detach);
			t6 = claim_text(p1_nodes, " (known as CPF) or ");

			a1 = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t7 = claim_text(a1_nodes, "VAT");
			a1_nodes.forEach(detach);
			t8 = claim_text(p1_nodes, " (known as CNPJ) number.\n            CPF and CNPJ numbers have 11 and 14 characters respectively.\n            Based on the length of input, we can guess which type of number user is trying to put in.");
			p1_nodes.forEach(detach);
			t9 = claim_text(section_nodes, "\n        ");

			p2 = claim_element(section_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t10 = claim_text(p2_nodes, "Firstly, use the ");

			code = claim_element(p2_nodes, "CODE", {}, false);
			var code_nodes = children(code);

			t11 = claim_text(code_nodes, "enabled");
			code_nodes.forEach(detach);
			t12 = claim_text(p2_nodes, " option to enable (disable) validators initially");
			p2_nodes.forEach(detach);
			t13 = claim_text(section_nodes, "\n");
			samplecode0.$$.fragment.l(section_nodes);
			t14 = claim_text(section_nodes, "\n        ");

			p3 = claim_element(section_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t15 = claim_text(p3_nodes, "Lastly, turn on (off) the validators based on the length of field:");
			p3_nodes.forEach(detach);
			t16 = claim_text(section_nodes, "\n        ");

			div = claim_element(section_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			samplecode1.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			t17 = claim_text(section_nodes, "\n        ");
			demo.$$.fragment.l(section_nodes);
			section_nodes.forEach(detach);
			t18 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			t19 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 120);
			p0.className = "lh-copy";
			add_location(p0, file, 8, 8, 226);
			a0.href = "/guide/validators/id";
			a0.className = "blue dim link";
			add_location(a0, file, 9, 122, 518);
			a1.href = "/guide/validators/vat";
			a1.className = "blue dim link";
			add_location(a1, file, 9, 200, 596);
			p1.className = "lh-copy";
			add_location(p1, file, 9, 8, 404);
			add_location(code, file, 12, 44, 905);
			p2.className = "lh-copy";
			add_location(p2, file, 12, 8, 869);
			p3.className = "lh-copy";
			add_location(p3, file, 36, 8, 1720);
			div.className = "mb4";
			add_location(div, file, 37, 8, 1818);
			section.className = "mv5";
			add_location(section, file, 7, 4, 196);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section, anchor);
			append(section, p0);
			append(p0, t2);
			append(section, t3);
			append(section, p1);
			append(p1, t4);
			append(p1, a0);
			append(a0, t5);
			append(p1, t6);
			append(p1, a1);
			append(a1, t7);
			append(p1, t8);
			append(section, t9);
			append(section, p2);
			append(p2, t10);
			append(p2, code);
			append(code, t11);
			append(p2, t12);
			append(section, t13);
			mount_component(samplecode0, section, null);
			append(section, t14);
			append(section, p3);
			append(p3, t15);
			append(section, t16);
			append(section, div);
			mount_component(samplecode1, div, null);
			append(section, t17);
			mount_component(demo, section, null);
			insert(target, t18, anchor);
			mount_component(examples, target, anchor);
			insert(target, t19, anchor);
			mount_component(relatedvalidators, target, anchor);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			demo.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			demo.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section);
			}

			samplecode0.$destroy();

			samplecode1.$destroy();

			demo.$destroy();

			if (detaching) {
				detach(t18);
			}

			examples.$destroy(detaching);

			if (detaching) {
				detach(t19);
			}

			relatedvalidators.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Switching validators on the same field";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as ChangelogLayout } from './chunk.4a563e90.js';

/* src/routes/updates/v0.7.0/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/updates/v0.7.0/index.svelte";

// (10:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("New features");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "New features");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (72:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (96:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Improvements");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Improvements");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (109:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Bug fixes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Bug fixes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <ChangelogLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, p0, t5, t6, p1, t7, t8, t9, p2, t10, a0, t11, t12, t13, t14, section1, t15, p3, t16, t17, table, tr0, th0, t18, t19, th1, t20, t21, tr1, td0, t22, t23, td1, t24, t25, tr2, td2, t26, t27, td3, t28, t29, tr3, td4, t30, t31, td5, t32, t33, section2, t34, ul0, li0, a1, t35, t36, t37, li1, a2, t38, t39, a3, t40, t41, a4, t42, t43, code0, t44, t45, code1, t46, t47, code2, t48, t49, code3, t50, t51, t52, li2, a5, t53, t54, a6, t55, t56, t57, li3, t58, t59, li4, t60, a7, t61, t62, t63, li5, t64, a8, t65, t66, a9, t67, t68, code4, t69, t70, code5, t71, t72, code6, t73, t74, code7, t75, t76, t77, section3, t78, ul1, li6, t79, t80, li7, t81, code8, t82, t83, t84, li8, t85, code9, t86, t87, t88, li9, t89, code10, t90, t91, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
$(form).formValidation({
    framework: '...',
    fields: {
        username: {
            validators: {
                required: {
                    alias: 'notEmpty',
                    message: 'The username is required'
                }
            }
        }
    }
});
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
$(form).formValidation({
    framework: '...',
    fields: {
        password: {
            validators: {
                checkUppercase: {
                    alias: 'callback',
                    message: 'The password must have at least one uppercase character',
                    callback: function(value, validator, $field) {
                        ...
                    }
                },
                checkLowercase: {
                    alias: 'callback',
                    message: 'The password must have at least one lowercase character',
                    callback: function(value, validator, $field) {
                        ...
                    }
                },
                checkDigits: {
                    alias: 'callback',
                    message: 'The password must have at least one digit',
                    callback: function(value, validator, $field) {
                        ...
                    }
                },
                checkSpecial: {
                    alias: 'callback',
                    message: 'The password must have at least one special character',
                    callback: function(value, validator, $field) {
                        ...
                    }
                }
            }
        }
    }
});
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Version 0.7.0");
			t1 = space();
			h2 = element("h2");
			t2 = text("Released 01 August 2015");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			p0 = element("p");
			t5 = text("Allow to use multiple instance of validators via new alias option.");
			t6 = space();
			p1 = element("p");
			t7 = text("You can registry a new validator which is actually a built-in validator as following:");
			t8 = space();
			samplecode0.$$.fragment.c();
			t9 = space();
			p2 = element("p");
			t10 = text("or use multiple instance of same validators (for example, ");
			a0 = element("a");
			t11 = text("callback");
			t12 = text(", as following piece of code):");
			t13 = space();
			samplecode1.$$.fragment.c();
			t14 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t15 = space();
			p3 = element("p");
			t16 = text("Change the file name and definition of some language packages:");
			t17 = space();
			table = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t18 = text("Old");
			t19 = space();
			th1 = element("th");
			t20 = text("New");
			t21 = space();
			tr1 = element("tr");
			td0 = element("td");
			t22 = text("be_FR");
			t23 = space();
			td1 = element("td");
			t24 = text("fr_BE");
			t25 = space();
			tr2 = element("tr");
			td2 = element("td");
			t26 = text("be_NL");
			t27 = space();
			td3 = element("td");
			t28 = text("nl_BE");
			t29 = space();
			tr3 = element("tr");
			td4 = element("td");
			t30 = text("gr_EL");
			t31 = space();
			td5 = element("td");
			t32 = text("el_GR");
			t33 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t34 = space();
			ul0 = element("ul");
			li0 = element("li");
			a1 = element("a");
			t35 = text("integer");
			t36 = text(" validator accepts leading zeros");
			t37 = space();
			li1 = element("li");
			a2 = element("a");
			t38 = text("between");
			t39 = text(", ");
			a3 = element("a");
			t40 = text("greaterThan");
			t41 = text(", ");
			a4 = element("a");
			t42 = text("lessThan");
			t43 = text(" validators\n                now show the message where ");
			code0 = element("code");
			t44 = text("%s");
			t45 = text(" are replaced with the ");
			code1 = element("code");
			t46 = text("min");
			t47 = text(", ");
			code2 = element("code");
			t48 = text("max");
			t49 = text(", ");
			code3 = element("code");
			t50 = text("value");
			t51 = text(" options when the input isn't a number");
			t52 = space();
			li2 = element("li");
			a5 = element("a");
			t53 = text("integer");
			t54 = text(" and ");
			a6 = element("a");
			t55 = text("numeric");
			t56 = text(" validators support more locales by providing new thousands and decimal separator options");
			t57 = space();
			li3 = element("li");
			t58 = text("When using tooltip for multiple fields, it always shows on the last field");
			t59 = space();
			li4 = element("li");
			t60 = text("Adjust the default messages when using the ");
			a7 = element("a");
			t61 = text("stringLength");
			t62 = text(" validator");
			t63 = space();
			li5 = element("li");
			t64 = text("The Spanish ");
			a8 = element("a");
			t65 = text("id");
			t66 = text(", ");
			a9 = element("a");
			t67 = text("vat");
			t68 = text(" validators add ");
			code4 = element("code");
			t69 = text("type");
			t70 = text(" to the return value. The type can be ");
			code5 = element("code");
			t71 = text("DNI");
			t72 = text(", ");
			code6 = element("code");
			t73 = text("NIE");
			t74 = text(" or ");
			code7 = element("code");
			t75 = text("CIF");
			t76 = text(".");
			t77 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t78 = space();
			ul1 = element("ul");
			li6 = element("li");
			t79 = text("Fix an issue on IE 10/11 that causes an input element with placeholder attribute to be validated automatically when it's focused");
			t80 = space();
			li7 = element("li");
			t81 = text("Fix the bug that the ");
			code8 = element("code");
			t82 = text("isValidContainer()");
			t83 = text(" method doesn't ignore field which validators are totally disabled");
			t84 = space();
			li8 = element("li");
			t85 = text("The field's ");
			code9 = element("code");
			t86 = text("enabled");
			t87 = text(" option doesn't work in declarative mode");
			t88 = space();
			li9 = element("li");
			t89 = text("Fix the bug causing the ");
			code10 = element("code");
			t90 = text("message");
			t91 = text(" option for form isn't used. The plugin uses default message provided by each validator instead");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Version 0.7.0");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Released 01 August 2015");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t5 = claim_text(p0_nodes, "Allow to use multiple instance of validators via new alias option.");
			p0_nodes.forEach(detach);
			t6 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t7 = claim_text(p1_nodes, "You can registry a new validator which is actually a built-in validator as following:");
			p1_nodes.forEach(detach);
			t8 = claim_text(section0_nodes, "\n        ");
			samplecode0.$$.fragment.l(section0_nodes);
			t9 = claim_text(section0_nodes, "\n\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t10 = claim_text(p2_nodes, "or use multiple instance of same validators (for example, ");

			a0 = claim_element(p2_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t11 = claim_text(a0_nodes, "callback");
			a0_nodes.forEach(detach);
			t12 = claim_text(p2_nodes, ", as following piece of code):");
			p2_nodes.forEach(detach);
			t13 = claim_text(section0_nodes, "\n        ");
			samplecode1.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t14 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t15 = claim_text(section1_nodes, "\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t16 = claim_text(p3_nodes, "Change the file name and definition of some language packages:");
			p3_nodes.forEach(detach);
			t17 = claim_text(section1_nodes, "\n\n        ");

			table = claim_element(section1_nodes, "TABLE", { class: true }, false);
			var table_nodes = children(table);

			tr0 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t18 = claim_text(th0_nodes, "Old");
			th0_nodes.forEach(detach);
			t19 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t20 = claim_text(th1_nodes, "New");
			th1_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t21 = claim_text(table_nodes, "\n            ");

			tr1 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			t22 = claim_text(td0_nodes, "be_FR");
			td0_nodes.forEach(detach);
			t23 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			t24 = claim_text(td1_nodes, "fr_BE");
			td1_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t25 = claim_text(table_nodes, "\n            ");

			tr2 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td2 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			t26 = claim_text(td2_nodes, "be_NL");
			td2_nodes.forEach(detach);
			t27 = claim_text(tr2_nodes, "\n                ");

			td3 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			t28 = claim_text(td3_nodes, "nl_BE");
			td3_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t29 = claim_text(table_nodes, "\n            ");

			tr3 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td4 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			t30 = claim_text(td4_nodes, "gr_EL");
			td4_nodes.forEach(detach);
			t31 = claim_text(tr3_nodes, "\n                ");

			td5 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			t32 = claim_text(td5_nodes, "el_GR");
			td5_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			table_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t33 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t34 = claim_text(section2_nodes, "\n        ");

			ul0 = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			a1 = claim_element(li0_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t35 = claim_text(a1_nodes, "integer");
			a1_nodes.forEach(detach);
			t36 = claim_text(li0_nodes, " validator accepts leading zeros");
			li0_nodes.forEach(detach);
			t37 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			a2 = claim_element(li1_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t38 = claim_text(a2_nodes, "between");
			a2_nodes.forEach(detach);
			t39 = claim_text(li1_nodes, ", ");

			a3 = claim_element(li1_nodes, "A", { href: true }, false);
			var a3_nodes = children(a3);

			t40 = claim_text(a3_nodes, "greaterThan");
			a3_nodes.forEach(detach);
			t41 = claim_text(li1_nodes, ", ");

			a4 = claim_element(li1_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t42 = claim_text(a4_nodes, "lessThan");
			a4_nodes.forEach(detach);
			t43 = claim_text(li1_nodes, " validators\n                now show the message where ");

			code0 = claim_element(li1_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t44 = claim_text(code0_nodes, "%s");
			code0_nodes.forEach(detach);
			t45 = claim_text(li1_nodes, " are replaced with the ");

			code1 = claim_element(li1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t46 = claim_text(code1_nodes, "min");
			code1_nodes.forEach(detach);
			t47 = claim_text(li1_nodes, ", ");

			code2 = claim_element(li1_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t48 = claim_text(code2_nodes, "max");
			code2_nodes.forEach(detach);
			t49 = claim_text(li1_nodes, ", ");

			code3 = claim_element(li1_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t50 = claim_text(code3_nodes, "value");
			code3_nodes.forEach(detach);
			t51 = claim_text(li1_nodes, " options when the input isn't a number");
			li1_nodes.forEach(detach);
			t52 = claim_text(ul0_nodes, "\n            ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			a5 = claim_element(li2_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t53 = claim_text(a5_nodes, "integer");
			a5_nodes.forEach(detach);
			t54 = claim_text(li2_nodes, " and ");

			a6 = claim_element(li2_nodes, "A", { href: true, class: true }, false);
			var a6_nodes = children(a6);

			t55 = claim_text(a6_nodes, "numeric");
			a6_nodes.forEach(detach);
			t56 = claim_text(li2_nodes, " validators support more locales by providing new thousands and decimal separator options");
			li2_nodes.forEach(detach);
			t57 = claim_text(ul0_nodes, "\n            ");

			li3 = claim_element(ul0_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t58 = claim_text(li3_nodes, "When using tooltip for multiple fields, it always shows on the last field");
			li3_nodes.forEach(detach);
			t59 = claim_text(ul0_nodes, "\n            ");

			li4 = claim_element(ul0_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			t60 = claim_text(li4_nodes, "Adjust the default messages when using the ");

			a7 = claim_element(li4_nodes, "A", { href: true, class: true }, false);
			var a7_nodes = children(a7);

			t61 = claim_text(a7_nodes, "stringLength");
			a7_nodes.forEach(detach);
			t62 = claim_text(li4_nodes, " validator");
			li4_nodes.forEach(detach);
			t63 = claim_text(ul0_nodes, "\n            ");

			li5 = claim_element(ul0_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			t64 = claim_text(li5_nodes, "The Spanish ");

			a8 = claim_element(li5_nodes, "A", { href: true, class: true }, false);
			var a8_nodes = children(a8);

			t65 = claim_text(a8_nodes, "id");
			a8_nodes.forEach(detach);
			t66 = claim_text(li5_nodes, ", ");

			a9 = claim_element(li5_nodes, "A", { href: true, class: true }, false);
			var a9_nodes = children(a9);

			t67 = claim_text(a9_nodes, "vat");
			a9_nodes.forEach(detach);
			t68 = claim_text(li5_nodes, " validators add ");

			code4 = claim_element(li5_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t69 = claim_text(code4_nodes, "type");
			code4_nodes.forEach(detach);
			t70 = claim_text(li5_nodes, " to the return value. The type can be ");

			code5 = claim_element(li5_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t71 = claim_text(code5_nodes, "DNI");
			code5_nodes.forEach(detach);
			t72 = claim_text(li5_nodes, ", ");

			code6 = claim_element(li5_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t73 = claim_text(code6_nodes, "NIE");
			code6_nodes.forEach(detach);
			t74 = claim_text(li5_nodes, " or ");

			code7 = claim_element(li5_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t75 = claim_text(code7_nodes, "CIF");
			code7_nodes.forEach(detach);
			t76 = claim_text(li5_nodes, ".");
			li5_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			t77 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t78 = claim_text(section3_nodes, "\n        ");

			ul1 = claim_element(section3_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li6 = claim_element(ul1_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			t79 = claim_text(li6_nodes, "Fix an issue on IE 10/11 that causes an input element with placeholder attribute to be validated automatically when it's focused");
			li6_nodes.forEach(detach);
			t80 = claim_text(ul1_nodes, "\n            ");

			li7 = claim_element(ul1_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			t81 = claim_text(li7_nodes, "Fix the bug that the ");

			code8 = claim_element(li7_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t82 = claim_text(code8_nodes, "isValidContainer()");
			code8_nodes.forEach(detach);
			t83 = claim_text(li7_nodes, " method doesn't ignore field which validators are totally disabled");
			li7_nodes.forEach(detach);
			t84 = claim_text(ul1_nodes, "\n            ");

			li8 = claim_element(ul1_nodes, "LI", {}, false);
			var li8_nodes = children(li8);

			t85 = claim_text(li8_nodes, "The field's ");

			code9 = claim_element(li8_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t86 = claim_text(code9_nodes, "enabled");
			code9_nodes.forEach(detach);
			t87 = claim_text(li8_nodes, " option doesn't work in declarative mode");
			li8_nodes.forEach(detach);
			t88 = claim_text(ul1_nodes, "\n            ");

			li9 = claim_element(ul1_nodes, "LI", {}, false);
			var li9_nodes = children(li9);

			t89 = claim_text(li9_nodes, "Fix the bug causing the ");

			code10 = claim_element(li9_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t90 = claim_text(code10_nodes, "message");
			code10_nodes.forEach(detach);
			t91 = claim_text(li9_nodes, " option for form isn't used. The plugin uses default message provided by each validator instead");
			li9_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 92);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 143);
			p0.className = "lh-copy";
			add_location(p0, file, 10, 8, 269);
			p1.className = "lh-copy";
			add_location(p1, file, 11, 8, 367);
			a0.href = "/guide/validators/callback";
			a0.className = "blue dim link";
			add_location(a0, file, 28, 85, 896);
			p2.className = "lh-copy";
			add_location(p2, file, 28, 8, 819);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 199);
			p3.className = "lh-copy";
			add_location(p3, file, 72, 8, 2446);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 76, 16, 2654);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 77, 16, 2713);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 75, 12, 2605);
			td0.className = "pv2 ph3";
			add_location(td0, file, 80, 16, 2835);
			td1.className = "pv2 ph3";
			add_location(td1, file, 81, 16, 2882);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 79, 12, 2786);
			td2.className = "pv2 ph3";
			add_location(td2, file, 84, 16, 2992);
			td3.className = "pv2 ph3";
			add_location(td3, file, 85, 16, 3039);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 83, 12, 2943);
			td4.className = "pv2 ph3";
			add_location(td4, file, 88, 16, 3149);
			td5.className = "pv2 ph3";
			add_location(td5, file, 89, 16, 3196);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 87, 12, 3100);
			table.className = "collapse ba br2 b--black-10 pv2 ph3";
			add_location(table, file, 74, 8, 2541);
			section1.className = "mv5";
			add_location(section1, file, 70, 4, 2381);
			a1.href = "/guide/validators/integer";
			a1.className = "blue dim link";
			add_location(a1, file, 97, 16, 3401);
			add_location(li0, file, 97, 12, 3397);
			a2.href = "/guide/validators/between";
			a2.className = "blue dim link";
			add_location(a2, file, 98, 16, 3524);
			a3.href = "/guide/validators/greater-than/";
			add_location(a3, file, 98, 87, 3595);
			a4.href = "/guide/validators/less-than";
			a4.className = "blue dim link";
			add_location(a4, file, 98, 146, 3654);
			add_location(code0, file, 99, 43, 3781);
			add_location(code1, file, 99, 81, 3819);
			add_location(code2, file, 99, 99, 3837);
			add_location(code3, file, 99, 117, 3855);
			add_location(li1, file, 98, 12, 3520);
			a5.href = "/guide/validators/integer";
			a5.className = "blue dim link";
			add_location(a5, file, 100, 16, 3933);
			a6.href = "/guide/validators/numeric";
			a6.className = "blue dim link";
			add_location(a6, file, 100, 90, 4007);
			add_location(li2, file, 100, 12, 3929);
			add_location(li3, file, 101, 12, 4183);
			a7.href = "/guide/validators/string-length";
			a7.className = "blue dim link";
			add_location(a7, file, 102, 59, 4325);
			add_location(li4, file, 102, 12, 4278);
			a8.href = "/guide/validators/id";
			a8.className = "blue dim link";
			add_location(a8, file, 103, 28, 4449);
			a9.href = "/guide/validators/vat";
			a9.className = "blue dim link";
			add_location(a9, file, 103, 89, 4510);
			add_location(code4, file, 103, 166, 4587);
			add_location(code5, file, 103, 221, 4642);
			add_location(code6, file, 103, 239, 4660);
			add_location(code7, file, 103, 259, 4680);
			add_location(li5, file, 103, 12, 4433);
			ul0.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul0, file, 96, 8, 3352);
			section2.className = "mv5";
			add_location(section2, file, 94, 4, 3282);
			add_location(li6, file, 110, 12, 4849);
			add_location(code8, file, 111, 37, 5024);
			add_location(li7, file, 111, 12, 4999);
			add_location(code9, file, 112, 28, 5155);
			add_location(li8, file, 112, 12, 5139);
			add_location(code10, file, 113, 40, 5261);
			add_location(li9, file, 113, 12, 5233);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 109, 8, 4804);
			section3.className = "mv5";
			add_location(section3, file, 107, 4, 4737);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, p0);
			append(p0, t5);
			append(section0, t6);
			append(section0, p1);
			append(p1, t7);
			append(section0, t8);
			mount_component(samplecode0, section0, null);
			append(section0, t9);
			append(section0, p2);
			append(p2, t10);
			append(p2, a0);
			append(a0, t11);
			append(p2, t12);
			append(section0, t13);
			mount_component(samplecode1, section0, null);
			insert(target, t14, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t15);
			append(section1, p3);
			append(p3, t16);
			append(section1, t17);
			append(section1, table);
			append(table, tr0);
			append(tr0, th0);
			append(th0, t18);
			append(tr0, t19);
			append(tr0, th1);
			append(th1, t20);
			append(table, t21);
			append(table, tr1);
			append(tr1, td0);
			append(td0, t22);
			append(tr1, t23);
			append(tr1, td1);
			append(td1, t24);
			append(table, t25);
			append(table, tr2);
			append(tr2, td2);
			append(td2, t26);
			append(tr2, t27);
			append(tr2, td3);
			append(td3, t28);
			append(table, t29);
			append(table, tr3);
			append(tr3, td4);
			append(td4, t30);
			append(tr3, t31);
			append(tr3, td5);
			append(td5, t32);
			insert(target, t33, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t34);
			append(section2, ul0);
			append(ul0, li0);
			append(li0, a1);
			append(a1, t35);
			append(li0, t36);
			append(ul0, t37);
			append(ul0, li1);
			append(li1, a2);
			append(a2, t38);
			append(li1, t39);
			append(li1, a3);
			append(a3, t40);
			append(li1, t41);
			append(li1, a4);
			append(a4, t42);
			append(li1, t43);
			append(li1, code0);
			append(code0, t44);
			append(li1, t45);
			append(li1, code1);
			append(code1, t46);
			append(li1, t47);
			append(li1, code2);
			append(code2, t48);
			append(li1, t49);
			append(li1, code3);
			append(code3, t50);
			append(li1, t51);
			append(ul0, t52);
			append(ul0, li2);
			append(li2, a5);
			append(a5, t53);
			append(li2, t54);
			append(li2, a6);
			append(a6, t55);
			append(li2, t56);
			append(ul0, t57);
			append(ul0, li3);
			append(li3, t58);
			append(ul0, t59);
			append(ul0, li4);
			append(li4, t60);
			append(li4, a7);
			append(a7, t61);
			append(li4, t62);
			append(ul0, t63);
			append(ul0, li5);
			append(li5, t64);
			append(li5, a8);
			append(a8, t65);
			append(li5, t66);
			append(li5, a9);
			append(a9, t67);
			append(li5, t68);
			append(li5, code4);
			append(code4, t69);
			append(li5, t70);
			append(li5, code5);
			append(code5, t71);
			append(li5, t72);
			append(li5, code6);
			append(code6, t73);
			append(li5, t74);
			append(li5, code7);
			append(code7, t75);
			append(li5, t76);
			insert(target, t77, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t78);
			append(section3, ul1);
			append(ul1, li6);
			append(li6, t79);
			append(ul1, t80);
			append(ul1, li7);
			append(li7, t81);
			append(li7, code8);
			append(code8, t82);
			append(li7, t83);
			append(ul1, t84);
			append(ul1, li8);
			append(li8, t85);
			append(li8, code9);
			append(code9, t86);
			append(li8, t87);
			append(ul1, t88);
			append(ul1, li9);
			append(li9, t89);
			append(li9, code10);
			append(code10, t90);
			append(li9, t91);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t14);
				detach(section1);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t33);
				detach(section2);
			}

			heading2.$destroy();

			if (detaching) {
				detach(t77);
				detach(section3);
			}

			heading3.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var changeloglayout = new ChangelogLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			changeloglayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			changeloglayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • v0.7.0";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(changeloglayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var changeloglayout_changes = {};
			if (changed.$$scope) changeloglayout_changes.$$scope = { changed, ctx };
			changeloglayout.$set(changeloglayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			changeloglayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			changeloglayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			changeloglayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';

/* src/routes/guide/api/update-element-status/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/api/update-element-status/index.svelte";

// (30:12) <PrevButton target="/guide/api/set-locale">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("setLocale() method");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "setLocale() method");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (31:12) <NextButton target="/guide/api/update-field-status">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("updateFieldStatus() method");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "updateFieldStatus() method");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, div0, t4, p, sup0, t5, t6, t7, ul1, li0, code0, t8, t9, sup1, t10, t11, t12, li1, code1, t13, t14, sup2, t15, t16, t17, li5, code2, t18, t19, sup3, t20, t21, ul0, li2, code3, t22, t23, code4, t24, t25, t26, li3, code5, t27, t28, code6, t29, t30, t31, li4, code7, t32, t33, code8, t34, t35, t36, li6, code9, t37, t38, t39, section1, div1, t40, current;

	var samplecode = new SampleCode({
		props: { lang: "javascript", code: `updateElementStatus(field: String, ele: HTMLElement, status: String, validator: String): Core` },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/api/set-locale",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/api/update-field-status",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("updateElementStatus()");
			t1 = space();
			h2 = element("h2");
			t2 = text("Update the element status");
			t3 = space();
			section0 = element("section");
			div0 = element("div");
			samplecode.$$.fragment.c();
			t4 = space();
			p = element("p");
			sup0 = element("sup");
			t5 = text("*");
			t6 = text(" presents a required parameter");
			t7 = space();
			ul1 = element("ul");
			li0 = element("li");
			code0 = element("code");
			t8 = text("field");
			t9 = space();
			sup1 = element("sup");
			t10 = text("*");
			t11 = text(" — The field name");
			t12 = space();
			li1 = element("li");
			code1 = element("code");
			t13 = text("ele");
			t14 = space();
			sup2 = element("sup");
			t15 = text("*");
			t16 = text(" — The field element");
			t17 = space();
			li5 = element("li");
			code2 = element("code");
			t18 = text("status");
			t19 = space();
			sup3 = element("sup");
			t20 = text("*");
			t21 = text(" — The new status. It can be one of the following value\n                ");
			ul0 = element("ul");
			li2 = element("li");
			code3 = element("code");
			t22 = text("'NotValidated'");
			t23 = text(" or ");
			code4 = element("code");
			t24 = text("FormValidation.Status.NotValidated");
			t25 = text(": The field is not yet validated");
			t26 = space();
			li3 = element("li");
			code5 = element("code");
			t27 = text("'Valid'");
			t28 = text(" or ");
			code6 = element("code");
			t29 = text("FormValidation.Status.Valid");
			t30 = text(": The field is valid");
			t31 = space();
			li4 = element("li");
			code7 = element("code");
			t32 = text("'Invalid'");
			t33 = text(" or ");
			code8 = element("code");
			t34 = text("FormValidation.Status.Invalid");
			t35 = text(": The field is invalid");
			t36 = space();
			li6 = element("li");
			code9 = element("code");
			t37 = text("validator");
			t38 = text(" — The validator name. If it isn't specified, all validators will be updated");
			t39 = space();
			section1 = element("section");
			div1 = element("div");
			prevbutton.$$.fragment.c();
			t40 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "updateElementStatus()");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Update the element status");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			div0 = claim_element(section0_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			samplecode.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach);
			t4 = claim_text(section0_nodes, "\n        ");

			p = claim_element(section0_nodes, "P", { class: true }, false);
			var p_nodes = children(p);

			sup0 = claim_element(p_nodes, "SUP", {}, false);
			var sup0_nodes = children(sup0);

			t5 = claim_text(sup0_nodes, "*");
			sup0_nodes.forEach(detach);
			t6 = claim_text(p_nodes, " presents a required parameter");
			p_nodes.forEach(detach);
			t7 = claim_text(section0_nodes, "\n        ");

			ul1 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li0 = claim_element(ul1_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			code0 = claim_element(li0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t8 = claim_text(code0_nodes, "field");
			code0_nodes.forEach(detach);
			t9 = claim_text(li0_nodes, " ");

			sup1 = claim_element(li0_nodes, "SUP", {}, false);
			var sup1_nodes = children(sup1);

			t10 = claim_text(sup1_nodes, "*");
			sup1_nodes.forEach(detach);
			t11 = claim_text(li0_nodes, " — The field name");
			li0_nodes.forEach(detach);
			t12 = claim_text(ul1_nodes, "\n            ");

			li1 = claim_element(ul1_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			code1 = claim_element(li1_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t13 = claim_text(code1_nodes, "ele");
			code1_nodes.forEach(detach);
			t14 = claim_text(li1_nodes, " ");

			sup2 = claim_element(li1_nodes, "SUP", {}, false);
			var sup2_nodes = children(sup2);

			t15 = claim_text(sup2_nodes, "*");
			sup2_nodes.forEach(detach);
			t16 = claim_text(li1_nodes, " — The field element");
			li1_nodes.forEach(detach);
			t17 = claim_text(ul1_nodes, "\n            ");

			li5 = claim_element(ul1_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			code2 = claim_element(li5_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t18 = claim_text(code2_nodes, "status");
			code2_nodes.forEach(detach);
			t19 = claim_text(li5_nodes, " ");

			sup3 = claim_element(li5_nodes, "SUP", {}, false);
			var sup3_nodes = children(sup3);

			t20 = claim_text(sup3_nodes, "*");
			sup3_nodes.forEach(detach);
			t21 = claim_text(li5_nodes, " — The new status. It can be one of the following value\n                ");

			ul0 = claim_element(li5_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			code3 = claim_element(li2_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t22 = claim_text(code3_nodes, "'NotValidated'");
			code3_nodes.forEach(detach);
			t23 = claim_text(li2_nodes, " or ");

			code4 = claim_element(li2_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t24 = claim_text(code4_nodes, "FormValidation.Status.NotValidated");
			code4_nodes.forEach(detach);
			t25 = claim_text(li2_nodes, ": The field is not yet validated");
			li2_nodes.forEach(detach);
			t26 = claim_text(ul0_nodes, "\n                    ");

			li3 = claim_element(ul0_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			code5 = claim_element(li3_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t27 = claim_text(code5_nodes, "'Valid'");
			code5_nodes.forEach(detach);
			t28 = claim_text(li3_nodes, " or ");

			code6 = claim_element(li3_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t29 = claim_text(code6_nodes, "FormValidation.Status.Valid");
			code6_nodes.forEach(detach);
			t30 = claim_text(li3_nodes, ": The field is valid");
			li3_nodes.forEach(detach);
			t31 = claim_text(ul0_nodes, "\n                    ");

			li4 = claim_element(ul0_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			code7 = claim_element(li4_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t32 = claim_text(code7_nodes, "'Invalid'");
			code7_nodes.forEach(detach);
			t33 = claim_text(li4_nodes, " or ");

			code8 = claim_element(li4_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t34 = claim_text(code8_nodes, "FormValidation.Status.Invalid");
			code8_nodes.forEach(detach);
			t35 = claim_text(li4_nodes, ": The field is invalid");
			li4_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			li5_nodes.forEach(detach);
			t36 = claim_text(ul1_nodes, "\n            ");

			li6 = claim_element(ul1_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			code9 = claim_element(li6_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t37 = claim_text(code9_nodes, "validator");
			code9_nodes.forEach(detach);
			t38 = claim_text(li6_nodes, " — The validator name. If it isn't specified, all validators will be updated");
			li6_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t39 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			div1 = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			prevbutton.$$.fragment.l(div1_nodes);
			t40 = claim_text(div1_nodes, "\n            ");
			nextbutton.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 110);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 169);
			div0.className = "mb3";
			add_location(div0, file, 9, 8, 257);
			add_location(sup0, file, 12, 29, 467);
			p.className = "lh-copy i";
			add_location(p, file, 12, 8, 446);
			add_location(code0, file, 14, 16, 567);
			add_location(sup1, file, 14, 35, 586);
			add_location(li0, file, 14, 12, 563);
			add_location(code1, file, 15, 16, 637);
			add_location(sup2, file, 15, 33, 654);
			add_location(li1, file, 15, 12, 633);
			add_location(code2, file, 16, 16, 708);
			add_location(sup3, file, 16, 36, 728);
			add_location(code3, file, 18, 24, 865);
			add_location(code4, file, 18, 55, 896);
			add_location(li2, file, 18, 20, 861);
			add_location(code5, file, 19, 24, 1005);
			add_location(code6, file, 19, 48, 1029);
			add_location(li3, file, 19, 20, 1001);
			add_location(code7, file, 20, 24, 1119);
			add_location(code8, file, 20, 50, 1145);
			add_location(li4, file, 20, 20, 1115);
			ul0.className = "ma0 pl3 lh-copy";
			add_location(ul0, file, 17, 16, 812);
			add_location(li5, file, 16, 12, 704);
			add_location(code9, file, 23, 16, 1271);
			add_location(li6, file, 23, 12, 1267);
			ul1.className = "ma0 pl3 lh-copy";
			add_location(ul1, file, 13, 8, 522);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 227);
			div1.className = "flex";
			add_location(div1, file, 28, 8, 1439);
			section1.className = "mv5";
			add_location(section1, file, 27, 4, 1409);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			append(section0, div0);
			mount_component(samplecode, div0, null);
			append(section0, t4);
			append(section0, p);
			append(p, sup0);
			append(sup0, t5);
			append(p, t6);
			append(section0, t7);
			append(section0, ul1);
			append(ul1, li0);
			append(li0, code0);
			append(code0, t8);
			append(li0, t9);
			append(li0, sup1);
			append(sup1, t10);
			append(li0, t11);
			append(ul1, t12);
			append(ul1, li1);
			append(li1, code1);
			append(code1, t13);
			append(li1, t14);
			append(li1, sup2);
			append(sup2, t15);
			append(li1, t16);
			append(ul1, t17);
			append(ul1, li5);
			append(li5, code2);
			append(code2, t18);
			append(li5, t19);
			append(li5, sup3);
			append(sup3, t20);
			append(li5, t21);
			append(li5, ul0);
			append(ul0, li2);
			append(li2, code3);
			append(code3, t22);
			append(li2, t23);
			append(li2, code4);
			append(code4, t24);
			append(li2, t25);
			append(ul0, t26);
			append(ul0, li3);
			append(li3, code5);
			append(code5, t27);
			append(li3, t28);
			append(li3, code6);
			append(code6, t29);
			append(li3, t30);
			append(ul0, t31);
			append(ul0, li4);
			append(li4, code7);
			append(code7, t32);
			append(li4, t33);
			append(li4, code8);
			append(code8, t34);
			append(li4, t35);
			append(ul1, t36);
			append(ul1, li6);
			append(li6, code9);
			append(code9, t37);
			append(li6, t38);
			insert(target, t39, anchor);
			insert(target, section1, anchor);
			append(section1, div1);
			mount_component(prevbutton, div1, null);
			append(div1, t40);
			mount_component(nextbutton, div1, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			samplecode.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			samplecode.$destroy();

			if (detaching) {
				detach(t39);
				detach(section1);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • updateElementStatus() method";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';
import { a as PrevButton } from './chunk.01d914ec.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';

/* src/routes/guide/plugins/transformer/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/plugins/transformer/index.svelte";

// (10:8) <Heading>
function create_default_slot_8(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Usage");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Usage");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (71:8) <Heading>
function create_default_slot_7(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Using with uri validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Using with uri validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (100:8) <Heading>
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Using with numeric validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Using with numeric validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (121:8) <Heading>
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Using with phone validator");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Using with phone validator");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (150:8) <Heading>
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Using with WYSIWYG editors");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Using with WYSIWYG editors");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (171:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Changelog");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Changelog");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (184:12) <PrevButton target="/guide/plugins/tooltip">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Tooltip plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Tooltip plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (185:12) <NextButton target="/guide/plugins/trigger">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Trigger plugin");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Trigger plugin");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, p0, t5, code0, t6, t7, a0, t8, t9, t10, p1, t11, t12, t13, p2, t14, code1, t15, t16, t17, p3, t18, t19, p4, t20, t21, section1, t22, p5, t23, span0, t24, t25, span1, t26, t27, t28, p6, t29, a1, t30, t31, t32, div0, t33, t34, section2, t35, p7, t36, a2, t37, t38, span2, t39, t40, span3, t41, t42, div1, t43, t44, section3, t45, p8, t46, a3, t47, t48, t49, p9, t50, t51, p10, t52, t53, div2, t54, t55, section4, t56, p11, t57, t58, p12, t59, a4, t60, t61, a5, t62, t63, t64, p13, t65, a6, t66, t67, t68, div3, t69, t70, section5, t71, ul, li, t72, t73, t74, section6, div4, t75, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_8] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<html>
<head>
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="demoForm" method="POST">
        ...
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>    
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/plugins/Transformer.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                transformer: new FormValidation.plugins.Transformer({
                    // Replace FIELD_NAME and VALIDATOR_NAME with the real names
                    FIELD_NAME: {
                        VALIDATOR_NAME: function(field, element, validator) {
                            // field is the field name
                            // element is the field element
                            // validator is the name of validator

                            // Get the field value
                            let value = element.value;
        
                            // Modify the field value
                            // ...
                            
                            // Returns a string which will be used as field value to be validated
                            return value;
                        }
                    }
                }),
                ...
            },
        }
    );
});
</script-tag>
</body>
</html>
` },
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
transformer: new FormValidation.plugins.Transformer({
    website: {
        // I want to modify the website field before executing uri validator
        uri: function(field, element, validator) {
            // Get the field value
            let value = element.value;

            // Check if it does not start with http:// or https://
            if (value && value.substr(0, 7) !== 'http://' && value.substr(0, 8) !== 'https://') {
                // then prefix with http://
                value = 'http://' + value;
            }

            // Return new value
            return value;
        },
    },
}),
` },
		$$inline: true
	});

	var demo0 = new Demo({
		props: {
		prefix: "/guide/plugins/transformer/uri",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode2 = new SampleCode({
		props: { lang: "javascript", code: `
transformer: new FormValidation.plugins.Transformer({
    price: {
        numeric: (field, element, validator) => {
            // Get the field value
            const value = element.value;

            // Replace all commas by empty space
            return value.replace(',', '');
        },
    },
}),
` },
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/plugins/transformer/numeric",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading3 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode3 = new SampleCode({
		props: { lang: "javascript", code: `
transformer: new FormValidation.plugins.Transformer({
    phoneNumber: {
        phone: function(field, element, validator) {
            // Get the field value
            const value = element.value;

            // Check if the value has format of XXX   XXX   XXXX
            if (/^(\d){3}(\s+)(\d){3}(\s+)(\d){4}$/.test(value)) {
                // Remove all spaces
                return value.replace(/\s/g, '');
            } else {
                // Otherwise, return the original value
                return value;
            }
        },
    },
}),
` },
		$$inline: true
	});

	var demo2 = new Demo({
		props: {
		prefix: "/guide/plugins/transformer/phone",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading4 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode4 = new SampleCode({
		props: { lang: "javascript", code: `
transformer: new FormValidation.plugins.Transformer({
    comment: {
        stringLength: function(field, element, validator) {
            // Get the plain text without HTML
            return tinyMCE.activeEditor.getContent({ format: 'text' });
        },
    },
}),
` },
		$$inline: true
	});

	var demo3 = new Demo({
		props: {
		prefix: "/guide/plugins/transformer/tinymce",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading5 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Integrating with TinyMCE',
        'Trimming a value',
    ] },
		$$inline: true
	});

	var prevbutton = new PrevButton({
		props: {
		target: "/guide/plugins/tooltip",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/plugins/trigger",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Transformer plugin");
			t1 = space();
			h2 = element("h2");
			t2 = text("Modify the field value before doing validation");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			p0 = element("p");
			t5 = text("By default, the value of field will be taken by using the ");
			code0 = element("code");
			t6 = text("value");
			t7 = text(" property. In some case, you might want to adjust the value before performing validations.\n            For example, the ");
			a0 = element("a");
			t8 = text("numeric");
			t9 = text(" validator doesn't allow to use a comma (,) for thousand separator.");
			t10 = space();
			p1 = element("p");
			t11 = text("The Transformer plugin allows to filter the value of field. The following piece of code is the starting point to use the Transformer plugin:");
			t12 = space();
			samplecode0.$$.fragment.c();
			t13 = space();
			p2 = element("p");
			t14 = text("The sample code above assumes that the FormValidation files are placed inside the ");
			code1 = element("code");
			t15 = text("vendors");
			t16 = text(" directory. You might need to change the path depending on where you place them on the server.");
			t17 = space();
			p3 = element("p");
			t18 = text("FormValidation only uses the value returned by the Transformer plugin for validating. It does NOT send the modified value to the server when submitting the form.");
			t19 = space();
			p4 = element("p");
			t20 = text("The next sections introduce some examples demonstrating how to apply this option for popular validators.");
			t21 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t22 = space();
			p5 = element("p");
			t23 = text("The following form accepts a website address without ");
			span0 = element("span");
			t24 = text("http://");
			t25 = text(" or ");
			span1 = element("span");
			t26 = text("https://");
			t27 = text(" prefix.");
			t28 = space();
			p6 = element("p");
			t29 = text("By default, these kind of URLs don't pass the ");
			a1 = element("a");
			t30 = text("uri");
			t31 = text(" validators. Using the Transformer plugin for the uri validator, we can make it pass.");
			t32 = space();
			div0 = element("div");
			samplecode1.$$.fragment.c();
			t33 = space();
			demo0.$$.fragment.c();
			t34 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t35 = space();
			p7 = element("p");
			t36 = text("By default, the ");
			a2 = element("a");
			t37 = text("numeric");
			t38 = text(" validator doesn't accept the comma. In the form below, the ");
			span2 = element("span");
			t39 = text("Price");
			t40 = text(" field now accepts value using comma for thousand separator, such as ");
			span3 = element("span");
			t41 = text("12,570.634");
			t42 = space();
			div1 = element("div");
			samplecode2.$$.fragment.c();
			t43 = space();
			demo1.$$.fragment.c();
			t44 = space();
			section3 = element("section");
			heading3.$$.fragment.c();
			t45 = space();
			p8 = element("p");
			t46 = text("The ");
			a3 = element("a");
			t47 = text("phone");
			t48 = text(" validator supports phone number in various countries. Despite the fact that it try to support many possible formats of a phone number, it can't cover all or special one which you want it to be a valid phone number.");
			t49 = space();
			p9 = element("p");
			t50 = text("For instance, a number containing the spaces such as XXX    XXX   XXXX (where X presents a digit from 0-9) is treated as invalid US phone number.");
			t51 = space();
			p10 = element("p");
			t52 = text("By using the Transformer plugin, we can turn this kind of number into a valid one by removing all spaces.");
			t53 = space();
			div2 = element("div");
			samplecode3.$$.fragment.c();
			t54 = space();
			demo2.$$.fragment.c();
			t55 = space();
			section4 = element("section");
			heading4.$$.fragment.c();
			t56 = space();
			p11 = element("p");
			t57 = text("WYSIWYG stands for What You See Is What You Get. A WYSIWYG editor provides a visual way to edit the content of input which mostly is a textarea element.");
			t58 = space();
			p12 = element("p");
			t59 = text("Since these editors usually generate additional HTML tags, the raw content of input might be different with the value returned by the editor. The ");
			a4 = element("a");
			t60 = text("notEmpty");
			t61 = text(",\n            ");
			a5 = element("a");
			t62 = text("stringLength");
			t63 = text(" validators maybe don't work correctly with the field using a WYSIWYG editor.");
			t64 = space();
			p13 = element("p");
			t65 = text("The following form uses the Transformer plugin to get raw text of a ");
			a6 = element("a");
			t66 = text("TinyMCE");
			t67 = text(" editor before doing validations.");
			t68 = space();
			div3 = element("div");
			samplecode4.$$.fragment.c();
			t69 = space();
			demo3.$$.fragment.c();
			t70 = space();
			section5 = element("section");
			heading5.$$.fragment.c();
			t71 = space();
			ul = element("ul");
			li = element("li");
			t72 = text("v1.0.0: First release");
			t73 = space();
			examples.$$.fragment.c();
			t74 = space();
			section6 = element("section");
			div4 = element("div");
			prevbutton.$$.fragment.c();
			t75 = space();
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Transformer plugin");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Modify the field value before doing validation");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t5 = claim_text(p0_nodes, "By default, the value of field will be taken by using the ");

			code0 = claim_element(p0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t6 = claim_text(code0_nodes, "value");
			code0_nodes.forEach(detach);
			t7 = claim_text(p0_nodes, " property. In some case, you might want to adjust the value before performing validations.\n            For example, the ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t8 = claim_text(a0_nodes, "numeric");
			a0_nodes.forEach(detach);
			t9 = claim_text(p0_nodes, " validator doesn't allow to use a comma (,) for thousand separator.");
			p0_nodes.forEach(detach);
			t10 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t11 = claim_text(p1_nodes, "The Transformer plugin allows to filter the value of field. The following piece of code is the starting point to use the Transformer plugin:");
			p1_nodes.forEach(detach);
			t12 = claim_text(section0_nodes, "\n");
			samplecode0.$$.fragment.l(section0_nodes);
			t13 = claim_text(section0_nodes, "\n        ");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t14 = claim_text(p2_nodes, "The sample code above assumes that the FormValidation files are placed inside the ");

			code1 = claim_element(p2_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t15 = claim_text(code1_nodes, "vendors");
			code1_nodes.forEach(detach);
			t16 = claim_text(p2_nodes, " directory. You might need to change the path depending on where you place them on the server.");
			p2_nodes.forEach(detach);
			t17 = claim_text(section0_nodes, "\n        ");

			p3 = claim_element(section0_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t18 = claim_text(p3_nodes, "FormValidation only uses the value returned by the Transformer plugin for validating. It does NOT send the modified value to the server when submitting the form.");
			p3_nodes.forEach(detach);
			t19 = claim_text(section0_nodes, "\n        ");

			p4 = claim_element(section0_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t20 = claim_text(p4_nodes, "The next sections introduce some examples demonstrating how to apply this option for popular validators.");
			p4_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t21 = claim_text(nodes, "\n    \n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t22 = claim_text(section1_nodes, "\n        ");

			p5 = claim_element(section1_nodes, "P", { class: true }, false);
			var p5_nodes = children(p5);

			t23 = claim_text(p5_nodes, "The following form accepts a website address without ");

			span0 = claim_element(p5_nodes, "SPAN", { class: true }, false);
			var span0_nodes = children(span0);

			t24 = claim_text(span0_nodes, "http://");
			span0_nodes.forEach(detach);
			t25 = claim_text(p5_nodes, " or ");

			span1 = claim_element(p5_nodes, "SPAN", { class: true }, false);
			var span1_nodes = children(span1);

			t26 = claim_text(span1_nodes, "https://");
			span1_nodes.forEach(detach);
			t27 = claim_text(p5_nodes, " prefix.");
			p5_nodes.forEach(detach);
			t28 = claim_text(section1_nodes, "\n        ");

			p6 = claim_element(section1_nodes, "P", { class: true }, false);
			var p6_nodes = children(p6);

			t29 = claim_text(p6_nodes, "By default, these kind of URLs don't pass the ");

			a1 = claim_element(p6_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t30 = claim_text(a1_nodes, "uri");
			a1_nodes.forEach(detach);
			t31 = claim_text(p6_nodes, " validators. Using the Transformer plugin for the uri validator, we can make it pass.");
			p6_nodes.forEach(detach);
			t32 = claim_text(section1_nodes, "\n        ");

			div0 = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			samplecode1.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach);
			t33 = claim_text(section1_nodes, "\n        ");
			demo0.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t34 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t35 = claim_text(section2_nodes, "\n        ");

			p7 = claim_element(section2_nodes, "P", { class: true }, false);
			var p7_nodes = children(p7);

			t36 = claim_text(p7_nodes, "By default, the ");

			a2 = claim_element(p7_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t37 = claim_text(a2_nodes, "numeric");
			a2_nodes.forEach(detach);
			t38 = claim_text(p7_nodes, " validator doesn't accept the comma. In the form below, the ");

			span2 = claim_element(p7_nodes, "SPAN", { class: true }, false);
			var span2_nodes = children(span2);

			t39 = claim_text(span2_nodes, "Price");
			span2_nodes.forEach(detach);
			t40 = claim_text(p7_nodes, " field now accepts value using comma for thousand separator, such as ");

			span3 = claim_element(p7_nodes, "SPAN", { class: true }, false);
			var span3_nodes = children(span3);

			t41 = claim_text(span3_nodes, "12,570.634");
			span3_nodes.forEach(detach);
			p7_nodes.forEach(detach);
			t42 = claim_text(section2_nodes, "\n        ");

			div1 = claim_element(section2_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			samplecode2.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach);
			t43 = claim_text(section2_nodes, "        \n        ");
			demo1.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t44 = claim_text(nodes, "\n\n    ");

			section3 = claim_element(nodes, "SECTION", { class: true }, false);
			var section3_nodes = children(section3);

			heading3.$$.fragment.l(section3_nodes);
			t45 = claim_text(section3_nodes, "\n        ");

			p8 = claim_element(section3_nodes, "P", { class: true }, false);
			var p8_nodes = children(p8);

			t46 = claim_text(p8_nodes, "The ");

			a3 = claim_element(p8_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t47 = claim_text(a3_nodes, "phone");
			a3_nodes.forEach(detach);
			t48 = claim_text(p8_nodes, " validator supports phone number in various countries. Despite the fact that it try to support many possible formats of a phone number, it can't cover all or special one which you want it to be a valid phone number.");
			p8_nodes.forEach(detach);
			t49 = claim_text(section3_nodes, "\n        ");

			p9 = claim_element(section3_nodes, "P", { class: true }, false);
			var p9_nodes = children(p9);

			t50 = claim_text(p9_nodes, "For instance, a number containing the spaces such as XXX    XXX   XXXX (where X presents a digit from 0-9) is treated as invalid US phone number.");
			p9_nodes.forEach(detach);
			t51 = claim_text(section3_nodes, "\n        ");

			p10 = claim_element(section3_nodes, "P", { class: true }, false);
			var p10_nodes = children(p10);

			t52 = claim_text(p10_nodes, "By using the Transformer plugin, we can turn this kind of number into a valid one by removing all spaces.");
			p10_nodes.forEach(detach);
			t53 = claim_text(section3_nodes, "\n        ");

			div2 = claim_element(section3_nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			samplecode3.$$.fragment.l(div2_nodes);
			div2_nodes.forEach(detach);
			t54 = claim_text(section3_nodes, "        \n        ");
			demo2.$$.fragment.l(section3_nodes);
			section3_nodes.forEach(detach);
			t55 = claim_text(nodes, "\n\n    ");

			section4 = claim_element(nodes, "SECTION", { class: true }, false);
			var section4_nodes = children(section4);

			heading4.$$.fragment.l(section4_nodes);
			t56 = claim_text(section4_nodes, "\n        ");

			p11 = claim_element(section4_nodes, "P", { class: true }, false);
			var p11_nodes = children(p11);

			t57 = claim_text(p11_nodes, "WYSIWYG stands for What You See Is What You Get. A WYSIWYG editor provides a visual way to edit the content of input which mostly is a textarea element.");
			p11_nodes.forEach(detach);
			t58 = claim_text(section4_nodes, "\n        ");

			p12 = claim_element(section4_nodes, "P", { class: true }, false);
			var p12_nodes = children(p12);

			t59 = claim_text(p12_nodes, "Since these editors usually generate additional HTML tags, the raw content of input might be different with the value returned by the editor. The ");

			a4 = claim_element(p12_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t60 = claim_text(a4_nodes, "notEmpty");
			a4_nodes.forEach(detach);
			t61 = claim_text(p12_nodes, ",\n            ");

			a5 = claim_element(p12_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t62 = claim_text(a5_nodes, "stringLength");
			a5_nodes.forEach(detach);
			t63 = claim_text(p12_nodes, " validators maybe don't work correctly with the field using a WYSIWYG editor.");
			p12_nodes.forEach(detach);
			t64 = claim_text(section4_nodes, "\n        ");

			p13 = claim_element(section4_nodes, "P", { class: true }, false);
			var p13_nodes = children(p13);

			t65 = claim_text(p13_nodes, "The following form uses the Transformer plugin to get raw text of a ");

			a6 = claim_element(p13_nodes, "A", { href: true, class: true }, false);
			var a6_nodes = children(a6);

			t66 = claim_text(a6_nodes, "TinyMCE");
			a6_nodes.forEach(detach);
			t67 = claim_text(p13_nodes, " editor before doing validations.");
			p13_nodes.forEach(detach);
			t68 = claim_text(section4_nodes, "\n        ");

			div3 = claim_element(section4_nodes, "DIV", { class: true }, false);
			var div3_nodes = children(div3);

			samplecode4.$$.fragment.l(div3_nodes);
			div3_nodes.forEach(detach);
			t69 = claim_text(section4_nodes, "        \n        ");
			demo3.$$.fragment.l(section4_nodes);
			section4_nodes.forEach(detach);
			t70 = claim_text(nodes, "\n\n    ");

			section5 = claim_element(nodes, "SECTION", { class: true }, false);
			var section5_nodes = children(section5);

			heading5.$$.fragment.l(section5_nodes);
			t71 = claim_text(section5_nodes, "\n        ");

			ul = claim_element(section5_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li = claim_element(ul_nodes, "LI", {}, false);
			var li_nodes = children(li);

			t72 = claim_text(li_nodes, "v1.0.0: First release");
			li_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			section5_nodes.forEach(detach);
			t73 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			t74 = claim_text(nodes, "\n\n    ");

			section6 = claim_element(nodes, "SECTION", { class: true }, false);
			var section6_nodes = children(section6);

			div4 = claim_element(section6_nodes, "DIV", { class: true }, false);
			var div4_nodes = children(div4);

			prevbutton.$$.fragment.l(div4_nodes);
			t75 = claim_text(div4_nodes, "\n            ");
			nextbutton.$$.fragment.l(div4_nodes);
			div4_nodes.forEach(detach);
			section6_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 100);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 156);
			add_location(code0, file, 10, 85, 375);
			a0.href = "/guide/validators/numeric";
			a0.className = "blue dim link";
			add_location(a0, file, 11, 29, 513);
			p0.className = "lh-copy";
			add_location(p0, file, 10, 8, 298);
			p1.className = "lh-copy";
			add_location(p1, file, 12, 8, 662);
			add_location(code1, file, 64, 109, 2661);
			p2.className = "lh-copy";
			add_location(p2, file, 64, 8, 2560);
			p3.className = "lh-copy";
			add_location(p3, file, 65, 8, 2788);
			p4.className = "lh-copy";
			add_location(p4, file, 66, 8, 2981);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 235);
			span0.className = "i";
			add_location(span0, file, 71, 80, 3287);
			span1.className = "i";
			add_location(span1, file, 71, 114, 3321);
			p5.className = "lh-copy";
			add_location(p5, file, 71, 8, 3215);
			a1.href = "/guide/validators/uri";
			a1.className = "blue dim link";
			add_location(a1, file, 72, 73, 3438);
			p6.className = "lh-copy";
			add_location(p6, file, 72, 8, 3373);
			div0.className = "mb4";
			add_location(div0, file, 73, 8, 3597);
			section1.className = "mv5";
			add_location(section1, file, 69, 4, 3133);
			a2.href = "/guide/validators/numeric";
			a2.className = "blue dim link";
			add_location(a2, file, 100, 43, 4517);
			span2.className = "i";
			add_location(span2, file, 100, 172, 4646);
			span3.className = "i";
			add_location(span3, file, 100, 269, 4743);
			p7.className = "lh-copy";
			add_location(p7, file, 100, 8, 4482);
			div1.className = "mb4";
			add_location(div1, file, 101, 8, 4789);
			section2.className = "mv5";
			add_location(section2, file, 98, 4, 4396);
			a3.href = "/guide/validators/phone";
			a3.className = "blue dim link";
			add_location(a3, file, 121, 31, 5396);
			p8.className = "lh-copy";
			add_location(p8, file, 121, 8, 5373);
			p9.className = "lh-copy";
			add_location(p9, file, 122, 8, 5689);
			p10.className = "lh-cop";
			add_location(p10, file, 123, 8, 5866);
			div2.className = "mb4";
			add_location(div2, file, 124, 8, 6002);
			section3.className = "mv5";
			add_location(section3, file, 119, 4, 5289);
			p11.className = "lh-copy";
			add_location(p11, file, 150, 8, 6840);
			a4.href = "/guide/validators/not-empty";
			a4.className = "blue dim link";
			add_location(a4, file, 151, 173, 7189);
			a5.href = "/guide/validators/string-length";
			a5.className = "blue dim link";
			add_location(a5, file, 152, 12, 7275);
			p12.className = "lh-copy";
			add_location(p12, file, 151, 8, 7024);
			a6.href = "https://www.tinymce.com";
			a6.className = "blue dim link";
			add_location(a6, file, 153, 94, 7531);
			p13.className = "lh-cop";
			add_location(p13, file, 153, 8, 7445);
			div3.className = "mb4";
			add_location(div3, file, 154, 8, 7644);
			section4.className = "mv5";
			add_location(section4, file, 148, 4, 6756);
			add_location(li, file, 172, 12, 8218);
			ul.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul, file, 171, 8, 8173);
			section5.className = "mv5";
			add_location(section5, file, 169, 4, 8106);
			div4.className = "flex";
			add_location(div4, file, 182, 8, 8414);
			section6.className = "mv5";
			add_location(section6, file, 181, 4, 8384);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, p0);
			append(p0, t5);
			append(p0, code0);
			append(code0, t6);
			append(p0, t7);
			append(p0, a0);
			append(a0, t8);
			append(p0, t9);
			append(section0, t10);
			append(section0, p1);
			append(p1, t11);
			append(section0, t12);
			mount_component(samplecode0, section0, null);
			append(section0, t13);
			append(section0, p2);
			append(p2, t14);
			append(p2, code1);
			append(code1, t15);
			append(p2, t16);
			append(section0, t17);
			append(section0, p3);
			append(p3, t18);
			append(section0, t19);
			append(section0, p4);
			append(p4, t20);
			insert(target, t21, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t22);
			append(section1, p5);
			append(p5, t23);
			append(p5, span0);
			append(span0, t24);
			append(p5, t25);
			append(p5, span1);
			append(span1, t26);
			append(p5, t27);
			append(section1, t28);
			append(section1, p6);
			append(p6, t29);
			append(p6, a1);
			append(a1, t30);
			append(p6, t31);
			append(section1, t32);
			append(section1, div0);
			mount_component(samplecode1, div0, null);
			append(section1, t33);
			mount_component(demo0, section1, null);
			insert(target, t34, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t35);
			append(section2, p7);
			append(p7, t36);
			append(p7, a2);
			append(a2, t37);
			append(p7, t38);
			append(p7, span2);
			append(span2, t39);
			append(p7, t40);
			append(p7, span3);
			append(span3, t41);
			append(section2, t42);
			append(section2, div1);
			mount_component(samplecode2, div1, null);
			append(section2, t43);
			mount_component(demo1, section2, null);
			insert(target, t44, anchor);
			insert(target, section3, anchor);
			mount_component(heading3, section3, null);
			append(section3, t45);
			append(section3, p8);
			append(p8, t46);
			append(p8, a3);
			append(a3, t47);
			append(p8, t48);
			append(section3, t49);
			append(section3, p9);
			append(p9, t50);
			append(section3, t51);
			append(section3, p10);
			append(p10, t52);
			append(section3, t53);
			append(section3, div2);
			mount_component(samplecode3, div2, null);
			append(section3, t54);
			mount_component(demo2, section3, null);
			insert(target, t55, anchor);
			insert(target, section4, anchor);
			mount_component(heading4, section4, null);
			append(section4, t56);
			append(section4, p11);
			append(p11, t57);
			append(section4, t58);
			append(section4, p12);
			append(p12, t59);
			append(p12, a4);
			append(a4, t60);
			append(p12, t61);
			append(p12, a5);
			append(a5, t62);
			append(p12, t63);
			append(section4, t64);
			append(section4, p13);
			append(p13, t65);
			append(p13, a6);
			append(a6, t66);
			append(p13, t67);
			append(section4, t68);
			append(section4, div3);
			mount_component(samplecode4, div3, null);
			append(section4, t69);
			mount_component(demo3, section4, null);
			insert(target, t70, anchor);
			insert(target, section5, anchor);
			mount_component(heading5, section5, null);
			append(section5, t71);
			append(section5, ul);
			append(ul, li);
			append(li, t72);
			insert(target, t73, anchor);
			mount_component(examples, target, anchor);
			insert(target, t74, anchor);
			insert(target, section6, anchor);
			append(section6, div4);
			mount_component(prevbutton, div4, null);
			append(div4, t75);
			mount_component(nextbutton, div4, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);

			var heading3_changes = {};
			if (changed.$$scope) heading3_changes.$$scope = { changed, ctx };
			heading3.$set(heading3_changes);

			var heading4_changes = {};
			if (changed.$$scope) heading4_changes.$$scope = { changed, ctx };
			heading4.$set(heading4_changes);

			var heading5_changes = {};
			if (changed.$$scope) heading5_changes.$$scope = { changed, ctx };
			heading5.$set(heading5_changes);

			var prevbutton_changes = {};
			if (changed.$$scope) prevbutton_changes.$$scope = { changed, ctx };
			prevbutton.$set(prevbutton_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			demo0.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			samplecode2.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			heading3.$$.fragment.i(local);

			samplecode3.$$.fragment.i(local);

			demo2.$$.fragment.i(local);

			heading4.$$.fragment.i(local);

			samplecode4.$$.fragment.i(local);

			demo3.$$.fragment.i(local);

			heading5.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			prevbutton.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			demo0.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			samplecode2.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			heading3.$$.fragment.o(local);
			samplecode3.$$.fragment.o(local);
			demo2.$$.fragment.o(local);
			heading4.$$.fragment.o(local);
			samplecode4.$$.fragment.o(local);
			demo3.$$.fragment.o(local);
			heading5.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			prevbutton.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			if (detaching) {
				detach(t21);
				detach(section1);
			}

			heading1.$destroy();

			samplecode1.$destroy();

			demo0.$destroy();

			if (detaching) {
				detach(t34);
				detach(section2);
			}

			heading2.$destroy();

			samplecode2.$destroy();

			demo1.$destroy();

			if (detaching) {
				detach(t44);
				detach(section3);
			}

			heading3.$destroy();

			samplecode3.$destroy();

			demo2.$destroy();

			if (detaching) {
				detach(t55);
				detach(section4);
			}

			heading4.$destroy();

			samplecode4.$destroy();

			demo3.$destroy();

			if (detaching) {
				detach(t70);
				detach(section5);
			}

			heading5.$destroy();

			if (detaching) {
				detach(t73);
			}

			examples.$destroy(detaching);

			if (detaching) {
				detach(t74);
				detach(section6);
			}

			prevbutton.$destroy();

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Transformer plugin";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

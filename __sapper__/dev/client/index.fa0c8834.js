import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';

/* src/routes/guide/examples/hiding-messages/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/hiding-messages/index.svelte";

// (11:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Overriding CSS");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Overriding CSS");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (24:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Handling the event");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Handling the event");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, p0, t2, t3, section0, t4, p1, t5, code0, t6, t7, t8, div0, t9, t10, section1, t11, p2, t12, a, t13, t14, code1, t15, t16, t17, p3, t18, t19, div1, t20, t21, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "css", code: `
.fv-plugins-message-container {
    display: none;
}
` },
		$$inline: true
	});

	var demo0 = new Demo({
		props: {
		prefix: "/guide/examples/hiding-messages/overriding-css",
		frameworks: ['bootstrap']
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
FormValidation
    .formValidation(
        form,
        {
            fields: {
                ...
            },
            plugins: {
                ...
            },
        }
    )
    .on('plugins.message.displayed', function(e) {
        // e.messageElement presents the error message element
        // We can hide the message easily
        e.messageElement.style.display = 'none';
    });
` },
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/examples/hiding-messages/event",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Hiding messages',
        'Showing all messages',
        'Showing custom message returned from server',
        'Showing dynamic message',
        'Showing messages in custom area',
        'Showing only one message each time',
    ] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Hiding messages");
			t1 = space();
			p0 = element("p");
			t2 = text("In this example, you will learn how to hide the error messages.");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			p1 = element("p");
			t5 = text("By default, all error messages are placed inside a container that has ");
			code0 = element("code");
			t6 = text(".fv-plugins-message-container");
			t7 = text(" class. We can hide the error messages by adding one CSS property for this class:");
			t8 = space();
			div0 = element("div");
			samplecode0.$$.fragment.c();
			t9 = space();
			demo0.$$.fragment.c();
			t10 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t11 = space();
			p2 = element("p");
			t12 = text("After executing a given validator, the ");
			a = element("a");
			t13 = text("Message");
			t14 = text(" plugin will emit the ");
			code1 = element("code");
			t15 = text("plugins.message.displayed");
			t16 = text(" event. This event is triggered after the error message is displayed.");
			t17 = space();
			p3 = element("p");
			t18 = text("We can listen on this event to hide the error message:");
			t19 = space();
			div1 = element("div");
			samplecode1.$$.fragment.c();
			t20 = space();
			demo1.$$.fragment.c();
			t21 = space();
			examples.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Hiding messages");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n\n    ");

			p0 = claim_element(nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "In this example, you will learn how to hide the error messages.");
			p0_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t5 = claim_text(p1_nodes, "By default, all error messages are placed inside a container that has ");

			code0 = claim_element(p1_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t6 = claim_text(code0_nodes, ".fv-plugins-message-container");
			code0_nodes.forEach(detach);
			t7 = claim_text(p1_nodes, " class. We can hide the error messages by adding one CSS property for this class:");
			p1_nodes.forEach(detach);
			t8 = claim_text(section0_nodes, "\n        ");

			div0 = claim_element(section0_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			samplecode0.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach);
			t9 = claim_text(section0_nodes, "\n        ");
			demo0.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t10 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t11 = claim_text(section1_nodes, "\n        ");

			p2 = claim_element(section1_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t12 = claim_text(p2_nodes, "After executing a given validator, the ");

			a = claim_element(p2_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t13 = claim_text(a_nodes, "Message");
			a_nodes.forEach(detach);
			t14 = claim_text(p2_nodes, " plugin will emit the ");

			code1 = claim_element(p2_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t15 = claim_text(code1_nodes, "plugins.message.displayed");
			code1_nodes.forEach(detach);
			t16 = claim_text(p2_nodes, " event. This event is triggered after the error message is displayed.");
			p2_nodes.forEach(detach);
			t17 = claim_text(section1_nodes, "\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t18 = claim_text(p3_nodes, "We can listen on this event to hide the error message:");
			p3_nodes.forEach(detach);
			t19 = claim_text(section1_nodes, "\n        ");

			div1 = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			samplecode1.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach);
			t20 = claim_text(section1_nodes, "\n        ");
			demo1.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t21 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 97);
			p0.className = "lh-copy";
			add_location(p0, file, 7, 4, 146);
			add_location(code0, file, 11, 97, 399);
			p1.className = "lh-copy";
			add_location(p1, file, 11, 8, 310);
			div0.className = "mb4";
			add_location(div0, file, 12, 8, 535);
			section0.className = "mv5";
			add_location(section0, file, 9, 4, 238);
			a.href = "/guide/plugins/message";
			a.className = "blue dim link";
			add_location(a, file, 24, 66, 912);
			add_location(code1, file, 24, 154, 1000);
			p2.className = "lh-copy";
			add_location(p2, file, 24, 8, 854);
			p3.className = "lh-copy";
			add_location(p3, file, 25, 8, 1120);
			div1.className = "mb4";
			add_location(div1, file, 26, 8, 1206);
			section1.className = "mv5";
			add_location(section1, file, 22, 4, 778);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, p0, anchor);
			append(p0, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, p1);
			append(p1, t5);
			append(p1, code0);
			append(code0, t6);
			append(p1, t7);
			append(section0, t8);
			append(section0, div0);
			mount_component(samplecode0, div0, null);
			append(section0, t9);
			mount_component(demo0, section0, null);
			insert(target, t10, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t11);
			append(section1, p2);
			append(p2, t12);
			append(p2, a);
			append(a, t13);
			append(p2, t14);
			append(p2, code1);
			append(code1, t15);
			append(p2, t16);
			append(section1, t17);
			append(section1, p3);
			append(p3, t18);
			append(section1, t19);
			append(section1, div1);
			mount_component(samplecode1, div1, null);
			append(section1, t20);
			mount_component(demo1, section1, null);
			insert(target, t21, anchor);
			mount_component(examples, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			demo0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			demo0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(p0);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			demo0.$destroy();

			if (detaching) {
				detach(t10);
				detach(section1);
			}

			heading1.$destroy();

			samplecode1.$destroy();

			demo1.$destroy();

			if (detaching) {
				detach(t21);
			}

			examples.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Hiding messages";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

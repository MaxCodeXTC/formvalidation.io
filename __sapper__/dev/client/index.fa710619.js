import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';

/* src/routes/guide/examples/showing-messages-in-custom-area/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/showing-messages-in-custom-area/index.svelte";

// (19:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Using a CSS selector for the container");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Using a CSS selector for the container");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (80:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Using a callback for the container");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Using a callback for the container");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section0, p0, t2, t3, ul, li0, t4, t5, li1, t6, t7, li2, t8, t9, p1, t10, a, t11, t12, t13, section1, t14, p2, t15, t16, t17, p3, t18, t19, div, t20, t21, section2, t22, p4, t23, t24, t25, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var samplecode0 = new SampleCode({
		props: { lang: "html", code: `
<form id="demoForm">
    ...
    <!-- Message container -->
    <div class="fl w-75" id="messages"></div>
</form>
<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {    
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                tachyons: new FormValidation.plugins.Tachyons({
                    // Do not show the error message in default area
                    defaultMessageContainer: false,
                }),
                // I want to display errors at my own areas
                message: new FormValidation.plugins.Message({
                    clazz: 'red lh-copy',
                    container: '#messages',
                }),
            },
        }
    );
});
</script-tag>
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "javascript", code: `
FormValidation
    .formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                message: new FormValidation.plugins.Message({
                    ...
                }),
            },
        }
    )
    .on('plugins.message.displayed', function(e) {
        e.messageElement.addEventListener('click', function() {
            e.element.focus();
        });
    });
` },
		$$inline: true
	});

	var demo0 = new Demo({
		props: {
		prefix: "/guide/examples/showing-messages-in-custom-area/container",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var demo1 = new Demo({
		props: {
		prefix: "/guide/examples/showing-messages-in-custom-area/callback",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Hiding messages',
        'Showing all messages',
        'Showing custom message returned from server',
        'Showing dynamic message',
        'Showing messages in custom area',
        'Showing only one message each time',
    ] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Showing messages in custom area");
			t1 = space();
			section0 = element("section");
			p0 = element("p");
			t2 = text("There is a few of scenarios which you might want to show messages in custom area, such as");
			t3 = space();
			ul = element("ul");
			li0 = element("li");
			t4 = text("Messages are shown above or below the form due to the limitation of form height");
			t5 = space();
			li1 = element("li");
			t6 = text("Messages are shown in a help panel located at the right of form");
			t7 = space();
			li2 = element("li");
			t8 = text("Messages are shown in the last step of a wizard");
			t9 = space();
			p1 = element("p");
			t10 = text("There are two ways to solve this requirement which are listed in the next sections. Both use different options provided by the ");
			a = element("a");
			t11 = text("Message plugin");
			t12 = text(".");
			t13 = space();
			section1 = element("section");
			heading0.$$.fragment.c();
			t14 = space();
			p2 = element("p");
			t15 = text("The form below shows messages in an element located at the bottom of form.");
			t16 = space();
			samplecode0.$$.fragment.c();
			t17 = space();
			p3 = element("p");
			t18 = text("We can also improve the user experience here by making the invalid element focused when clicking the error.");
			t19 = space();
			div = element("div");
			samplecode1.$$.fragment.c();
			t20 = space();
			demo0.$$.fragment.c();
			t21 = space();
			section2 = element("section");
			heading1.$$.fragment.c();
			t22 = space();
			p4 = element("p");
			t23 = text("If you want to place messages which their positions depend on the field, you can use a callback. The following form places messages in the right:");
			t24 = space();
			demo1.$$.fragment.c();
			t25 = space();
			examples.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Showing messages in custom area");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    \n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "There is a few of scenarios which you might want to show messages in custom area, such as");
			p0_nodes.forEach(detach);
			t3 = claim_text(section0_nodes, "\n        ");

			ul = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t4 = claim_text(li0_nodes, "Messages are shown above or below the form due to the limitation of form height");
			li0_nodes.forEach(detach);
			t5 = claim_text(ul_nodes, "\n            ");

			li1 = claim_element(ul_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t6 = claim_text(li1_nodes, "Messages are shown in a help panel located at the right of form");
			li1_nodes.forEach(detach);
			t7 = claim_text(ul_nodes, "\n            ");

			li2 = claim_element(ul_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t8 = claim_text(li2_nodes, "Messages are shown in the last step of a wizard");
			li2_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			t9 = claim_text(section0_nodes, "\n        ");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t10 = claim_text(p1_nodes, "There are two ways to solve this requirement which are listed in the next sections. Both use different options provided by the ");

			a = claim_element(p1_nodes, "A", { href: true, class: true }, false);
			var a_nodes = children(a);

			t11 = claim_text(a_nodes, "Message plugin");
			a_nodes.forEach(detach);
			t12 = claim_text(p1_nodes, ".");
			p1_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t13 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading0.$$.fragment.l(section1_nodes);
			t14 = claim_text(section1_nodes, "\n\n        ");

			p2 = claim_element(section1_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t15 = claim_text(p2_nodes, "The form below shows messages in an element located at the bottom of form.");
			p2_nodes.forEach(detach);
			t16 = claim_text(section1_nodes, "\n");
			samplecode0.$$.fragment.l(section1_nodes);
			t17 = claim_text(section1_nodes, "\n        ");

			p3 = claim_element(section1_nodes, "P", { class: true }, false);
			var p3_nodes = children(p3);

			t18 = claim_text(p3_nodes, "We can also improve the user experience here by making the invalid element focused when clicking the error.");
			p3_nodes.forEach(detach);
			t19 = claim_text(section1_nodes, "\n        ");

			div = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			samplecode1.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			t20 = claim_text(section1_nodes, "\n        ");
			demo0.$$.fragment.l(section1_nodes);
			section1_nodes.forEach(detach);
			t21 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading1.$$.fragment.l(section2_nodes);
			t22 = claim_text(section2_nodes, "\n        ");

			p4 = claim_element(section2_nodes, "P", { class: true }, false);
			var p4_nodes = children(p4);

			t23 = claim_text(p4_nodes, "If you want to place messages which their positions depend on the field, you can use a callback. The following form places messages in the right:");
			p4_nodes.forEach(detach);
			t24 = claim_text(section2_nodes, "\n        ");
			demo1.$$.fragment.l(section2_nodes);
			section2_nodes.forEach(detach);
			t25 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 113);
			p0.className = "lh-copy";
			add_location(p0, file, 8, 8, 212);
			add_location(li0, file, 10, 12, 374);
			add_location(li1, file, 11, 12, 475);
			add_location(li2, file, 12, 12, 560);
			ul.className = "ma0 pl3 lh-copy";
			add_location(ul, file, 9, 8, 333);
			a.href = "/guide/plugins/message";
			a.className = "blue dim link";
			add_location(a, file, 14, 154, 785);
			p1.className = "lh-copy";
			add_location(p1, file, 14, 8, 639);
			section0.className = "mv5";
			add_location(section0, file, 7, 4, 182);
			p2.className = "lh-copy";
			add_location(p2, file, 20, 8, 981);
			p3.className = "lh-copy";
			add_location(p3, file, 51, 8, 1969);
			div.className = "mb4";
			add_location(div, file, 52, 8, 2108);
			section1.className = "mv5";
			add_location(section1, file, 17, 4, 884);
			p4.className = "lh-copy";
			add_location(p4, file, 80, 8, 2881);
			section2.className = "mv5";
			add_location(section2, file, 78, 4, 2789);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section0, anchor);
			append(section0, p0);
			append(p0, t2);
			append(section0, t3);
			append(section0, ul);
			append(ul, li0);
			append(li0, t4);
			append(ul, t5);
			append(ul, li1);
			append(li1, t6);
			append(ul, t7);
			append(ul, li2);
			append(li2, t8);
			append(section0, t9);
			append(section0, p1);
			append(p1, t10);
			append(p1, a);
			append(a, t11);
			append(p1, t12);
			insert(target, t13, anchor);
			insert(target, section1, anchor);
			mount_component(heading0, section1, null);
			append(section1, t14);
			append(section1, p2);
			append(p2, t15);
			append(section1, t16);
			mount_component(samplecode0, section1, null);
			append(section1, t17);
			append(section1, p3);
			append(p3, t18);
			append(section1, t19);
			append(section1, div);
			mount_component(samplecode1, div, null);
			append(section1, t20);
			mount_component(demo0, section1, null);
			insert(target, t21, anchor);
			insert(target, section2, anchor);
			mount_component(heading1, section2, null);
			append(section2, t22);
			append(section2, p4);
			append(p4, t23);
			append(section2, t24);
			mount_component(demo1, section2, null);
			insert(target, t25, anchor);
			mount_component(examples, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			demo0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			demo1.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			demo0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			demo1.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section0);
				detach(t13);
				detach(section1);
			}

			heading0.$destroy();

			samplecode0.$destroy();

			samplecode1.$destroy();

			demo0.$destroy();

			if (detaching) {
				detach(t21);
				detach(section2);
			}

			heading1.$destroy();

			demo1.$destroy();

			if (detaching) {
				detach(t25);
			}

			examples.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Showing messages in custom area";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

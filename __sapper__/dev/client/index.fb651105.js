import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, r as noop } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as SampleCode } from './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import './chunk.7ee4e2c0.js';
import { a as Examples } from './chunk.2b9930ea.js';
import './chunk.609a43e8.js';

/* src/routes/guide/examples/using-ajax-to-submit-the-form/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/using-ajax-to-submit-the-form/index.svelte";

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section, p0, t2, a0, t3, t4, t5, ul, li0, t6, a1, t7, t8, t9, li1, t10, t11, p1, t12, code0, t13, t14, t15, t16, p2, t17, code1, t18, t19, code2, t20, t21, a2, t22, t23, t24, t25, current;

	var samplecode0 = new SampleCode({
		props: { lang: "javascript", code: `
FormValidation
    .formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                ...
            },
            plugins: {
                ...
            },
        }
    )
    .on('core.form.valid', function() {
        // Send the form data to back-end
        // You need to grab the form data and create an Ajax request to send them
        
        FormValidation.utils.fetch('/path/to/your/back-end/', {
            method: 'POST',
            params: {
                fieldName: fieldValue,
                otherFieldName: otherFieldValue,
                ...
            },
        }).then(function(response) {
            // Depending on the response from server, you can display a notification
            // to let user know if the form is sent successfully
            ...
        });
    });
` },
		$$inline: true
	});

	var samplecode1 = new SampleCode({
		props: { lang: "html", code: `
<script-tag src="https://unpkg.com/axios/dist/axios.min.js"></script-tag>
...
<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation
        .formValidation(
            document.getElementById('demoForm'),
            {
                ...
            }
        )
        .on('core.form.valid', function() {
            axios({
                method: 'post',
                url: '/path/to/your/back-end/',
                data: {
                    fieldName: fieldValue,
                    otherFieldName: otherFieldValue,
                    ...
                },
            }).then(function(response) {
                ...
            });
        });
});
</script-tag>    
` },
		$$inline: true
	});

	var examples = new Examples({
		props: { examples: [
        'Multiple steps wizard',
        'Using Ajax to submit the form',
        'Validating form manually',
    ] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Using Ajax to submit the form");
			t1 = space();
			section = element("section");
			p0 = element("p");
			t2 = text("After clicking the Submit button, all fields will be validated automatically if the ");
			a0 = element("a");
			t3 = text("SubmitButton");
			t4 = text(" plugin is enabled. Usually you have two choices in the case all fields pass their validations:");
			t5 = space();
			ul = element("ul");
			li0 = element("li");
			t6 = text("Submit the form to the server. It can be done via the ");
			a1 = element("a");
			t7 = text("DefaultSubmit");
			t8 = text(" plugin");
			t9 = space();
			li1 = element("li");
			t10 = text("Send the form data to server via an Ajax request.");
			t11 = space();
			p1 = element("p");
			t12 = text("For the second scenario, you can handle the ");
			code0 = element("code");
			t13 = text("core.form.valid");
			t14 = text(" event as following");
			t15 = space();
			samplecode0.$$.fragment.c();
			t16 = space();
			p2 = element("p");
			t17 = text("The sample code above uses a built in method ");
			code1 = element("code");
			t18 = text("FormValidation.utils.fetch(url, options)");
			t19 = text(" to send data to given ");
			code2 = element("code");
			t20 = text("url");
			t21 = text(". It's up to you to choose your favourite library for doing the same thing, such as ");
			a2 = element("a");
			t22 = text("axios");
			t23 = text(":");
			t24 = space();
			samplecode1.$$.fragment.c();
			t25 = space();
			examples.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Using Ajax to submit the form");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    \n    ");

			section = claim_element(nodes, "SECTION", { class: true }, false);
			var section_nodes = children(section);

			p0 = claim_element(section_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t2 = claim_text(p0_nodes, "After clicking the Submit button, all fields will be validated automatically if the ");

			a0 = claim_element(p0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t3 = claim_text(a0_nodes, "SubmitButton");
			a0_nodes.forEach(detach);
			t4 = claim_text(p0_nodes, " plugin is enabled. Usually you have two choices in the case all fields pass their validations:");
			p0_nodes.forEach(detach);
			t5 = claim_text(section_nodes, "\n        ");

			ul = claim_element(section_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t6 = claim_text(li0_nodes, "Submit the form to the server. It can be done via the ");

			a1 = claim_element(li0_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t7 = claim_text(a1_nodes, "DefaultSubmit");
			a1_nodes.forEach(detach);
			t8 = claim_text(li0_nodes, " plugin");
			li0_nodes.forEach(detach);
			t9 = claim_text(ul_nodes, "\n            ");

			li1 = claim_element(ul_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t10 = claim_text(li1_nodes, "Send the form data to server via an Ajax request.");
			li1_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			t11 = claim_text(section_nodes, "\n        ");

			p1 = claim_element(section_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t12 = claim_text(p1_nodes, "For the second scenario, you can handle the ");

			code0 = claim_element(p1_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t13 = claim_text(code0_nodes, "core.form.valid");
			code0_nodes.forEach(detach);
			t14 = claim_text(p1_nodes, " event as following");
			p1_nodes.forEach(detach);
			t15 = claim_text(section_nodes, "\n");
			samplecode0.$$.fragment.l(section_nodes);
			t16 = claim_text(section_nodes, "\n        ");

			p2 = claim_element(section_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t17 = claim_text(p2_nodes, "The sample code above uses a built in method ");

			code1 = claim_element(p2_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t18 = claim_text(code1_nodes, "FormValidation.utils.fetch(url, options)");
			code1_nodes.forEach(detach);
			t19 = claim_text(p2_nodes, " to send data to given ");

			code2 = claim_element(p2_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t20 = claim_text(code2_nodes, "url");
			code2_nodes.forEach(detach);
			t21 = claim_text(p2_nodes, ". It's up to you to choose your favourite library for doing the same thing, such as ");

			a2 = claim_element(p2_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t22 = claim_text(a2_nodes, "axios");
			a2_nodes.forEach(detach);
			t23 = claim_text(p2_nodes, ":");
			p2_nodes.forEach(detach);
			t24 = claim_text(section_nodes, "\n");
			samplecode1.$$.fragment.l(section_nodes);
			section_nodes.forEach(detach);
			t25 = claim_text(nodes, "\n\n    ");
			examples.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 111);
			a0.href = "/guide/plugins/submit-button";
			a0.className = "blue dim link";
			add_location(a0, file, 8, 111, 311);
			p0.className = "lh-copy";
			add_location(p0, file, 8, 8, 208);
			a1.href = "/guide/plugins/default-submit";
			a1.className = "blue dim link";
			add_location(a1, file, 10, 70, 595);
			add_location(li0, file, 10, 12, 537);
			add_location(li1, file, 11, 12, 699);
			ul.className = "ma0 pl3 lh-copy";
			add_location(ul, file, 9, 8, 496);
			add_location(code0, file, 13, 71, 843);
			p1.className = "lh-copy";
			add_location(p1, file, 13, 8, 780);
			add_location(code1, file, 45, 72, 1866);
			add_location(code2, file, 45, 148, 1942);
			a2.href = "https://github.com/axios/axios";
			a2.className = "blue dim link";
			add_location(a2, file, 45, 248, 2042);
			p2.className = "lh-copy";
			add_location(p2, file, 45, 8, 1802);
			section.className = "mv5";
			add_location(section, file, 7, 4, 178);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section, anchor);
			append(section, p0);
			append(p0, t2);
			append(p0, a0);
			append(a0, t3);
			append(p0, t4);
			append(section, t5);
			append(section, ul);
			append(ul, li0);
			append(li0, t6);
			append(li0, a1);
			append(a1, t7);
			append(li0, t8);
			append(ul, t9);
			append(ul, li1);
			append(li1, t10);
			append(section, t11);
			append(section, p1);
			append(p1, t12);
			append(p1, code0);
			append(code0, t13);
			append(p1, t14);
			append(section, t15);
			mount_component(samplecode0, section, null);
			append(section, t16);
			append(section, p2);
			append(p2, t17);
			append(p2, code1);
			append(code1, t18);
			append(p2, t19);
			append(p2, code2);
			append(code2, t20);
			append(p2, t21);
			append(p2, a2);
			append(a2, t22);
			append(p2, t23);
			append(section, t24);
			mount_component(samplecode1, section, null);
			insert(target, t25, anchor);
			mount_component(examples, target, anchor);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			samplecode0.$$.fragment.i(local);

			samplecode1.$$.fragment.i(local);

			examples.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			samplecode0.$$.fragment.o(local);
			samplecode1.$$.fragment.o(local);
			examples.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section);
			}

			samplecode0.$destroy();

			samplecode1.$destroy();

			if (detaching) {
				detach(t25);
			}

			examples.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Using Ajax to submit the form";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

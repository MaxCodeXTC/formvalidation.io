import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.8206184d.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as ChangelogLayout } from './chunk.4a563e90.js';

/* src/routes/updates/v0.6.1/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/updates/v0.6.1/index.svelte";

// (10:8) <Heading>
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("New features");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "New features");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (24:8) <Heading>
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Improvements");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Improvements");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (34:8) <Heading>
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Bug fixes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Bug fixes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <ChangelogLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, ul0, li0, t5, code0, t6, t7, code1, t8, t9, code2, t10, t11, a0, t12, t13, t14, li1, t15, t16, li2, t17, t18, li3, t19, code3, t20, t21, t22, li4, t23, a1, t24, t25, t26, li5, t27, a2, t28, t29, t30, li6, t31, a3, t32, t33, t34, li7, t35, a4, t36, t37, a5, t38, t39, t40, section1, t41, ul1, li8, t42, a6, t43, t44, t45, li9, t46, a7, t47, t48, t49, li10, t50, t51, li11, t52, t53, section2, t54, p, t55, code4, t56, t57, code5, t58, t59, t60, ul2, li12, t61, code6, t62, t63, t64, li13, t65, t66, li14, t67, t68, li15, t69, t70, li16, t71, code7, t72, t73, li17, t74, t75, li18, t76, code8, t77, t78, t79, li19, t80, code9, t81, t82, t83, li20, t84, a8, t85, t86, t87, li21, t88, t89, li22, t90, t91, li23, code10, t92, t93, a9, t94, t95, t96, li24, t97, code11, t98, t99, code12, t100, t101, current;

	var heading0 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading1 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var heading2 = new Heading({
		props: {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Version 0.6.1");
			t1 = space();
			h2 = element("h2");
			t2 = text("Released 24 February 2015");
			t3 = space();
			section0 = element("section");
			heading0.$$.fragment.c();
			t4 = space();
			ul0 = element("ul");
			li0 = element("li");
			t5 = text("Add ");
			code0 = element("code");
			t6 = text("dataType");
			t7 = text(", ");
			code1 = element("code");
			t8 = text("crossDomain");
			t9 = text(", ");
			code2 = element("code");
			t10 = text("validKey");
			t11 = text(" options for ");
			a0 = element("a");
			t12 = text("remote");
			t13 = text(" validator.");
			t14 = space();
			li1 = element("li");
			t15 = text("It's possible to use remote validator to connect to external validator API, such as MailGun.");
			t16 = space();
			li2 = element("li");
			t17 = text("In addition to Bootstrap, Foundation, Pure, Semantic, UIKit, v0.6.1 provides the ability of supporting custom framework");
			t18 = space();
			li3 = element("li");
			t19 = text("Add ");
			code3 = element("code");
			t20 = text("declarative");
			t21 = text(" option to support big form");
			t22 = space();
			li4 = element("li");
			t23 = text("Add Netherlands ");
			a1 = element("a");
			t24 = text("phone");
			t25 = text(" validator");
			t26 = space();
			li5 = element("li");
			t27 = text("Add Bulgarian ");
			a2 = element("a");
			t28 = text("zip code");
			t29 = text(" validator");
			t30 = space();
			li6 = element("li");
			t31 = text("Add Bulgarian ");
			a3 = element("a");
			t32 = text("phone number");
			t33 = text(" validator");
			t34 = space();
			li7 = element("li");
			t35 = text("Add Polish ");
			a4 = element("a");
			t36 = text("zip code");
			t37 = text(" and ");
			a5 = element("a");
			t38 = text("id");
			t39 = text(" validators");
			t40 = space();
			section1 = element("section");
			heading1.$$.fragment.c();
			t41 = space();
			ul1 = element("ul");
			li8 = element("li");
			t42 = text("The ");
			a6 = element("a");
			t43 = text("remote");
			t44 = text(" validator fails if Ajax request fails");
			t45 = space();
			li9 = element("li");
			t46 = text("Update Netherlands ");
			a7 = element("a");
			t47 = text("phone number");
			t48 = text(" validator");
			t49 = space();
			li10 = element("li");
			t50 = text("Add plugin instance to the 3rd parameter of transformer callback");
			t51 = space();
			li11 = element("li");
			t52 = text("Add Grunt task that runs the jasmine test suites");
			t53 = space();
			section2 = element("section");
			heading2.$$.fragment.c();
			t54 = space();
			p = element("p");
			t55 = text("This version fixed the ");
			code4 = element("code");
			t56 = text("isValid()");
			t57 = text(" method which should return ");
			code5 = element("code");
			t58 = text("null");
			t59 = text(" when there is not validated or being validated field.\n            It also solves the issues where the submit button is disabled even when the form is valid.");
			t60 = space();
			ul2 = element("ul");
			li12 = element("li");
			t61 = text("remote validator and ");
			code6 = element("code");
			t62 = text("isValid()");
			t63 = text(" combined do not work");
			t64 = space();
			li13 = element("li");
			t65 = text("Submit button is disabled");
			t66 = space();
			li14 = element("li");
			t67 = text("Submit button being disabled");
			t68 = space();
			li15 = element("li");
			t69 = text("Can only submit form after changing a value");
			t70 = space();
			li16 = element("li");
			t71 = text("Remote validation trigger ");
			code7 = element("code");
			t72 = text("err.form.fv");
			t73 = space();
			li17 = element("li");
			t74 = text("Submit incorrectly enabled even though form has errors");
			t75 = space();
			li18 = element("li");
			t76 = text("Show the ");
			code8 = element("code");
			t77 = text("validating");
			t78 = text(" icon when the field is being validated");
			t79 = space();
			li19 = element("li");
			t80 = text("Reset checkbox when calling ");
			code9 = element("code");
			t81 = text("resetForm()");
			t82 = text(" method");
			t83 = space();
			li20 = element("li");
			t84 = text("Fix Slovakia ");
			a8 = element("a");
			t85 = text("phone number");
			t86 = text(" validator");
			t87 = space();
			li21 = element("li");
			t88 = text("Fix the issue where custom validator doesn't provide default message");
			t89 = space();
			li22 = element("li");
			t90 = text("Don't continue if there is no validators attached to fields");
			t91 = space();
			li23 = element("li");
			code10 = element("code");
			t92 = text("transformer");
			t93 = text(" option doesn't work with ");
			a9 = element("a");
			t94 = text("notEmpty");
			t95 = text(" validator");
			t96 = space();
			li24 = element("li");
			t97 = text("Fix ");
			code11 = element("code");
			t98 = text("isValidContainer()");
			t99 = text(" and ");
			code12 = element("code");
			t100 = text("validateContainer()");
			t101 = text(" methods to support fields with the same name");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Version 0.6.1");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Released 24 February 2015");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n    ");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading0.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n        ");

			ul0 = claim_element(section0_nodes, "UL", { class: true }, false);
			var ul0_nodes = children(ul0);

			li0 = claim_element(ul0_nodes, "LI", {}, false);
			var li0_nodes = children(li0);

			t5 = claim_text(li0_nodes, "Add ");

			code0 = claim_element(li0_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t6 = claim_text(code0_nodes, "dataType");
			code0_nodes.forEach(detach);
			t7 = claim_text(li0_nodes, ", ");

			code1 = claim_element(li0_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t8 = claim_text(code1_nodes, "crossDomain");
			code1_nodes.forEach(detach);
			t9 = claim_text(li0_nodes, ", ");

			code2 = claim_element(li0_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t10 = claim_text(code2_nodes, "validKey");
			code2_nodes.forEach(detach);
			t11 = claim_text(li0_nodes, " options for ");

			a0 = claim_element(li0_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t12 = claim_text(a0_nodes, "remote");
			a0_nodes.forEach(detach);
			t13 = claim_text(li0_nodes, " validator.");
			li0_nodes.forEach(detach);
			t14 = claim_text(ul0_nodes, "\n            ");

			li1 = claim_element(ul0_nodes, "LI", {}, false);
			var li1_nodes = children(li1);

			t15 = claim_text(li1_nodes, "It's possible to use remote validator to connect to external validator API, such as MailGun.");
			li1_nodes.forEach(detach);
			t16 = claim_text(ul0_nodes, "\n            ");

			li2 = claim_element(ul0_nodes, "LI", {}, false);
			var li2_nodes = children(li2);

			t17 = claim_text(li2_nodes, "In addition to Bootstrap, Foundation, Pure, Semantic, UIKit, v0.6.1 provides the ability of supporting custom framework");
			li2_nodes.forEach(detach);
			t18 = claim_text(ul0_nodes, "\n            ");

			li3 = claim_element(ul0_nodes, "LI", {}, false);
			var li3_nodes = children(li3);

			t19 = claim_text(li3_nodes, "Add ");

			code3 = claim_element(li3_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t20 = claim_text(code3_nodes, "declarative");
			code3_nodes.forEach(detach);
			t21 = claim_text(li3_nodes, " option to support big form");
			li3_nodes.forEach(detach);
			t22 = claim_text(ul0_nodes, "\n            ");

			li4 = claim_element(ul0_nodes, "LI", {}, false);
			var li4_nodes = children(li4);

			t23 = claim_text(li4_nodes, "Add Netherlands ");

			a1 = claim_element(li4_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t24 = claim_text(a1_nodes, "phone");
			a1_nodes.forEach(detach);
			t25 = claim_text(li4_nodes, " validator");
			li4_nodes.forEach(detach);
			t26 = claim_text(ul0_nodes, "\n            ");

			li5 = claim_element(ul0_nodes, "LI", {}, false);
			var li5_nodes = children(li5);

			t27 = claim_text(li5_nodes, "Add Bulgarian ");

			a2 = claim_element(li5_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t28 = claim_text(a2_nodes, "zip code");
			a2_nodes.forEach(detach);
			t29 = claim_text(li5_nodes, " validator");
			li5_nodes.forEach(detach);
			t30 = claim_text(ul0_nodes, "\n            ");

			li6 = claim_element(ul0_nodes, "LI", {}, false);
			var li6_nodes = children(li6);

			t31 = claim_text(li6_nodes, "Add Bulgarian ");

			a3 = claim_element(li6_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t32 = claim_text(a3_nodes, "phone number");
			a3_nodes.forEach(detach);
			t33 = claim_text(li6_nodes, " validator");
			li6_nodes.forEach(detach);
			t34 = claim_text(ul0_nodes, "\n            ");

			li7 = claim_element(ul0_nodes, "LI", {}, false);
			var li7_nodes = children(li7);

			t35 = claim_text(li7_nodes, "Add Polish ");

			a4 = claim_element(li7_nodes, "A", { href: true }, false);
			var a4_nodes = children(a4);

			t36 = claim_text(a4_nodes, "zip code");
			a4_nodes.forEach(detach);
			t37 = claim_text(li7_nodes, " and ");

			a5 = claim_element(li7_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t38 = claim_text(a5_nodes, "id");
			a5_nodes.forEach(detach);
			t39 = claim_text(li7_nodes, " validators");
			li7_nodes.forEach(detach);
			ul0_nodes.forEach(detach);
			section0_nodes.forEach(detach);
			t40 = claim_text(nodes, "\n\n    ");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			heading1.$$.fragment.l(section1_nodes);
			t41 = claim_text(section1_nodes, "\n        ");

			ul1 = claim_element(section1_nodes, "UL", { class: true }, false);
			var ul1_nodes = children(ul1);

			li8 = claim_element(ul1_nodes, "LI", {}, false);
			var li8_nodes = children(li8);

			t42 = claim_text(li8_nodes, "The ");

			a6 = claim_element(li8_nodes, "A", { href: true, class: true }, false);
			var a6_nodes = children(a6);

			t43 = claim_text(a6_nodes, "remote");
			a6_nodes.forEach(detach);
			t44 = claim_text(li8_nodes, " validator fails if Ajax request fails");
			li8_nodes.forEach(detach);
			t45 = claim_text(ul1_nodes, "\n            ");

			li9 = claim_element(ul1_nodes, "LI", {}, false);
			var li9_nodes = children(li9);

			t46 = claim_text(li9_nodes, "Update Netherlands ");

			a7 = claim_element(li9_nodes, "A", { href: true, class: true }, false);
			var a7_nodes = children(a7);

			t47 = claim_text(a7_nodes, "phone number");
			a7_nodes.forEach(detach);
			t48 = claim_text(li9_nodes, " validator");
			li9_nodes.forEach(detach);
			t49 = claim_text(ul1_nodes, "\n            ");

			li10 = claim_element(ul1_nodes, "LI", {}, false);
			var li10_nodes = children(li10);

			t50 = claim_text(li10_nodes, "Add plugin instance to the 3rd parameter of transformer callback");
			li10_nodes.forEach(detach);
			t51 = claim_text(ul1_nodes, "\n            ");

			li11 = claim_element(ul1_nodes, "LI", {}, false);
			var li11_nodes = children(li11);

			t52 = claim_text(li11_nodes, "Add Grunt task that runs the jasmine test suites");
			li11_nodes.forEach(detach);
			ul1_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			t53 = claim_text(nodes, "\n\n    ");

			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			heading2.$$.fragment.l(section2_nodes);
			t54 = claim_text(section2_nodes, "\n        ");

			p = claim_element(section2_nodes, "P", { class: true }, false);
			var p_nodes = children(p);

			t55 = claim_text(p_nodes, "This version fixed the ");

			code4 = claim_element(p_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t56 = claim_text(code4_nodes, "isValid()");
			code4_nodes.forEach(detach);
			t57 = claim_text(p_nodes, " method which should return ");

			code5 = claim_element(p_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t58 = claim_text(code5_nodes, "null");
			code5_nodes.forEach(detach);
			t59 = claim_text(p_nodes, " when there is not validated or being validated field.\n            It also solves the issues where the submit button is disabled even when the form is valid.");
			p_nodes.forEach(detach);
			t60 = claim_text(section2_nodes, "\n\n        ");

			ul2 = claim_element(section2_nodes, "UL", { class: true }, false);
			var ul2_nodes = children(ul2);

			li12 = claim_element(ul2_nodes, "LI", {}, false);
			var li12_nodes = children(li12);

			t61 = claim_text(li12_nodes, "remote validator and ");

			code6 = claim_element(li12_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t62 = claim_text(code6_nodes, "isValid()");
			code6_nodes.forEach(detach);
			t63 = claim_text(li12_nodes, " combined do not work");
			li12_nodes.forEach(detach);
			t64 = claim_text(ul2_nodes, "\n            ");

			li13 = claim_element(ul2_nodes, "LI", {}, false);
			var li13_nodes = children(li13);

			t65 = claim_text(li13_nodes, "Submit button is disabled");
			li13_nodes.forEach(detach);
			t66 = claim_text(ul2_nodes, "\n            ");

			li14 = claim_element(ul2_nodes, "LI", {}, false);
			var li14_nodes = children(li14);

			t67 = claim_text(li14_nodes, "Submit button being disabled");
			li14_nodes.forEach(detach);
			t68 = claim_text(ul2_nodes, "\n            ");

			li15 = claim_element(ul2_nodes, "LI", {}, false);
			var li15_nodes = children(li15);

			t69 = claim_text(li15_nodes, "Can only submit form after changing a value");
			li15_nodes.forEach(detach);
			t70 = claim_text(ul2_nodes, "\n            ");

			li16 = claim_element(ul2_nodes, "LI", {}, false);
			var li16_nodes = children(li16);

			t71 = claim_text(li16_nodes, "Remote validation trigger ");

			code7 = claim_element(li16_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t72 = claim_text(code7_nodes, "err.form.fv");
			code7_nodes.forEach(detach);
			li16_nodes.forEach(detach);
			t73 = claim_text(ul2_nodes, "\n            ");

			li17 = claim_element(ul2_nodes, "LI", {}, false);
			var li17_nodes = children(li17);

			t74 = claim_text(li17_nodes, "Submit incorrectly enabled even though form has errors");
			li17_nodes.forEach(detach);
			t75 = claim_text(ul2_nodes, "\n            ");

			li18 = claim_element(ul2_nodes, "LI", {}, false);
			var li18_nodes = children(li18);

			t76 = claim_text(li18_nodes, "Show the ");

			code8 = claim_element(li18_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t77 = claim_text(code8_nodes, "validating");
			code8_nodes.forEach(detach);
			t78 = claim_text(li18_nodes, " icon when the field is being validated");
			li18_nodes.forEach(detach);
			t79 = claim_text(ul2_nodes, "\n            ");

			li19 = claim_element(ul2_nodes, "LI", {}, false);
			var li19_nodes = children(li19);

			t80 = claim_text(li19_nodes, "Reset checkbox when calling ");

			code9 = claim_element(li19_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t81 = claim_text(code9_nodes, "resetForm()");
			code9_nodes.forEach(detach);
			t82 = claim_text(li19_nodes, " method");
			li19_nodes.forEach(detach);
			t83 = claim_text(ul2_nodes, "\n            ");

			li20 = claim_element(ul2_nodes, "LI", {}, false);
			var li20_nodes = children(li20);

			t84 = claim_text(li20_nodes, "Fix Slovakia ");

			a8 = claim_element(li20_nodes, "A", { href: true, class: true }, false);
			var a8_nodes = children(a8);

			t85 = claim_text(a8_nodes, "phone number");
			a8_nodes.forEach(detach);
			t86 = claim_text(li20_nodes, " validator");
			li20_nodes.forEach(detach);
			t87 = claim_text(ul2_nodes, "\n            ");

			li21 = claim_element(ul2_nodes, "LI", {}, false);
			var li21_nodes = children(li21);

			t88 = claim_text(li21_nodes, "Fix the issue where custom validator doesn't provide default message");
			li21_nodes.forEach(detach);
			t89 = claim_text(ul2_nodes, "\n            ");

			li22 = claim_element(ul2_nodes, "LI", {}, false);
			var li22_nodes = children(li22);

			t90 = claim_text(li22_nodes, "Don't continue if there is no validators attached to fields");
			li22_nodes.forEach(detach);
			t91 = claim_text(ul2_nodes, "\n            ");

			li23 = claim_element(ul2_nodes, "LI", {}, false);
			var li23_nodes = children(li23);

			code10 = claim_element(li23_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t92 = claim_text(code10_nodes, "transformer");
			code10_nodes.forEach(detach);
			t93 = claim_text(li23_nodes, " option doesn't work with ");

			a9 = claim_element(li23_nodes, "A", { href: true, class: true }, false);
			var a9_nodes = children(a9);

			t94 = claim_text(a9_nodes, "notEmpty");
			a9_nodes.forEach(detach);
			t95 = claim_text(li23_nodes, " validator");
			li23_nodes.forEach(detach);
			t96 = claim_text(ul2_nodes, "\n            ");

			li24 = claim_element(ul2_nodes, "LI", {}, false);
			var li24_nodes = children(li24);

			t97 = claim_text(li24_nodes, "Fix ");

			code11 = claim_element(li24_nodes, "CODE", {}, false);
			var code11_nodes = children(code11);

			t98 = claim_text(code11_nodes, "isValidContainer()");
			code11_nodes.forEach(detach);
			t99 = claim_text(li24_nodes, " and ");

			code12 = claim_element(li24_nodes, "CODE", {}, false);
			var code12_nodes = children(code12);

			t100 = claim_text(code12_nodes, "validateContainer()");
			code12_nodes.forEach(detach);
			t101 = claim_text(li24_nodes, " methods to support fields with the same name");
			li24_nodes.forEach(detach);
			ul2_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 4, 92);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 143);
			add_location(code0, file, 11, 20, 324);
			add_location(code1, file, 11, 43, 347);
			add_location(code2, file, 11, 69, 373);
			a0.href = "/guide/validators/remote";
			a0.className = "blue dim link";
			add_location(a0, file, 11, 103, 407);
			add_location(li0, file, 11, 12, 316);
			add_location(li1, file, 12, 12, 503);
			add_location(li2, file, 13, 12, 617);
			add_location(code3, file, 14, 20, 766);
			add_location(li3, file, 14, 12, 758);
			a1.href = "/guide/validators/phone";
			a1.className = "blue dim link";
			add_location(a1, file, 15, 32, 855);
			add_location(li4, file, 15, 12, 835);
			a2.href = "/guide/validators/zip-code";
			a2.className = "blue dim link";
			add_location(a2, file, 16, 30, 966);
			add_location(li5, file, 16, 12, 948);
			a3.href = "/guide/validators/phone";
			a3.className = "blue dim link";
			add_location(a3, file, 17, 30, 1083);
			add_location(li6, file, 17, 12, 1065);
			a4.href = "/guide/validators/zip-code/";
			add_location(a4, file, 18, 27, 1198);
			a5.href = "/guide/validators/id";
			a5.className = "blue dim link";
			add_location(a5, file, 18, 82, 1253);
			add_location(li7, file, 18, 12, 1183);
			ul0.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul0, file, 10, 8, 271);
			section0.className = "mv5";
			add_location(section0, file, 8, 4, 201);
			a6.href = "/guide/validators/remote";
			a6.className = "blue dim link";
			add_location(a6, file, 25, 20, 1486);
			add_location(li8, file, 25, 12, 1478);
			a7.href = "/guide/validators/phone";
			a7.className = "blue dim link";
			add_location(a7, file, 26, 35, 1632);
			add_location(li9, file, 26, 12, 1609);
			add_location(li10, file, 27, 12, 1732);
			add_location(li11, file, 28, 12, 1818);
			ul1.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul1, file, 24, 8, 1433);
			section1.className = "mv5";
			add_location(section1, file, 22, 4, 1363);
			add_location(code4, file, 34, 50, 2019);
			add_location(code5, file, 34, 100, 2069);
			p.className = "lh-copy";
			add_location(p, file, 34, 8, 1977);
			add_location(code6, file, 38, 37, 2327);
			add_location(li12, file, 38, 12, 2302);
			add_location(li13, file, 39, 12, 2388);
			add_location(li14, file, 40, 12, 2435);
			add_location(li15, file, 41, 12, 2485);
			add_location(code7, file, 42, 42, 2580);
			add_location(li16, file, 42, 12, 2550);
			add_location(li17, file, 43, 12, 2622);
			add_location(code8, file, 44, 25, 2711);
			add_location(li18, file, 44, 12, 2698);
			add_location(code9, file, 45, 44, 2823);
			add_location(li19, file, 45, 12, 2791);
			a8.href = "/guide/validators/phone";
			a8.className = "blue dim link";
			add_location(a8, file, 46, 29, 2889);
			add_location(li20, file, 46, 12, 2872);
			add_location(li21, file, 47, 12, 2989);
			add_location(li22, file, 48, 12, 3079);
			add_location(code10, file, 49, 16, 3164);
			a9.href = "/guide/validators/not-empty";
			a9.className = "blue dim link";
			add_location(a9, file, 49, 66, 3214);
			add_location(li23, file, 49, 12, 3160);
			add_location(code11, file, 50, 20, 3322);
			add_location(code12, file, 50, 56, 3358);
			add_location(li24, file, 50, 12, 3314);
			ul2.className = "pa0 ma0 ml3 lh-copy";
			add_location(ul2, file, 37, 8, 2257);
			section2.className = "mv5";
			add_location(section2, file, 32, 4, 1910);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading0, section0, null);
			append(section0, t4);
			append(section0, ul0);
			append(ul0, li0);
			append(li0, t5);
			append(li0, code0);
			append(code0, t6);
			append(li0, t7);
			append(li0, code1);
			append(code1, t8);
			append(li0, t9);
			append(li0, code2);
			append(code2, t10);
			append(li0, t11);
			append(li0, a0);
			append(a0, t12);
			append(li0, t13);
			append(ul0, t14);
			append(ul0, li1);
			append(li1, t15);
			append(ul0, t16);
			append(ul0, li2);
			append(li2, t17);
			append(ul0, t18);
			append(ul0, li3);
			append(li3, t19);
			append(li3, code3);
			append(code3, t20);
			append(li3, t21);
			append(ul0, t22);
			append(ul0, li4);
			append(li4, t23);
			append(li4, a1);
			append(a1, t24);
			append(li4, t25);
			append(ul0, t26);
			append(ul0, li5);
			append(li5, t27);
			append(li5, a2);
			append(a2, t28);
			append(li5, t29);
			append(ul0, t30);
			append(ul0, li6);
			append(li6, t31);
			append(li6, a3);
			append(a3, t32);
			append(li6, t33);
			append(ul0, t34);
			append(ul0, li7);
			append(li7, t35);
			append(li7, a4);
			append(a4, t36);
			append(li7, t37);
			append(li7, a5);
			append(a5, t38);
			append(li7, t39);
			insert(target, t40, anchor);
			insert(target, section1, anchor);
			mount_component(heading1, section1, null);
			append(section1, t41);
			append(section1, ul1);
			append(ul1, li8);
			append(li8, t42);
			append(li8, a6);
			append(a6, t43);
			append(li8, t44);
			append(ul1, t45);
			append(ul1, li9);
			append(li9, t46);
			append(li9, a7);
			append(a7, t47);
			append(li9, t48);
			append(ul1, t49);
			append(ul1, li10);
			append(li10, t50);
			append(ul1, t51);
			append(ul1, li11);
			append(li11, t52);
			insert(target, t53, anchor);
			insert(target, section2, anchor);
			mount_component(heading2, section2, null);
			append(section2, t54);
			append(section2, p);
			append(p, t55);
			append(p, code4);
			append(code4, t56);
			append(p, t57);
			append(p, code5);
			append(code5, t58);
			append(p, t59);
			append(section2, t60);
			append(section2, ul2);
			append(ul2, li12);
			append(li12, t61);
			append(li12, code6);
			append(code6, t62);
			append(li12, t63);
			append(ul2, t64);
			append(ul2, li13);
			append(li13, t65);
			append(ul2, t66);
			append(ul2, li14);
			append(li14, t67);
			append(ul2, t68);
			append(ul2, li15);
			append(li15, t69);
			append(ul2, t70);
			append(ul2, li16);
			append(li16, t71);
			append(li16, code7);
			append(code7, t72);
			append(ul2, t73);
			append(ul2, li17);
			append(li17, t74);
			append(ul2, t75);
			append(ul2, li18);
			append(li18, t76);
			append(li18, code8);
			append(code8, t77);
			append(li18, t78);
			append(ul2, t79);
			append(ul2, li19);
			append(li19, t80);
			append(li19, code9);
			append(code9, t81);
			append(li19, t82);
			append(ul2, t83);
			append(ul2, li20);
			append(li20, t84);
			append(li20, a8);
			append(a8, t85);
			append(li20, t86);
			append(ul2, t87);
			append(ul2, li21);
			append(li21, t88);
			append(ul2, t89);
			append(ul2, li22);
			append(li22, t90);
			append(ul2, t91);
			append(ul2, li23);
			append(li23, code10);
			append(code10, t92);
			append(li23, t93);
			append(li23, a9);
			append(a9, t94);
			append(li23, t95);
			append(ul2, t96);
			append(ul2, li24);
			append(li24, t97);
			append(li24, code11);
			append(code11, t98);
			append(li24, t99);
			append(li24, code12);
			append(code12, t100);
			append(li24, t101);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading0_changes = {};
			if (changed.$$scope) heading0_changes.$$scope = { changed, ctx };
			heading0.$set(heading0_changes);

			var heading1_changes = {};
			if (changed.$$scope) heading1_changes.$$scope = { changed, ctx };
			heading1.$set(heading1_changes);

			var heading2_changes = {};
			if (changed.$$scope) heading2_changes.$$scope = { changed, ctx };
			heading2.$set(heading2_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading0.$$.fragment.i(local);

			heading1.$$.fragment.i(local);

			heading2.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading0.$$.fragment.o(local);
			heading1.$$.fragment.o(local);
			heading2.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading0.$destroy();

			if (detaching) {
				detach(t40);
				detach(section1);
			}

			heading1.$destroy();

			if (detaching) {
				detach(t53);
				detach(section2);
			}

			heading2.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var changeloglayout = new ChangelogLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			changeloglayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			changeloglayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • v0.6.1";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(changeloglayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var changeloglayout_changes = {};
			if (changed.$$scope) changeloglayout_changes.$$scope = { changed, ctx };
			changeloglayout.$set(changeloglayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			changeloglayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			changeloglayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			changeloglayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, r as noop } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import './chunk.77ca656e.js';
import './chunk.8206184d.js';
import './chunk.47169253.js';
import './chunk.04c942d0.js';
import './chunk.42493314.js';
import { a as Demo } from './chunk.095827ef.js';
import './chunk.75c83501.js';
import './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as RelatedValidators } from './chunk.609a43e8.js';

/* src/routes/guide/examples/using-html-5-inputs-and-attributes/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/using-html-5-inputs-and-attributes/index.svelte";

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, section, p, t2, code0, t3, t4, code1, t5, t6, a0, t7, t8, t9, table, tr0, th0, t10, t11, th1, t12, t13, tr1, td0, code2, t14, t15, td1, a1, t16, t17, tr2, td2, code3, t18, t19, td3, a2, t20, t21, tr3, td4, code4, t22, t23, td5, a3, t24, t25, tr4, td6, code5, t26, t27, td7, a4, t28, t29, tr5, td8, code6, t30, t31, td9, a5, t32, t33, tr6, td10, code7, t34, t35, td11, a6, t36, t37, tr7, td12, code8, t38, t39, td13, a7, t40, t41, tr8, td14, code9, t42, t43, td15, a8, t44, t45, tr9, td16, code10, t46, t47, td17, a9, t48, t49, tr10, td18, code11, t50, t51, td19, a10, t52, t53, t54, current;

	var demo = new Demo({
		props: {
		prefix: "/guide/examples/using-html-5-inputs-and-attributes",
		frameworks: ['tachyons']
	},
		$$inline: true
	});

	var relatedvalidators = new RelatedValidators({
		props: { validators: ['between', 'color', 'emailAddress', 'greaterThan', 'lessThan', 'notEmpty', 'stringLength', 'regexp', 'uri'] },
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Using HTML 5 inputs and attributes");
			t1 = space();
			section = element("section");
			p = element("p");
			t2 = text("When the ");
			code0 = element("code");
			t3 = text("html5Input");
			t4 = text(" option is set to ");
			code1 = element("code");
			t5 = text("true");
			t6 = text(", the ");
			a0 = element("a");
			t7 = text("Declarative plugin");
			t8 = text(" will automatically enable the validators for the following input type and HTML 5 attributes:");
			t9 = space();
			table = element("table");
			tr0 = element("tr");
			th0 = element("th");
			t10 = text("HTML 5 attribute");
			t11 = space();
			th1 = element("th");
			t12 = text("Equivalent validator");
			t13 = space();
			tr1 = element("tr");
			td0 = element("td");
			code2 = element("code");
			t14 = text("max=\"...\"");
			t15 = space();
			td1 = element("td");
			a1 = element("a");
			t16 = text("lessThan");
			t17 = space();
			tr2 = element("tr");
			td2 = element("td");
			code3 = element("code");
			t18 = text("min=\"...\"");
			t19 = space();
			td3 = element("td");
			a2 = element("a");
			t20 = text("greaterThan");
			t21 = space();
			tr3 = element("tr");
			td4 = element("td");
			code4 = element("code");
			t22 = text("maxlength=\"...\"");
			t23 = space();
			td5 = element("td");
			a3 = element("a");
			t24 = text("stringLength");
			t25 = space();
			tr4 = element("tr");
			td6 = element("td");
			code5 = element("code");
			t26 = text("minlength=\"...\"");
			t27 = space();
			td7 = element("td");
			a4 = element("a");
			t28 = text("stringLength");
			t29 = space();
			tr5 = element("tr");
			td8 = element("td");
			code6 = element("code");
			t30 = text("pattern=\"...\"");
			t31 = space();
			td9 = element("td");
			a5 = element("a");
			t32 = text("regexp");
			t33 = space();
			tr6 = element("tr");
			td10 = element("td");
			code7 = element("code");
			t34 = text("required");
			t35 = space();
			td11 = element("td");
			a6 = element("a");
			t36 = text("notEmpty");
			t37 = space();
			tr7 = element("tr");
			td12 = element("td");
			code8 = element("code");
			t38 = text("type=\"color\"");
			t39 = space();
			td13 = element("td");
			a7 = element("a");
			t40 = text("color");
			t41 = space();
			tr8 = element("tr");
			td14 = element("td");
			code9 = element("code");
			t42 = text("type=\"email\"");
			t43 = space();
			td15 = element("td");
			a8 = element("a");
			t44 = text("emailAddress");
			t45 = space();
			tr9 = element("tr");
			td16 = element("td");
			code10 = element("code");
			t46 = text("type=\"range\"");
			t47 = space();
			td17 = element("td");
			a9 = element("a");
			t48 = text("between");
			t49 = space();
			tr10 = element("tr");
			td18 = element("td");
			code11 = element("code");
			t50 = text("type=\"url\"");
			t51 = space();
			td19 = element("td");
			a10 = element("a");
			t52 = text("uri");
			t53 = space();
			demo.$$.fragment.c();
			t54 = space();
			relatedvalidators.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Using HTML 5 inputs and attributes");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    \n    ");

			section = claim_element(nodes, "SECTION", { class: true }, false);
			var section_nodes = children(section);

			p = claim_element(section_nodes, "P", { class: true }, false);
			var p_nodes = children(p);

			t2 = claim_text(p_nodes, "When the ");

			code0 = claim_element(p_nodes, "CODE", {}, false);
			var code0_nodes = children(code0);

			t3 = claim_text(code0_nodes, "html5Input");
			code0_nodes.forEach(detach);
			t4 = claim_text(p_nodes, " option is set to ");

			code1 = claim_element(p_nodes, "CODE", {}, false);
			var code1_nodes = children(code1);

			t5 = claim_text(code1_nodes, "true");
			code1_nodes.forEach(detach);
			t6 = claim_text(p_nodes, ", the ");

			a0 = claim_element(p_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t7 = claim_text(a0_nodes, "Declarative plugin");
			a0_nodes.forEach(detach);
			t8 = claim_text(p_nodes, " will automatically enable the validators for the following input type and HTML 5 attributes:");
			p_nodes.forEach(detach);
			t9 = claim_text(section_nodes, "\n\n        ");

			table = claim_element(section_nodes, "TABLE", { class: true }, false);
			var table_nodes = children(table);

			tr0 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr0_nodes = children(tr0);

			th0 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th0_nodes = children(th0);

			t10 = claim_text(th0_nodes, "HTML 5 attribute");
			th0_nodes.forEach(detach);
			t11 = claim_text(tr0_nodes, "\n                ");

			th1 = claim_element(tr0_nodes, "TH", { class: true }, false);
			var th1_nodes = children(th1);

			t12 = claim_text(th1_nodes, "Equivalent validator");
			th1_nodes.forEach(detach);
			tr0_nodes.forEach(detach);
			t13 = claim_text(table_nodes, "\n            ");

			tr1 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr1_nodes = children(tr1);

			td0 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td0_nodes = children(td0);

			code2 = claim_element(td0_nodes, "CODE", {}, false);
			var code2_nodes = children(code2);

			t14 = claim_text(code2_nodes, "max=\"...\"");
			code2_nodes.forEach(detach);
			td0_nodes.forEach(detach);
			t15 = claim_text(tr1_nodes, "\n                ");

			td1 = claim_element(tr1_nodes, "TD", { class: true }, false);
			var td1_nodes = children(td1);

			a1 = claim_element(td1_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t16 = claim_text(a1_nodes, "lessThan");
			a1_nodes.forEach(detach);
			td1_nodes.forEach(detach);
			tr1_nodes.forEach(detach);
			t17 = claim_text(table_nodes, "\n            ");

			tr2 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr2_nodes = children(tr2);

			td2 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td2_nodes = children(td2);

			code3 = claim_element(td2_nodes, "CODE", {}, false);
			var code3_nodes = children(code3);

			t18 = claim_text(code3_nodes, "min=\"...\"");
			code3_nodes.forEach(detach);
			td2_nodes.forEach(detach);
			t19 = claim_text(tr2_nodes, "\n                ");

			td3 = claim_element(tr2_nodes, "TD", { class: true }, false);
			var td3_nodes = children(td3);

			a2 = claim_element(td3_nodes, "A", { href: true, class: true }, false);
			var a2_nodes = children(a2);

			t20 = claim_text(a2_nodes, "greaterThan");
			a2_nodes.forEach(detach);
			td3_nodes.forEach(detach);
			tr2_nodes.forEach(detach);
			t21 = claim_text(table_nodes, "\n            ");

			tr3 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr3_nodes = children(tr3);

			td4 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td4_nodes = children(td4);

			code4 = claim_element(td4_nodes, "CODE", {}, false);
			var code4_nodes = children(code4);

			t22 = claim_text(code4_nodes, "maxlength=\"...\"");
			code4_nodes.forEach(detach);
			td4_nodes.forEach(detach);
			t23 = claim_text(tr3_nodes, "\n                ");

			td5 = claim_element(tr3_nodes, "TD", { class: true }, false);
			var td5_nodes = children(td5);

			a3 = claim_element(td5_nodes, "A", { href: true, class: true }, false);
			var a3_nodes = children(a3);

			t24 = claim_text(a3_nodes, "stringLength");
			a3_nodes.forEach(detach);
			td5_nodes.forEach(detach);
			tr3_nodes.forEach(detach);
			t25 = claim_text(table_nodes, "\n            ");

			tr4 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr4_nodes = children(tr4);

			td6 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td6_nodes = children(td6);

			code5 = claim_element(td6_nodes, "CODE", {}, false);
			var code5_nodes = children(code5);

			t26 = claim_text(code5_nodes, "minlength=\"...\"");
			code5_nodes.forEach(detach);
			td6_nodes.forEach(detach);
			t27 = claim_text(tr4_nodes, "\n                ");

			td7 = claim_element(tr4_nodes, "TD", { class: true }, false);
			var td7_nodes = children(td7);

			a4 = claim_element(td7_nodes, "A", { href: true, class: true }, false);
			var a4_nodes = children(a4);

			t28 = claim_text(a4_nodes, "stringLength");
			a4_nodes.forEach(detach);
			td7_nodes.forEach(detach);
			tr4_nodes.forEach(detach);
			t29 = claim_text(table_nodes, "\n            ");

			tr5 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr5_nodes = children(tr5);

			td8 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td8_nodes = children(td8);

			code6 = claim_element(td8_nodes, "CODE", {}, false);
			var code6_nodes = children(code6);

			t30 = claim_text(code6_nodes, "pattern=\"...\"");
			code6_nodes.forEach(detach);
			td8_nodes.forEach(detach);
			t31 = claim_text(tr5_nodes, "\n                ");

			td9 = claim_element(tr5_nodes, "TD", { class: true }, false);
			var td9_nodes = children(td9);

			a5 = claim_element(td9_nodes, "A", { href: true, class: true }, false);
			var a5_nodes = children(a5);

			t32 = claim_text(a5_nodes, "regexp");
			a5_nodes.forEach(detach);
			td9_nodes.forEach(detach);
			tr5_nodes.forEach(detach);
			t33 = claim_text(table_nodes, "\n            ");

			tr6 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr6_nodes = children(tr6);

			td10 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td10_nodes = children(td10);

			code7 = claim_element(td10_nodes, "CODE", {}, false);
			var code7_nodes = children(code7);

			t34 = claim_text(code7_nodes, "required");
			code7_nodes.forEach(detach);
			td10_nodes.forEach(detach);
			t35 = claim_text(tr6_nodes, "\n                ");

			td11 = claim_element(tr6_nodes, "TD", { class: true }, false);
			var td11_nodes = children(td11);

			a6 = claim_element(td11_nodes, "A", { href: true, class: true }, false);
			var a6_nodes = children(a6);

			t36 = claim_text(a6_nodes, "notEmpty");
			a6_nodes.forEach(detach);
			td11_nodes.forEach(detach);
			tr6_nodes.forEach(detach);
			t37 = claim_text(table_nodes, "\n            ");

			tr7 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr7_nodes = children(tr7);

			td12 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td12_nodes = children(td12);

			code8 = claim_element(td12_nodes, "CODE", {}, false);
			var code8_nodes = children(code8);

			t38 = claim_text(code8_nodes, "type=\"color\"");
			code8_nodes.forEach(detach);
			td12_nodes.forEach(detach);
			t39 = claim_text(tr7_nodes, "\n                ");

			td13 = claim_element(tr7_nodes, "TD", { class: true }, false);
			var td13_nodes = children(td13);

			a7 = claim_element(td13_nodes, "A", { href: true, class: true }, false);
			var a7_nodes = children(a7);

			t40 = claim_text(a7_nodes, "color");
			a7_nodes.forEach(detach);
			td13_nodes.forEach(detach);
			tr7_nodes.forEach(detach);
			t41 = claim_text(table_nodes, "\n            ");

			tr8 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr8_nodes = children(tr8);

			td14 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td14_nodes = children(td14);

			code9 = claim_element(td14_nodes, "CODE", {}, false);
			var code9_nodes = children(code9);

			t42 = claim_text(code9_nodes, "type=\"email\"");
			code9_nodes.forEach(detach);
			td14_nodes.forEach(detach);
			t43 = claim_text(tr8_nodes, "\n                ");

			td15 = claim_element(tr8_nodes, "TD", { class: true }, false);
			var td15_nodes = children(td15);

			a8 = claim_element(td15_nodes, "A", { href: true, class: true }, false);
			var a8_nodes = children(a8);

			t44 = claim_text(a8_nodes, "emailAddress");
			a8_nodes.forEach(detach);
			td15_nodes.forEach(detach);
			tr8_nodes.forEach(detach);
			t45 = claim_text(table_nodes, "\n            ");

			tr9 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr9_nodes = children(tr9);

			td16 = claim_element(tr9_nodes, "TD", { class: true }, false);
			var td16_nodes = children(td16);

			code10 = claim_element(td16_nodes, "CODE", {}, false);
			var code10_nodes = children(code10);

			t46 = claim_text(code10_nodes, "type=\"range\"");
			code10_nodes.forEach(detach);
			td16_nodes.forEach(detach);
			t47 = claim_text(tr9_nodes, "\n                ");

			td17 = claim_element(tr9_nodes, "TD", { class: true }, false);
			var td17_nodes = children(td17);

			a9 = claim_element(td17_nodes, "A", { href: true, class: true }, false);
			var a9_nodes = children(a9);

			t48 = claim_text(a9_nodes, "between");
			a9_nodes.forEach(detach);
			td17_nodes.forEach(detach);
			tr9_nodes.forEach(detach);
			t49 = claim_text(table_nodes, "\n            ");

			tr10 = claim_element(table_nodes, "TR", { class: true }, false);
			var tr10_nodes = children(tr10);

			td18 = claim_element(tr10_nodes, "TD", { class: true }, false);
			var td18_nodes = children(td18);

			code11 = claim_element(td18_nodes, "CODE", {}, false);
			var code11_nodes = children(code11);

			t50 = claim_text(code11_nodes, "type=\"url\"");
			code11_nodes.forEach(detach);
			td18_nodes.forEach(detach);
			t51 = claim_text(tr10_nodes, "\n                ");

			td19 = claim_element(tr10_nodes, "TD", { class: true }, false);
			var td19_nodes = children(td19);

			a10 = claim_element(td19_nodes, "A", { href: true, class: true }, false);
			var a10_nodes = children(a10);

			t52 = claim_text(a10_nodes, "uri");
			a10_nodes.forEach(detach);
			td19_nodes.forEach(detach);
			tr10_nodes.forEach(detach);
			table_nodes.forEach(detach);
			t53 = claim_text(section_nodes, "\n\n        ");
			demo.$$.fragment.l(section_nodes);
			section_nodes.forEach(detach);
			t54 = claim_text(nodes, "\n\n    ");
			relatedvalidators.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			h1.className = "tc lh-copy";
			add_location(h1, file, 5, 4, 116);
			add_location(code0, file, 8, 36, 246);
			add_location(code1, file, 8, 77, 287);
			a0.href = "/guide/plugins/declarative";
			a0.className = "blue dim link";
			add_location(a0, file, 8, 100, 310);
			p.className = "lh-copy";
			add_location(p, file, 8, 8, 218);
			th0.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th0, file, 12, 16, 621);
			th1.className = "pv2 ph3 tl f6 fw6 ttu";
			add_location(th1, file, 13, 16, 693);
			tr0.className = "striped--light-gray";
			add_location(tr0, file, 11, 12, 572);
			add_location(code2, file, 16, 36, 852);
			td0.className = "pv2 ph3";
			add_location(td0, file, 16, 16, 832);
			a1.href = "/guide/validators/less-than";
			a1.className = "blue dim link";
			add_location(a1, file, 17, 36, 916);
			td1.className = "pv2 ph3";
			add_location(td1, file, 17, 16, 896);
			tr1.className = "striped--light-gray";
			add_location(tr1, file, 15, 12, 783);
			add_location(code3, file, 20, 36, 1093);
			td2.className = "pv2 ph3";
			add_location(td2, file, 20, 16, 1073);
			a2.href = "/guide/validators/greater-than";
			a2.className = "blue dim link";
			add_location(a2, file, 21, 36, 1157);
			td3.className = "pv2 ph3";
			add_location(td3, file, 21, 16, 1137);
			tr2.className = "striped--light-gray";
			add_location(tr2, file, 19, 12, 1024);
			add_location(code4, file, 24, 36, 1340);
			td4.className = "pv2 ph3";
			add_location(td4, file, 24, 16, 1320);
			a3.href = "/guide/validators/string-length";
			a3.className = "blue dim link";
			add_location(a3, file, 25, 36, 1410);
			td5.className = "pv2 ph3";
			add_location(td5, file, 25, 16, 1390);
			tr3.className = "striped--light-gray";
			add_location(tr3, file, 23, 12, 1271);
			add_location(code5, file, 28, 36, 1595);
			td6.className = "pv2 ph3";
			add_location(td6, file, 28, 16, 1575);
			a4.href = "/guide/validators/string-length";
			a4.className = "blue dim link";
			add_location(a4, file, 29, 36, 1665);
			td7.className = "pv2 ph3";
			add_location(td7, file, 29, 16, 1645);
			tr4.className = "striped--light-gray";
			add_location(tr4, file, 27, 12, 1526);
			add_location(code6, file, 32, 36, 1850);
			td8.className = "pv2 ph3";
			add_location(td8, file, 32, 16, 1830);
			a5.href = "/guide/validators/regexp";
			a5.className = "blue dim link";
			add_location(a5, file, 33, 36, 1918);
			td9.className = "pv2 ph3";
			add_location(td9, file, 33, 16, 1898);
			tr5.className = "striped--light-gray";
			add_location(tr5, file, 31, 12, 1781);
			add_location(code7, file, 36, 36, 2090);
			td10.className = "pv2 ph3";
			add_location(td10, file, 36, 16, 2070);
			a6.href = "/guide/validators/not-empty";
			a6.className = "blue dim link";
			add_location(a6, file, 37, 36, 2153);
			td11.className = "pv2 ph3";
			add_location(td11, file, 37, 16, 2133);
			tr6.className = "striped--light-gray";
			add_location(tr6, file, 35, 12, 2021);
			add_location(code8, file, 40, 36, 2330);
			td12.className = "pv2 ph3";
			add_location(td12, file, 40, 16, 2310);
			a7.href = "/guide/validators/color";
			a7.className = "blue dim link";
			add_location(a7, file, 41, 36, 2397);
			td13.className = "pv2 ph3";
			add_location(td13, file, 41, 16, 2377);
			tr7.className = "striped--light-gray";
			add_location(tr7, file, 39, 12, 2261);
			add_location(code9, file, 44, 36, 2567);
			td14.className = "pv2 ph3";
			add_location(td14, file, 44, 16, 2547);
			a8.href = "/guide/validators/email-address";
			a8.className = "blue dim link";
			add_location(a8, file, 45, 36, 2634);
			td15.className = "pv2 ph3";
			add_location(td15, file, 45, 16, 2614);
			tr8.className = "striped--light-gray";
			add_location(tr8, file, 43, 12, 2498);
			add_location(code10, file, 48, 36, 2819);
			td16.className = "pv2 ph3";
			add_location(td16, file, 48, 16, 2799);
			a9.href = "/guide/validators/between";
			a9.className = "blue dim link";
			add_location(a9, file, 49, 36, 2886);
			td17.className = "pv2 ph3";
			add_location(td17, file, 49, 16, 2866);
			tr9.className = "striped--light-gray";
			add_location(tr9, file, 47, 12, 2750);
			add_location(code11, file, 52, 36, 3060);
			td18.className = "pv2 ph3";
			add_location(td18, file, 52, 16, 3040);
			a10.href = "/guide/validators/uri";
			a10.className = "blue dim link";
			add_location(a10, file, 53, 36, 3125);
			td19.className = "pv2 ph3";
			add_location(td19, file, 53, 16, 3105);
			tr10.className = "striped--light-gray";
			add_location(tr10, file, 51, 12, 2991);
			table.className = "collapse ba br2 b--black-10 pv2 ph3 w-100 mb4";
			add_location(table, file, 10, 8, 498);
			section.className = "mv5";
			add_location(section, file, 7, 4, 188);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, section, anchor);
			append(section, p);
			append(p, t2);
			append(p, code0);
			append(code0, t3);
			append(p, t4);
			append(p, code1);
			append(code1, t5);
			append(p, t6);
			append(p, a0);
			append(a0, t7);
			append(p, t8);
			append(section, t9);
			append(section, table);
			append(table, tr0);
			append(tr0, th0);
			append(th0, t10);
			append(tr0, t11);
			append(tr0, th1);
			append(th1, t12);
			append(table, t13);
			append(table, tr1);
			append(tr1, td0);
			append(td0, code2);
			append(code2, t14);
			append(tr1, t15);
			append(tr1, td1);
			append(td1, a1);
			append(a1, t16);
			append(table, t17);
			append(table, tr2);
			append(tr2, td2);
			append(td2, code3);
			append(code3, t18);
			append(tr2, t19);
			append(tr2, td3);
			append(td3, a2);
			append(a2, t20);
			append(table, t21);
			append(table, tr3);
			append(tr3, td4);
			append(td4, code4);
			append(code4, t22);
			append(tr3, t23);
			append(tr3, td5);
			append(td5, a3);
			append(a3, t24);
			append(table, t25);
			append(table, tr4);
			append(tr4, td6);
			append(td6, code5);
			append(code5, t26);
			append(tr4, t27);
			append(tr4, td7);
			append(td7, a4);
			append(a4, t28);
			append(table, t29);
			append(table, tr5);
			append(tr5, td8);
			append(td8, code6);
			append(code6, t30);
			append(tr5, t31);
			append(tr5, td9);
			append(td9, a5);
			append(a5, t32);
			append(table, t33);
			append(table, tr6);
			append(tr6, td10);
			append(td10, code7);
			append(code7, t34);
			append(tr6, t35);
			append(tr6, td11);
			append(td11, a6);
			append(a6, t36);
			append(table, t37);
			append(table, tr7);
			append(tr7, td12);
			append(td12, code8);
			append(code8, t38);
			append(tr7, t39);
			append(tr7, td13);
			append(td13, a7);
			append(a7, t40);
			append(table, t41);
			append(table, tr8);
			append(tr8, td14);
			append(td14, code9);
			append(code9, t42);
			append(tr8, t43);
			append(tr8, td15);
			append(td15, a8);
			append(a8, t44);
			append(table, t45);
			append(table, tr9);
			append(tr9, td16);
			append(td16, code10);
			append(code10, t46);
			append(tr9, t47);
			append(tr9, td17);
			append(td17, a9);
			append(a9, t48);
			append(table, t49);
			append(table, tr10);
			append(tr10, td18);
			append(td18, code11);
			append(code11, t50);
			append(tr10, t51);
			append(tr10, td19);
			append(td19, a10);
			append(a10, t52);
			append(section, t53);
			mount_component(demo, section, null);
			insert(target, t54, anchor);
			mount_component(relatedvalidators, target, anchor);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			demo.$$.fragment.i(local);

			relatedvalidators.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			demo.$$.fragment.o(local);
			relatedvalidators.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(section);
			}

			demo.$destroy();

			if (detaching) {
				detach(t54);
			}

			relatedvalidators.$destroy(detaching);
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Using HTML 5 inputs and attributes";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, g as space, j as claim_text, o as insert, t as mount_component, m as detach, h as element, i as text, k as claim_element, l as children, n as add_location, p as append, r as noop, w as empty, I as destroy_each, y as on_outro } from './chunk.989912da.js';
import './chunk.9eca0151.js';
import { a as Cards, b as Card } from './chunk.77ca656e.js';
import './chunk.8206184d.js';
import { a as Heading } from './chunk.aa7fcff5.js';
import './chunk.058c0688.js';
import './chunk.4e6dbbb2.js';
import { a as GuideLayout } from './chunk.2ddcebe2.js';
import { a as NextButton } from './chunk.cdfc7765.js';

/* src/routes/guide/index.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.framework = list[i];
	child_ctx.i = i;
	return child_ctx;
}

// (10:2) <Heading>
function create_default_slot_9(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Latest updates");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Latest updates");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (17:3) <Card target="/guide/plugins/declarative" title="Declarative">
function create_default_slot_8(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Provide the ability of declaring validator options via HTML attributes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Provide the ability of declaring validator options via HTML attributes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (18:3) <Card target="/guide/plugins/excluded" title="Excluded">
function create_default_slot_7(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Ignore validations on particular field");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Ignore validations on particular field");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (19:3) <Card target="/guide/plugins/sequence" title="Sequence">
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Stop performing remaining validators if there is a validator that the field does not pass");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Stop performing remaining validators if there is a validator that the field does not pass");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (20:3) <Card target="/guide/plugins/start-end-date" title="StartEndDate">
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Validate start and end dates");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Validate start and end dates");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (21:3) <Card target="/guide/plugins/wizard" title="Wizard">
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Support validating multiple steps form");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Support validating multiple steps form");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (16:2) <Cards>
function create_default_slot_3(ctx) {
	var t0, t1, t2, t3, current;

	var card0 = new Card({
		props: {
		target: "/guide/plugins/declarative",
		title: "Declarative",
		$$slots: { default: [create_default_slot_8] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card1 = new Card({
		props: {
		target: "/guide/plugins/excluded",
		title: "Excluded",
		$$slots: { default: [create_default_slot_7] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card2 = new Card({
		props: {
		target: "/guide/plugins/sequence",
		title: "Sequence",
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card3 = new Card({
		props: {
		target: "/guide/plugins/start-end-date",
		title: "StartEndDate",
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var card4 = new Card({
		props: {
		target: "/guide/plugins/wizard",
		title: "Wizard",
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			card0.$$.fragment.c();
			t0 = space();
			card1.$$.fragment.c();
			t1 = space();
			card2.$$.fragment.c();
			t2 = space();
			card3.$$.fragment.c();
			t3 = space();
			card4.$$.fragment.c();
		},

		l: function claim(nodes) {
			card0.$$.fragment.l(nodes);
			t0 = claim_text(nodes, "\n\t\t\t");
			card1.$$.fragment.l(nodes);
			t1 = claim_text(nodes, "\n\t\t\t");
			card2.$$.fragment.l(nodes);
			t2 = claim_text(nodes, "\n\t\t\t");
			card3.$$.fragment.l(nodes);
			t3 = claim_text(nodes, "\n\t\t\t");
			card4.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(card0, target, anchor);
			insert(target, t0, anchor);
			mount_component(card1, target, anchor);
			insert(target, t1, anchor);
			mount_component(card2, target, anchor);
			insert(target, t2, anchor);
			mount_component(card3, target, anchor);
			insert(target, t3, anchor);
			mount_component(card4, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var card0_changes = {};
			if (changed.$$scope) card0_changes.$$scope = { changed, ctx };
			card0.$set(card0_changes);

			var card1_changes = {};
			if (changed.$$scope) card1_changes.$$scope = { changed, ctx };
			card1.$set(card1_changes);

			var card2_changes = {};
			if (changed.$$scope) card2_changes.$$scope = { changed, ctx };
			card2.$set(card2_changes);

			var card3_changes = {};
			if (changed.$$scope) card3_changes.$$scope = { changed, ctx };
			card3.$set(card3_changes);

			var card4_changes = {};
			if (changed.$$scope) card4_changes.$$scope = { changed, ctx };
			card4.$set(card4_changes);
		},

		i: function intro(local) {
			if (current) return;
			card0.$$.fragment.i(local);

			card1.$$.fragment.i(local);

			card2.$$.fragment.i(local);

			card3.$$.fragment.i(local);

			card4.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			card0.$$.fragment.o(local);
			card1.$$.fragment.o(local);
			card2.$$.fragment.o(local);
			card3.$$.fragment.o(local);
			card4.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			card0.$destroy(detaching);

			if (detaching) {
				detach(t0);
			}

			card1.$destroy(detaching);

			if (detaching) {
				detach(t1);
			}

			card2.$destroy(detaching);

			if (detaching) {
				detach(t2);
			}

			card3.$destroy(detaching);

			if (detaching) {
				detach(t3);
			}

			card4.$destroy(detaching);
		}
	};
}

// (28:8) {#each ['Bootstrap', 'Bootstrap3', 'Bulma', 'Foundation', 'Materialize', 'Milligram', 'Mini', 'Mui', 'Pure', 'Semantic', 'Shoelace', 'Spectre', 'Tachyons', 'Turret', 'Uikit'] as framework, i}
function create_each_block(ctx) {
	var current;

	var card = new Card({
		props: {
		target: "/guide/plugins/" + ctx.framework.toLowerCase(),
		title: ctx.framework
	},
		$$inline: true
	});

	return {
		c: function create() {
			card.$$.fragment.c();
		},

		l: function claim(nodes) {
			card.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			card.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			card.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			card.$destroy(detaching);
		}
	};
}

// (27:2) <Cards>
function create_default_slot_2(ctx) {
	var each_1_anchor, current;

	var each_value = ['Bootstrap', 'Bootstrap3', 'Bulma', 'Foundation', 'Materialize', 'Milligram', 'Mini', 'Mui', 'Pure', 'Semantic', 'Shoelace', 'Spectre', 'Tachyons', 'Turret', 'Uikit'];

	var each_blocks = [];

	for (var i = 0; i < 15; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	function outro_block(i, detaching, local) {
		if (each_blocks[i]) {
			if (detaching) {
				on_outro(() => {
					each_blocks[i].d(detaching);
					each_blocks[i] = null;
				});
			}

			each_blocks[i].o(local);
		}
	}

	return {
		c: function create() {
			for (var i = 0; i < 15; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},

		l: function claim(nodes) {
			for (var i = 0; i < 15; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},

		m: function mount(target, anchor) {
			for (var i = 0; i < 15; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			for (var i = 0; i < 15; i += 1) each_blocks[i].i();

			current = true;
		},

		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);
			for (let i = 0; i < 15; i += 1) outro_block(i, 0);

			current = false;
		},

		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach(each_1_anchor);
			}
		}
	};
}

// (36:12) <NextButton target="/guide/getting-started">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Getting Started");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Getting Started");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (5:0) <GuideLayout>
function create_default_slot(ctx) {
	var h1, t0, t1, h2, t2, t3, section0, t4, p0, t5, t6, p1, t7, t8, t9, p2, t10, a0, t11, t12, a1, t13, t14, t15, t16, section1, div, current;

	var heading = new Heading({
		props: {
		$$slots: { default: [create_default_slot_9] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var cards0 = new Cards({
		props: {
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var cards1 = new Cards({
		props: {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var nextbutton = new NextButton({
		props: {
		target: "/guide/getting-started",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Guide");
			t1 = space();
			h2 = element("h2");
			t2 = text("Welcome to the user manual for FormValidation");
			t3 = space();
			section0 = element("section");
			heading.$$.fragment.c();
			t4 = space();
			p0 = element("p");
			t5 = text("From v1.0.0, the library is rewritten in Typescript and ES6 completely. The giant and old jQuery plugin doesn't exist anymore. With the new plugin based architectue, the library has really small core.\n            Everything else is built around as a plugin.");
			t6 = space();
			p1 = element("p");
			t7 = text("Following is the most recently updated plugins:");
			t8 = space();
			cards0.$$.fragment.c();
			t9 = space();
			p2 = element("p");
			t10 = text("We also bring more supports for popular CSS frameworks. If your form is made with the following frameworks, then use the associated plugin which is built up everything such as showing ");
			a0 = element("a");
			t11 = text("Icon");
			t12 = text("\n            and ");
			a1 = element("a");
			t13 = text("Message");
			t14 = text(" at desired areas.");
			t15 = space();
			cards1.$$.fragment.c();
			t16 = space();
			section1 = element("section");
			div = element("div");
			nextbutton.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Guide");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n    ");

			h2 = claim_element(nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t2 = claim_text(h2_nodes, "Welcome to the user manual for FormValidation");
			h2_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n\t");

			section0 = claim_element(nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			heading.$$.fragment.l(section0_nodes);
			t4 = claim_text(section0_nodes, "\n\n\t\t");

			p0 = claim_element(section0_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t5 = claim_text(p0_nodes, "From v1.0.0, the library is rewritten in Typescript and ES6 completely. The giant and old jQuery plugin doesn't exist anymore. With the new plugin based architectue, the library has really small core.\n            Everything else is built around as a plugin.");
			p0_nodes.forEach(detach);
			t6 = claim_text(section0_nodes, "\n\t\t");

			p1 = claim_element(section0_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t7 = claim_text(p1_nodes, "Following is the most recently updated plugins:");
			p1_nodes.forEach(detach);
			t8 = claim_text(section0_nodes, "\n\n\t\t");
			cards0.$$.fragment.l(section0_nodes);
			t9 = claim_text(section0_nodes, "\n\n\t\t");

			p2 = claim_element(section0_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t10 = claim_text(p2_nodes, "We also bring more supports for popular CSS frameworks. If your form is made with the following frameworks, then use the associated plugin which is built up everything such as showing ");

			a0 = claim_element(p2_nodes, "A", { href: true, class: true }, false);
			var a0_nodes = children(a0);

			t11 = claim_text(a0_nodes, "Icon");
			a0_nodes.forEach(detach);
			t12 = claim_text(p2_nodes, "\n            and ");

			a1 = claim_element(p2_nodes, "A", { href: true, class: true }, false);
			var a1_nodes = children(a1);

			t13 = claim_text(a1_nodes, "Message");
			a1_nodes.forEach(detach);
			t14 = claim_text(p2_nodes, " at desired areas.");
			p2_nodes.forEach(detach);
			t15 = claim_text(section0_nodes, "\n\n\t\t");
			cards1.$$.fragment.l(section0_nodes);
			section0_nodes.forEach(detach);
			t16 = claim_text(nodes, "\n\n\t");

			section1 = claim_element(nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			div = claim_element(section1_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			nextbutton.$$.fragment.l(div_nodes);
			div_nodes.forEach(detach);
			section1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h1.className = "f3 f2-m f1-l tc";
			add_location(h1, file, 5, 1, 84);
			h2.className = "f4 fw4 tc";
			add_location(h2, file, 6, 4, 127);
			p0.className = "lh-copy";
			add_location(p0, file, 11, 2, 263);
			p1.className = "lh-copy";
			add_location(p1, file, 13, 2, 546);
			a0.href = "/guide/plugins/icon";
			a0.className = "blue dim link";
			add_location(a0, file, 23, 205, 1455);
			a1.href = "/guide/plugins/message";
			a1.className = "blue dim link";
			add_location(a1, file, 24, 16, 1532);
			p2.className = "lh-copy";
			add_location(p2, file, 23, 2, 1252);
			section0.className = "mv5";
			add_location(section0, file, 8, 1, 202);
			div.className = "flex";
			add_location(div, file, 34, 8, 1996);
			section1.className = "mv5";
			add_location(section1, file, 33, 1, 1966);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h2, anchor);
			append(h2, t2);
			insert(target, t3, anchor);
			insert(target, section0, anchor);
			mount_component(heading, section0, null);
			append(section0, t4);
			append(section0, p0);
			append(p0, t5);
			append(section0, t6);
			append(section0, p1);
			append(p1, t7);
			append(section0, t8);
			mount_component(cards0, section0, null);
			append(section0, t9);
			append(section0, p2);
			append(p2, t10);
			append(p2, a0);
			append(a0, t11);
			append(p2, t12);
			append(p2, a1);
			append(a1, t13);
			append(p2, t14);
			append(section0, t15);
			mount_component(cards1, section0, null);
			insert(target, t16, anchor);
			insert(target, section1, anchor);
			append(section1, div);
			mount_component(nextbutton, div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			var heading_changes = {};
			if (changed.$$scope) heading_changes.$$scope = { changed, ctx };
			heading.$set(heading_changes);

			var cards0_changes = {};
			if (changed.$$scope) cards0_changes.$$scope = { changed, ctx };
			cards0.$set(cards0_changes);

			var cards1_changes = {};
			if (changed.$$scope) cards1_changes.$$scope = { changed, ctx };
			cards1.$set(cards1_changes);

			var nextbutton_changes = {};
			if (changed.$$scope) nextbutton_changes.$$scope = { changed, ctx };
			nextbutton.$set(nextbutton_changes);
		},

		i: function intro(local) {
			if (current) return;
			heading.$$.fragment.i(local);

			cards0.$$.fragment.i(local);

			cards1.$$.fragment.i(local);

			nextbutton.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			heading.$$.fragment.o(local);
			cards0.$$.fragment.o(local);
			cards1.$$.fragment.o(local);
			nextbutton.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h2);
				detach(t3);
				detach(section0);
			}

			heading.$destroy();

			cards0.$destroy();

			cards1.$destroy();

			if (detaching) {
				detach(t16);
				detach(section1);
			}

			nextbutton.$destroy();
		}
	};
}

function create_fragment(ctx) {
	var t, current;

	var guidelayout = new GuideLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			t = space();
			guidelayout.$$.fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "\n\n");
			guidelayout.$$.fragment.l(nodes);
			this.h();
		},

		h: function hydrate() {
			document.title = "FormValidation • Guide";
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
			mount_component(guidelayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var guidelayout_changes = {};
			if (changed.$$scope) guidelayout_changes.$$scope = { changed, ctx };
			guidelayout.$set(guidelayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			guidelayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			guidelayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}

			guidelayout.$destroy(detaching);
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;

import { a as SvelteComponentDev, b as init, c as safe_not_equal, t as mount_component, B as onMount, h as element, i as text, g as space, k as claim_element, l as children, m as detach, j as claim_text, A as attr, n as add_location, o as insert, p as append } from './chunk.989912da.js';
import { b as formValidation } from './chunk.b786f426.js';
import { c as Trigger } from './chunk.fb19edaf.js';
import { b as Icon } from './chunk.79c24606.js';
import { a as Tachyons } from './chunk.2bbbb746.js';
import { a as DemoFrame } from './chunk.b05da373.js';
import { a as SubmitButton } from './chunk.a3297732.js';
import { a as TachyonsLayout } from './chunk.35ee9e13.js';

var sampleCode = `<!doctype html>
<html>
<head>
    <link-tag rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link-tag rel="stylesheet" href="https://unpkg.com/tachyons@4.10.0/css/tachyons.min.css">
    <link-tag rel="stylesheet" href="/vendors/formvalidation/dist/css/formValidation.min.css">
</head>
<body>
    <form id="demoForm" method="post">
        <div class="cf mb2">
            <div class="fl w-100">
                <div class="fl w-100 pa2">
                    <label class="db lh-copy">
                        <input class="mr2" type="checkbox" name="agreements[]" value="terms" /> I have read and agree to the Terms
                    </label>
                    <label class="db lh-copy">
                        <input class="mr2" type="checkbox" name="agreements[]" value="privacy-policy" />  I accept the Privacy Policy
                    </label>
                </div>
            </div>
        </div>

        <div class="cf mb2">
            <div class="fl w-100">
                <div class="fl w-100 pa2">
                    <button type="submit" class="ba b--black-20 bg-blue white ph3 pv2 br2">Submit</button>
                </div>
            </div>
        </div>
    </form>

<script-tag src="https://cdnjs.cloudflare.com/ajax/libs/es6-shim/0.35.3/es6-shim.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/FormValidation.min.js"></script-tag>
<script-tag src="/vendors/formvalidation/dist/js/plugins/Tachyons.min.js"></script-tag>

<script-tag>
document.addEventListener('DOMContentLoaded', function(e) {
    FormValidation.formValidation(
        document.getElementById('demoForm'),
        {
            fields: {
                'agreements[]': {
                    validators: {
                        choice: {
                            min: 2,
                            max: 2,
                            message: 'You have to accept all agreements to continue'
                        }
                    }
                },
            },
            plugins: {
                trigger: new FormValidation.plugins.Trigger(),
                tachyons: new FormValidation.plugins.Tachyons(),
                submitButton: new FormValidation.plugins.SubmitButton(),
                icon: new FormValidation.plugins.Icon({
                    valid: 'fa fa-check',
                    invalid: 'fa fa-times',
                    validating: 'fa fa-refresh'
                }),
            },
        }
    );
});
</script-tag>
</body>
</html>
`;

/* src/routes/guide/examples/requiring-all-options-to-be-selected/tachyons.svelte generated by Svelte v3.4.2 */

const file = "src/routes/guide/examples/requiring-all-options-to-be-selected/tachyons.svelte";

// (1:0) <TachyonsLayout>
function create_default_slot(ctx) {
	var form, div2, div1, div0, label0, input0, t0, t1, label1, input1, t2, t3, div5, div4, div3, button, t4;

	return {
		c: function create() {
			form = element("form");
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			label0 = element("label");
			input0 = element("input");
			t0 = text(" I have read and agree to the Terms");
			t1 = space();
			label1 = element("label");
			input1 = element("input");
			t2 = text("  I accept the Privacy Policy");
			t3 = space();
			div5 = element("div");
			div4 = element("div");
			div3 = element("div");
			button = element("button");
			t4 = text("Submit");
			this.h();
		},

		l: function claim(nodes) {
			form = claim_element(nodes, "FORM", { id: true, method: true }, false);
			var form_nodes = children(form);

			div2 = claim_element(form_nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			div1 = claim_element(div2_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			div0 = claim_element(div1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			label0 = claim_element(div0_nodes, "LABEL", { class: true }, false);
			var label0_nodes = children(label0);

			input0 = claim_element(label0_nodes, "INPUT", { class: true, type: true, name: true, value: true }, false);
			var input0_nodes = children(input0);

			input0_nodes.forEach(detach);
			t0 = claim_text(label0_nodes, " I have read and agree to the Terms");
			label0_nodes.forEach(detach);
			t1 = claim_text(div0_nodes, "\n                    ");

			label1 = claim_element(div0_nodes, "LABEL", { class: true }, false);
			var label1_nodes = children(label1);

			input1 = claim_element(label1_nodes, "INPUT", { class: true, type: true, name: true, value: true }, false);
			var input1_nodes = children(input1);

			input1_nodes.forEach(detach);
			t2 = claim_text(label1_nodes, "  I accept the Privacy Policy");
			label1_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			t3 = claim_text(form_nodes, "\n\n        ");

			div5 = claim_element(form_nodes, "DIV", { class: true }, false);
			var div5_nodes = children(div5);

			div4 = claim_element(div5_nodes, "DIV", { class: true }, false);
			var div4_nodes = children(div4);

			div3 = claim_element(div4_nodes, "DIV", { class: true }, false);
			var div3_nodes = children(div3);

			button = claim_element(div3_nodes, "BUTTON", { type: true, class: true }, false);
			var button_nodes = children(button);

			t4 = claim_text(button_nodes, "Submit");
			button_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			div5_nodes.forEach(detach);
			form_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			input0.className = "mr2";
			attr(input0, "type", "checkbox");
			input0.name = "agreements[]";
			input0.value = "terms";
			add_location(input0, file, 6, 24, 234);
			label0.className = "db lh-copy";
			add_location(label0, file, 5, 20, 183);
			input1.className = "mr2";
			attr(input1, "type", "checkbox");
			input1.name = "agreements[]";
			input1.value = "privacy-policy";
			add_location(input1, file, 9, 24, 441);
			label1.className = "db lh-copy";
			add_location(label1, file, 8, 20, 390);
			div0.className = "fl w-100 pa2";
			add_location(div0, file, 4, 16, 136);
			div1.className = "fl w-100";
			add_location(div1, file, 3, 12, 97);
			div2.className = "cf mb2";
			add_location(div2, file, 2, 8, 64);
			button.type = "submit";
			button.className = "ba b--black-20 bg-blue white ph3 pv2 br2";
			add_location(button, file, 18, 20, 765);
			div3.className = "fl w-100 pa2";
			add_location(div3, file, 17, 16, 718);
			div4.className = "fl w-100";
			add_location(div4, file, 16, 12, 679);
			div5.className = "cf mb2";
			add_location(div5, file, 15, 8, 646);
			form.id = "demoForm";
			form.method = "post";
			add_location(form, file, 1, 4, 21);
		},

		m: function mount(target, anchor) {
			insert(target, form, anchor);
			append(form, div2);
			append(div2, div1);
			append(div1, div0);
			append(div0, label0);
			append(label0, input0);
			append(label0, t0);
			append(div0, t1);
			append(div0, label1);
			append(label1, input1);
			append(label1, t2);
			append(form, t3);
			append(form, div5);
			append(div5, div4);
			append(div4, div3);
			append(div3, button);
			append(button, t4);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(form);
			}
		}
	};
}

function create_fragment(ctx) {
	var current;

	var tachyonslayout = new TachyonsLayout({
		props: {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			tachyonslayout.$$.fragment.c();
		},

		l: function claim(nodes) {
			tachyonslayout.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(tachyonslayout, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var tachyonslayout_changes = {};
			if (changed.$$scope) tachyonslayout_changes.$$scope = { changed, ctx };
			tachyonslayout.$set(tachyonslayout_changes);
		},

		i: function intro(local) {
			if (current) return;
			tachyonslayout.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			tachyonslayout.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			tachyonslayout.$destroy(detaching);
		}
	};
}

function instance($$self) {
	

onMount(() => {
    const fv = formValidation(document.getElementById('demoForm'), {
        fields: {
            'agreements[]': {
                validators: {
                    choice: {
                        min: 2,
                        max: 2,
                        message: 'You have to accept all agreements to continue'
                    }
                }
            },
        },
        plugins: {
            submitButton: new SubmitButton(),
            trigger: new Trigger(),
            tachyons: new Tachyons(),
            icon: new Icon({
                valid: 'fa fa-check',
                invalid: 'fa fa-times',
                validating: 'fa fa-refresh'
            }),
            demoFrame: new DemoFrame({
                sender: '/guide/examples/requiring-all-options-to-be-selected/tachyons',
                sampleCode: sampleCode,
            }),
        },
    });

    return () => {
        fv.destroy();
    };
});

	return {};
}

class Tachyons_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export default Tachyons_1;
